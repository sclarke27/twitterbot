// app v0.3.1; Copyright 2016-2018 Swim
(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('mapbox-gl')) :
	typeof define === 'function' && define.amd ? define(['exports', 'mapbox-gl'], factory) :
	(factory((global.swim = {}),global.mapboxgl));
}(this, (function (exports,mapboxgl) { 'use strict';

var hashArrayBuffer = new ArrayBuffer(8);
var hashFloat64Array = new Float64Array(hashArrayBuffer);
var hashInt32Array = new Int32Array(hashArrayBuffer);
var Murmur3 = {
    hash: function (value) {
        if (value === null) {
            return 0;
        }
        else if (typeof value === 'string') {
            var code = 0;
            for (var i = 0, n = value.length; i < n; i += 1) {
                code = Murmur3.mix(code, value.charCodeAt(i));
            }
            code = Murmur3.mash(code);
            return code;
        }
        else if (typeof value === 'number') {
            if (~~value === value) {
                return ~~value;
            }
            hashFloat64Array[0] = value;
            return hashInt32Array[0] ^ hashInt32Array[1];
        }
        else {
            throw new TypeError('' + value);
        }
    },
    mix: function (code, value) {
        value *= 0xcc9e2d51;
        value = rotl(value, 15);
        value *= 0x1b873593;
        code ^= value;
        code = rotl(code, 13);
        code = code * 5 + 0xe6546b64;
        return code;
    },
    mash: function (code) {
        code ^= code >>> 16;
        code *= 0x85ebca6b;
        code ^= code >>> 13;
        code *= 0xc2b2ae35;
        code ^= code >>> 16;
        return code;
    },
};
function rotl(value, distance) {
    return (value << distance) | (value >>> (32 - distance));
}

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = Object.setPrototypeOf ||
    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
};

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
}

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
}

function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function __exportStar(m, exports) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

function __values(o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; }; }
}

function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator];
    return m ? m.call(o) : typeof __values === "function" ? __values(o) : o[Symbol.iterator]();
}

function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
}

function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result.default = mod;
    return result;
}

function __importDefault(mod) {
    return (mod && mod.__esModule) ? mod : { default: mod };
}

var Cursor = (function () {
    function Cursor() {
    }
    Cursor.prototype.set = function (newValue) {
        throw new Error('immutable');
    };
    Cursor.prototype.delete = function () {
        throw new Error('immutable');
    };
    Cursor.Empty = undefined;
    return Cursor;
}());
var EmptyCursor = (function (_super) {
    __extends(EmptyCursor, _super);
    function EmptyCursor() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    EmptyCursor.prototype.isEmpty = function () {
        return true;
    };
    EmptyCursor.prototype.head = function () {
        throw new Error('empty head');
    };
    EmptyCursor.prototype.step = function () {
        throw new Error('empty step');
    };
    EmptyCursor.prototype.skip = function (count) {
    };
    EmptyCursor.prototype.hasNext = function () {
        return false;
    };
    EmptyCursor.prototype.nextIndex = function () {
        return 0;
    };
    EmptyCursor.prototype.next = function () {
        return { done: true };
    };
    EmptyCursor.prototype.hasPrevious = function () {
        return false;
    };
    EmptyCursor.prototype.previousIndex = function () {
        return -1;
    };
    EmptyCursor.prototype.previous = function () {
        return { done: true };
    };
    return EmptyCursor;
}(Cursor));
Cursor.Empty = new EmptyCursor();
var UnitCursor = (function (_super) {
    __extends(UnitCursor, _super);
    function UnitCursor(value) {
        var _this = _super.call(this) || this;
        _this._value = value;
        _this._index = 0;
        return _this;
    }
    UnitCursor.prototype.isEmpty = function () {
        return this._index !== 0;
    };
    UnitCursor.prototype.head = function () {
        if (this._index === 0) {
            return this._value;
        }
        else {
            throw new Error('empty head');
        }
    };
    UnitCursor.prototype.step = function () {
        if (this._index === 0) {
            this._index = 1;
        }
        else {
            throw new Error('empty step');
        }
    };
    UnitCursor.prototype.skip = function (count) {
        this._index = Math.min(Math.max(0, this._index + count), 1);
    };
    UnitCursor.prototype.hasNext = function () {
        return this._index === 0;
    };
    UnitCursor.prototype.nextIndex = function () {
        return this._index;
    };
    UnitCursor.prototype.next = function () {
        if (this._index === 0) {
            this._index = 1;
            return { value: this._value, done: true };
        }
        else {
            return { done: true };
        }
    };
    UnitCursor.prototype.hasPrevious = function () {
        return this._index === 1;
    };
    UnitCursor.prototype.previousIndex = function () {
        return this._index - 1;
    };
    UnitCursor.prototype.previous = function () {
        if (this._index === 1) {
            this._index = 0;
            return { value: this._value, done: true };
        }
        else {
            return { done: true };
        }
    };
    return UnitCursor;
}(Cursor));
var KeyCursor = (function (_super) {
    __extends(KeyCursor, _super);
    function KeyCursor(cursor) {
        var _this = _super.call(this) || this;
        _this.cursor = cursor;
        return _this;
    }
    KeyCursor.prototype.isEmpty = function () {
        return this.cursor.isEmpty();
    };
    KeyCursor.prototype.head = function () {
        return this.cursor.head()[0];
    };
    KeyCursor.prototype.step = function () {
        this.cursor.step();
    };
    KeyCursor.prototype.skip = function (count) {
        this.cursor.skip(count);
    };
    KeyCursor.prototype.hasNext = function () {
        return this.cursor.hasNext();
    };
    KeyCursor.prototype.nextIndex = function () {
        return this.cursor.nextIndex();
    };
    KeyCursor.prototype.next = function () {
        var _a = this.cursor.next(), value = _a.value, done = _a.done;
        return { value: value && value[0], done: done };
    };
    KeyCursor.prototype.hasPrevious = function () {
        return this.cursor.hasPrevious();
    };
    KeyCursor.prototype.previousIndex = function () {
        return this.cursor.previousIndex();
    };
    KeyCursor.prototype.previous = function () {
        var _a = this.cursor.next(), value = _a.value, done = _a.done;
        return { value: value && value[0], done: done };
    };
    KeyCursor.prototype.delete = function () {
        this.cursor.delete();
    };
    return KeyCursor;
}(Cursor));
var ValueCursor = (function (_super) {
    __extends(ValueCursor, _super);
    function ValueCursor(cursor) {
        var _this = _super.call(this) || this;
        _this.cursor = cursor;
        return _this;
    }
    ValueCursor.prototype.isEmpty = function () {
        return this.cursor.isEmpty();
    };
    ValueCursor.prototype.head = function () {
        return this.cursor.head()[1];
    };
    ValueCursor.prototype.step = function () {
        this.cursor.step();
    };
    ValueCursor.prototype.skip = function (count) {
        this.cursor.skip(count);
    };
    ValueCursor.prototype.hasNext = function () {
        return this.cursor.hasNext();
    };
    ValueCursor.prototype.nextIndex = function () {
        return this.cursor.nextIndex();
    };
    ValueCursor.prototype.next = function () {
        var _a = this.cursor.next(), value = _a.value, done = _a.done;
        return { value: value && value[1], done: done };
    };
    ValueCursor.prototype.hasPrevious = function () {
        return this.cursor.hasPrevious();
    };
    ValueCursor.prototype.previousIndex = function () {
        return this.cursor.previousIndex();
    };
    ValueCursor.prototype.previous = function () {
        var _a = this.cursor.next(), value = _a.value, done = _a.done;
        return { value: value && value[1], done: done };
    };
    ValueCursor.prototype.delete = function () {
        this.cursor.delete();
    };
    return ValueCursor;
}(Cursor));
var LeafCursor = (function (_super) {
    __extends(LeafCursor, _super);
    function LeafCursor(_array, index) {
        if (index === void 0) { index = 0; }
        var _this = _super.call(this) || this;
        _this._array = _array;
        _this._index = index;
        return _this;
    }
    LeafCursor.prototype.isEmpty = function () {
        return this._index >= this._array.length;
    };
    LeafCursor.prototype.head = function () {
        if (this._index < this._array.length) {
            return this._array[this._index];
        }
        else {
            throw new Error('empty head');
        }
    };
    LeafCursor.prototype.step = function () {
        if (this._index < this._array.length) {
            this._index = 1;
        }
        else {
            throw new Error('empty step');
        }
    };
    LeafCursor.prototype.skip = function (count) {
        this._index = Math.min(this._index + count, this._array.length);
    };
    LeafCursor.prototype.hasNext = function () {
        return this._index < this._array.length;
    };
    LeafCursor.prototype.nextIndex = function () {
        return this._index;
    };
    LeafCursor.prototype.next = function () {
        var index = this._index;
        if (index < this._array.length) {
            this._index = index + 1;
            return { value: this._array[index], done: this._index === this._array.length };
        }
        else {
            this._index = this._array.length;
            return { done: true };
        }
    };
    LeafCursor.prototype.hasPrevious = function () {
        return this._index > 0;
    };
    LeafCursor.prototype.previousIndex = function () {
        return this._index - 1;
    };
    LeafCursor.prototype.previous = function () {
        var index = this._index - 1;
        if (index >= 0) {
            this._index = index;
            return { value: this._array[index], done: index === 0 };
        }
        else {
            this._index = 0;
            return { done: true };
        }
    };
    return LeafCursor;
}(Cursor));
var NodeCursor = (function (_super) {
    __extends(NodeCursor, _super);
    function NodeCursor(pages, index, pageIndex, _subCursor) {
        if (index === void 0) { index = 0; }
        if (pageIndex === void 0) { pageIndex = 0; }
        var _this = _super.call(this) || this;
        _this.pages = pages;
        _this._index = index;
        _this._pageIndex = pageIndex;
        _this._subCursor = _subCursor;
        return _this;
    }
    NodeCursor.prototype.isEmpty = function () {
        do {
            if (this._subCursor) {
                if (!this._subCursor.isEmpty()) {
                    return false;
                }
                else {
                    this._subCursor = undefined;
                }
            }
            else if (this._pageIndex < this.pages.length) {
                this._subCursor = this.pageCursor(this.pages[this._pageIndex]);
                this._pageIndex += 1;
            }
            else {
                this._pageIndex = this.pages.length;
                return true;
            }
        } while (true);
    };
    NodeCursor.prototype.head = function () {
        do {
            if (this._subCursor) {
                if (!this._subCursor.isEmpty()) {
                    return this._subCursor.head();
                }
                else {
                    this._subCursor = undefined;
                }
            }
            else {
                if (this._pageIndex < this.pages.length) {
                    this._subCursor = this.pageCursor(this.pages[this._pageIndex]);
                    this._pageIndex += 1;
                }
                else {
                    this._pageIndex = this.pages.length;
                    throw new Error('empty head');
                }
            }
        } while (true);
    };
    NodeCursor.prototype.step = function () {
        do {
            if (this._subCursor) {
                if (!this._subCursor.isEmpty()) {
                    this._index += 1;
                    return;
                }
                else {
                    this._subCursor = undefined;
                }
            }
            else {
                if (this._pageIndex < this.pages.length) {
                    this._subCursor = this.pageCursor(this.pages[this._pageIndex]);
                    this._pageIndex += 1;
                }
                else {
                    this._pageIndex = this.pages.length;
                    throw new Error('empty step');
                }
            }
        } while (true);
    };
    NodeCursor.prototype.skip = function (count) {
        while (count > 0) {
            if (this._subCursor) {
                if (this._subCursor.hasNext()) {
                    this._index += 1;
                    count -= 1;
                    this._subCursor.next();
                }
                else {
                    this._subCursor = undefined;
                }
            }
            else if (this._pageIndex < this.pages.length) {
                var subPage = this.pages[this._pageIndex];
                var subPageSize = this.pageSize(subPage);
                this._pageIndex += 1;
                if (subPageSize < count) {
                    this._subCursor = this.pageCursor(subPage);
                    if (count > 0) {
                        this._index += count;
                        this._subCursor.skip(count);
                        count = 0;
                    }
                    break;
                }
                else {
                    this._index += subPageSize;
                    count -= subPageSize;
                }
            }
            else {
                break;
            }
        }
    };
    NodeCursor.prototype.hasNext = function () {
        do {
            if (this._subCursor) {
                if (this._subCursor.hasNext()) {
                    return true;
                }
                else {
                    this._subCursor = undefined;
                }
            }
            else if (this._pageIndex < this.pages.length) {
                this._subCursor = this.pageCursor(this.pages[this._pageIndex]);
                this._pageIndex += 1;
            }
            else {
                this._pageIndex = this.pages.length;
                return false;
            }
        } while (true);
    };
    NodeCursor.prototype.nextIndex = function () {
        return this._index;
    };
    NodeCursor.prototype.next = function () {
        do {
            if (this._subCursor) {
                if (this._subCursor.hasNext()) {
                    this._index += 1;
                    return this._subCursor.next();
                }
                else {
                    this._subCursor = undefined;
                }
            }
            else {
                if (this._pageIndex < this.pages.length) {
                    this._subCursor = this.pageCursor(this.pages[this._pageIndex]);
                    this._pageIndex += 1;
                }
                else {
                    this._pageIndex = this.pages.length;
                    return { done: true };
                }
            }
        } while (true);
    };
    NodeCursor.prototype.hasPrevious = function () {
        do {
            if (this._subCursor) {
                if (this._subCursor.hasPrevious()) {
                    return true;
                }
                else {
                    this._subCursor = undefined;
                }
            }
            else if (this._pageIndex > 0) {
                this._subCursor = this.reversePageCursor(this.pages[this._pageIndex - 1]);
                this._pageIndex -= 1;
            }
            else {
                this._pageIndex = 0;
                return false;
            }
        } while (true);
    };
    NodeCursor.prototype.previousIndex = function () {
        return this._index - 1;
    };
    NodeCursor.prototype.previous = function () {
        do {
            if (this._subCursor) {
                if (this._subCursor.hasPrevious()) {
                    this._index -= 1;
                    return this._subCursor.previous();
                }
                else {
                    this._subCursor = undefined;
                }
            }
            else if (this._pageIndex > 0) {
                this._subCursor = this.reversePageCursor(this.pages[this._pageIndex - 1]);
                this._pageIndex -= 1;
            }
            else {
                this._pageIndex = 0;
                return { done: true };
            }
        } while (true);
    };
    NodeCursor.prototype.set = function (newValue) {
        this._subCursor.set(newValue);
    };
    NodeCursor.prototype.delete = function () {
        this._subCursor.delete();
    };
    return NodeCursor;
}(Cursor));

var Input = (function () {
    function Input() {
    }
    Input.done = function () {
        return new StringInput('');
    };
    return Input;
}());
var StringInput = (function (_super) {
    __extends(StringInput, _super);
    function StringInput(buffer, index, more) {
        if (index === void 0) { index = 0; }
        if (more === void 0) { more = false; }
        var _this = _super.call(this) || this;
        _this.buffer = buffer;
        _this.index = index;
        _this.more = more;
        return _this;
    }
    StringInput.prototype.isDone = function () {
        return this.isEmpty() && !this.more;
    };
    StringInput.prototype.isEmpty = function () {
        return this.index >= this.buffer.length;
    };
    StringInput.prototype.head = function () {
        var c1 = this.buffer.charCodeAt(this.index);
        if (c1 <= 0xD7FF || c1 >= 0xE000) {
            return c1;
        }
        else if (c1 <= 0xDBFF && this.index + 1 < this.buffer.length) {
            var c2 = this.buffer.charCodeAt(this.index + 1);
            if (c2 >= 0xDC00 && c2 <= 0xDFFF) {
                return (((c1 & 0x3FF) << 10) | (c2 & 0x3FF)) + 0x10000;
            }
            else {
                return 0xFFFD;
            }
        }
        else {
            return 0xFFFD;
        }
    };
    StringInput.prototype.step = function () {
        var c1 = this.buffer.charCodeAt(this.index);
        if (c1 <= 0xD7FF || c1 >= 0xE000) {
            this.index += 1;
        }
        else if (c1 <= 0xDBFF && this.index + 1 < this.buffer.length) {
            var c2 = this.buffer.charCodeAt(this.index + 1);
            if (c2 >= 0xDC00 && c2 <= 0xDFFF) {
                this.index += 2;
            }
            else {
                this.index += 1;
            }
        }
        else {
            this.index += 1;
        }
    };
    StringInput.prototype.clone = function () {
        return new StringInput(this.buffer, this.index, this.more);
    };
    return StringInput;
}(Input));

var StringOutput = (function () {
    function StringOutput(buffer) {
        if (buffer === void 0) { buffer = ''; }
        this.buffer = buffer;
    }
    StringOutput.prototype.isDone = function () {
        return false;
    };
    StringOutput.prototype.isFull = function () {
        return false;
    };
    StringOutput.prototype.push = function () {
        var cs = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            cs[_i] = arguments[_i];
        }
        for (var i = 0, n = cs.length; i < n; i += 1) {
            var c = cs[i];
            if (typeof c === 'number') {
                if ((c >= 0x0000 && c <= 0xD7FF) || (c >= 0xE000 && c <= 0xFFFF)) {
                    this.buffer += String.fromCharCode(c);
                }
                else if (c >= 0x10000 && c <= 0x10FFFF) {
                    var u = c - 0x10000;
                    this.buffer += String.fromCharCode(0xD800 | (u >>> 10), 0xDC00 | (u & 0x3FF));
                }
                else {
                    this.buffer += String.fromCharCode(0xFFFD);
                }
            }
            else if (typeof c === 'string') {
                var cs_1 = new StringInput(c);
                while (!cs_1.isEmpty()) {
                    this.push(cs_1.head());
                    cs_1.step();
                }
            }
        }
    };
    StringOutput.prototype.bind = function () {
        return this.buffer;
    };
    return StringOutput;
}());

var Item = (function () {
    function Item() {
    }
    Item.prototype.isDefined = function () {
        return true;
    };
    Item.prototype.isDistinct = function () {
        return true;
    };
    Item.prototype.isEmpty = function () {
        return false;
    };
    Item.prototype.stringValue = function (orElse) {
        return orElse;
    };
    Item.prototype.numberValue = function (orElse) {
        return orElse;
    };
    Item.prototype.booleanValue = function (orElse) {
        return orElse;
    };
    Item.prototype.concat = function () {
        var items = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            items[_i] = arguments[_i];
        }
        var record = Item.empty();
        record.push(this);
        for (var i = 0, n = items.length; i < n; i += 1) {
            var item = Item.fromAny(items[i]);
            item.forEach(function (item) {
                record.push(item);
            });
        }
        return record;
    };
    Item.prototype.withField = function (key, newValue) {
        var record = Item.empty(2);
        record.push(this);
        return record.withField(key, newValue);
    };
    Item.prototype.withAttr = function (key, newValue) {
        var record = Item.empty(2);
        record.push(this);
        return record.withAttr(key, newValue);
    };
    Item.prototype.withSlot = function (key, newValue) {
        var record = Item.empty(2);
        record.push(this);
        return record.withSlot(key, newValue);
    };
    Item.prototype.withItem = function (newItem) {
        var record = Item.empty(2);
        record.push(this);
        return record.withItem(newItem);
    };
    Item.prototype.withItems = function () {
        var newItem = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            newItem[_i] = arguments[_i];
        }
        var record = Item.empty(1 + arguments.length);
        record.push(this);
        return record.withItems.apply(record, arguments);
    };
    Item.prototype.forEach = function (callback, thisArg) {
        return callback.call(thisArg, this, 0);
    };
    Item.prototype.iterator = function () {
        return new UnitCursor(this);
    };
    Item.prototype.lt = function (that) {
        that = Item.of(that);
        return this.compare(that) < 0 ? Item.True : Item.Absent;
    };
    Item.prototype.le = function (that) {
        that = Item.of(that);
        return this.compare(that) <= 0 ? Item.True : Item.Absent;
    };
    Item.prototype.eq = function (that) {
        that = Item.of(that);
        return this.equals(that) ? Item.True : Item.Absent;
    };
    Item.prototype.ne = function (that) {
        that = Item.of(that);
        return !this.equals(that) ? Item.True : Item.Absent;
    };
    Item.prototype.ge = function (that) {
        that = Item.of(that);
        return this.compare(that) >= 0 ? Item.True : Item.Absent;
    };
    Item.prototype.gt = function (that) {
        that = Item.of(that);
        return this.compare(that) > 0 ? Item.True : Item.Absent;
    };
    Item.prototype.filter = function (predicate) {
        var selector = Item.Selector.literal(this);
        return selector.filter.apply(selector, arguments);
    };
    Item.prototype.max = function (that) {
        return this.compare(that) >= 0 ? this : that;
    };
    Item.prototype.min = function (that) {
        return this.compare(that) <= 0 ? this : that;
    };
    Item.prototype.evaluate = function (stack) {
        return this;
    };
    Item.prototype.substitute = function (stack) {
        return this;
    };
    Object.defineProperty(Item.prototype, "precedence", {
        get: function () {
            return 11;
        },
        enumerable: true,
        configurable: true
    });
    Item.prototype.writeReconBlock = function (output) {
        return this.writeRecon(output);
    };
    Item.prototype.toRecon = function () {
        var output = new StringOutput();
        this.writeRecon(output);
        return output.bind();
    };
    Item.prototype.toReconBlock = function () {
        var output = new StringOutput();
        this.writeReconBlock(output);
        return output.bind();
    };
    Item.prototype.writeString = function (output) {
        output.push(this.toString());
    };
    Item.Recon = undefined;
    Item.Field = undefined;
    Item.Attr = undefined;
    Item.Slot = undefined;
    Item.Value = undefined;
    Item.Record = undefined;
    Item.Data = undefined;
    Item.Text = undefined;
    Item.Num = undefined;
    Item.Bool = undefined;
    Item.DynamicValue = undefined;
    Item.Selector = undefined;
    Item.IdentitySelector = undefined;
    Item.LiteralSelector = undefined;
    Item.GetSelector = undefined;
    Item.GetAttrSelector = undefined;
    Item.GetItemSelector = undefined;
    Item.KeysSelector = undefined;
    Item.ChildrenSelector = undefined;
    Item.DescendantsSelector = undefined;
    Item.FilterSelector = undefined;
    Item.Func = undefined;
    Item.Expr = undefined;
    Item.CondExpr = undefined;
    Item.LorExpr = undefined;
    Item.LandExpr = undefined;
    Item.BorExpr = undefined;
    Item.BxorExpr = undefined;
    Item.BandExpr = undefined;
    Item.LtExpr = undefined;
    Item.LeExpr = undefined;
    Item.EqExpr = undefined;
    Item.NeExpr = undefined;
    Item.GeExpr = undefined;
    Item.GtExpr = undefined;
    Item.AddExpr = undefined;
    Item.SubExpr = undefined;
    Item.MulExpr = undefined;
    Item.DivExpr = undefined;
    Item.ModExpr = undefined;
    Item.LnotExpr = undefined;
    Item.BnotExpr = undefined;
    Item.NegExpr = undefined;
    Item.PosExpr = undefined;
    Item.InvokeExpr = undefined;
    Item.Empty = undefined;
    Item.True = undefined;
    Item.False = undefined;
    Item.Extant = undefined;
    Item.Absent = undefined;
    Item.GlobalScope = undefined;
    Item.empty = undefined;
    Item.of = undefined;
    Item.fromAny = undefined;
    return Item;
}());

var Value = (function (_super) {
    __extends(Value, _super);
    function Value() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(Value.prototype, "key", {
        get: function () {
            return Value.Absent;
        },
        enumerable: true,
        configurable: true
    });
    Value.prototype.toValue = function () {
        return this;
    };
    Object.defineProperty(Value.prototype, "length", {
        get: function () {
            return 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Value.prototype, "tag", {
        get: function () {
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Value.prototype, "target", {
        get: function () {
            return this;
        },
        enumerable: true,
        configurable: true
    });
    Value.prototype.flattened = function () {
        return this;
    };
    Value.prototype.header = function (tag) {
        return Value.Absent;
    };
    Value.prototype.headers = function (tag) {
        return undefined;
    };
    Value.prototype.head = function () {
        return Value.Absent;
    };
    Value.prototype.tail = function () {
        return Value.Empty;
    };
    Value.prototype.body = function () {
        return this;
    };
    Value.prototype.get = function (key) {
        return Value.Absent;
    };
    Value.prototype.getAttr = function (key) {
        return Value.Absent;
    };
    Value.prototype.getItem = function (index) {
        return Value.Absent;
    };
    Value.prototype.withoutKey = function (key) {
        return this;
    };
    Value.prototype.cond = function (thenTerm, elseTerm) {
        thenTerm = Item.of(thenTerm);
        return thenTerm;
    };
    Value.prototype.or = function (that) {
        return this;
    };
    Value.prototype.and = function (that) {
        that = Item.of(that);
        return that;
    };
    Value.prototype.bor = function (that) {
        that = Item.of(that);
        if (that instanceof Item.DynamicValue) {
            return new Item.BorExpr(this, that);
        }
        else if (that instanceof Item.Attr) {
            var newValue = this.bor(that.value);
            if (newValue.isDefined()) {
                return new Item.Attr(that.key, newValue);
            }
        }
        else if (that instanceof Item.Slot) {
            var newValue = this.bor(that.value);
            if (newValue.isDefined()) {
                return new Item.Slot(that.key, newValue);
            }
        }
        return Value.Absent;
    };
    Value.prototype.bxor = function (that) {
        that = Item.of(that);
        if (that instanceof Item.DynamicValue) {
            return new Item.BxorExpr(this, that);
        }
        else if (that instanceof Item.Attr) {
            var newValue = this.bxor(that.value);
            if (newValue.isDefined()) {
                return new Item.Attr(that.key, newValue);
            }
        }
        else if (that instanceof Item.Slot) {
            var newValue = this.bxor(that.value);
            if (newValue.isDefined()) {
                return new Item.Slot(that.key, newValue);
            }
        }
        return Value.Absent;
    };
    Value.prototype.band = function (that) {
        that = Item.of(that);
        if (that instanceof Item.DynamicValue) {
            return new Item.BandExpr(this, that);
        }
        else if (that instanceof Item.Attr) {
            var newValue = this.band(that.value);
            if (newValue.isDefined()) {
                return new Item.Attr(that.key, newValue);
            }
        }
        else if (that instanceof Item.Slot) {
            var newValue = this.band(that.value);
            if (newValue.isDefined()) {
                return new Item.Slot(that.key, newValue);
            }
        }
        return Value.Absent;
    };
    Value.prototype.lt = function (that) {
        that = Item.of(that);
        if (that instanceof Item.DynamicValue) {
            return new Item.LtExpr(this, that);
        }
        return _super.prototype.lt.call(this, that);
    };
    Value.prototype.le = function (that) {
        that = Item.of(that);
        if (that instanceof Item.DynamicValue) {
            return new Item.LeExpr(this, that);
        }
        return _super.prototype.le.call(this, that);
    };
    Value.prototype.eq = function (that) {
        that = Item.of(that);
        if (that instanceof Item.DynamicValue) {
            return new Item.EqExpr(this, that);
        }
        return _super.prototype.eq.call(this, that);
    };
    Value.prototype.ne = function (that) {
        that = Item.of(that);
        if (that instanceof Item.DynamicValue) {
            return new Item.NeExpr(this, that);
        }
        return _super.prototype.ne.call(this, that);
    };
    Value.prototype.ge = function (that) {
        that = Item.of(that);
        if (that instanceof Item.DynamicValue) {
            return new Item.GeExpr(this, that);
        }
        return _super.prototype.ge.call(this, that);
    };
    Value.prototype.gt = function (that) {
        that = Item.of(that);
        if (that instanceof Item.DynamicValue) {
            return new Item.GtExpr(this, that);
        }
        return _super.prototype.gt.call(this, that);
    };
    Value.prototype.plus = function (that) {
        that = Item.of(that);
        if (that instanceof Item.DynamicValue) {
            return new Item.AddExpr(this, that);
        }
        else if (that instanceof Item.Attr) {
            var newValue = this.plus(that.value);
            if (newValue.isDefined()) {
                return new Item.Attr(that.key, newValue);
            }
        }
        else if (that instanceof Item.Slot) {
            var newValue = this.plus(that.value);
            if (newValue.isDefined()) {
                return new Item.Slot(that.key, newValue);
            }
        }
        return Value.Absent;
    };
    Value.prototype.minus = function (that) {
        that = Item.of(that);
        if (that instanceof Item.DynamicValue) {
            return new Item.SubExpr(this, that);
        }
        else if (that instanceof Item.Attr) {
            var newValue = this.minus(that.value);
            if (newValue.isDefined()) {
                return new Item.Attr(that.key, newValue);
            }
        }
        else if (that instanceof Item.Slot) {
            var newValue = this.minus(that.value);
            if (newValue.isDefined()) {
                return new Item.Slot(that.key, newValue);
            }
        }
        return Value.Absent;
    };
    Value.prototype.times = function (that) {
        that = Item.of(that);
        if (that instanceof Item.DynamicValue) {
            return new Item.MulExpr(this, that);
        }
        else if (that instanceof Item.Attr) {
            var newValue = this.times(that.value);
            if (newValue.isDefined()) {
                return new Item.Attr(that.key, newValue);
            }
        }
        else if (that instanceof Item.Slot) {
            var newValue = this.times(that.value);
            if (newValue.isDefined()) {
                return new Item.Slot(that.key, newValue);
            }
        }
        return Value.Absent;
    };
    Value.prototype.divide = function (that) {
        that = Item.of(that);
        if (that instanceof Item.DynamicValue) {
            return new Item.DivExpr(this, that);
        }
        else if (that instanceof Item.Attr) {
            var newValue = this.divide(that.value);
            if (newValue.isDefined()) {
                return new Item.Attr(that.key, newValue);
            }
        }
        else if (that instanceof Item.Slot) {
            var newValue = this.divide(that.value);
            if (newValue.isDefined()) {
                return new Item.Slot(that.key, newValue);
            }
        }
        return Value.Absent;
    };
    Value.prototype.modulo = function (that) {
        that = Item.of(that);
        if (that instanceof Item.DynamicValue) {
            return new Item.ModExpr(this, that);
        }
        else if (that instanceof Item.Attr) {
            var newValue = this.modulo(that.value);
            if (newValue.isDefined()) {
                return new Item.Attr(that.key, newValue);
            }
        }
        else if (that instanceof Item.Slot) {
            var newValue = this.modulo(that.value);
            if (newValue.isDefined()) {
                return new Item.Slot(that.key, newValue);
            }
        }
        return Value.Absent;
    };
    Value.prototype.not = function () {
        return Value.Absent;
    };
    Value.prototype.bnot = function () {
        return Value.Absent;
    };
    Value.prototype.neg = function () {
        return Value.Absent;
    };
    Value.prototype.pos = function () {
        return Value.Absent;
    };
    Value.prototype.inv = function () {
        return Value.Absent;
    };
    Value.prototype.isAliased = function () {
        return false;
    };
    Value.prototype.isMutable = function () {
        return false;
    };
    Value.prototype.alias = function () {
    };
    Value.prototype.branch = function () {
        return this;
    };
    Value.prototype.clone = function () {
        return this;
    };
    Value.prototype.commit = function () {
        return this;
    };
    Value.prototype.cast = function (form, orElse) {
        var object = form.cast(this);
        if (object === undefined) {
            object = orElse;
        }
        return object;
    };
    Value.prototype.coerce = function (form) {
        var object = form.cast(this);
        if (object === undefined) {
            object = form.unit;
        }
        return object;
    };
    Value.of = function () {
        var items = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            items[_i] = arguments[_i];
        }
        if (items.length === 0) {
            return Value.Absent;
        }
        else if (items.length === 1) {
            return Value.fromAny(items[0]);
        }
        else {
            return Value.Record.fromArray(arguments);
        }
    };
    Value.fromAny = function (value) {
        if (value === undefined) {
            return Value.Absent;
        }
        else if (value === null) {
            return Value.Extant;
        }
        else if (value instanceof Value) {
            return value;
        }
        else if (value instanceof Item) {
            return value.toValue();
        }
        else if (value instanceof Uint8Array) {
            return Value.Data.valueOf(value);
        }
        else if (typeof value === 'string') {
            return Value.Text.valueOf(value);
        }
        else if (typeof value === 'number') {
            return Value.Num.valueOf(value);
        }
        else if (typeof value === 'boolean') {
            return Value.Bool.valueOf(value);
        }
        else if (Array.isArray(value)) {
            return Value.Record.fromArray(value);
        }
        else if (typeof value === 'object') {
            return Value.Record.fromObject(value);
        }
        else {
            throw new TypeError('' + value);
        }
    };
    Value.parseRecon = function (input) {
        return Value.Recon.Factory.parseRecon(input);
    };
    Value.Empty = undefined;
    Value.True = undefined;
    Value.False = undefined;
    Value.Extant = undefined;
    Value.Absent = undefined;
    Value.empty = undefined;
    return Value;
}(Item));
Item.Value = Value;
Item.of = function () {
    var items = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        items[_i] = arguments[_i];
    }
    if (items.length === 0) {
        return Value.Absent;
    }
    else if (items.length === 1) {
        return Item.fromAny(items[0]);
    }
    else {
        return Value.Record.fromArray(arguments);
    }
};
Item.fromAny = function (item) {
    if (item instanceof Item) {
        return item;
    }
    else {
        return Value.fromAny(item);
    }
};

var Iteratee = (function () {
    function Iteratee() {
    }
    Iteratee.prototype.isCont = function () {
        return true;
    };
    Iteratee.prototype.isDone = function () {
        return false;
    };
    Iteratee.prototype.isError = function () {
        return false;
    };
    Iteratee.prototype.run = function (input) {
        var next = this;
        while (next.isCont() && (!input.isEmpty() || input.isDone())) {
            next = next.feed(input);
        }
        if (next.isCont() && input.isEmpty() && !input.isDone()) {
            next = next.feed(Input.done());
        }
        return next;
    };
    Iteratee.prototype.parse = function (input) {
        if (typeof input === 'string') {
            input = new StringInput(input);
        }
        var parser = this.run(input);
        if (!input.isEmpty() && parser.isDone()) {
            parser = Iteratee.unexpected(input);
        }
        return parser.bind();
    };
    Iteratee.prototype.bind = function () {
        throw this;
    };
    Iteratee.prototype.trap = function () {
        throw this;
    };
    Iteratee.prototype.asVariant = function () {
        return this;
    };
    Iteratee.prototype.asError = function () {
        throw this;
    };
    Iteratee.done = function (value) {
        return new IterateeDone(value);
    };
    Iteratee.error = function (cause) {
        return new IterateeError(cause);
    };
    Iteratee.unexpected = function (input) {
        var message = 'unexpected ';
        if (!input.isEmpty()) {
            message += JSON.stringify(String.fromCharCode(input.head()));
        }
        else {
            message += 'end of input';
        }
        return Iteratee.error(message);
    };
    Iteratee.expected = function (expected, input) {
        if (typeof expected === 'number') {
            expected = String.fromCharCode(expected);
        }
        if (expected.length === 1) {
            expected = JSON.stringify(expected);
        }
        var message = 'expected ' + expected;
        if (!input.isEmpty()) {
            message += ', but found ' + JSON.stringify(String.fromCharCode(input.head()));
        }
        return Iteratee.error(message);
    };
    Iteratee.isSpace = function (c) {
        return c === 0x20 || c === 0x9;
    };
    Iteratee.isNewline = function (c) {
        return c === 0xA || c === 0xD;
    };
    Iteratee.isWhitespace = function (c) {
        return Iteratee.isSpace(c) || Iteratee.isNewline(c);
    };
    Iteratee.isAlpha = function (c) {
        return c >= 65 && c <= 90
            || c >= 97 && c <= 122;
    };
    Iteratee.toLowerCase = function (c) {
        if (c >= 65 && c <= 90) {
            return c + (97 - 65);
        }
        else {
            return c;
        }
    };
    Iteratee.isDigit = function (c) {
        return c >= 48 && c <= 57;
    };
    Iteratee.decodeDigit = function (c) {
        if (c >= 48 && c <= 57) {
            return c - 48;
        }
        else {
            throw c;
        }
    };
    Iteratee.isHexChar = function (c) {
        return c >= 65 && c <= 70
            || c >= 97 && c <= 102
            || c >= 48 && c <= 57;
    };
    Iteratee.decodeHexChar = function (c) {
        if (c >= 48 && c <= 57) {
            return c - 48;
        }
        else if (c >= 65 && c <= 70) {
            return 10 + (c - 65);
        }
        else if (c >= 97 && c <= 102) {
            return 10 + (c - 97);
        }
        else {
            throw c;
        }
    };
    Iteratee.isBase64Char = function (c) {
        return c >= 48 && c <= 57
            || c >= 65 && c <= 90
            || c >= 97 && c <= 122
            || c === 43 || c === 45
            || c === 47 || c === 95;
    };
    Iteratee.decodeBase64Digit = function (c) {
        if (c >= 65 && c <= 90) {
            return c - 65;
        }
        else if (c >= 97 && c <= 122) {
            return c - 71;
        }
        else if (c >= 48 && c <= 57) {
            return c + 4;
        }
        else if (c === 43 || c === 45) {
            return 62;
        }
        else if (c === 47 || c === 95) {
            return 63;
        }
        else {
            throw c;
        }
    };
    return Iteratee;
}());
var IterateeDone = (function (_super) {
    __extends(IterateeDone, _super);
    function IterateeDone(value) {
        var _this = _super.call(this) || this;
        _this.value = value;
        return _this;
    }
    IterateeDone.prototype.isCont = function () {
        return false;
    };
    IterateeDone.prototype.isDone = function () {
        return true;
    };
    IterateeDone.prototype.feed = function (input) {
        return this;
    };
    IterateeDone.prototype.bind = function () {
        return this.value;
    };
    return IterateeDone;
}(Iteratee));
var IterateeError = (function (_super) {
    __extends(IterateeError, _super);
    function IterateeError(cause) {
        var _this = _super.call(this) || this;
        _this.cause = cause;
        return _this;
    }
    IterateeError.prototype.isCont = function () {
        return false;
    };
    IterateeError.prototype.isError = function () {
        return true;
    };
    IterateeError.prototype.feed = function (input) {
        return this;
    };
    IterateeError.prototype.bind = function () {
        throw this.cause;
    };
    IterateeError.prototype.trap = function () {
        return this.cause;
    };
    IterateeError.prototype.asError = function () {
        return this;
    };
    return IterateeError;
}(Iteratee));

var Data = (function (_super) {
    __extends(Data, _super);
    function Data(array, size, flags) {
        var _this = _super.call(this) || this;
        _this._array = array;
        _this._size = size;
        _this._flags = flags;
        return _this;
    }
    Object.defineProperty(Data.prototype, "size", {
        get: function () {
            return this._size;
        },
        enumerable: true,
        configurable: true
    });
    Data.prototype.isDone = function () {
        return false;
    };
    Data.prototype.isFull = function () {
        return false;
    };
    Data.prototype.push = function () {
        var bs = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            bs[_i] = arguments[_i];
        }
        if ((this._flags & Data.IMMUTABLE) !== 0) {
            throw new Error('immutable');
        }
        if ((this._flags & Data.ALIASED) !== 0) {
            this.pushAliased.apply(this, bs);
        }
        else {
            this.pushMutable.apply(this, bs);
        }
    };
    Data.prototype.pushAliased = function () {
        var bs = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            bs[_i] = arguments[_i];
        }
        var bn = bs.length;
        var n = this._size;
        var oldArray = this._array;
        var newArray = new Uint8Array(Data.expand(n + bn));
        if (oldArray !== null) {
            newArray.set(oldArray);
        }
        for (var i = 0; i < bn; i += 1) {
            newArray[n + i] = bs[i];
        }
        this._array = newArray;
        this._size = n + bn;
        this._flags &= ~Data.ALIASED;
    };
    Data.prototype.pushMutable = function () {
        var bs = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            bs[_i] = arguments[_i];
        }
        var bn = bs.length;
        var n = this._size;
        var oldArray = this._array;
        var newArray;
        if (oldArray === null || n + bn > oldArray.length) {
            newArray = new Uint8Array(Data.expand(n + bn));
            if (oldArray !== null) {
                newArray.set(oldArray);
            }
            this._array = newArray;
        }
        else {
            newArray = oldArray;
        }
        for (var i = 0; i < bn; i += 1) {
            newArray[n + i] = bs[i];
        }
        this._size = n + bn;
    };
    Data.prototype.isAliased = function () {
        return (this._flags & Data.ALIASED) !== 0;
    };
    Data.prototype.isMutable = function () {
        return (this._flags & Data.IMMUTABLE) === 0;
    };
    Data.prototype.alias = function () {
        this._flags |= Data.ALIASED;
    };
    Data.prototype.branch = function () {
        this._flags |= Data.ALIASED;
        return new Data(this._array, this._size, Data.ALIASED);
    };
    Data.prototype.clone = function () {
        return this.branch();
    };
    Data.prototype.commit = function () {
        this._flags |= Data.IMMUTABLE;
        return this;
    };
    Data.prototype.bind = function () {
        return this;
    };
    Data.prototype.toAny = function () {
        return this.valueOf();
    };
    Data.prototype.valueOf = function () {
        var n = this._size;
        var oldArray = this._array;
        if ((this._flags & (Data.ALIASED | Data.IMMUTABLE)) !== 0 || n !== oldArray.length) {
            var newArray = oldArray !== null ? oldArray.slice(0, n) : new Uint8Array(0);
            if ((this._flags & Data.IMMUTABLE) === 0) {
                this._array = newArray;
                this._size = n;
                this._flags &= ~Data.ALIASED;
            }
            return newArray;
        }
        return oldArray;
    };
    Data.prototype.writeRecon = function (output) {
        output.push(37);
        Data.writeBase64(this._array, this._size, output);
    };
    Data.writeBase64 = function (array, size, output) {
        var i = 0;
        while (i + 2 < size) {
            var x = array[i];
            var y = array[i + 1];
            var z = array[i + 2];
            output.push(Data.encodeBase64Digit(x >>> 2), Data.encodeBase64Digit(((x << 4) | (y >>> 4)) & 0x3F), Data.encodeBase64Digit(((y << 2) | (z >>> 6)) & 0x3F), Data.encodeBase64Digit(z & 0x3F));
            i += 3;
        }
        if (i + 1 < size) {
            var x = array[i];
            var y = array[i + 1];
            output.push(Data.encodeBase64Digit(x >>> 2), Data.encodeBase64Digit(((x << 4) | (y >>> 4)) & 0x3F), Data.encodeBase64Digit((y << 2) & 0x3F), 61);
            i += 2;
        }
        else if (i < size) {
            var x = array[i];
            output.push(Data.encodeBase64Digit(x >>> 2), Data.encodeBase64Digit((x << 4) & 0x3F), 61, 61);
            i += 1;
        }
    };
    Data.prototype.toBase64 = function () {
        var output = new StringOutput();
        Data.writeBase64(this._array, this._size, output);
        return output.bind();
    };
    Data.prototype.compare = function (that) {
        if (that instanceof Data) {
            var xn = this._size;
            var yn = that._size;
            var xs = this._array;
            var ys = that._array;
            var order = 0;
            var i = 0;
            while (order === 0 && i < xn && i < yn) {
                order = xs[i] - ys[i];
                i += 1;
            }
            if (order > 0) {
                return 1;
            }
            else if (order < 0) {
                return -1;
            }
            else if (xn > yn) {
                return 1;
            }
            else if (xn < yn) {
                return -1;
            }
            else {
                return 0;
            }
        }
        else if (that instanceof Item.Field || that instanceof Item.Record) {
            return 1;
        }
        else {
            return -1;
        }
    };
    Data.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof Data) {
            var n = this._size;
            if (n !== that._size) {
                return false;
            }
            var xs = this._array;
            var ys = that._array;
            for (var i = 0; i < n; i += 1) {
                if (xs[i] !== ys[i]) {
                    return false;
                }
            }
            return true;
        }
        return false;
    };
    Data.prototype.hashCode = function () {
        var h = 0x51FBE1BC;
        var xs = this._array;
        for (var i = 0, n = this._size; i < n; i += 1) {
            h = Murmur3.mix(h, xs[i]);
        }
        return Murmur3.mash(h);
    };
    Data.prototype.toString = function () {
        return this.toBase64();
    };
    Data.empty = function (initialCapacity) {
        if (initialCapacity === undefined) {
            return new Data(null, 0, 0);
        }
        else {
            return new Data(new Uint8Array(initialCapacity), 0, 0);
        }
    };
    Data.valueOf = function (array) {
        return new Data(array, array.length, Data.ALIASED);
    };
    Data.of = function (value) {
        if (value instanceof Data) {
            return value;
        }
        else if (value instanceof Uint8Array) {
            return Data.valueOf(value);
        }
        else {
            throw new TypeError('' + value);
        }
    };
    Data.base64 = function (input) {
        if (typeof input === 'string') {
            input = new StringInput(input);
        }
        var parser = Value.Recon.Factory.parseBase64(input);
        if (parser.isDone()) {
            if (!input.isEmpty()) {
                parser = Iteratee.unexpected(input);
            }
        }
        return parser.bind();
    };
    Data.expand = function (n) {
        n = Math.max(32, n) - 1;
        n |= n >> 1;
        n |= n >> 2;
        n |= n >> 4;
        n |= n >> 8;
        n |= n >> 16;
        return n + 1;
    };
    Data.encodeBase64Digit = function (x) {
        if (x >= 0 && x < 26) {
            return x + 65;
        }
        else if (x >= 26 && x < 52) {
            return x + 71;
        }
        else if (x >= 52 && x < 62) {
            return x - 4;
        }
        else if (x === 62) {
            return 43;
        }
        else if (x === 63) {
            return 47;
        }
        else {
            throw x;
        }
    };
    Data.ALIASED = 1;
    Data.IMMUTABLE = 2;
    Data.Empty = new Data(null, 0, Data.ALIASED | Data.IMMUTABLE);
    return Data;
}(Value));
Item.Data = Data;

var crypto = (typeof window !== 'undefined' &&
    (window.crypto || window.msCrypto));
function fillBytesCrypto(typedArray) {
    crypto.getRandomValues(typedArray);
}
function fillBytesMath(typedArray) {
    if (typedArray instanceof Int8Array) {
        for (var i = 0; i < typedArray.length; i += 1) {
            typedArray[i] = 128 - Math.round(Math.random() * 256);
        }
    }
    else if (typedArray instanceof Uint8Array) {
        for (var i = 0; i < typedArray.length; i += 1) {
            typedArray[i] = Math.round(Math.random() * 256);
        }
    }
    else if (typedArray instanceof Int16Array) {
        for (var i = 0; i < typedArray.length; i += 1) {
            typedArray[i] = 32768 - Math.round(Math.random() * 65536);
        }
    }
    else if (typedArray instanceof Uint16Array) {
        for (var i = 0; i < typedArray.length; i += 1) {
            typedArray[i] = Math.round(Math.random() * 65536);
        }
    }
    else if (typedArray instanceof Int32Array) {
        for (var i = 0; i < typedArray.length; i += 1) {
            typedArray[i] = 2147483648 - Math.round(Math.random() * 4294967296);
        }
    }
    else if (typedArray instanceof Uint32Array) {
        for (var i = 0; i < typedArray.length; i += 1) {
            typedArray[i] = Math.round(Math.random() * 4294967296);
        }
    }
    else {
        throw new TypeError('' + typedArray);
    }
}
var Random = {
    fillBytes: crypto ? fillBytesCrypto : fillBytesMath,
    generateId: function (size) {
        if (size === void 0) { size = 12; }
        var id = new Uint8Array(size);
        Random.fillBytes(id);
        var output = new StringOutput();
        Data.writeBase64(id, size, output);
        return output.bind();
    },
};

function equal(x, y) {
    if (x instanceof Date) {
        x = x.getTime();
    }
    if (y instanceof Date) {
        y = y.getTime();
    }
    if (x === y) {
        return true;
    }
    else if (x && typeof x === 'object' && typeof x.equals === 'function') {
        return x.equals(y);
    }
    else if (Array.isArray(x)) {
        if (Array.isArray(y)) {
            return equalArray(x, y);
        }
    }
    else if (x && typeof x === 'object') {
        if (y && typeof y === 'object') {
            return equalObject(x, y);
        }
    }
    return false;
}
function equalArray(x, y) {
    var n = x.length;
    if (n !== y.length) {
        return false;
    }
    for (var i = 0; i < n; i += 1) {
        if (!equal(x[i], y[i])) {
            return false;
        }
    }
    return true;
}
function equalObject(x, y) {
    var xKeys = Object.keys(x);
    var yKeys = Object.keys(y);
    var n = xKeys.length;
    if (n !== yKeys.length) {
        return false;
    }
    for (var i = 0; i < n; i += 1) {
        var key = xKeys[i];
        if (key !== yKeys[i] || !equal(x[key], y[key])) {
            return false;
        }
    }
    return true;
}

function compare(x, y) {
    if (x instanceof Date) {
        x = x.getTime();
    }
    if (y instanceof Date) {
        y = y.getTime();
    }
    if (x === undefined) {
        if (y === undefined) {
            return 0;
        }
        else {
            return 1;
        }
    }
    else if (x === null) {
        if (y === undefined) {
            return -1;
        }
        else if (y === null) {
            return 0;
        }
        else {
            return 1;
        }
    }
    else if (typeof x === 'number') {
        if (y === undefined || y === null) {
            return -1;
        }
        else if (typeof y === 'number') {
            return x < y ? -1 : x > y ? 1 : 0;
        }
        else {
            return 1;
        }
    }
    else if (typeof x === 'string') {
        if (y === undefined || y === null || typeof y === 'number') {
            return -1;
        }
        else if (typeof y === 'string') {
            return x < y ? -1 : x > y ? 1 : 0;
        }
        else {
            return 1;
        }
    }
    else if (typeof x === 'object' && typeof x.compare === 'function') {
        return x.compare(y);
    }
    else if (Array.isArray(x)) {
        if (y === undefined || y === null || typeof y === 'number' || typeof y === 'string') {
            return -1;
        }
        else if (Array.isArray(y)) {
            return compareArray(x, y);
        }
        else {
            return 1;
        }
    }
    else {
        if (y === undefined || y === null || typeof y === 'number' || typeof y === 'string' || Array.isArray(y)) {
            return -1;
        }
        else {
            return compareObject(x, y);
        }
    }
}
function compareArray(x, y) {
    var p = x.length;
    var q = y.length;
    var order = 0;
    for (var i = 0, n = Math.min(p, q); i < n && order === 0; i += 1) {
        order = compare(x[i], y[i]);
    }
    return order !== 0 ? order : p > q ? 1 : p < q ? -1 : 0;
}
function compareObject(x, y) {
    var xKeys = Object.keys(x);
    var yKeys = Object.keys(y);
    var p = xKeys.length;
    var q = yKeys.length;
    var n = Math.min(p, q);
    var order = 0;
    for (var i = 0; i < n && order === 0; i += 1) {
        var xKey = xKeys[i];
        var yKey = yKeys[i];
        order = compare(xKey, yKey);
        if (order === 0) {
            order = compare(x[xKey], y[yKey]);
        }
    }
    return order !== 0 ? order : p > q ? 1 : p < q ? -1 : 0;
}

var EvalStack = (function () {
    function EvalStack(array, size, capacity) {
        if (array === void 0) { array = null; }
        if (size === void 0) { size = 0; }
        if (capacity === void 0) { capacity = EvalStack.Capacity; }
        this._array = array;
        this._size = size;
        this._capacity = capacity;
    }
    EvalStack.prototype.isEmpty = function () {
        return this._size === 0;
    };
    Object.defineProperty(EvalStack.prototype, "size", {
        get: function () {
            return this._size;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EvalStack.prototype, "capacity", {
        get: function () {
            return this._capacity;
        },
        enumerable: true,
        configurable: true
    });
    EvalStack.prototype.get = function (key) {
        key = Value.fromAny(key);
        var value = Value.Absent;
        for (var i = this._size - 1; i >= 0; i -= 1) {
            value = this._array[i].get(key);
            if (value.isDefined()) {
                break;
            }
        }
        return value;
    };
    EvalStack.prototype.peek = function () {
        var n = this._size;
        if (n > 0) {
            return this._array[n - 1];
        }
        else {
            return undefined;
        }
    };
    EvalStack.prototype.item = function () {
        var n = this._size;
        if (n > 0) {
            return this._array[n - 1];
        }
        else {
            throw new RangeError();
        }
    };
    EvalStack.prototype.getItem = function (index) {
        if (0 <= index && index < this._size) {
            return this._array[index];
        }
        else {
            throw new RangeError('' + index);
        }
    };
    EvalStack.prototype.offer = function (newItem) {
        var n = this._size;
        if (n < this._capacity) {
            var oldArray = this._array;
            var newArray = void 0;
            if (oldArray === null || n + 1 > oldArray.length) {
                newArray = new Array(EvalStack.expand(n + 1));
                if (oldArray !== null) {
                    for (var i = 0; i < n; i += 1) {
                        newArray[i] = oldArray[i];
                    }
                }
                this._array = newArray;
            }
            else {
                newArray = oldArray;
            }
            newArray[n] = newItem;
            this._size = n + 1;
            return true;
        }
        else {
            return false;
        }
    };
    EvalStack.prototype.push = function () {
        var newItems = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            newItems[_i] = arguments[_i];
        }
        var n = this._size;
        var k = arguments.length;
        if (k === 0) {
            return n;
        }
        if (n + k < this._capacity) {
            var oldArray = this._array;
            var newArray = void 0;
            if (oldArray === null || n + k > oldArray.length) {
                newArray = new Array(EvalStack.expand(n + k));
                if (oldArray !== null) {
                    for (var i = 0; i < n; i += 1) {
                        newArray[i] = oldArray[i];
                    }
                }
            }
            else {
                newArray = oldArray;
            }
            for (var i = 0; i < k; i += 1) {
                newArray[n] = arguments[i];
                n += 1;
            }
            this._array = newArray;
            this._size = n;
            return n;
        }
        else {
            throw new RangeError('' + (n + k));
        }
    };
    EvalStack.prototype.replace = function (newItem) {
        var n = this._size;
        if (n > 0) {
            var array = this._array;
            var oldItem = array[n - 1];
            array[n - 1] = newItem;
            return oldItem;
        }
        else {
            throw new RangeError();
        }
    };
    EvalStack.prototype.poll = function () {
        var n = this._size;
        if (n > 0) {
            var array = this._array;
            var item = array[n - 1];
            array[n - 1] = undefined;
            this._size = n - 1;
            return item;
        }
        else {
            return undefined;
        }
    };
    EvalStack.prototype.pop = function () {
        var n = this._size;
        if (n > 0) {
            var array = this._array;
            var item = array[n - 1];
            array[n - 1] = undefined;
            this._size = n - 1;
            return item;
        }
        else {
            throw new RangeError();
        }
    };
    EvalStack.prototype.clear = function () {
        var array = this._array;
        for (var n = this._size - 1; n >= 0; n -= 1) {
            array[n] = undefined;
        }
        this._size = 0;
    };
    EvalStack.prototype.forEach = function (callback, thisArg) {
        var array = this._array;
        for (var i = 0, n = this._size; i < n; i += 1) {
            var result = callback.call(thisArg, array[i], i);
            if (result !== undefined) {
                return result;
            }
        }
        return undefined;
    };
    EvalStack.prototype.iterator = function () {
        if (this._size > 0) {
            return new LeafCursor(this._array);
        }
        else {
            return Cursor.Empty;
        }
    };
    EvalStack.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof EvalStack) {
            var n = this._size;
            if (n !== that._size) {
                return false;
            }
            var xs = this._array;
            var ys = that._array;
            for (var i = 0; i < n; i += 1) {
                if (!xs[i].equals(ys[i])) {
                    return false;
                }
            }
            return true;
        }
        return false;
    };
    EvalStack.prototype.hashCode = function () {
        var code = 0x7BF6F35F;
        var array = this._array;
        for (var i = 0, n = this._size; i < n; i += 1) {
            code = Murmur3.mix(code, array[i].hashCode());
        }
        return Murmur3.mash(code);
    };
    EvalStack.prototype.toString = function () {
        var output = new StringOutput();
        output.push('EvalStack', 46, 'of', 40);
        var n = this._size;
        if (n > 0) {
            var array = this._array;
            array[0].writeString(output);
            for (var i = 1; i < n; i += 1) {
                output.push(', ');
                array[i].writeString(output);
            }
        }
        output.push(')');
        return output.bind();
    };
    EvalStack.of = function () {
        var objects = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            objects[_i] = arguments[_i];
        }
        var n = arguments.length;
        var items = new Array(EvalStack.expand(n));
        for (var i = 0; i < n; i += 1) {
            var item = Item.fromAny(arguments[i]);
            items[i] = item;
        }
        return new EvalStack(items, n, Math.max(n, EvalStack.Capacity));
    };
    EvalStack.fromAny = function (stack, globalScope) {
        if (globalScope === void 0) { globalScope = EvalStack.GlobalScope; }
        if (!(stack instanceof EvalStack)) {
            var scope = Item.fromAny(stack);
            stack = new EvalStack();
            if (globalScope) {
                stack.push(globalScope);
            }
            stack.push(scope);
            return stack;
        }
        return stack;
    };
    EvalStack.expand = function (n) {
        n = Math.max(32, n) - 1;
        n |= n >> 1;
        n |= n >> 2;
        n |= n >> 4;
        n |= n >> 8;
        n |= n >> 16;
        return n + 1;
    };
    EvalStack.Capacity = 1024;
    EvalStack.GlobalScope = undefined;
    return EvalStack;
}());

var Field = (function (_super) {
    __extends(Field, _super);
    function Field() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Field.prototype.toValue = function () {
        return this.value;
    };
    Object.defineProperty(Field.prototype, "length", {
        get: function () {
            return 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Field.prototype, "tag", {
        get: function () {
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Field.prototype, "target", {
        get: function () {
            return Item.Absent;
        },
        enumerable: true,
        configurable: true
    });
    Field.prototype.flattened = function () {
        return Item.Absent;
    };
    Field.prototype.header = function (tag) {
        return Item.Absent;
    };
    Field.prototype.headers = function (tag) {
        return undefined;
    };
    Field.prototype.head = function () {
        return Item.Absent;
    };
    Field.prototype.tail = function () {
        return Item.Empty;
    };
    Field.prototype.body = function () {
        return Item.Absent;
    };
    Field.prototype.get = function (key) {
        return Item.Absent;
    };
    Field.prototype.getAttr = function (key) {
        return Item.Absent;
    };
    Field.prototype.getItem = function (index) {
        return Item.Absent;
    };
    Field.prototype.stringValue = function (orElse) {
        return this.value.stringValue(orElse);
    };
    Field.prototype.numberValue = function (orElse) {
        return this.value.numberValue(orElse);
    };
    Field.prototype.booleanValue = function (orElse) {
        return this.value.booleanValue(orElse);
    };
    Field.prototype.withoutKey = function (key) {
        return this;
    };
    Field.prototype.cond = function (thenTerm, elseTerm) {
        thenTerm = Item.of(thenTerm);
        return thenTerm;
    };
    Field.prototype.or = function (that) {
        return this;
    };
    Field.prototype.and = function (that) {
        that = Item.of(that);
        return that;
    };
    Field.prototype.isAliased = function () {
        return false;
    };
    Field.prototype.cast = function (form, orElse) {
        return this.value.cast(form, orElse);
    };
    Field.prototype.coerce = function (form) {
        return this.value.coerce(form);
    };
    Field.of = function (key, value) {
        var name;
        if (typeof key === 'string') {
            name = key;
        }
        else if (key instanceof Item.Text) {
            name = key.value;
        }
        if (name !== undefined && name.charCodeAt(0) === 64) {
            return Item.Attr.of.apply(undefined, arguments);
        }
        else {
            return Item.Slot.of.apply(undefined, arguments);
        }
    };
    Field.IMMUTABLE = 1;
    return Field;
}(Item));
Item.Field = Field;

var Attr = (function (_super) {
    __extends(Attr, _super);
    function Attr(key, value, flags) {
        if (value === void 0) { value = Value.Extant; }
        if (flags === void 0) { flags = 0; }
        var _this = _super.call(this) || this;
        _this._key = key;
        _this._value = value;
        _this._flags = flags;
        return _this;
    }
    Object.defineProperty(Attr.prototype, "key", {
        get: function () {
            return this._key;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Attr.prototype, "value", {
        get: function () {
            return this._value;
        },
        enumerable: true,
        configurable: true
    });
    Attr.prototype.setValue = function (newValue) {
        if ((this._flags & Field.IMMUTABLE) !== 0) {
            throw new Error('immutable');
        }
        var oldValue = this._value;
        this._value = newValue;
        return oldValue;
    };
    Attr.prototype.withValue = function (newValue) {
        return new Attr(this._key, newValue);
    };
    Attr.prototype.bor = function (that) {
        that = Item.of(that);
        if (that instanceof Item.DynamicValue) {
            return new Item.BorExpr(this, that);
        }
        var newValue;
        if (that instanceof Attr && this._key.equals(that._key)) {
            newValue = this._value.bor(that._value);
        }
        else if (that instanceof Value) {
            newValue = this._value.bor(that);
        }
        else {
            newValue = Value.Absent;
        }
        if (newValue.isDefined()) {
            return new Attr(this._key, newValue);
        }
        return Value.Absent;
    };
    Attr.prototype.bxor = function (that) {
        that = Item.of(that);
        if (that instanceof Item.DynamicValue) {
            return new Item.BxorExpr(this, that);
        }
        var newValue;
        if (that instanceof Attr && this._key.equals(that._key)) {
            newValue = this._value.bxor(that._value);
        }
        else if (that instanceof Value) {
            newValue = this._value.bxor(that);
        }
        else {
            newValue = Value.Absent;
        }
        if (newValue.isDefined()) {
            return new Attr(this._key, newValue);
        }
        return Value.Absent;
    };
    Attr.prototype.band = function (that) {
        that = Item.of(that);
        if (that instanceof Item.DynamicValue) {
            return new Item.BandExpr(this, that);
        }
        var newValue;
        if (that instanceof Attr && this._key.equals(that._key)) {
            newValue = this._value.band(that._value);
        }
        else if (that instanceof Value) {
            newValue = this._value.band(that);
        }
        else {
            newValue = Value.Absent;
        }
        if (newValue.isDefined()) {
            return new Attr(this._key, newValue);
        }
        return Value.Absent;
    };
    Attr.prototype.plus = function (that) {
        that = Item.of(that);
        if (that instanceof Item.DynamicValue) {
            return new Item.AddExpr(this, that);
        }
        var newValue;
        if (that instanceof Attr && this._key.equals(that._key)) {
            newValue = this._value.plus(that._value);
        }
        else if (that instanceof Value) {
            newValue = this._value.plus(that);
        }
        else {
            newValue = Value.Absent;
        }
        if (newValue.isDefined()) {
            return new Attr(this._key, newValue);
        }
        return Value.Absent;
    };
    Attr.prototype.minus = function (that) {
        that = Item.of(that);
        if (that instanceof Item.DynamicValue) {
            return new Item.SubExpr(this, that);
        }
        var newValue;
        if (that instanceof Attr && this._key.equals(that._key)) {
            newValue = this._value.minus(that._value);
        }
        else if (that instanceof Value) {
            newValue = this._value.minus(that);
        }
        else {
            newValue = Value.Absent;
        }
        if (newValue.isDefined()) {
            return new Attr(this._key, newValue);
        }
        return Value.Absent;
    };
    Attr.prototype.times = function (that) {
        that = Item.of(that);
        if (that instanceof Item.DynamicValue) {
            return new Item.MulExpr(this, that);
        }
        var newValue;
        if (that instanceof Attr && this._key.equals(that._key)) {
            newValue = this._value.times(that._value);
        }
        else if (that instanceof Value) {
            newValue = this._value.times(that);
        }
        else {
            newValue = Value.Absent;
        }
        if (newValue.isDefined()) {
            return new Attr(this._key, newValue);
        }
        return Value.Absent;
    };
    Attr.prototype.divide = function (that) {
        that = Item.of(that);
        if (that instanceof Item.DynamicValue) {
            return new Item.DivExpr(this, that);
        }
        var newValue;
        if (that instanceof Attr && this._key.equals(that._key)) {
            newValue = this._value.divide(that._value);
        }
        else if (that instanceof Value) {
            newValue = this._value.divide(that);
        }
        else {
            newValue = Value.Absent;
        }
        if (newValue.isDefined()) {
            return new Attr(this._key, newValue);
        }
        return Value.Absent;
    };
    Attr.prototype.modulo = function (that) {
        that = Item.of(that);
        if (that instanceof Item.DynamicValue) {
            return new Item.ModExpr(this, that);
        }
        var newValue;
        if (that instanceof Attr && this._key.equals(that._key)) {
            newValue = this._value.modulo(that._value);
        }
        else if (that instanceof Value) {
            newValue = this._value.modulo(that);
        }
        else {
            newValue = Value.Absent;
        }
        if (newValue.isDefined()) {
            return new Attr(this._key, newValue);
        }
        return Value.Absent;
    };
    Attr.prototype.not = function () {
        var newValue = this._value.not();
        if (newValue.isDefined()) {
            return new Attr(this._key, newValue);
        }
        return Value.Absent;
    };
    Attr.prototype.bnot = function () {
        var newValue = this._value.bnot();
        if (newValue.isDefined()) {
            return new Attr(this._key, newValue);
        }
        return Value.Absent;
    };
    Attr.prototype.neg = function () {
        var newValue = this._value.neg();
        if (newValue.isDefined()) {
            return new Attr(this._key, newValue);
        }
        return Value.Absent;
    };
    Attr.prototype.pos = function () {
        var newValue = this._value.pos();
        if (newValue.isDefined()) {
            return new Attr(this._key, newValue);
        }
        return Value.Absent;
    };
    Attr.prototype.inv = function () {
        var newValue = this._value.inv();
        if (newValue.isDefined()) {
            return new Attr(this._key, newValue);
        }
        return Value.Absent;
    };
    Attr.prototype.evaluate = function (stack) {
        stack = EvalStack.fromAny(stack);
        var key = this._key.evaluate(stack).toValue();
        var value = this._value.evaluate(stack).toValue();
        if (key === this._key && value === this._value) {
            return this;
        }
        else if (key.isDefined() && value.isDefined()) {
            if (key instanceof Item.Text) {
                return new Attr(key, value);
            }
            else {
                return new Item.Slot(key, value);
            }
        }
        return Item.Absent;
    };
    Attr.prototype.substitute = function (stack) {
        stack = EvalStack.fromAny(stack);
        var key = this._key.substitute(stack).toValue();
        var value = this._value.substitute(stack).toValue();
        if (key === this._key && value === this._value) {
            return this;
        }
        else if (key.isDefined() && value.isDefined()) {
            if (key instanceof Item.Text) {
                return new Attr(key, value);
            }
            else {
                return new Item.Slot(key, value);
            }
        }
        return Item.Absent;
    };
    Attr.prototype.isMutable = function () {
        return (this._flags & Field.IMMUTABLE) === 0;
    };
    Attr.prototype.alias = function () {
        this._flags |= Field.IMMUTABLE;
    };
    Attr.prototype.branch = function () {
        if ((this._flags & Field.IMMUTABLE) !== 0) {
            return new Attr(this._key, this._value, this._flags & ~Field.IMMUTABLE);
        }
        else {
            return this;
        }
    };
    Attr.prototype.clone = function () {
        return new Attr(this._key.clone(), this._value.clone());
    };
    Attr.prototype.commit = function () {
        if ((this._flags & Field.IMMUTABLE) === 0) {
            this._flags |= Field.IMMUTABLE;
            this._value.commit();
        }
        return this;
    };
    Attr.prototype.writeRecon = function (output) {
        output.push(64);
        this._key.writeRecon(output);
        if (this._value !== Value.Extant) {
            output.push(40);
            this._value.writeReconBlock(output);
            output.push(41);
        }
    };
    Attr.prototype.compare = function (that) {
        if (that instanceof Attr) {
            var order = this._key.compare(that._key);
            if (order === 0) {
                order = this._value.compare(that._value);
            }
            return order;
        }
        else {
            return -1;
        }
    };
    Attr.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof Attr) {
            return this._key.equals(that._key) && this._value.equals(that._value);
        }
        return false;
    };
    Attr.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(Murmur3.mix(0x28F6E2E9, this._key.hashCode()), this._value.hashCode()));
    };
    Attr.prototype.toString = function () {
        return this.toRecon();
    };
    Attr.of = function (key, value) {
        key = Item.Text.of(key);
        value = (arguments.length === 2 ? Item.Value.of(value) : Item.Value.Extant);
        return new Attr(key, value);
    };
    return Attr;
}(Field));
Item.Attr = Attr;

var Slot = (function (_super) {
    __extends(Slot, _super);
    function Slot(key, value, flags) {
        if (value === void 0) { value = Value.Extant; }
        if (flags === void 0) { flags = 0; }
        var _this = _super.call(this) || this;
        _this._key = key;
        _this._value = value;
        _this._flags = flags;
        return _this;
    }
    Object.defineProperty(Slot.prototype, "key", {
        get: function () {
            return this._key;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Slot.prototype, "value", {
        get: function () {
            return this._value;
        },
        enumerable: true,
        configurable: true
    });
    Slot.prototype.setValue = function (newValue) {
        if ((this._flags & Field.IMMUTABLE) !== 0) {
            throw new Error('immutable');
        }
        var oldValue = this._value;
        this._value = newValue;
        return oldValue;
    };
    Slot.prototype.withValue = function (newValue) {
        return new Slot(this._key, newValue);
    };
    Slot.prototype.bor = function (that) {
        that = Item.of(that);
        if (that instanceof Item.DynamicValue) {
            return new Item.BorExpr(this, that);
        }
        var newValue;
        if (that instanceof Slot && this._key.equals(that._key)) {
            newValue = this._value.bor(that._value);
        }
        else if (that instanceof Value) {
            newValue = this._value.bor(that);
        }
        else {
            newValue = Value.Absent;
        }
        if (newValue.isDefined()) {
            return new Slot(this._key, newValue);
        }
        return Value.Absent;
    };
    Slot.prototype.bxor = function (that) {
        that = Item.of(that);
        if (that instanceof Item.DynamicValue) {
            return new Item.BxorExpr(this, that);
        }
        var newValue;
        if (that instanceof Slot && this._key.equals(that._key)) {
            newValue = this._value.bxor(that._value);
        }
        else if (that instanceof Value) {
            newValue = this._value.bxor(that);
        }
        else {
            newValue = Value.Absent;
        }
        if (newValue.isDefined()) {
            return new Slot(this._key, newValue);
        }
        return Value.Absent;
    };
    Slot.prototype.band = function (that) {
        that = Item.of(that);
        if (that instanceof Item.DynamicValue) {
            return new Item.BandExpr(this, that);
        }
        var newValue;
        if (that instanceof Slot && this._key.equals(that._key)) {
            newValue = this._value.band(that._value);
        }
        else if (that instanceof Value) {
            newValue = this._value.band(that);
        }
        else {
            newValue = Value.Absent;
        }
        if (newValue.isDefined()) {
            return new Slot(this._key, newValue);
        }
        return Value.Absent;
    };
    Slot.prototype.plus = function (that) {
        that = Item.of(that);
        if (that instanceof Item.DynamicValue) {
            return new Item.AddExpr(this, that);
        }
        var newValue;
        if (that instanceof Slot && this._key.equals(that._key)) {
            newValue = this._value.plus(that._value);
        }
        else if (that instanceof Value) {
            newValue = this._value.plus(that);
        }
        else {
            newValue = Value.Absent;
        }
        if (newValue.isDefined()) {
            return new Slot(this._key, newValue);
        }
        return Value.Absent;
    };
    Slot.prototype.minus = function (that) {
        that = Item.of(that);
        if (that instanceof Item.DynamicValue) {
            return new Item.SubExpr(this, that);
        }
        var newValue;
        if (that instanceof Slot && this._key.equals(that._key)) {
            newValue = this._value.minus(that._value);
        }
        else if (that instanceof Value) {
            newValue = this._value.minus(that);
        }
        else {
            newValue = Value.Absent;
        }
        if (newValue.isDefined()) {
            return new Slot(this._key, newValue);
        }
        return Value.Absent;
    };
    Slot.prototype.times = function (that) {
        that = Item.of(that);
        if (that instanceof Item.DynamicValue) {
            return new Item.MulExpr(this, that);
        }
        var newValue;
        if (that instanceof Slot && this._key.equals(that._key)) {
            newValue = this._value.times(that._value);
        }
        else if (that instanceof Value) {
            newValue = this._value.times(that);
        }
        else {
            newValue = Value.Absent;
        }
        if (newValue.isDefined()) {
            return new Slot(this._key, newValue);
        }
        return Value.Absent;
    };
    Slot.prototype.divide = function (that) {
        that = Item.of(that);
        if (that instanceof Item.DynamicValue) {
            return new Item.DivExpr(this, that);
        }
        var newValue;
        if (that instanceof Slot && this._key.equals(that._key)) {
            newValue = this._value.divide(that._value);
        }
        else if (that instanceof Value) {
            newValue = this._value.divide(that);
        }
        else {
            newValue = Value.Absent;
        }
        if (newValue.isDefined()) {
            return new Slot(this._key, newValue);
        }
        return Value.Absent;
    };
    Slot.prototype.modulo = function (that) {
        that = Item.of(that);
        if (that instanceof Item.DynamicValue) {
            return new Item.ModExpr(this, that);
        }
        var newValue;
        if (that instanceof Slot && this._key.equals(that._key)) {
            newValue = this._value.modulo(that._value);
        }
        else if (that instanceof Value) {
            newValue = this._value.modulo(that);
        }
        else {
            newValue = Value.Absent;
        }
        if (newValue.isDefined()) {
            return new Slot(this._key, newValue);
        }
        return Value.Absent;
    };
    Slot.prototype.not = function () {
        var newValue = this._value.not();
        if (newValue.isDefined()) {
            return new Slot(this._key, newValue);
        }
        return Value.Absent;
    };
    Slot.prototype.bnot = function () {
        var newValue = this._value.bnot();
        if (newValue.isDefined()) {
            return new Slot(this._key, newValue);
        }
        return Value.Absent;
    };
    Slot.prototype.neg = function () {
        var newValue = this._value.neg();
        if (newValue.isDefined()) {
            return new Slot(this._key, newValue);
        }
        return Value.Absent;
    };
    Slot.prototype.pos = function () {
        var newValue = this._value.pos();
        if (newValue.isDefined()) {
            return new Slot(this._key, newValue);
        }
        return Value.Absent;
    };
    Slot.prototype.inv = function () {
        var newValue = this._value.inv();
        if (newValue.isDefined()) {
            return new Slot(this._key, newValue);
        }
        return Value.Absent;
    };
    Slot.prototype.evaluate = function (stack) {
        stack = EvalStack.fromAny(stack);
        var key = this._key.evaluate(stack).toValue();
        var value = this._value.evaluate(stack).toValue();
        if (key === this._key && value === this._value) {
            return this;
        }
        else if (key.isDefined() && value.isDefined()) {
            return new Slot(key, value);
        }
        return Item.Absent;
    };
    Slot.prototype.substitute = function (stack) {
        stack = EvalStack.fromAny(stack);
        var key = this._key.substitute(stack).toValue();
        var value = this._value.substitute(stack).toValue();
        if (key === this._key && value === this._value) {
            return this;
        }
        else if (key.isDefined() && value.isDefined()) {
            return new Slot(key, value);
        }
        return Item.Absent;
    };
    Slot.prototype.isMutable = function () {
        return (this._flags & Field.IMMUTABLE) === 0;
    };
    Slot.prototype.alias = function () {
        this._flags |= Field.IMMUTABLE;
    };
    Slot.prototype.branch = function () {
        if ((this._flags & Field.IMMUTABLE) !== 0) {
            return new Slot(this._key, this._value, this._flags & ~Field.IMMUTABLE);
        }
        else {
            return this;
        }
    };
    Slot.prototype.clone = function () {
        return new Slot(this._key.clone(), this._value.clone());
    };
    Slot.prototype.commit = function () {
        if ((this._flags & Field.IMMUTABLE) === 0) {
            this._flags |= Field.IMMUTABLE;
            this._value.commit();
        }
        return this;
    };
    Slot.prototype.writeRecon = function (output) {
        this._key.writeRecon(output);
        output.push(58);
        if (this._value !== Item.Extant) {
            this._value.writeRecon(output);
        }
    };
    Slot.prototype.compare = function (that) {
        if (that instanceof Slot) {
            var order = this._key.compare(that._key);
            if (order === 0) {
                order = this._value.compare(that._value);
            }
            return order;
        }
        else if (that instanceof Item.Attr) {
            return 1;
        }
        else {
            return -1;
        }
    };
    Slot.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof Slot) {
            return this._key.equals(that._key) && this._value.equals(that._value);
        }
        return false;
    };
    Slot.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(Murmur3.mix(0x49C62B31, this._key.hashCode()), this._value.hashCode()));
    };
    Slot.prototype.toString = function () {
        return this.toRecon();
    };
    Slot.of = function (key, value) {
        key = Item.Value.of(key);
        value = arguments.length === 2 ? Item.Value.of(value) : Item.Value.Extant;
        return new Slot(key, value);
    };
    return Slot;
}(Field));
Item.Slot = Slot;

var RecordCursor = (function (_super) {
    __extends(RecordCursor, _super);
    function RecordCursor(record, lower, upper, index) {
        if (lower === void 0) { lower = 0; }
        if (upper === void 0) { upper = record.length; }
        if (index === void 0) { index = lower; }
        var _this = _super.call(this) || this;
        _this._record = record;
        _this._lower = lower;
        _this._upper = upper;
        _this._index = index;
        _this._direction = 0;
        return _this;
    }
    RecordCursor.prototype.isEmpty = function () {
        return this._index >= this._upper;
    };
    RecordCursor.prototype.head = function () {
        this._direction = 0;
        if (this._index < this._upper) {
            return this._record.getItem(this._index);
        }
        else {
            throw new Error('empty head');
        }
    };
    RecordCursor.prototype.step = function () {
        this._direction = 0;
        if (this._index < this._upper) {
            this._index += 1;
        }
        else {
            throw new Error('empty step');
        }
    };
    RecordCursor.prototype.skip = function (count) {
        this._index = Math.min(Math.max(this._lower, this._index + count, this._upper));
    };
    RecordCursor.prototype.hasNext = function () {
        return this._index < this._upper;
    };
    RecordCursor.prototype.nextIndex = function () {
        return this._index - this._lower;
    };
    RecordCursor.prototype.next = function () {
        this._direction = 1;
        var index = this._index;
        if (index < this._upper) {
            this._index = index + 1;
            return { value: this._record.getItem(index), done: this._index === this._upper };
        }
        else {
            this._index = this._upper;
            return { done: true };
        }
    };
    RecordCursor.prototype.hasPrevious = function () {
        return this._index > this._lower;
    };
    RecordCursor.prototype.previousIndex = function () {
        return this._index - this._lower - 1;
    };
    RecordCursor.prototype.previous = function () {
        this._direction = -1;
        var index = this._index - 1;
        if (index >= this._lower) {
            this._index = index;
            return { value: this._record.getItem(index), done: index === this._lower };
        }
        else {
            this._index = 0;
            return { done: true };
        }
    };
    RecordCursor.prototype.set = function (newItem) {
        if (this._direction > 0) {
            this._record.setItem(this._index - 1, newItem);
        }
        else {
            this._record.setItem(this._index, newItem);
        }
    };
    RecordCursor.prototype.delete = function () {
        if (this._direction > 0) {
            this._index -= 1;
        }
        this._record.splice(this._index, 1);
        this._direction = 0;
    };
    return RecordCursor;
}(Cursor));

var Record = (function (_super) {
    __extends(Record, _super);
    function Record() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Record.prototype.isArray = function () {
        return !this.forEach(function (item) {
            return item instanceof Item.Field ? true : undefined;
        }, this);
    };
    Record.prototype.isObject = function () {
        return !this.forEach(function (item) {
            return item instanceof Item.Value ? true : undefined;
        }, this);
    };
    Object.defineProperty(Record.prototype, "fieldCount", {
        get: function () {
            var count = 0;
            this.forEach(function (item) {
                if (item instanceof Item.Field) {
                    count += 1;
                }
            }, this);
            return count;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Record.prototype, "valueCount", {
        get: function () {
            var count = 0;
            this.forEach(function (item) {
                if (item instanceof Item.Value) {
                    count += 1;
                }
            }, this);
            return count;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Record.prototype, "tag", {
        get: function () {
            var head = this.head();
            if (head instanceof Item.Attr) {
                return head.key.value;
            }
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Record.prototype, "target", {
        get: function () {
            return this.forEach(function (item) {
                return item instanceof Value ? item : undefined;
            }, this) || Value.Absent;
        },
        enumerable: true,
        configurable: true
    });
    Record.prototype.flattened = function () {
        var items = this.iterator();
        if (!items.isEmpty()) {
            var head = items.head();
            items.step();
            if (items.isEmpty() && head instanceof Value) {
                return head;
            }
            else {
                return this.branch();
            }
        }
        return Value.Extant;
    };
    Record.prototype.header = function (tag) {
        var head = this.head();
        if (head instanceof Item.Attr && head.key.value === tag) {
            return head.value;
        }
        return Value.Absent;
    };
    Record.prototype.headers = function (tag) {
        var head = this.head();
        if (head instanceof Item.Attr && head.key.value === tag) {
            var header = head.value;
            if (header instanceof Record) {
                return header;
            }
            else {
                return Record.of(header);
            }
        }
        return undefined;
    };
    Record.prototype.head = function () {
        return this.forEach(function (item) {
            return item;
        }, this) || Item.Absent;
    };
    Record.prototype.tail = function () {
        var tail = Record.empty();
        this.forEach(function (item, index) {
            if (index > 0) {
                tail.push(item);
            }
        }, this);
        return tail;
    };
    Record.prototype.body = function () {
        var items = this.iterator();
        if (!items.isEmpty()) {
            items.step();
            if (!items.isEmpty()) {
                var item = items.head();
                items.step();
                if (items.isEmpty()) {
                    if (!(item instanceof Item.Value)) {
                        item = Record.of(item);
                    }
                    return item;
                }
                else {
                    return this.tail().branch();
                }
            }
        }
        return Value.Absent;
    };
    Record.prototype.has = function (key) {
        key = Value.of(key);
        return this.forEach(function (item) {
            return item instanceof Item.Field && item.key.equals(key) ? true : undefined;
        }, this) || false;
    };
    Record.prototype.get = function (key) {
        key = Value.of(key);
        return this.forEach(function (item) {
            return item instanceof Item.Field && item.key.equals(key) ? item.value : undefined;
        }, this) || Value.Absent;
    };
    Record.prototype.getAttr = function (key) {
        key = Item.Text.of(key);
        return this.forEach(function (item) {
            return item instanceof Item.Attr && item.key.equals(key) ? item.value : undefined;
        }, this) || Value.Absent;
    };
    Record.prototype.getField = function (key) {
        key = Value.of(key);
        return this.forEach(function (item) {
            return item instanceof Item.Field && item.key.equals(key) ? item : undefined;
        }, this);
    };
    Record.prototype.set = function (key, newValue) {
        key = Value.of(key);
        newValue = Value.of(newValue);
        var items = this.iterator();
        while (!items.isEmpty()) {
            var item = items.head();
            if (item instanceof Item.Field && item.key.equals(key)) {
                if (item.isMutable()) {
                    item.setValue(newValue);
                }
                else {
                    items.set(item.withValue(newValue));
                }
                return this;
            }
            items.step();
        }
        var field = new Item.Slot(key, newValue);
        this.push(field);
        return this;
    };
    Record.prototype.setAttr = function (key, newValue) {
        key = Item.Text.of(key);
        newValue = Value.of(newValue);
        var items = this.iterator();
        while (!items.isEmpty()) {
            var item = items.head();
            if (item instanceof Item.Field && item.key.equals(key)) {
                if (item instanceof Item.Attr && item.isMutable()) {
                    item.setValue(newValue);
                }
                else {
                    items.set(new Item.Attr(key, newValue));
                }
                return this;
            }
            items.step();
        }
        var field = new Item.Attr(key, newValue);
        this.push(field);
        return this;
    };
    Record.prototype.concat = function () {
        var items = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            items[_i] = arguments[_i];
        }
        var record = this.branch();
        for (var i = 0, n = items.length; i < n; i += 1) {
            var item = Item.fromAny(items[i]);
            item.forEach(function (item) {
                record.push(item);
            }, this);
        }
        return record;
    };
    Record.prototype.withField = function (key, newValue) {
        key = Value.of(key);
        newValue = Value.of(newValue);
        var record = this.isMutable() ? this : this.branch();
        var items = record.iterator();
        while (!items.isEmpty()) {
            var item = items.head();
            if (item.key.equals(key)) {
                if (item instanceof Item.Field && item.isMutable()) {
                    item.setValue(newValue);
                }
                else {
                    items.set(Item.Slot.of(key, newValue));
                }
                return record;
            }
            items.step();
        }
        var field = Item.Slot.of(key, newValue);
        record.push(field);
        return record;
    };
    Record.prototype.withAttr = function (key, newValue) {
        key = Item.Text.of(key);
        newValue = Value.of(newValue);
        var record = this.isMutable() ? this : this.branch();
        var items = record.iterator();
        while (!items.isEmpty()) {
            var item = items.head();
            if (item.key.equals(key)) {
                if (item instanceof Item.Attr && item.isMutable()) {
                    item.setValue(newValue);
                }
                else {
                    items.set(Item.Attr.of(key, newValue));
                }
                return record;
            }
            items.step();
        }
        var field = Item.Attr.of(key, newValue);
        record.push(field);
        return record;
    };
    Record.prototype.withSlot = function (key, newValue) {
        key = Value.of(key);
        newValue = Value.of(newValue);
        var record = this.isMutable() ? this : this.branch();
        var items = record.iterator();
        while (!items.isEmpty()) {
            var item = items.head();
            if (item.key.equals(key)) {
                if (item instanceof Item.Slot && item.isMutable()) {
                    item.setValue(newValue);
                }
                else {
                    items.set(Item.Slot.of(key, newValue));
                }
                return record;
            }
            items.step();
        }
        var field = Item.Slot.of(key, newValue);
        record.push(field);
        return record;
    };
    Record.prototype.withItem = function (newItem) {
        var record = this.isMutable() ? this : this.branch();
        record.push(newItem);
        return record;
    };
    Record.prototype.withItems = function () {
        var newItems = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            newItems[_i] = arguments[_i];
        }
        var record = this.isMutable() ? this : this.branch();
        record.push.apply(record, arguments);
        return record;
    };
    Record.prototype.withoutKey = function (key) {
        var record = this.isMutable() ? this : this.branch();
        record.delete(key);
        return record;
    };
    Record.prototype.slice = function (lower, upper) {
        return this.subRecord.apply(this, arguments).branch();
    };
    Record.prototype.subRecord = function (lower, upper) {
        var n = this.length;
        if (lower === undefined) {
            lower = 0;
        }
        else if (lower < 0) {
            lower = n + lower;
        }
        lower = Math.min(Math.max(0, lower), n);
        if (upper === undefined) {
            upper = n;
        }
        else if (upper < 0) {
            upper = n + upper;
        }
        var record = Record.empty();
        this.forEach(function (item, index) {
            if (index < lower) {
                return undefined;
            }
            else if (index < upper) {
                record.push(item);
                return undefined;
            }
            else {
                return null;
            }
        }, this);
        return record;
    };
    Record.prototype.attr = function (key, value) {
        this.push(Item.Attr.of.apply(undefined, arguments));
        return this;
    };
    Record.prototype.slot = function (key, value) {
        this.push(Item.Slot.of.apply(undefined, arguments));
        return this;
    };
    Record.prototype.item = function (item) {
        this.push(Item.fromAny(item));
        return this;
    };
    Record.prototype.items = function () {
        var items = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            items[_i] = arguments[_i];
        }
        this.push.apply(this, arguments);
        return this;
    };
    Record.prototype.iterator = function () {
        return new RecordCursor(this);
    };
    Record.prototype.indexOf = function (item, index) {
        if (index === void 0) { index = 0; }
        item = Item.of(item);
        var n = this.length;
        if (index < 0) {
            index = n + index;
        }
        index = Math.max(0, index);
        var found = -1;
        this.forEach(function (it, i) {
            if (i >= index && it.equals(item)) {
                found = i;
                return null;
            }
            return undefined;
        }, this);
        return found;
    };
    Record.prototype.lastIndexOf = function (item, index) {
        item = Item.of(item);
        var n = this.length;
        if (index === undefined) {
            index = n - 1;
        }
        else if (index < 0) {
            index = n + index;
        }
        index = Math.min(index, n - 1);
        var found = -1;
        this.forEach(function (it, i) {
            if (i > index) {
                return null;
            }
            else if (it.equals(item)) {
                found = i;
            }
            return undefined;
        }, this);
        return found;
    };
    Record.prototype.evaluate = function (stack) {
        stack = EvalStack.fromAny(stack);
        var record = Record.empty();
        stack.push(record);
        var changed = false;
        this.forEach(function (oldItem) {
            var newItem = oldItem.evaluate(stack);
            if (newItem.isDefined()) {
                record.push(newItem);
            }
            changed = changed || oldItem !== newItem;
        }, this);
        stack.pop();
        return changed ? record : this;
    };
    Record.prototype.substitute = function (stack) {
        stack = EvalStack.fromAny(stack);
        var record = Record.empty();
        stack.push(record);
        var changed = false;
        this.forEach(function (oldItem) {
            var newItem = oldItem.substitute(stack);
            if (newItem.isDefined()) {
                record.push(newItem);
            }
            changed = changed || oldItem !== newItem;
        }, this);
        stack.pop();
        return changed ? record : this;
    };
    Record.prototype.isAliased = function () {
        return false;
    };
    Record.prototype.isMutable = function () {
        return true;
    };
    Record.prototype.alias = function () {
    };
    Record.prototype.branch = function () {
        var branch = Record.empty();
        this.forEach(function (item) {
            branch.push(item);
        }, this);
        return branch;
    };
    Record.prototype.clone = function () {
        var clone = Record.empty();
        this.forEach(function (item) {
            clone.push(item.clone());
        }, this);
        return clone;
    };
    Record.prototype.commit = function () {
        return this;
    };
    Record.prototype.toAny = function () {
        if (!this.isEmpty() && this.isArray()) {
            return this.toArray();
        }
        else {
            return this.toObject();
        }
    };
    Record.prototype.toArray = function () {
        var array = new Array(this.length);
        this.forEach(function (item, index) {
            if (item instanceof Item.Value) {
                array[index] = item.toAny();
            }
            else if (item instanceof Item.Field) {
                array[index] = {
                    $key: item.key.toAny(),
                    $value: item.value.toAny(),
                };
            }
        }, this);
        return array;
    };
    Record.prototype.toObject = function () {
        var object = {};
        this.forEach(function (item, index) {
            if (item instanceof Item.Attr) {
                object['@' + item.key.value] = item.value.toAny();
            }
            else if (item instanceof Item.Slot) {
                if (item.key instanceof Item.Text) {
                    object[item.key.value] = item.value.toAny();
                }
                else {
                    object['$' + index] = {
                        $key: item.key.toAny(),
                        $value: item.value.toAny(),
                    };
                }
            }
            else if (item instanceof Item.Value) {
                object['$' + index] = item.toAny();
            }
        }, this);
        return object;
    };
    Record.prototype.stringValue = function (orElse) {
        var str = '';
        var valid = this.forEach(function (item) {
            if (item instanceof Item.Value) {
                var s = item.stringValue();
                if (s !== undefined) {
                    str += s;
                    return undefined;
                }
            }
            return null;
        }, this) === undefined;
        return valid ? str : undefined;
    };
    Record.prototype.bind = function () {
        return this;
    };
    Record.prototype.isBlockSafe = function () {
        return this.forEach(function (item) {
            return item instanceof Item.Attr ? false : undefined;
        }, this) === undefined;
    };
    Record.prototype.isMarkupSafe = function () {
        var count = 0;
        var foo = this.forEach(function (item, index) {
            count += 1;
            if (index === 0) {
                if (!(item instanceof Item.Attr)) {
                    return false;
                }
            }
            else if (item instanceof Item.Attr) {
                return false;
            }
            return undefined;
        }, this) === undefined && count > 0;
        return foo;
    };
    Record.prototype.writeRecon = function (output) {
        var items = this.iterator();
        if (!items.isEmpty()) {
            Record.writeItems(items, false, false, output);
        }
        else {
            output.push(123, 125);
        }
    };
    Record.prototype.writeReconBlock = function (output) {
        var items = this.iterator();
        if (!items.isEmpty()) {
            Record.writeItems(items, this.isBlockSafe(), false, output);
        }
        else {
            output.push(123, 125);
        }
    };
    Record.writeItems = function (items, inBlock, inMarkup, output) {
        var inBraces = false;
        var inBrackets = false;
        var first = true;
        var markupSafe = true;
        while (!items.isEmpty()) {
            var item = items.head();
            if (item instanceof Item.Expr || item instanceof Item.Selector) {
                markupSafe = false;
            }
            items.step();
            if (inBrackets && item instanceof Item.Attr) {
                if (inBraces) {
                    output.push(125);
                    inBraces = false;
                }
                output.push(93);
                inBrackets = false;
            }
            if (item instanceof Item.Attr) {
                if (inBraces) {
                    output.push(125);
                    inBraces = false;
                }
                else if (inBrackets) {
                    output.push(93);
                    inBrackets = false;
                }
                item.writeRecon(output);
                first = false;
            }
            else if (inBrackets && item instanceof Item.Text) {
                if (inBraces) {
                    output.push(125);
                    inBraces = false;
                }
                Item.Text.writeMarkup(item.value, output);
            }
            else if (inBraces) {
                if (!first) {
                    output.push(44);
                }
                else {
                    first = false;
                }
                item.writeRecon(output);
            }
            else if (inBrackets) {
                if (item instanceof Record && item.isMarkupSafe()) {
                    Record.writeItems(item.iterator(), false, true, output);
                    if (!items.isEmpty() && items.head() instanceof Item.Text) {
                        Item.Text.writeMarkup(items.head().stringValue(), output);
                        items.step();
                    }
                    else if (!items.isEmpty() && !(items.head() instanceof Item.Attr)) {
                        output.push(123);
                        inBraces = true;
                        first = true;
                    }
                    else {
                        output.push(93);
                        inBrackets = false;
                    }
                }
                else {
                    output.push(123);
                    item.writeRecon(output);
                    inBraces = true;
                    first = false;
                }
            }
            else if (markupSafe && item instanceof Item.Text && !items.isEmpty()
                && !(items.head() instanceof Item.Field) && !(items.head() instanceof Item.Text)
                && !(items.head() instanceof Item.Bool)) {
                output.push(91);
                Item.Text.writeMarkup(item.value, output);
                inBrackets = true;
            }
            else if (inBlock && !inBraces) {
                if (!first) {
                    output.push(44);
                }
                else {
                    first = false;
                }
                item.writeRecon(output);
            }
            else if (inMarkup && item instanceof Item.Text && items.isEmpty()) {
                output.push(91);
                Item.Text.writeMarkup(item.value, output);
                output.push(93);
            }
            else if (!inMarkup && item instanceof Value && !(item instanceof Record)
                && (!first && items.isEmpty() || !items.isEmpty() && items.head() instanceof Item.Attr)) {
                if (!first && (item instanceof Item.Text && item.isIdent()
                    || item instanceof Item.Num || item instanceof Item.Bool)) {
                    output.push(32);
                }
                item.writeRecon(output);
            }
            else {
                output.push(123);
                item.writeRecon(output);
                inBraces = true;
                first = false;
            }
        }
        if (inBraces) {
            output.push(125);
        }
        if (inBrackets) {
            output.push(93);
        }
    };
    Record.prototype.compare = function (that) {
        if (that instanceof Record) {
            var xs = this.iterator();
            var ys = that.iterator();
            var order = 0;
            while (order === 0 && !xs.isEmpty() && !ys.isEmpty()) {
                order = xs.head().compare(ys.head());
                xs.step();
                ys.step();
            }
            if (order !== 0) {
                return order;
            }
            else if (xs.isEmpty() && !ys.isEmpty()) {
                return -1;
            }
            else if (!xs.isEmpty() && ys.isEmpty()) {
                return 1;
            }
            else {
                return 0;
            }
        }
        else if (that instanceof Item.Field) {
            return 1;
        }
        else {
            return -1;
        }
    };
    Record.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof Record) {
            var xs = this.iterator();
            var ys = that.iterator();
            while (!xs.isEmpty() && !ys.isEmpty()) {
                if (!xs.head().equals(ys.head())) {
                    return false;
                }
                xs.step();
                ys.step();
            }
            return xs.isEmpty() === ys.isEmpty();
        }
        return false;
    };
    Record.prototype.hashCode = function () {
        var h = 0xCABD5F87;
        this.forEach(function (item) {
            h = Murmur3.mix(h, item.hashCode());
        }, this);
        return Murmur3.mash(h);
    };
    Record.prototype.toString = function () {
        return this.toRecon();
    };
    Record.fromAny = function (value) {
        if (value instanceof Record) {
            return value;
        }
        else if (Array.isArray(value)) {
            return Record.fromArray(value);
        }
        else if (typeof value === 'object') {
            return Record.fromObject(value);
        }
        else {
            throw new TypeError('' + value);
        }
    };
    Record.fromArray = function (array) {
        var n = array.length || 0;
        var record = Record.empty(n);
        for (var i = 0; i < n; i += 1) {
            record.push(Item.fromAny(array[i]));
        }
        return record;
    };
    Record.fromObject = function (object) {
        var record = Record.empty();
        var i = 0;
        for (var key in object) {
            var value = object[key];
            if (key.charCodeAt(0) === 36 && key === '$' + i) {
                if (!value || typeof value !== 'object' || !value.hasOwnProperty('$key')) {
                    record.push(Value.of(value));
                }
                else {
                    record.push(Item.Field.of(value.$key, value.$value));
                }
            }
            else {
                record.push(Item.Field.of(key, value));
            }
            i += 1;
        }
        return record;
    };
    Record.parseRecon = function (input) {
        var value = Value.parseRecon(input);
        if (value instanceof Record) {
            return value;
        }
        else if (value.isDefined()) {
            return Record.of(value);
        }
        else {
            return Record.empty();
        }
    };
    Record.expand = function (n) {
        n = Math.max(8, n) - 1;
        n |= n >> 1;
        n |= n >> 2;
        n |= n >> 4;
        n |= n >> 8;
        n |= n >> 16;
        return n + 1;
    };
    Record.ALIASED = 1;
    Record.IMMUTABLE = 2;
    Record.Empty = undefined;
    Record.empty = undefined;
    Record.of = undefined;
    return Record;
}(Value));
Item.Record = Record;

var RecordMap = (function (_super) {
    __extends(RecordMap, _super);
    function RecordMap(array, table, itemCount, fieldCount, flags) {
        var _this = _super.call(this) || this;
        _this._array = array;
        _this._table = table;
        _this._itemCount = itemCount;
        _this._fieldCount = fieldCount;
        _this._flags = flags;
        return _this;
    }
    RecordMap.prototype.isEmpty = function () {
        return this._itemCount === 0;
    };
    RecordMap.prototype.isArray = function () {
        return this._fieldCount === 0;
    };
    RecordMap.prototype.isObject = function () {
        return this._itemCount === this._fieldCount;
    };
    Object.defineProperty(RecordMap.prototype, "length", {
        get: function () {
            return this._itemCount;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RecordMap.prototype, "size", {
        get: function () {
            return this._itemCount;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RecordMap.prototype, "fieldCount", {
        get: function () {
            return this._itemCount;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RecordMap.prototype, "valueCount", {
        get: function () {
            return this._itemCount - this._fieldCount;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RecordMap.prototype, "tag", {
        get: function () {
            if (this._fieldCount > 0) {
                var head = this._array[0];
                if (head instanceof Item.Attr) {
                    return head.key.value;
                }
            }
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RecordMap.prototype, "target", {
        get: function () {
            var array = this._array;
            for (var i = 0, n = this._itemCount; i < n; i += 1) {
                var item = array[i];
                if (item instanceof Value) {
                    return item;
                }
            }
            return this;
        },
        enumerable: true,
        configurable: true
    });
    RecordMap.prototype.head = function () {
        if (this._itemCount > 0) {
            return this._array[0];
        }
        return Value.Absent;
    };
    RecordMap.prototype.tail = function () {
        var n = this._itemCount;
        if (n > 0) {
            return new RecordMap.View(this, 1, n);
        }
        else {
            return Record.Empty;
        }
    };
    RecordMap.prototype.body = function () {
        var n = this._itemCount;
        if (n > 2) {
            return new RecordMap.View(this, 1, n).branch();
        }
        else if (n === 2) {
            var item = this._array[1];
            if (!(item instanceof Item.Value)) {
                item = Record.of(item);
            }
            return item;
        }
        return Value.Absent;
    };
    RecordMap.prototype.has = function (key) {
        if (this._fieldCount > 0) {
            key = Value.of(key);
            this.hash();
            var table = this._table;
            var n = table.length;
            var x = Math.abs(key.hashCode() % n);
            var i = x;
            do {
                var field = table[i];
                if (field !== undefined) {
                    if (field.key.equals(key)) {
                        return true;
                    }
                }
                else {
                    break;
                }
                i = (i + 1) % n;
            } while (i !== x);
        }
        return false;
    };
    RecordMap.prototype.get = function (key) {
        if (this._fieldCount > 0) {
            key = Value.of(key);
            this.hash();
            var table = this._table;
            var n = table.length;
            var x = Math.abs(key.hashCode() % n);
            var i = x;
            do {
                var field = table[i];
                if (field !== undefined) {
                    if (field.key.equals(key)) {
                        return field.value;
                    }
                }
                else {
                    break;
                }
                i = (i + 1) % n;
            } while (i !== x);
        }
        return Value.Absent;
    };
    RecordMap.prototype.getAttr = function (key) {
        if (this._fieldCount > 0) {
            key = Item.Text.of(key);
            this.hash();
            var table = this._table;
            var n = table.length;
            var x = Math.abs(key.hashCode() % n);
            var i = x;
            do {
                var field = table[i];
                if (field !== undefined) {
                    if (field instanceof Item.Attr && field.key.equals(key)) {
                        return field.value;
                    }
                }
                else {
                    break;
                }
                i = (i + 1) % n;
            } while (i !== x);
        }
        return Value.Absent;
    };
    RecordMap.prototype.getField = function (key) {
        if (this._fieldCount > 0) {
            key = Value.of(key);
            this.hash();
            var table = this._table;
            var n = table.length;
            var x = Math.abs(key.hashCode() % n);
            var i = x;
            do {
                var field = table[i];
                if (field !== undefined) {
                    if (field.key.equals(key)) {
                        return field;
                    }
                }
                else {
                    break;
                }
                i = (i + 1) % n;
            } while (i !== x);
        }
        return undefined;
    };
    RecordMap.prototype.getItem = function (index) {
        if (index instanceof Item.Num) {
            index = index.value;
        }
        var n = this._itemCount;
        if (index < 0) {
            index = n + index;
        }
        index = Math.min(Math.max(0, index), n - 1);
        if (index >= 0) {
            return this._array[index];
        }
        return Item.Absent;
    };
    RecordMap.prototype.set = function (key, newValue) {
        if ((this._flags & Record.IMMUTABLE) !== 0) {
            throw new Error('immutable');
        }
        key = Value.of(key);
        newValue = Value.of(newValue);
        if ((this._flags & Record.ALIASED) !== 0) {
            if (this._fieldCount > 0) {
                this.setAliased(key, newValue);
            }
            else {
                this.pushAliased(new Item.Slot(key, newValue));
            }
        }
        else {
            if (this._fieldCount > 0) {
                if (this._table !== null) {
                    this.setMutable(key, newValue);
                }
                else {
                    this.putMutable(key, newValue);
                }
            }
            else {
                this.pushMutable(new Item.Slot(key, newValue));
            }
        }
        return this;
    };
    RecordMap.prototype.setAliased = function (key, newValue) {
        var n = this._itemCount;
        var oldArray = this._array;
        var newArray = new Array(Record.expand(n + 1));
        for (var i = 0; i < n; i += 1) {
            var item = oldArray[i];
            if (item instanceof Item.Field && item.key.equals(key)) {
                newArray[i] = item.withValue(newValue);
                i += 1;
                while (i < n) {
                    newArray[i] = oldArray[i];
                    i += 1;
                }
                this._array = newArray;
                this._table = null;
                this._flags &= ~Record.ALIASED;
                return;
            }
            newArray[i] = item;
        }
        this._array = newArray;
        this._table = null;
        this._flags &= ~Record.ALIASED;
        var field = new Item.Slot(key, newValue);
        this.pushMutable(field);
    };
    RecordMap.prototype.setMutable = function (key, newValue) {
        var table = this._table;
        var n = table.length;
        var x = Math.abs(key.hashCode() % n);
        var i = x;
        do {
            var field_1 = table[i];
            if (field_1 !== undefined) {
                if (field_1.key.equals(key)) {
                    if (field_1.isMutable()) {
                        field_1.setValue(newValue);
                        return;
                    }
                    else {
                        this.putMutable(key, newValue);
                        return;
                    }
                }
            }
            else {
                break;
            }
            i = (i + 1) % n;
        } while (i !== x);
        var field = new Item.Slot(key, newValue);
        this.pushMutable(field);
        RecordMap.put(field, table);
    };
    RecordMap.prototype.putMutable = function (key, newValue) {
        var array = this._array;
        for (var i = 0, n = this._itemCount; i < n; i += 1) {
            var item = array[i];
            if (item instanceof Item.Field && item.key.equals(key)) {
                array[i] = item.withValue(newValue);
                this._table = null;
                return;
            }
        }
        var field = new Item.Slot(key, newValue);
        this.pushMutable(field);
        RecordMap.put(field, this._table);
    };
    RecordMap.prototype.setAttr = function (key, newValue) {
        if ((this._flags & Record.IMMUTABLE) !== 0) {
            throw new Error('immutable');
        }
        key = Item.Text.of(key);
        newValue = Value.of(newValue);
        if ((this._flags & Record.ALIASED) !== 0) {
            if (this._fieldCount > 0) {
                this.setAttrAliased(key, newValue);
            }
            else {
                this.pushAliased(new Item.Attr(key, newValue));
            }
        }
        else {
            if (this._fieldCount > 0) {
                if (this._table !== null) {
                    this.setAttrMutable(key, newValue);
                }
                else {
                    this.putAttrMutable(key, newValue);
                }
            }
            else {
                this.pushMutable(new Item.Attr(key, newValue));
            }
        }
        return this;
    };
    RecordMap.prototype.setAttrAliased = function (key, newValue) {
        var n = this._itemCount;
        var oldArray = this._array;
        var newArray = new Array(Record.expand(n + 1));
        for (var i = 0; i < n; i += 1) {
            var item = oldArray[i];
            if (item instanceof Item.Field && item.key.equals(key)) {
                newArray[i] = Item.Attr.of(key, newValue);
                i += 1;
                while (i < n) {
                    newArray[i] = oldArray[i];
                    i += 1;
                }
                this._array = newArray;
                this._table = null;
                this._flags &= ~Record.ALIASED;
                return;
            }
            newArray[i] = item;
        }
        newArray[n] = Item.Attr.of(key, newValue);
        this._array = newArray;
        this._table = null;
        this._itemCount = n + 1;
        this._fieldCount += 1;
        this._flags &= ~Record.ALIASED;
    };
    RecordMap.prototype.setAttrMutable = function (key, newValue) {
        var table = this._table;
        var n = table.length;
        var x = Math.abs(key.hashCode() % n);
        var i = x;
        do {
            var field_2 = table[i];
            if (field_2 !== undefined) {
                if (field_2.key.equals(key)) {
                    if (field_2 instanceof Item.Attr && field_2.isMutable()) {
                        field_2.setValue(newValue);
                    }
                    else {
                        this.putAttrMutable(key, newValue);
                    }
                    return;
                }
            }
            else {
                break;
            }
            i = (i + 1) % n;
        } while (i !== x);
        var field = Item.Attr.of(key, newValue);
        this.push(field);
        RecordMap.put(field, table);
    };
    RecordMap.prototype.putAttrMutable = function (key, newValue) {
        var array = this._array;
        var n = this._itemCount;
        for (var i = 0; i < n; i += 1) {
            var item = array[i];
            if (item.key.equals(key)) {
                array[i] = Item.Attr.of(key, newValue);
                this._table = null;
                return;
            }
        }
        var field = Item.Attr.of(key, newValue);
        this.push(field);
        RecordMap.put(field, this._table);
    };
    RecordMap.prototype.setItem = function (index, newItem) {
        if ((this._flags & Record.IMMUTABLE) !== 0) {
            throw new Error('immutable');
        }
        if (index instanceof Item.Num) {
            index = index.value;
        }
        newItem = Item.of(newItem);
        var n = this.length;
        if (index < 0) {
            index = n + index;
        }
        index = Math.min(Math.max(0, index), n - 1);
        if (index >= 0) {
            if ((this._flags & Record.ALIASED) !== 0) {
                this.setIndexAliased(index, newItem);
            }
            else {
                this.setIndexMutable(index, newItem);
            }
        }
        return this;
    };
    RecordMap.prototype.setIndexAliased = function (index, newItem) {
        var n = this._itemCount;
        var oldArray = this._array;
        var newArray = new Array(Record.expand(n));
        for (var i = 0; i < n; i += 1) {
            newArray[i] = oldArray[i];
        }
        var oldItem = oldArray[index];
        newArray[index] = newItem;
        this._array = newArray;
        this._table = null;
        if (newItem instanceof Item.Field) {
            if (!(oldItem instanceof Item.Field)) {
                this._fieldCount += 1;
            }
        }
        else if (oldItem instanceof Item.Field) {
            this._fieldCount -= 1;
        }
        this._flags &= ~Record.ALIASED;
    };
    RecordMap.prototype.setIndexMutable = function (index, newItem) {
        var array = this._array;
        var oldItem = array[index];
        array[index] = newItem;
        if (newItem instanceof Item.Field) {
            this._table = null;
            if (!(oldItem instanceof Item.Field)) {
                this._fieldCount += 1;
            }
        }
        else if (oldItem instanceof Item.Field) {
            this._table = null;
            this._fieldCount -= 1;
        }
    };
    RecordMap.prototype.push = function () {
        var newItems = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            newItems[_i] = arguments[_i];
        }
        if ((this._flags & Record.IMMUTABLE) !== 0) {
            throw new Error('immutable');
        }
        if ((this._flags & Record.ALIASED) !== 0) {
            this.pushAliased.apply(this, arguments);
        }
        else {
            this.pushMutable.apply(this, arguments);
        }
        return this._itemCount;
    };
    RecordMap.prototype.pushAliased = function () {
        var newItems = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            newItems[_i] = arguments[_i];
        }
        var k = newItems.length;
        var m = this._itemCount;
        var n = this._fieldCount;
        var oldArray = this._array;
        var newArray = new Array(Record.expand(m + k));
        if (oldArray !== null) {
            for (var i = 0; i < m; i += 1) {
                newArray[i] = oldArray[i];
            }
        }
        for (var i = 0; i < k; i += 1) {
            var newItem = Item.fromAny(newItems[i]);
            newArray[m] = newItem;
            m += 1;
            if (newItem instanceof Item.Field) {
                n += 1;
            }
        }
        this._array = newArray;
        this._table = null;
        this._itemCount = m;
        this._fieldCount = n;
        this._flags &= ~Record.ALIASED;
    };
    RecordMap.prototype.pushMutable = function () {
        var newItems = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            newItems[_i] = arguments[_i];
        }
        var k = newItems.length;
        var m = this._itemCount;
        var n = this._fieldCount;
        var oldArray = this._array;
        var newArray;
        if (oldArray === null || m + k > oldArray.length) {
            newArray = new Array(Record.expand(m + k));
            if (oldArray !== null) {
                for (var i = 0; i < m; i += 1) {
                    newArray[i] = oldArray[i];
                }
            }
        }
        else {
            newArray = oldArray;
        }
        for (var i = 0; i < k; i += 1) {
            var newItem = Item.fromAny(newItems[i]);
            newArray[m] = newItem;
            m += 1;
            if (newItem instanceof Item.Field) {
                n += 1;
                this._table = null;
            }
        }
        this._array = newArray;
        this._itemCount = m;
        this._fieldCount = n;
    };
    RecordMap.prototype.splice = function (start, deleteCount) {
        if (deleteCount === void 0) { deleteCount = 0; }
        var newItems = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            newItems[_i - 2] = arguments[_i];
        }
        if ((this._flags & Record.IMMUTABLE) !== 0) {
            throw new Error('immutable');
        }
        var n = this._itemCount;
        if (start < 0) {
            start = n + start;
        }
        start = Math.min(Math.max(0, start), n);
        deleteCount = Math.min(Math.max(0, deleteCount), n - start);
        if ((this._flags & Record.ALIASED) !== 0) {
            return this.spliceAliased.apply(this, arguments);
        }
        else {
            return this.spliceMutable.apply(this, arguments);
        }
    };
    RecordMap.prototype.spliceAliased = function (start, deleteCount) {
        var newItems = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            newItems[_i - 2] = arguments[_i];
        }
        var k = newItems.length;
        var m = this._itemCount;
        var n = this._fieldCount;
        var oldArray = this._array;
        var newArray = new Array(Record.expand(m - deleteCount + k));
        for (var i = 0; i < start; i += 1) {
            newArray[i] = oldArray[i];
        }
        var oldItems = [];
        for (var i = start; i < start + deleteCount; i += 1) {
            var oldItem = oldArray[i];
            oldItems.push(oldItem);
            m -= 1;
            if (oldItem instanceof Item.Field) {
                n -= 1;
            }
        }
        for (var i = start; i < m; i += 1) {
            newArray[i + k] = oldArray[i + deleteCount];
        }
        for (var i = 0; i < k; i += 1) {
            var newItem = Item.of(newItems[i]);
            newArray[i + start] = newItem;
            m += 1;
            if (newItem instanceof Item.Field) {
                n += 1;
            }
        }
        this._array = newArray;
        this._table = null;
        this._itemCount = m;
        this._fieldCount = n;
        this._flags &= ~Record.ALIASED;
        return oldItems;
    };
    RecordMap.prototype.spliceMutable = function (start, deleteCount) {
        var newItems = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            newItems[_i - 2] = arguments[_i];
        }
        var k = newItems.length;
        var m = this._itemCount;
        var n = this._fieldCount;
        var oldArray = this._array;
        var newArray;
        if (oldArray === null || m - deleteCount + k > oldArray.length) {
            newArray = new Array(Record.expand(m - deleteCount + k));
            if (oldArray !== null) {
                for (var i = 0; i < start; i += 1) {
                    newArray[i] = oldArray[i];
                }
            }
        }
        else {
            newArray = oldArray;
        }
        var oldItems = [];
        for (var i = start; i < start + deleteCount; i += 1) {
            var oldItem = oldArray[i];
            oldItems.push(oldItem);
            m -= 1;
            if (oldItem instanceof Item.Field) {
                n -= 1;
            }
        }
        if (k > deleteCount) {
            for (var i = m - 1; i >= start; i -= 1) {
                newArray[i + k] = oldArray[i + deleteCount];
            }
        }
        else {
            for (var i = start; i < m; i += 1) {
                newArray[i + k] = oldArray[i + deleteCount];
            }
        }
        for (var i = 0; i < k; i += 1) {
            var newItem = Item.of(newItems[i]);
            newArray[i + start] = newItem;
            m += 1;
            if (newItem instanceof Item.Field) {
                n += 1;
            }
        }
        this._array = newArray;
        this._itemCount = m;
        this._fieldCount = n;
        return oldItems;
    };
    RecordMap.prototype.delete = function (key) {
        if ((this._flags & Record.IMMUTABLE) !== 0) {
            throw new Error('immutable');
        }
        key = Value.of(key);
        if ((this._flags & Record.ALIASED) !== 0) {
            return this.deleteAliased(key);
        }
        else {
            return this.deleteMutable(key);
        }
    };
    RecordMap.prototype.deleteAliased = function (key) {
        var n = this._itemCount;
        var oldArray = this._array;
        var newArray = new Array(Record.expand(n));
        for (var i = 0; i < n; i += 1) {
            var item = oldArray[i];
            if (item instanceof Item.Field && item.key.equals(key)) {
                for (var j = i + 1; j < n; j += 1, i += 1) {
                    newArray[i] = oldArray[j];
                }
                this._array = newArray;
                this._table = null;
                this._itemCount = n - 1;
                this._fieldCount -= 1;
                this._flags &= ~Record.ALIASED;
                return item;
            }
            newArray[i] = item;
        }
        return Item.Absent;
    };
    RecordMap.prototype.deleteMutable = function (key) {
        var n = this._itemCount;
        var array = this._array;
        for (var i = 0; i < n; i += 1) {
            var item = array[i];
            if (item instanceof Item.Field && item.key.equals(key)) {
                for (var j = i + 1; j < n; j += 1, i += 1) {
                    array[i] = array[j];
                }
                array[n - 1] = undefined;
                this._table = null;
                this._itemCount = n - 1;
                this._fieldCount -= 1;
                return item;
            }
        }
        return Item.Absent;
    };
    RecordMap.prototype.clear = function () {
        if ((this._flags & Record.IMMUTABLE) !== 0) {
            throw new Error('immutable');
        }
        this._array = null;
        this._table = null;
        this._itemCount = 0;
        this._fieldCount = 0;
        this._flags = 0;
    };
    RecordMap.prototype.withField = function (key, newValue) {
        key = Value.of(key);
        newValue = Value.of(newValue);
        var record = (this._flags & Record.IMMUTABLE) === 0 ? this : this.branch();
        if ((record._flags & Record.ALIASED) !== 0) {
            if (record._fieldCount > 0) {
                record.setAliased(key, newValue);
            }
            else {
                record.pushAliased(Item.Slot.of(key, newValue));
            }
        }
        else {
            if (record.fieldCount > 0) {
                if (record._table !== null) {
                    record.setMutable(key, newValue);
                }
                else {
                    record.putMutable(key, newValue);
                }
            }
            else {
                record.pushMutable(Item.Slot.of(key, newValue));
            }
        }
        return record;
    };
    RecordMap.prototype.withAttr = function (key, newValue) {
        key = Item.Text.of(key);
        newValue = Value.of(newValue);
        var record = (this._flags & Record.IMMUTABLE) === 0 ? this : this.branch();
        if ((record._flags & Record.ALIASED) !== 0) {
            if (record._fieldCount > 0) {
                record.setAttrAliased(key, newValue);
            }
            else {
                record.pushAliased(Item.Attr.of(key, newValue));
            }
        }
        else {
            if (record.fieldCount > 0) {
                if (record._table !== null) {
                    record.setAttrMutable(key, newValue);
                }
                else {
                    record.putAttrMutable(key, newValue);
                }
            }
            else {
                record.pushMutable(Item.Attr.of(key, newValue));
            }
        }
        return record;
    };
    RecordMap.prototype.withSlot = function (key, newValue) {
        key = Value.of(key);
        newValue = Value.of(newValue);
        var record = (this._flags & Record.IMMUTABLE) === 0 ? this : this.branch();
        if ((record._flags & Record.ALIASED) !== 0) {
            if (record._fieldCount > 0) {
                record.setSlotAliased(key, newValue);
            }
            else {
                record.pushAliased(Item.Slot.of(key, newValue));
            }
        }
        else {
            if (record.fieldCount > 0) {
                if (record._table !== null) {
                    record.setSlotMutable(key, newValue);
                }
                else {
                    record.putSlotMutable(key, newValue);
                }
            }
            else {
                record.pushMutable(Item.Slot.of(key, newValue));
            }
        }
        return record;
    };
    RecordMap.prototype.setSlotAliased = function (key, newValue) {
        var n = this._itemCount;
        var oldArray = this._array;
        var newArray = new Array(Record.expand(n + 1));
        for (var i = 0; i < n; i += 1) {
            var item = oldArray[i];
            if (item instanceof Item.Field && item.key.equals(key)) {
                newArray[i] = Item.Slot.of(key, newValue);
                i += 1;
                while (i < n) {
                    newArray[i] = oldArray[i];
                    i += 1;
                }
                this._array = newArray;
                this._table = null;
                this._flags &= ~Record.ALIASED;
                return;
            }
            newArray[i] = item;
        }
        newArray[n] = Item.Slot.of(key, newValue);
        this._array = newArray;
        this._table = null;
        this._itemCount = n + 1;
        this._fieldCount += 1;
        this._flags &= ~Record.ALIASED;
    };
    RecordMap.prototype.setSlotMutable = function (key, newValue) {
        var table = this._table;
        var n = table.length;
        var x = Math.abs(key.hashCode() % n);
        var i = x;
        do {
            var field_3 = table[i];
            if (field_3 !== undefined) {
                if (field_3.key.equals(key)) {
                    if (field_3 instanceof Item.Slot && field_3.isMutable()) {
                        field_3.setValue(newValue);
                    }
                    else {
                        this.putSlotMutable(key, newValue);
                    }
                    return;
                }
            }
            else {
                break;
            }
            i = (i + 1) % n;
        } while (i !== x);
        var field = Item.Slot.of(key, newValue);
        this.push(field);
        RecordMap.put(field, table);
    };
    RecordMap.prototype.putSlotMutable = function (key, newValue) {
        var array = this._array;
        var n = this._itemCount;
        for (var i = 0; i < n; i += 1) {
            var item = array[i];
            if (item.key.equals(key)) {
                array[i] = Item.Slot.of(key, newValue);
                this._table = null;
                return;
            }
        }
        var field = Item.Slot.of(key, newValue);
        this.push(field);
        RecordMap.put(field, this._table);
    };
    RecordMap.prototype.subRecord = function (lower, upper) {
        var n = this._itemCount;
        if (lower === undefined) {
            lower = 0;
        }
        else if (lower < 0) {
            lower = n + lower;
        }
        lower = Math.min(Math.max(0, lower), n);
        if (upper === undefined) {
            upper = n;
        }
        else if (upper < 0) {
            upper = n + upper;
        }
        upper = Math.min(Math.max(lower, upper), n);
        return new RecordMap.View(this, lower, upper);
    };
    RecordMap.prototype.forEach = function (callback, thisArg) {
        var array = this._array;
        for (var i = 0, n = this._itemCount; i < n; i += 1) {
            var result = callback.call(thisArg, array[i], i);
            if (result !== undefined) {
                return result;
            }
        }
        return undefined;
    };
    RecordMap.prototype.indexOf = function (item, index) {
        if (index === void 0) { index = 0; }
        item = Item.of(item);
        var array = this._array;
        var n = this._itemCount;
        if (index < 0) {
            index = n + index;
        }
        index = Math.max(0, index);
        while (index < n) {
            if (item.equals(array[index])) {
                return index;
            }
            index += 1;
        }
        return -1;
    };
    RecordMap.prototype.lastIndexOf = function (item, index) {
        item = Item.of(item);
        var array = this._array;
        var n = this._itemCount;
        if (index === undefined) {
            index = n - 1;
        }
        else if (index < 0) {
            index = n + index;
        }
        index = Math.min(index, n - 1);
        while (index >= 0) {
            if (item.equals(array[index])) {
                return index;
            }
            index -= 1;
        }
        return -1;
    };
    RecordMap.prototype.evaluate = function (stack) {
        stack = EvalStack.fromAny(stack);
        var array = this._array;
        var n = this._itemCount;
        var record = Record.empty(n);
        stack.push(record);
        var changed = false;
        for (var i = 0; i < n; i += 1) {
            var oldItem = array[i];
            var newItem = oldItem.evaluate(stack);
            if (newItem.isDefined()) {
                record.push(newItem);
            }
            changed = changed || oldItem !== newItem;
        }
        stack.pop();
        return changed ? record : this;
    };
    RecordMap.prototype.substitute = function (stack) {
        stack = EvalStack.fromAny(stack);
        var array = this._array;
        var n = this._itemCount;
        var record = Record.empty(n);
        stack.push(record);
        var changed = false;
        for (var i = 0; i < n; i += 1) {
            var oldItem = array[i];
            var newItem = oldItem.substitute(stack);
            if (newItem.isDefined()) {
                record.push(newItem);
            }
            changed = changed || oldItem !== newItem;
        }
        stack.pop();
        return changed ? record : this;
    };
    RecordMap.prototype.isAliased = function () {
        return (this._flags & Record.ALIASED) !== 0;
    };
    RecordMap.prototype.isMutable = function () {
        return (this._flags & Record.IMMUTABLE) === 0;
    };
    RecordMap.prototype.alias = function () {
        this._flags |= Record.ALIASED;
    };
    RecordMap.prototype.branch = function () {
        if ((this._flags & (Record.ALIASED | Record.IMMUTABLE)) === 0) {
            var array = this._array;
            for (var i = 0, n = this._itemCount; i < n; i += 1) {
                array[i].alias();
            }
        }
        this._flags |= Record.ALIASED;
        return new RecordMap(this._array, this._table, this._itemCount, this._fieldCount, Record.ALIASED);
    };
    RecordMap.prototype.clone = function () {
        var itemCount = this._itemCount;
        var oldArray = this._array;
        var newArray = new Array(itemCount);
        for (var i = 0; i < itemCount; i += 1) {
            newArray[i] = oldArray[i].clone();
        }
        return new RecordMap(newArray, null, itemCount, this._fieldCount, 0);
    };
    RecordMap.prototype.commit = function () {
        if ((this._flags & Record.IMMUTABLE) === 0) {
            this._flags |= Record.IMMUTABLE;
            var array = this._array;
            for (var i = 0, n = this._itemCount; i < n; i += 1) {
                array[i].commit();
            }
        }
        return this;
    };
    RecordMap.prototype.hash = function () {
        var n = this._fieldCount;
        if (n > 0 && this._table === null) {
            var table = new Array(Record.expand(Math.max(n, n * 10 / 7)));
            var array = this._array;
            for (var i = 0, m = this._itemCount; i < m; i += 1) {
                var item = array[i];
                if (item instanceof Item.Field) {
                    RecordMap.put(item, table);
                }
            }
            this._table = table;
        }
    };
    RecordMap.put = function (field, table) {
        if (table !== null) {
            var n = table.length;
            var x = Math.abs(field.key.hashCode() % n);
            var i = x;
            do {
                var item = table[i];
                if (item !== undefined) {
                    if (field.key.equals(item.key)) {
                        table[i] = field;
                        return;
                    }
                }
                else {
                    table[i] = field;
                    return;
                }
                i = (i + 1) % n;
            } while (i !== x);
            throw new Error();
        }
    };
    RecordMap.empty = function (initialCapacity) {
        if (initialCapacity === undefined) {
            return new RecordMap(null, null, 0, 0, 0);
        }
        else {
            return new RecordMap(new Array(initialCapacity), null, 0, 0, 0);
        }
    };
    RecordMap.of = function () {
        var items = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            items[_i] = arguments[_i];
        }
        var n = items.length;
        if (n === 0) {
            return new RecordMap(null, null, 0, 0, 0);
        }
        else {
            var array = new Array(n);
            var itemCount = 0;
            var fieldCount = 0;
            for (var i = 0; i < n; i += 1) {
                var item = Item.fromAny(items[i]);
                array[i] = item;
                itemCount += 1;
                if (item instanceof Item.Field) {
                    fieldCount += 1;
                }
            }
            return new RecordMap(array, null, itemCount, fieldCount, 0);
        }
    };
    RecordMap.View = undefined;
    RecordMap.Empty = new RecordMap(null, null, 0, 0, Record.ALIASED | Record.IMMUTABLE);
    return RecordMap;
}(Record));
Item.Empty = RecordMap.Empty;
Value.Empty = RecordMap.Empty;
Record.Empty = RecordMap.Empty;
Item.empty = RecordMap.empty;
Value.empty = RecordMap.empty;
Record.empty = RecordMap.empty;
Record.of = RecordMap.of;

var RecordMapView = (function (_super) {
    __extends(RecordMapView, _super);
    function RecordMapView(record, lower, upper) {
        var _this = _super.call(this) || this;
        _this._record = record;
        _this._lower = lower;
        _this._upper = upper;
        return _this;
    }
    RecordMapView.prototype.isEmpty = function () {
        return this._lower === this._upper;
    };
    RecordMapView.prototype.isArray = function () {
        var array = this._record._array;
        for (var i = this._lower, n = this._upper; i < n; i += 1) {
            if (array[i] instanceof Item.Field) {
                return false;
            }
        }
        return true;
    };
    RecordMapView.prototype.isObject = function () {
        var array = this._record._array;
        for (var i = this._lower, n = this._upper; i < n; i += 1) {
            if (array[i] instanceof Item.Value) {
                return false;
            }
        }
        return true;
    };
    Object.defineProperty(RecordMapView.prototype, "length", {
        get: function () {
            return this._upper - this._lower;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RecordMapView.prototype, "size", {
        get: function () {
            return this._upper - this._lower;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RecordMapView.prototype, "fieldCount", {
        get: function () {
            var k = 0;
            var array = this._record._array;
            for (var i = this._lower, n = this._upper; i < n; i += 1) {
                if (array[i] instanceof Item.Field) {
                    k += 1;
                }
            }
            return k;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RecordMapView.prototype, "valueCount", {
        get: function () {
            var k = 0;
            var array = this._record._array;
            for (var i = this._lower, n = this._upper; i < n; i += 1) {
                if (array[i] instanceof Value) {
                    k += 1;
                }
            }
            return k;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RecordMapView.prototype, "tag", {
        get: function () {
            if (this.length > 0) {
                var item = this._record._array[this._lower];
                if (item instanceof Item.Attr) {
                    return item.key.value;
                }
            }
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RecordMapView.prototype, "target", {
        get: function () {
            var array = this._record._array;
            for (var i = this._lower, n = this._upper; i < n; i += 1) {
                var item = array[i];
                if (item instanceof Value) {
                    return item;
                }
            }
            return this;
        },
        enumerable: true,
        configurable: true
    });
    RecordMapView.prototype.head = function () {
        if (this.length > 0) {
            return this._record._array[this._lower];
        }
        return Value.Absent;
    };
    RecordMapView.prototype.tail = function () {
        if (this.length > 0) {
            return new RecordMapView(this._record, this._lower + 1, this._upper);
        }
        return Record.Empty;
    };
    RecordMapView.prototype.body = function () {
        var n = this.length;
        if (n > 2) {
            return new RecordMapView(this._record, this._lower + 1, this._upper).branch();
        }
        else if (n === 2) {
            var item = this._record._array[this._lower + 1];
            if (!(item instanceof Item.Value)) {
                item = Record.of(item);
            }
            return item;
        }
        return Value.Absent;
    };
    RecordMapView.prototype.getItem = function (index) {
        if (index instanceof Item.Num) {
            index = index.value;
        }
        var n = this.length;
        if (index < 0) {
            index = n + index;
        }
        index = Math.min(Math.max(0, index), n - 1);
        if (index >= 0) {
            return this._record._array[this._lower + index];
        }
        return Item.Absent;
    };
    RecordMapView.prototype.setItem = function (index, newItem) {
        if ((this._record._flags & Record.IMMUTABLE) !== 0) {
            throw new Error('immutable');
        }
        if (index instanceof Item.Num) {
            index = index.value;
        }
        newItem = Item.of(newItem);
        var n = this.length;
        if (index < 0) {
            index = n + index;
        }
        index = Math.min(Math.max(0, index), n - 1);
        if (index >= 0) {
            if ((this._record._flags & Record.ALIASED) !== 0) {
                this.setIndexAliased(index, newItem);
            }
            else {
                this.setIndexMutable(index, newItem);
            }
        }
        return this;
    };
    RecordMapView.prototype.setIndexAliased = function (index, newItem) {
        var n = this._record._itemCount;
        var oldArray = this._record._array;
        var newArray = new Array(Record.expand(n));
        for (var i = 0; i < n; i += 1) {
            newArray[i] = oldArray[i];
        }
        var oldItem = oldArray[this._lower + index];
        newArray[this._lower + index] = newItem;
        this._record._array = newArray;
        this._record._table = null;
        if (newItem instanceof Item.Field) {
            if (!(oldItem instanceof Item.Field)) {
                this._record._fieldCount += 1;
            }
        }
        else if (oldItem instanceof Item.Field) {
            this._record._fieldCount -= 1;
        }
        this._record._flags &= ~Record.ALIASED;
    };
    RecordMapView.prototype.setIndexMutable = function (index, newItem) {
        var array = this._record._array;
        var oldItem = array[this._lower + index];
        array[this._lower + index] = newItem;
        if (newItem instanceof Item.Field) {
            this._record._table = null;
            if (!(oldItem instanceof Item.Field)) {
                this._record._fieldCount += 1;
            }
        }
        else if (oldItem instanceof Item.Field) {
            this._record._table = null;
            this._record._fieldCount -= 1;
        }
    };
    RecordMapView.prototype.push = function () {
        var newItems = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            newItems[_i] = arguments[_i];
        }
        if ((this._record._flags & Record.IMMUTABLE) !== 0) {
            throw new Error('immutable');
        }
        if ((this._record._flags & Record.ALIASED) !== 0) {
            this.pushAliased.apply(this, arguments);
        }
        else {
            this.pushMutable.apply(this, arguments);
        }
        return this.length;
    };
    RecordMapView.prototype.pushAliased = function () {
        var newItems = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            newItems[_i] = arguments[_i];
        }
        var k = newItems.length;
        var m = this._record._itemCount;
        var n = this._record._fieldCount;
        var oldArray = this._record._array;
        var newArray = new Array(Record.expand(m + k));
        if (oldArray !== null) {
            for (var i = 0; i < this._upper; i += 1) {
                newArray[i] = oldArray[i];
            }
            for (var i = this._upper; i < m; i += 1) {
                newArray[i + k] = oldArray[i];
            }
        }
        for (var i = 0; i < k; i += 1) {
            var newItem = Item.fromAny(newItems[i]);
            newArray[i + this._upper] = newItem;
            m += 1;
            if (newItem instanceof Item.Field) {
                n += 1;
            }
        }
        this._record._array = newArray;
        this._record._table = null;
        this._record._itemCount = m;
        this._record._fieldCount = n;
        this._record._flags &= ~Record.ALIASED;
        this._upper += k;
    };
    RecordMapView.prototype.pushMutable = function () {
        var newItems = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            newItems[_i] = arguments[_i];
        }
        var k = newItems.length;
        var m = this._record._itemCount;
        var n = this._record._fieldCount;
        var oldArray = this._record._array;
        var newArray;
        if (oldArray === null || m + k > oldArray.length) {
            newArray = new Array(Record.expand(m + k));
            if (oldArray !== null) {
                for (var i = 0; i < this._upper; i += 1) {
                    newArray[i] = oldArray[i];
                }
            }
        }
        else {
            newArray = oldArray;
        }
        for (var i = m - 1; i >= this._upper; i -= 1) {
            newArray[i + k] = oldArray[i];
        }
        for (var i = 0; i < k; i += 1) {
            var newItem = Item.fromAny(newItems[i]);
            newArray[i + this._upper] = newItem;
            m += 1;
            if (newItem instanceof Item.Field) {
                n += 1;
                this._record._table = null;
            }
        }
        this._record._array = newArray;
        this._record._itemCount = m;
        this._record._fieldCount = n;
        this._upper += k;
    };
    RecordMapView.prototype.splice = function (start, deleteCount) {
        if (deleteCount === void 0) { deleteCount = 0; }
        var newItems = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            newItems[_i - 2] = arguments[_i];
        }
        if ((this._record._flags & Record.IMMUTABLE) !== 0) {
            throw new Error('immutable');
        }
        var n = this.length;
        if (start < 0) {
            start = n + start;
        }
        start = Math.min(Math.max(0, start), n);
        deleteCount = Math.min(Math.max(0, deleteCount), n - start);
        var deleted;
        if ((this._record._flags & Record.ALIASED) !== 0) {
            deleted = (_a = this._record).spliceAliased.apply(_a, [this._lower + start, deleteCount].concat(newItems));
        }
        else {
            deleted = (_b = this._record).spliceMutable.apply(_b, [this._lower + start, deleteCount].concat(newItems));
        }
        this._upper += newItems.length - deleted.length;
        return deleted;
        var _a, _b;
    };
    RecordMapView.prototype.delete = function (key) {
        if ((this._record._flags & Record.IMMUTABLE) !== 0) {
            throw new Error('immutable');
        }
        key = Value.of(key);
        if ((this._record._flags & Record.ALIASED) !== 0) {
            return this.deleteAliased(key);
        }
        else {
            return this.deleteMutable(key);
        }
    };
    RecordMapView.prototype.deleteAliased = function (key) {
        var n = this._record._itemCount;
        var oldArray = this._record._array;
        var newArray = new Array(Record.expand(n));
        for (var i = this._lower; i < this._upper; i += 1) {
            var item = oldArray[i];
            if (item instanceof Item.Field && item.key.equals(key)) {
                for (var j = i + 1; j < n; j += 1, i += 1) {
                    newArray[i] = oldArray[j];
                }
                this._record._array = newArray;
                this._record._table = null;
                this._record._itemCount = n - 1;
                this._record._fieldCount -= 1;
                this._record._flags &= ~Record.ALIASED;
                this._upper -= 1;
                return item;
            }
            newArray[i] = item;
        }
        return Item.Absent;
    };
    RecordMapView.prototype.deleteMutable = function (key) {
        var n = this._record._itemCount;
        var array = this._record._array;
        for (var i = this._lower; i < this._upper; i += 1) {
            var item = array[i];
            if (item instanceof Item.Field && item.key.equals(key)) {
                for (var j = i + 1; j < n; j += 1, i += 1) {
                    array[i] = array[j];
                }
                array[n - 1] = undefined;
                this._record._table = null;
                this._record._itemCount -= 1;
                this._record._fieldCount -= 1;
                this._upper -= 1;
                return item;
            }
        }
        return Item.Absent;
    };
    RecordMapView.prototype.clear = function () {
        if ((this._record._flags & Record.IMMUTABLE) !== 0) {
            throw new Error('immutable');
        }
        if ((this._record._flags & Record.ALIASED) !== 0) {
            this.clearAliased();
        }
        else {
            this.clearMutable();
        }
    };
    RecordMapView.prototype.clearAliased = function () {
        var m = this._record._itemCount;
        var n = this._record._fieldCount;
        var l = m - this.length;
        var oldArray = this._record._array;
        var newArray = new Array(Record.expand(l));
        var i = 0;
        while (i < this._lower) {
            newArray[i] = oldArray[i];
            i += 1;
        }
        while (i < this._upper) {
            if (oldArray[i] instanceof Item.Field) {
                n -= 1;
            }
            i += 1;
        }
        i = this._lower;
        var j = this._upper;
        while (j < m) {
            newArray[i] = oldArray[j];
            i += 1;
            j += 1;
        }
        this._record._array = newArray;
        this._record._table = null;
        this._record._itemCount = l;
        this._record._fieldCount = n;
        this._record._flags &= ~Record.ALIASED;
        this._upper = this._lower;
    };
    RecordMapView.prototype.clearMutable = function () {
        var m = this._record._itemCount;
        var n = this._record._fieldCount;
        var array = this._record._array;
        var i = this._lower;
        while (i < this._upper) {
            if (array[i] instanceof Item.Field) {
                n -= 1;
            }
            i += 1;
        }
        i = this._lower;
        var j = this._upper;
        while (j < m) {
            var item = array[j];
            if (item instanceof Item.Field) {
                this._record._table = null;
            }
            array[i] = item;
            i += 1;
            j += 1;
        }
        this._record._itemCount = i;
        this._record._fieldCount = n;
        while (i < m) {
            array[i] = undefined;
            i += 1;
        }
        this._upper = this._lower;
    };
    RecordMapView.prototype.subRecord = function (lower, upper) {
        var n = this.length;
        if (lower === undefined) {
            lower = 0;
        }
        else if (lower < 0) {
            lower = n + lower;
        }
        lower = Math.min(Math.max(0, lower), n);
        if (upper === undefined) {
            upper = n;
        }
        else if (upper < 0) {
            upper = n + upper;
        }
        upper = Math.min(Math.max(lower, upper), n);
        return new RecordMapView(this._record, this._lower + lower, this._upper + upper);
    };
    RecordMapView.prototype.forEach = function (callback, thisArg) {
        var array = this._record._array;
        for (var i = this._lower, n = this._upper; i < n; i += 1) {
            var result = callback.call(thisArg, array[i], i);
            if (result !== undefined) {
                return result;
            }
        }
        return undefined;
    };
    RecordMapView.prototype.indexOf = function (item, index) {
        if (index === void 0) { index = 0; }
        item = Item.of(item);
        var array = this._record._array;
        var n = this.length;
        if (index < 0) {
            index = n + index;
        }
        index = this._lower + Math.max(0, index);
        while (index < this._upper) {
            if (item.equals(array[index])) {
                return index - this._lower;
            }
            index += 1;
        }
        return -1;
    };
    RecordMapView.prototype.lastIndexOf = function (item, index) {
        item = Item.of(item);
        var array = this._record._array;
        var n = this.length;
        if (index === undefined) {
            index = n - 1;
        }
        else if (index < 0) {
            index = n + index;
        }
        index = this._lower + Math.min(index, n - 1);
        while (index >= this._lower) {
            if (item.equals(array[index])) {
                return index - this._lower;
            }
            index -= 1;
        }
        return -1;
    };
    RecordMapView.prototype.isAliased = function () {
        return (this._record._flags & Record.ALIASED) !== 0;
    };
    RecordMapView.prototype.isMutable = function () {
        return (this._record._flags & Record.IMMUTABLE) === 0;
    };
    RecordMapView.prototype.alias = function () {
        this._record._flags |= Record.ALIASED;
    };
    RecordMapView.prototype.branch = function () {
        var m = this.length;
        var n = 0;
        var oldArray = this._record._array;
        var newArray = new Array(Record.expand(m));
        var i = this._lower;
        var j = 0;
        while (j < m) {
            var item = oldArray[i];
            newArray[j] = item;
            if (item instanceof Item.Field) {
                n += 1;
            }
            i += 1;
            j += 1;
        }
        return new RecordMap(newArray, null, m, n, 0);
    };
    RecordMapView.prototype.clone = function () {
        var m = this.length;
        var n = 0;
        var oldArray = this._record._array;
        var newArray = new Array(Record.expand(m));
        var i = this._lower;
        var j = 0;
        while (j < m) {
            var item = oldArray[i];
            newArray[j] = item.clone();
            if (item instanceof Item.Field) {
                n += 1;
            }
            i += 1;
            j += 1;
        }
        return new RecordMap(newArray, null, m, n, 0);
    };
    RecordMapView.prototype.commit = function () {
        this._record.commit();
        return this;
    };
    return RecordMapView;
}(Record));
RecordMap.View = RecordMapView;

var Text$1 = (function (_super) {
    __extends(Text, _super);
    function Text(value, flags) {
        var _this = _super.call(this) || this;
        _this._value = value;
        _this._flags = flags;
        return _this;
    }
    Object.defineProperty(Text.prototype, "value", {
        get: function () {
            return this._value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Text.prototype, "size", {
        get: function () {
            return this._value.length;
        },
        enumerable: true,
        configurable: true
    });
    Text.prototype.isIdent = function () {
        var cs = new StringInput(this._value);
        if (cs.isEmpty() || !Item.Recon.isIdentStartChar(cs.head())) {
            return false;
        }
        cs.step();
        while (!cs.isEmpty() && Item.Recon.isIdentChar(cs.head())) {
            cs.step();
        }
        return cs.isEmpty();
    };
    Text.prototype.isDone = function () {
        return false;
    };
    Text.prototype.isFull = function () {
        return false;
    };
    Text.prototype.push = function () {
        var cs = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            cs[_i] = arguments[_i];
        }
        if ((this._flags & Text.IMMUTABLE) !== 0) {
            throw new Error('immutable');
        }
        for (var i = 0, n = cs.length; i < n; i += 1) {
            var c = cs[i];
            if (typeof c === 'number') {
                if ((c >= 0x0000 && c <= 0xD7FF) || (c >= 0xE000 && c <= 0xFFFF)) {
                    this._value += String.fromCharCode(c);
                }
                else if (c >= 0x10000 && c <= 0x10FFFF) {
                    var u = c - 0x10000;
                    this._value += String.fromCharCode(0xD800 | (u >>> 10), 0xDC00 | (u & 0x3FF));
                }
                else {
                    this._value += String.fromCharCode(0xFFFD);
                }
            }
            else if (typeof c === 'string') {
                var cs_1 = new StringInput(c);
                while (!cs_1.isEmpty()) {
                    this.push(cs_1.head());
                    cs_1.step();
                }
            }
        }
    };
    Text.prototype.isMutable = function () {
        return (this._flags & Text.IMMUTABLE) === 0;
    };
    Text.prototype.branch = function () {
        return this.clone();
    };
    Text.prototype.clone = function () {
        return new Text(this._value, 0);
    };
    Text.prototype.commit = function () {
        this._flags |= Text.IMMUTABLE;
        return this;
    };
    Text.prototype.bind = function () {
        return this;
    };
    Text.prototype.stringValue = function () {
        return this._value;
    };
    Text.prototype.numberValue = function () {
        var value = +this._value;
        if (isFinite(value)) {
            return value;
        }
        return undefined;
    };
    Text.prototype.toAny = function () {
        return this._value;
    };
    Text.prototype.valueOf = function () {
        return this._value;
    };
    Text.prototype.writeRecon = function (output) {
        if (this.isIdent()) {
            Text.writeIdent(this._value, output);
        }
        else {
            Text.writeString(this._value, output);
        }
    };
    Text.writeIdent = function (s, output) {
        var cs = new StringInput(s);
        while (!cs.isEmpty()) {
            output.push(cs.head());
            cs.step();
        }
    };
    Text.writeString = function (s, output) {
        var cs = new StringInput(s);
        output.push(34);
        while (!cs.isEmpty()) {
            var c = cs.head();
            switch (c) {
                case 34:
                case 92:
                    output.push(92, c);
                    break;
                case 8:
                    output.push(92, 98);
                    break;
                case 12:
                    output.push(92, 102);
                    break;
                case 10:
                    output.push(92, 110);
                    break;
                case 13:
                    output.push(92, 114);
                    break;
                case 9:
                    output.push(92, 116);
                    break;
                default:
                    output.push(c);
            }
            cs.step();
        }
        output.push(34);
    };
    Text.writeMarkup = function (s, output) {
        var cs = new StringInput(s);
        while (!cs.isEmpty()) {
            var c = cs.head();
            switch (c) {
                case 36:
                case 64:
                case 91:
                case 92:
                case 93:
                case 123:
                case 125:
                    output.push(92, c);
                    break;
                case 8:
                    output.push(92, 98);
                    break;
                case 12:
                    output.push(92, 102);
                    break;
                case 10:
                    output.push(92, 110);
                    break;
                case 13:
                    output.push(92, 114);
                    break;
                case 9:
                    output.push(92, 116);
                    break;
                default:
                    output.push(c);
            }
            cs.step();
        }
    };
    Text.prototype.compare = function (that) {
        if (that instanceof Text) {
            var order = this._value.localeCompare(that._value);
            return order < 0 ? -1 : order > 0 ? 1 : 0;
        }
        else if (that instanceof Item.Field || that instanceof Item.Record
            || that instanceof Item.Data) {
            return 1;
        }
        else {
            return -1;
        }
    };
    Text.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof Text) {
            return this._value === that._value;
        }
        return false;
    };
    Text.prototype.hashCode = function () {
        return Murmur3.hash(this._value);
    };
    Text.prototype.toString = function () {
        return this._value;
    };
    Text.empty = function () {
        return new Text('', 0);
    };
    Text.valueOf = function (value) {
        if (value.length === 0) {
            return Text.Empty;
        }
        else {
            return new Text(value, Text.IMMUTABLE);
        }
    };
    Text.of = function (value) {
        if (value instanceof Text) {
            return value;
        }
        else if (typeof value === 'string') {
            return Text.valueOf(value);
        }
        else {
            throw new TypeError('' + value);
        }
    };
    Text.IMMUTABLE = 1;
    Text.Empty = new Text('', Text.IMMUTABLE);
    return Text;
}(Value));
Item.Text = Text$1;

var Num = (function (_super) {
    __extends(Num, _super);
    function Num(value) {
        var _this = _super.call(this) || this;
        _this._value = value;
        return _this;
    }
    Object.defineProperty(Num.prototype, "value", {
        get: function () {
            return this._value;
        },
        enumerable: true,
        configurable: true
    });
    Num.prototype.bor = function (that) {
        that = Item.of(that);
        if (that instanceof Item.Num) {
            return Num.valueOf(this.value | that.value);
        }
        return _super.prototype.bor.call(this, that);
    };
    Num.prototype.bxor = function (that) {
        that = Item.of(that);
        if (that instanceof Item.Num) {
            return Num.valueOf(this.value ^ that.value);
        }
        return _super.prototype.bxor.call(this, that);
    };
    Num.prototype.band = function (that) {
        that = Item.of(that);
        if (that instanceof Item.Num) {
            return Num.valueOf(this.value & that.value);
        }
        return _super.prototype.band.call(this, that);
    };
    Num.prototype.plus = function (that) {
        that = Item.of(that);
        if (that instanceof Item.Num) {
            return Num.valueOf(this.value + that.value);
        }
        return _super.prototype.plus.call(this, that);
    };
    Num.prototype.minus = function (that) {
        that = Item.of(that);
        if (that instanceof Item.Num) {
            return Num.valueOf(this.value - that.value);
        }
        return _super.prototype.minus.call(this, that);
    };
    Num.prototype.times = function (that) {
        that = Item.of(that);
        if (that instanceof Item.Num) {
            return Num.valueOf(this.value * that.value);
        }
        return _super.prototype.times.call(this, that);
    };
    Num.prototype.divide = function (that) {
        that = Item.of(that);
        if (that instanceof Item.Num) {
            return Num.valueOf(this.value / that.value);
        }
        return _super.prototype.divide.call(this, that);
    };
    Num.prototype.modulo = function (that) {
        that = Item.of(that);
        if (that instanceof Item.Num) {
            return Num.valueOf(this.value % that.value);
        }
        return _super.prototype.modulo.call(this, that);
    };
    Num.prototype.bnot = function () {
        return Num.valueOf(~this.value);
    };
    Num.prototype.neg = function () {
        return Num.valueOf(-this.value);
    };
    Num.prototype.pos = function () {
        return this;
    };
    Num.prototype.inv = function () {
        return Num.valueOf(1 / this.value);
    };
    Num.prototype.stringValue = function () {
        return '' + this._value;
    };
    Num.prototype.numberValue = function () {
        return this._value;
    };
    Num.prototype.toAny = function () {
        return this._value;
    };
    Num.prototype.valueOf = function () {
        return this._value;
    };
    Num.prototype.writeRecon = function (output) {
        var value = this._value;
        if (isFinite(value) && value === Math.floor(value)
            && value >= -2147483648 && value <= 2147483647) {
            return Num.writeInteger(value, output);
        }
        else {
            Item.Text.writeIdent(String(value), output);
        }
    };
    Num.writeInteger = function (value, output) {
        if (value < 0) {
            output.push(45);
            value = -value;
        }
        if (value < 10) {
            output.push(48 + value);
        }
        else {
            var digits = new Uint8Array(19);
            var i = 18;
            while (value !== 0) {
                digits[i] = value % 10;
                value = Math.floor(value / 10);
                i -= 1;
            }
            i += 1;
            while (i < 19) {
                output.push(48 + digits[i]);
                i += 1;
            }
        }
    };
    Num.prototype.compare = function (that) {
        if (that instanceof Num) {
            var x = this._value;
            var y = that._value;
            return x < y ? -1 : x > y ? 1 : 0;
        }
        else if (that instanceof Item.Field || that instanceof Item.Record
            || that instanceof Item.Data || that instanceof Item.Text) {
            return 1;
        }
        else {
            return -1;
        }
    };
    Num.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof Num) {
            return this._value === that._value;
        }
        return false;
    };
    Num.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(0x38AB4134, Murmur3.hash(this._value)));
    };
    Num.prototype.toString = function () {
        return this.toRecon();
    };
    Num.valueOf = function (value) {
        if (value === 0) {
            return Num.Zero;
        }
        else if (value === 1) {
            return Num.One;
        }
        else {
            return new Num(value);
        }
    };
    Num.of = function (value) {
        if (value instanceof Num) {
            return value;
        }
        else if (typeof value === 'number') {
            return Num.valueOf(value);
        }
        else {
            throw new TypeError('' + value);
        }
    };
    Num.Zero = new Num(0);
    Num.One = new Num(1);
    return Num;
}(Value));
Item.Num = Num;

var Bool = (function (_super) {
    __extends(Bool, _super);
    function Bool(value) {
        var _this = _super.call(this) || this;
        _this._value = value;
        return _this;
    }
    Object.defineProperty(Bool.prototype, "value", {
        get: function () {
            return this._value;
        },
        enumerable: true,
        configurable: true
    });
    Bool.prototype.or = function (that) {
        return this;
    };
    Bool.prototype.and = function (that) {
        return that;
    };
    Bool.prototype.not = function () {
        return this._value ? Value.False : Value.True;
    };
    Bool.prototype.stringValue = function () {
        return this._value ? 'true' : 'false';
    };
    Bool.prototype.booleanValue = function () {
        return this._value;
    };
    Bool.prototype.toAny = function () {
        return this._value;
    };
    Bool.prototype.valueOf = function () {
        return this._value;
    };
    Bool.prototype.writeRecon = function (output) {
        if (this._value) {
            output.push(116, 114, 117, 101);
        }
        else {
            output.push(102, 97, 108, 115, 101);
        }
    };
    Bool.prototype.toRecon = function () {
        return this._value ? 'true' : 'false';
    };
    Bool.prototype.toReconBlock = function () {
        return this._value ? 'true' : 'false';
    };
    Bool.prototype.compare = function (that) {
        if (that instanceof Bool) {
            if (this._value && !that._value) {
                return -1;
            }
            else if (!this._value && that._value) {
                return 1;
            }
            else {
                return 0;
            }
        }
        else if (that instanceof Item.Field || that instanceof Item.Record
            || that instanceof Item.Data || that instanceof Item.Text
            || that instanceof Item.Num) {
            return 1;
        }
        else {
            return -1;
        }
    };
    Bool.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof Bool) {
            return this._value === that._value;
        }
        return false;
    };
    Bool.prototype.hashCode = function () {
        return this._value ? 0x47DB14C7 : 0x9FE4B312;
    };
    Bool.prototype.toString = function () {
        return this.toRecon();
    };
    Bool.valueOf = function (value) {
        return value ? Bool.True : Bool.False;
    };
    Bool.of = function (value) {
        if (value instanceof Bool) {
            return value;
        }
        else if (typeof value === 'boolean') {
            return Bool.valueOf(value);
        }
        else {
            throw new TypeError('' + value);
        }
    };
    Bool.True = new Bool(true);
    Bool.False = new Bool(false);
    return Bool;
}(Value));
Item.Bool = Bool;
Item.True = Bool.True;
Item.False = Bool.False;
Value.True = Bool.True;
Value.False = Bool.False;

var DynamicValue = (function (_super) {
    __extends(DynamicValue, _super);
    function DynamicValue() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DynamicValue.prototype.cond = function (thenExpr, elseExpr) {
        thenExpr = Item.of(thenExpr);
        elseExpr = Item.of(elseExpr);
        return new Item.CondExpr(this, thenExpr, elseExpr);
    };
    DynamicValue.prototype.or = function (that) {
        that = Item.of(that);
        return new Item.LorExpr(this, that);
    };
    DynamicValue.prototype.and = function (that) {
        that = Item.of(that);
        return new Item.LandExpr(this, that);
    };
    DynamicValue.prototype.bor = function (that) {
        that = Item.of(that);
        return new Item.BorExpr(this, that);
    };
    DynamicValue.prototype.bxor = function (that) {
        that = Item.of(that);
        return new Item.BxorExpr(this, that);
    };
    DynamicValue.prototype.band = function (that) {
        that = Item.of(that);
        return new Item.BandExpr(this, that);
    };
    DynamicValue.prototype.lt = function (that) {
        that = Item.of(that);
        return new Item.LtExpr(this, that);
    };
    DynamicValue.prototype.le = function (that) {
        that = Item.of(that);
        return new Item.LeExpr(this, that);
    };
    DynamicValue.prototype.eq = function (that) {
        that = Item.of(that);
        return new Item.EqExpr(this, that);
    };
    DynamicValue.prototype.ne = function (that) {
        that = Item.of(that);
        return new Item.NeExpr(this, that);
    };
    DynamicValue.prototype.ge = function (that) {
        that = Item.of(that);
        return new Item.GeExpr(this, that);
    };
    DynamicValue.prototype.gt = function (that) {
        that = Item.of(that);
        return new Item.GtExpr(this, that);
    };
    DynamicValue.prototype.plus = function (that) {
        that = Item.of(that);
        return new Item.AddExpr(this, that);
    };
    DynamicValue.prototype.minus = function (that) {
        that = Item.of(that);
        return new Item.SubExpr(this, that);
    };
    DynamicValue.prototype.times = function (that) {
        that = Item.of(that);
        return new Item.MulExpr(this, that);
    };
    DynamicValue.prototype.divide = function (that) {
        that = Item.of(that);
        return new Item.DivExpr(this, that);
    };
    DynamicValue.prototype.modulo = function (that) {
        that = Item.of(that);
        return new Item.ModExpr(this, that);
    };
    DynamicValue.prototype.not = function () {
        return new Item.LnotExpr(this);
    };
    DynamicValue.prototype.bnot = function () {
        return new Item.BnotExpr(this);
    };
    DynamicValue.prototype.neg = function () {
        return new Item.NegExpr(this);
    };
    DynamicValue.prototype.pos = function () {
        return new Item.PosExpr(this);
    };
    DynamicValue.prototype.inv = function () {
        return new Item.DivExpr(Item.Num.One, this);
    };
    DynamicValue.prototype.toAny = function () {
        return this;
    };
    return DynamicValue;
}(Value));
Item.DynamicValue = DynamicValue;

var Selector = (function (_super) {
    __extends(Selector, _super);
    function Selector() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Selector.prototype.evaluate = function (stack) {
        stack = EvalStack.fromAny(stack);
        var selected = Value.empty();
        this.forSelected(stack, function (stack) {
            var item = stack.peek();
            if (item) {
                selected.push(item);
            }
        }, this);
        return selected.isEmpty() ? Value.Absent : selected.flattened();
    };
    Selector.prototype.update = function (stack, newItem) {
        stack = EvalStack.fromAny(stack);
        return this.mapSelected(stack, function (stack) {
            return stack.peek() || Item.Absent;
        }, this);
    };
    Selector.prototype.remove = function (stack) {
        stack = EvalStack.fromAny(stack);
        return this.mapSelected(stack, function (stack) {
            return Item.Absent;
        }, this);
    };
    Selector.prototype.get = function (key) {
        key = Value.of(key);
        return this.andThen(new GetSelector(key));
    };
    Selector.prototype.getAttr = function (key) {
        key = Item.Text.of(key);
        return this.andThen(new GetAttrSelector(key));
    };
    Selector.prototype.getItem = function (index) {
        index = Item.Num.of(index);
        return this.andThen(new GetItemSelector(index));
    };
    Selector.prototype.keys = function () {
        return this.andThen(Selector.Keys);
    };
    Selector.prototype.children = function () {
        return this.andThen(Selector.Children);
    };
    Selector.prototype.descendants = function () {
        return this.andThen(Selector.Descendants);
    };
    Selector.prototype.invoke = function (args) {
        return new Item.InvokeExpr(this, args);
    };
    Selector.prototype.filter = function (predicate) {
        if (arguments.length === 0) {
            return new FilterSelector(this);
        }
        else {
            predicate = Item.of(predicate);
            return this.andThen(predicate.filter());
        }
    };
    Object.defineProperty(Selector.prototype, "precedence", {
        get: function () {
            return 10;
        },
        enumerable: true,
        configurable: true
    });
    Selector.prototype.writeRecon = function (output) {
        this.writeThen(output);
    };
    Selector.prototype.compare = function (that) {
        if (that instanceof Selector) {
            return 0;
        }
        else if (that instanceof Item.Func || that instanceof Item.Expr
            || that === Value.Extant || that === Value.Absent) {
            return -1;
        }
        else {
            return 1;
        }
    };
    Selector.prototype.toString = function () {
        return this.toRecon();
    };
    Selector.literal = function (item) {
        item = Item.of(item);
        if (!(item instanceof Selector)) {
            item = new LiteralSelector(item);
        }
        return item;
    };
    Selector.get = function (key) {
        key = Value.of(key);
        return new GetSelector(key, true);
    };
    Selector.getAttr = function (key) {
        key = Item.Text.of(key);
        return new GetAttrSelector(key, true);
    };
    Selector.getItem = function (index) {
        index = Item.Num.of(index);
        return new GetItemSelector(index);
    };
    Selector.Identity = undefined;
    Selector.Keys = undefined;
    Selector.Children = undefined;
    Selector.Descendants = undefined;
    return Selector;
}(DynamicValue));
Item.Selector = Selector;
var IdentitySelector = (function (_super) {
    __extends(IdentitySelector, _super);
    function IdentitySelector() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    IdentitySelector.prototype.forSelected = function (stack, callback, thisArg) {
        var selected;
        if (!stack.isEmpty()) {
            var oldItem = stack.pop();
            var newItem = oldItem.evaluate(stack);
            stack.push(newItem);
            selected = callback.call(thisArg, stack);
            stack.replace(oldItem);
        }
        return selected;
    };
    IdentitySelector.prototype.mapSelected = function (stack, transform, thisArg) {
        return transform.call(thisArg, stack);
    };
    IdentitySelector.prototype.substitute = function (stack) {
        stack = EvalStack.fromAny(stack);
        return stack.item().substitute(stack);
    };
    IdentitySelector.prototype.get = function (key) {
        key = Value.of(key);
        return this.andThen(new GetSelector(key, true));
    };
    IdentitySelector.prototype.getAttr = function (key) {
        key = Item.Text.of(key);
        return this.andThen(new GetAttrSelector(key, true));
    };
    IdentitySelector.prototype.andThen = function (then) {
        return then;
    };
    IdentitySelector.prototype.writeRecon = function (output) {
    };
    IdentitySelector.prototype.writeThen = function (output) {
    };
    IdentitySelector.prototype.toRecon = function () {
        return '';
    };
    IdentitySelector.prototype.clone = function () {
        return this;
    };
    IdentitySelector.prototype.equals = function (that) {
        return that instanceof IdentitySelector;
    };
    IdentitySelector.prototype.hashCode = function () {
        return 0xB29D0DFC;
    };
    return IdentitySelector;
}(Selector));
Selector.Identity = new IdentitySelector();
Item.IdentitySelector = IdentitySelector;
var LiteralSelector = (function (_super) {
    __extends(LiteralSelector, _super);
    function LiteralSelector(item, then) {
        if (then === void 0) { then = Selector.Identity; }
        var _this = _super.call(this) || this;
        _this._item = item.commit();
        _this.then = then;
        return _this;
    }
    LiteralSelector.prototype.forSelected = function (stack, callback, thisArg) {
        var selected;
        if (!stack.isEmpty()) {
            var literal = this._item.evaluate(stack);
            if (literal.isDefined()) {
                stack.push(literal);
                selected = this.then.forSelected(stack, callback, thisArg);
                stack.pop();
            }
        }
        return selected;
    };
    LiteralSelector.prototype.mapSelected = function (stack, transform, thisArg) {
        if (!stack.isEmpty()) {
            var literal = this._item.substitute(stack);
            if (literal.isDefined()) {
                stack.push(literal);
                literal = this.then.mapSelected(stack, transform, thisArg);
                stack.pop();
            }
            return stack.item();
        }
        return Item.Absent;
    };
    LiteralSelector.prototype.substitute = function (stack) {
        stack = EvalStack.fromAny(stack);
        var item = this._item.substitute(stack);
        var then = this.then.substitute(stack);
        if (!(then instanceof Selector)) {
            then = this.then;
        }
        return new LiteralSelector(item, then);
    };
    LiteralSelector.prototype.andThen = function (then) {
        return new LiteralSelector(this._item, this.then.andThen(then));
    };
    Object.defineProperty(LiteralSelector.prototype, "precedence", {
        get: function () {
            return this._item.precedence;
        },
        enumerable: true,
        configurable: true
    });
    LiteralSelector.prototype.writeRecon = function (output) {
        if (this._item.precedence < this.then.precedence) {
            output.push(40);
            this._item.writeRecon(output);
            output.push(41);
        }
        else {
            this._item.writeRecon(output);
        }
        this.then.writeThen(output);
    };
    LiteralSelector.prototype.writeThen = function (output) {
    };
    LiteralSelector.prototype.clone = function () {
        return new LiteralSelector(this._item.clone(), this.then.clone());
    };
    LiteralSelector.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof LiteralSelector) {
            return this._item.equals(that._item) && this.then.equals(that.then);
        }
        return false;
    };
    LiteralSelector.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(Murmur3.mix(0x9754A8EF, this._item.hashCode()), this.then.hashCode()));
    };
    return LiteralSelector;
}(Selector));
Item.LiteralSelector = LiteralSelector;
var GetSelector = (function (_super) {
    __extends(GetSelector, _super);
    function GetSelector(key, top, then) {
        if (top === void 0) { top = false; }
        if (then === void 0) { then = Selector.Identity; }
        var _this = _super.call(this) || this;
        _this._key = key.commit();
        _this._top = top;
        _this.then = then;
        return _this;
    }
    GetSelector.prototype.forSelected = function (stack, callback, thisArg) {
        var key = this._key.evaluate(stack).toValue();
        for (var i = stack.size - 1; i >= 0; i -= 1) {
            var frame = stack.getItem(i).toValue();
            if (frame instanceof Item.Record) {
                var value = frame.get(key);
                if (value.isDefined()) {
                    stack.push(value);
                    var selected = this.then.forSelected(stack, callback, thisArg);
                    stack.pop();
                    return selected;
                }
            }
        }
        return undefined;
    };
    GetSelector.prototype.mapSelected = function (stack, transform, thisArg) {
        var key = this._key.substitute(stack).toValue();
        if (!stack.isEmpty()) {
            var frame = stack.item().toValue();
            if (frame instanceof Item.Record) {
                var oldValue = frame.get(key);
                stack.push(oldValue);
                var newItem = this.then.mapSelected(stack, transform, thisArg);
                stack.pop();
                if (newItem.isDefined()) {
                    frame.set(this._key, newItem.toValue());
                }
                else {
                    frame.delete(this._key);
                }
            }
            return stack.item();
        }
        return Item.Absent;
    };
    GetSelector.prototype.substitute = function (stack) {
        stack = EvalStack.fromAny(stack);
        var key = this._key.evaluate(stack).toValue();
        for (var i = stack.size - 1; i >= 0; i -= 1) {
            var frame = stack.getItem(i).toValue();
            if (frame instanceof Item.Record) {
                var value = frame.get(key);
                if (value.isDefined()) {
                    return value.substitute(stack);
                }
            }
        }
        var then = this.then.substitute(stack);
        if (!(then instanceof Selector)) {
            then = this.then;
        }
        return new GetSelector(this._key, this._top, then);
    };
    GetSelector.prototype.andThen = function (then) {
        return new GetSelector(this._key, this._top, this.then.andThen(then));
    };
    GetSelector.prototype.writeRecon = function (output) {
        output.push(36);
        if (this._key instanceof Item.Record) {
            output.push(123);
            this._key.writeReconBlock(output);
            output.push(125);
        }
        else {
            this._key.writeRecon(output);
        }
        this.then.writeThen(output);
    };
    GetSelector.prototype.writeThen = function (output) {
        output.push(46);
        if (this._key instanceof Item.Record) {
            output.push(123);
            this._key.writeReconBlock(output);
            output.push(125);
        }
        else {
            this._key.writeRecon(output);
        }
        this.then.writeThen(output);
    };
    GetSelector.prototype.clone = function () {
        return new GetSelector(this._key.clone(), this._top, this.then.clone());
    };
    GetSelector.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof GetSelector) {
            return this._key.equals(that._key) && this._top === that._top && this.then.equals(that.then);
        }
        return false;
    };
    GetSelector.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(Murmur3.mix(Murmur3.mix(0xE02DF528, this._key.hashCode()), this._top ? 1 : 0), this.then.hashCode()));
    };
    return GetSelector;
}(Selector));
Item.GetSelector = GetSelector;
var GetAttrSelector = (function (_super) {
    __extends(GetAttrSelector, _super);
    function GetAttrSelector(key, top, then) {
        if (top === void 0) { top = false; }
        if (then === void 0) { then = Selector.Identity; }
        var _this = _super.call(this) || this;
        _this._key = key.commit();
        _this._top = top;
        _this.then = then;
        return _this;
    }
    GetAttrSelector.prototype.forSelected = function (stack, callback, thisArg) {
        for (var i = stack.size - 1; i >= 0; i -= 1) {
            var frame = stack.getItem(i).toValue();
            if (frame instanceof Item.Record) {
                var value = frame.getAttr(this._key);
                if (value.isDefined()) {
                    stack.push(value);
                    var selected = this.then.forSelected(stack, callback, thisArg);
                    stack.pop();
                    return selected;
                }
            }
        }
        return undefined;
    };
    GetAttrSelector.prototype.mapSelected = function (stack, transform, thisArg) {
        if (!stack.isEmpty()) {
            var frame = stack.item().toValue();
            if (frame instanceof Item.Record) {
                var oldValue = frame.getAttr(this._key);
                stack.push(oldValue);
                var newItem = this.then.mapSelected(stack, transform, thisArg);
                stack.pop();
                if (newItem.isDefined()) {
                    frame.setAttr(this._key, newItem.toValue());
                }
                else {
                    frame.delete(this._key);
                }
            }
            return stack.item();
        }
        return Item.Absent;
    };
    GetAttrSelector.prototype.substitute = function (stack) {
        stack = EvalStack.fromAny(stack);
        var key = this._key.substitute(stack).toValue();
        if (!(key instanceof Text$1)) {
            key = this._key;
        }
        var then = this.then.substitute(stack);
        if (!(then instanceof Selector)) {
            then = this.then;
        }
        return new GetAttrSelector(key, this._top, then);
    };
    GetAttrSelector.prototype.andThen = function (then) {
        return new GetAttrSelector(this._key, this._top, this.then.andThen(then));
    };
    GetAttrSelector.prototype.writeRecon = function (output) {
        output.push(36);
        output.push(64);
        this._key.writeRecon(output);
        this.then.writeThen(output);
    };
    GetAttrSelector.prototype.writeThen = function (output) {
        output.push(46);
        output.push(64);
        this._key.writeRecon(output);
        this.then.writeThen(output);
    };
    GetAttrSelector.prototype.clone = function () {
        return new GetAttrSelector(this._key.clone(), this._top, this.then.clone());
    };
    GetAttrSelector.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof GetAttrSelector) {
            return this._key.equals(that._key) && this._top === that._top && this.then.equals(that.then);
        }
        return false;
    };
    GetAttrSelector.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(Murmur3.mix(Murmur3.mix(0x5DFA8D5E, this._key.hashCode()), this._top ? 1 : 0), this.then.hashCode()));
    };
    return GetAttrSelector;
}(Selector));
Item.GetAttrSelector = GetAttrSelector;
var GetItemSelector = (function (_super) {
    __extends(GetItemSelector, _super);
    function GetItemSelector(index, then) {
        if (then === void 0) { then = Selector.Identity; }
        var _this = _super.call(this) || this;
        _this._index = index;
        _this.then = then;
        return _this;
    }
    GetItemSelector.prototype.forSelected = function (stack, callback, thisArg) {
        if (!stack.isEmpty()) {
            var frame = stack.item().toValue();
            var index = this._index.numberValue();
            if (frame instanceof Item.Record && index < frame.length) {
                var item = frame.getItem(index);
                stack.push(item);
                var selected = this.then.forSelected(stack, callback, thisArg);
                stack.pop();
                return selected;
            }
        }
        return undefined;
    };
    GetItemSelector.prototype.mapSelected = function (stack, transform, thisArg) {
        if (!stack.isEmpty()) {
            var frame = stack.item().toValue();
            var index = this._index.numberValue();
            if (frame instanceof Item.Record && index < frame.length) {
                var oldItem = frame.getItem(index);
                stack.push(oldItem);
                var newItem = this.then.mapSelected(stack, transform, thisArg);
                stack.pop();
                if (newItem.isDefined()) {
                    frame.setItem(index, newItem);
                }
                else {
                    frame.splice(index, 1);
                }
            }
            return stack.item();
        }
        return Item.Absent;
    };
    GetItemSelector.prototype.substitute = function (stack) {
        stack = EvalStack.fromAny(stack);
        var then = this.then.substitute(stack);
        if (!(then instanceof Selector)) {
            then = this.then;
        }
        return new GetItemSelector(this._index, then);
    };
    GetItemSelector.prototype.andThen = function (then) {
        return new GetItemSelector(this._index, this.then.andThen(then));
    };
    GetItemSelector.prototype.writeRecon = function (output) {
        output.push(36);
        this.writeThen(output);
    };
    GetItemSelector.prototype.writeThen = function (output) {
        output.push(35);
        this._index.writeRecon(output);
        this.then.writeThen(output);
    };
    GetItemSelector.prototype.clone = function () {
        return new GetItemSelector(this._index, this.then.clone());
    };
    GetItemSelector.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof GetItemSelector) {
            return this._index.equals(that._index) && this.then.equals(that.then);
        }
        return false;
    };
    GetItemSelector.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(Murmur3.mix(0x8009D65D, this._index.hashCode()), this.then.hashCode()));
    };
    return GetItemSelector;
}(Selector));
Item.GetItemSelector = GetItemSelector;
var KeysSelector = (function (_super) {
    __extends(KeysSelector, _super);
    function KeysSelector(then) {
        if (then === void 0) { then = Selector.Identity; }
        var _this = _super.call(this) || this;
        _this.then = then;
        return _this;
    }
    KeysSelector.prototype.forSelected = function (stack, callback, thisArg) {
        var selected;
        if (!stack.isEmpty()) {
            var frame = stack.pop();
            if (frame instanceof Item.Field) {
                stack.push(frame.key);
                selected = this.then.forSelected(stack, callback, thisArg);
                stack.pop();
            }
            else if (frame instanceof Item.Record) {
                selected = frame.forEach(function (item) {
                    var selected;
                    if (item instanceof Item.Field) {
                        stack.push(item.key);
                        selected = this.then.forSelected(stack, callback, thisArg);
                        stack.pop();
                    }
                    return selected;
                }, this);
            }
            stack.push(frame);
        }
        return selected;
    };
    KeysSelector.prototype.mapSelected = function (stack, transform, thisArg) {
        if (!stack.isEmpty()) {
            var frame = stack.pop();
            if (frame instanceof Item.Field) {
                var oldKey = frame.key;
                stack.push(oldKey);
                var newKey = this.then.mapSelected(stack, transform, thisArg);
                stack.pop();
                if (newKey.isDefined() && newKey instanceof Item.Value) {
                    if (newKey !== oldKey) {
                        if (frame instanceof Item.Attr && newKey instanceof Item.Text) {
                            frame = Item.Attr.of(newKey, frame.value);
                        }
                        else {
                            frame = Item.Slot.of(newKey, frame.value);
                        }
                    }
                }
                else {
                    frame = Item.Absent;
                }
            }
            else if (frame instanceof Item.Record) {
                var items = frame.iterator();
                while (items.hasNext()) {
                    var item = items.next().value;
                    if (item instanceof Item.Field) {
                        var oldKey = item.key;
                        stack.push(oldKey);
                        var newKey = this.then.mapSelected(stack, transform, thisArg);
                        stack.pop();
                        if (newKey.isDefined() && newKey instanceof Item.Value) {
                            if (newKey !== oldKey) {
                                if (item instanceof Item.Attr && newKey instanceof Item.Text) {
                                    items.set(Item.Attr.of(newKey, item.value));
                                }
                                else {
                                    items.set(Item.Slot.of(newKey, item.value));
                                }
                            }
                        }
                        else {
                            items.delete();
                        }
                    }
                }
            }
            stack.push(frame);
            return frame;
        }
        return Item.Absent;
    };
    KeysSelector.prototype.substitute = function (stack) {
        stack = EvalStack.fromAny(stack);
        var then = this.then.substitute(stack);
        if (!(then instanceof Selector)) {
            then = this.then;
        }
        return new KeysSelector(then);
    };
    KeysSelector.prototype.andThen = function (then) {
        return new KeysSelector(this.then.andThen(then));
    };
    KeysSelector.prototype.writeRecon = function (output) {
        output.push(36);
        output.push(42);
        output.push(58);
        this.then.writeThen(output);
    };
    KeysSelector.prototype.writeThen = function (output) {
        output.push(46);
        output.push(42);
        output.push(58);
        this.then.writeThen(output);
    };
    KeysSelector.prototype.clone = function () {
        return new KeysSelector(this.then.clone());
    };
    KeysSelector.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof KeysSelector) {
            return this.then.equals(that.then);
        }
        return false;
    };
    KeysSelector.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(0xA0D3933A, this.then.hashCode()));
    };
    return KeysSelector;
}(Selector));
Selector.Keys = new KeysSelector();
Item.KeysSelector = KeysSelector;
var ChildrenSelector = (function (_super) {
    __extends(ChildrenSelector, _super);
    function ChildrenSelector(then) {
        if (then === void 0) { then = Selector.Identity; }
        var _this = _super.call(this) || this;
        _this.then = then;
        return _this;
    }
    ChildrenSelector.prototype.forSelected = function (stack, callback, thisArg) {
        var selected;
        if (!stack.isEmpty()) {
            var frame = stack.pop();
            if (frame.toValue() instanceof Item.Record) {
                selected = frame.toValue().forEach(function (item) {
                    stack.push(item);
                    var selected = this.then.forSelected(stack, callback, thisArg);
                    stack.pop();
                    return selected;
                }, this);
            }
            stack.push(frame);
        }
        return selected;
    };
    ChildrenSelector.prototype.mapSelected = function (stack, transform, thisArg) {
        if (!stack.isEmpty()) {
            var frame = stack.pop();
            if (frame.toValue() instanceof Item.Record) {
                var items = frame.toValue().iterator();
                while (items.hasNext()) {
                    var oldItem = items.next().value;
                    stack.push(oldItem);
                    var newItem = this.then.mapSelected(stack, transform, thisArg);
                    stack.pop();
                    if (newItem.isDefined()) {
                        if (newItem !== oldItem) {
                            items.set(newItem);
                        }
                    }
                    else {
                        items.delete();
                    }
                }
            }
            stack.push(frame);
            return frame;
        }
        return Item.Absent;
    };
    ChildrenSelector.prototype.substitute = function (stack) {
        stack = EvalStack.fromAny(stack);
        var then = this.then.substitute(stack);
        if (!(then instanceof Selector)) {
            then = this.then;
        }
        return new ChildrenSelector(then);
    };
    ChildrenSelector.prototype.andThen = function (then) {
        return new ChildrenSelector(this.then.andThen(then));
    };
    ChildrenSelector.prototype.writeRecon = function (output) {
        output.push(36);
        output.push(42);
        this.then.writeThen(output);
    };
    ChildrenSelector.prototype.writeThen = function (output) {
        output.push(46);
        output.push(42);
        this.then.writeThen(output);
    };
    ChildrenSelector.prototype.clone = function () {
        return new ChildrenSelector(this.then.clone());
    };
    ChildrenSelector.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof ChildrenSelector) {
            return this.then.equals(that.then);
        }
        return false;
    };
    ChildrenSelector.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(0x0273131C, this.then.hashCode()));
    };
    return ChildrenSelector;
}(Selector));
Selector.Children = new ChildrenSelector();
Item.ChildrenSelector = ChildrenSelector;
var DescendantsSelector = (function (_super) {
    __extends(DescendantsSelector, _super);
    function DescendantsSelector(then) {
        if (then === void 0) { then = Selector.Identity; }
        var _this = _super.call(this) || this;
        _this.then = then;
        return _this;
    }
    DescendantsSelector.prototype.forSelected = function (stack, callback, thisArg) {
        var selected;
        if (!stack.isEmpty()) {
            var frame = stack.pop();
            if (frame.toValue() instanceof Item.Record) {
                selected = frame.toValue().forEach(function (item) {
                    stack.push(item);
                    var selected = this.then.forSelected(stack, callback, thisArg);
                    if (selected === undefined) {
                        this.forSelected(stack, callback, thisArg);
                    }
                    stack.pop();
                    return selected;
                }, this);
            }
            stack.push(frame);
        }
        return selected;
    };
    DescendantsSelector.prototype.mapSelected = function (stack, transform, thisArg) {
        if (!stack.isEmpty()) {
            var frame = stack.pop();
            if (frame.toValue() instanceof Item.Record) {
                var items = frame.toValue().iterator();
                while (items.hasNext()) {
                    var oldItem = items.next().value;
                    stack.push(oldItem);
                    var newItem = this.then.mapSelected(stack, transform, thisArg);
                    if (newItem.isDefined()) {
                        newItem = this.mapSelected(stack, transform, thisArg);
                    }
                    stack.pop();
                    if (newItem.isDefined()) {
                        if (newItem !== oldItem) {
                            items.set(newItem);
                        }
                    }
                    else {
                        items.delete();
                    }
                }
            }
            stack.push(frame);
            return frame;
        }
        return Item.Absent;
    };
    DescendantsSelector.prototype.substitute = function (stack) {
        stack = EvalStack.fromAny(stack);
        var then = this.then.substitute(stack);
        if (!(then instanceof Selector)) {
            then = this.then;
        }
        return new DescendantsSelector(then);
    };
    DescendantsSelector.prototype.andThen = function (then) {
        return new DescendantsSelector(this.then.andThen(then));
    };
    DescendantsSelector.prototype.writeRecon = function (output) {
        output.push(36);
        output.push(42);
        output.push(42);
        this.then.writeThen(output);
    };
    DescendantsSelector.prototype.writeThen = function (output) {
        output.push(46);
        output.push(42);
        output.push(42);
        this.then.writeThen(output);
    };
    DescendantsSelector.prototype.clone = function () {
        return new DescendantsSelector(this.then.clone());
    };
    DescendantsSelector.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof DescendantsSelector) {
            return this.then.equals(that.then);
        }
        return false;
    };
    DescendantsSelector.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(0x294FD08C, this.then.hashCode()));
    };
    return DescendantsSelector;
}(Selector));
Selector.Descendants = new DescendantsSelector();
Item.DescendantsSelector = DescendantsSelector;
var FilterSelector = (function (_super) {
    __extends(FilterSelector, _super);
    function FilterSelector(predicate, then) {
        if (then === void 0) { then = Selector.Identity; }
        var _this = _super.call(this) || this;
        _this.predicate = predicate;
        _this.then = then;
        return _this;
    }
    FilterSelector.prototype.forSelected = function (stack, callback, thisArg) {
        var selected;
        if (!stack.isEmpty()) {
            if (this.filterSelected(stack)) {
                selected = this.then.forSelected(stack, callback, thisArg);
            }
        }
        return selected;
    };
    FilterSelector.prototype.mapSelected = function (stack, transform, thisArg) {
        if (!stack.isEmpty()) {
            if (this.filterSelected(stack)) {
                return this.then.mapSelected(stack, transform, thisArg);
            }
            return stack.item();
        }
        return Item.Absent;
    };
    FilterSelector.prototype.filterSelected = function (stack) {
        return this.predicate.forSelected(stack, this.selected, this) !== undefined;
    };
    FilterSelector.prototype.selected = function (stack) {
        return null;
    };
    FilterSelector.prototype.filter = function (predicate) {
        if (arguments.length === 0) {
            return this;
        }
        else {
            predicate = Item.of(predicate);
            return this.andThen(predicate.filter());
        }
    };
    FilterSelector.prototype.substitute = function (stack) {
        stack = EvalStack.fromAny(stack);
        var predicate = this.predicate.substitute(stack);
        if (!(predicate instanceof Selector)) {
            predicate = this.predicate;
        }
        var then = this.then.substitute(stack);
        if (!(then instanceof Selector)) {
            then = this.then;
        }
        return new FilterSelector(predicate, then);
    };
    FilterSelector.prototype.andThen = function (then) {
        return new FilterSelector(this.predicate, this.then.andThen(then));
    };
    FilterSelector.prototype.writeRecon = function (output) {
        output.push(36);
        this.writeThen(output);
    };
    FilterSelector.prototype.writeThen = function (output) {
        output.push(91);
        this.predicate.writeRecon(output);
        output.push(93);
        this.then.writeThen(output);
    };
    FilterSelector.prototype.clone = function () {
        return new FilterSelector(this.predicate.clone(), this.then.clone());
    };
    FilterSelector.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof FilterSelector) {
            return this.predicate.equals(that.predicate) && this.then.equals(that.then);
        }
        return false;
    };
    FilterSelector.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(Murmur3.mix(0x3A88E158, this.predicate.hashCode()), this.then.hashCode()));
    };
    return FilterSelector;
}(Selector));
Item.FilterSelector = FilterSelector;

var Func = (function (_super) {
    __extends(Func, _super);
    function Func() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Func.prototype.partialInvoke = function (args, stack, expr) {
        return undefined;
    };
    Func.prototype.toAny = function () {
        return this;
    };
    Func.prototype.writeRecon = function (output) {
    };
    Func.prototype.toRecon = function () {
        return '';
    };
    Func.prototype.toReconBlock = function () {
        return '';
    };
    Func.prototype.compare = function (that) {
        if (that instanceof Func) {
            var order = this.name.localeCompare(that.name);
            return order < 0 ? -1 : order > 0 ? 1 : 0;
        }
        else if (that instanceof Item.Expr || that === Value.Extant || that === Value.Absent) {
            return -1;
        }
        else {
            return 1;
        }
    };
    Func.prototype.equals = function (that) {
        if (that instanceof Func) {
            return this.name === that.name;
        }
        return false;
    };
    Func.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(0xB58EA7B4, Murmur3.hash(this.name)));
    };
    Func.prototype.toString = function () {
        return '[' + 'Func' + ' ' + this.name + ']';
    };
    Func.Eager = undefined;
    Func.Abs = undefined;
    Func.Ceil = undefined;
    Func.Floor = undefined;
    Func.Round = undefined;
    Func.Pow = undefined;
    Func.Sqrt = undefined;
    Func.Max = undefined;
    Func.Min = undefined;
    Func.Count = undefined;
    Func.Random = undefined;
    Func.Rate = undefined;
    Func.Percent = undefined;
    Func.Number = undefined;
    Func.String = undefined;
    Func.ConsoleLog = undefined;
    return Func;
}(Value));
Item.Func = Func;
var EagerFunc = (function (_super) {
    __extends(EagerFunc, _super);
    function EagerFunc() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(EagerFunc.prototype, "name", {
        get: function () {
            return 'eager';
        },
        enumerable: true,
        configurable: true
    });
    EagerFunc.prototype.invoke = function (args, stack) {
        return args.evaluate(stack);
    };
    EagerFunc.prototype.partialInvoke = function (args, stack, expr) {
        return args.evaluate(stack);
    };
    return EagerFunc;
}(Func));
Func.Eager = new EagerFunc();
var AbsFunc = (function (_super) {
    __extends(AbsFunc, _super);
    function AbsFunc() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(AbsFunc.prototype, "name", {
        get: function () {
            return 'abs';
        },
        enumerable: true,
        configurable: true
    });
    AbsFunc.prototype.invoke = function (args, stack) {
        args = args.evaluate(stack).toValue();
        var x = args.numberValue();
        if (x !== undefined) {
            return Item.Num.valueOf(Math.abs(x));
        }
        return Value.Absent;
    };
    return AbsFunc;
}(Func));
Func.Abs = new AbsFunc();
var CeilFunc = (function (_super) {
    __extends(CeilFunc, _super);
    function CeilFunc() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(CeilFunc.prototype, "name", {
        get: function () {
            return 'ceil';
        },
        enumerable: true,
        configurable: true
    });
    CeilFunc.prototype.invoke = function (args, stack) {
        args = args.evaluate(stack).toValue();
        var x = args.numberValue();
        if (x !== undefined) {
            return Item.Num.valueOf(Math.ceil(x));
        }
        return Value.Absent;
    };
    return CeilFunc;
}(Func));
Func.Ceil = new CeilFunc();
var FloorFunc = (function (_super) {
    __extends(FloorFunc, _super);
    function FloorFunc() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(FloorFunc.prototype, "name", {
        get: function () {
            return 'floor';
        },
        enumerable: true,
        configurable: true
    });
    FloorFunc.prototype.invoke = function (args, stack) {
        args = args.evaluate(stack).toValue();
        var x = args.numberValue();
        if (x !== undefined) {
            return Item.Num.valueOf(Math.floor(x));
        }
        return Value.Absent;
    };
    return FloorFunc;
}(Func));
Func.Floor = new FloorFunc();
var RoundFunc = (function (_super) {
    __extends(RoundFunc, _super);
    function RoundFunc() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(RoundFunc.prototype, "name", {
        get: function () {
            return 'round';
        },
        enumerable: true,
        configurable: true
    });
    RoundFunc.prototype.invoke = function (args, stack) {
        args = args.evaluate(stack).toValue();
        var x = args.numberValue();
        if (x !== undefined) {
            return Item.Num.valueOf(Math.round(x));
        }
        return Value.Absent;
    };
    return RoundFunc;
}(Func));
Func.Round = new RoundFunc();
var PowFunc = (function (_super) {
    __extends(PowFunc, _super);
    function PowFunc() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(PowFunc.prototype, "name", {
        get: function () {
            return 'pow';
        },
        enumerable: true,
        configurable: true
    });
    PowFunc.prototype.invoke = function (args, stack, expr) {
        var x = args.getItem(0).evaluate(stack).numberValue();
        var y = args.getItem(1).evaluate(stack).numberValue();
        if (x !== undefined && y !== undefined) {
            return Item.Num.valueOf(Math.pow(x, y));
        }
        return Value.Absent;
    };
    return PowFunc;
}(Func));
Func.Pow = new PowFunc();
var SqrtFunc = (function (_super) {
    __extends(SqrtFunc, _super);
    function SqrtFunc() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(SqrtFunc.prototype, "name", {
        get: function () {
            return 'sqrt';
        },
        enumerable: true,
        configurable: true
    });
    SqrtFunc.prototype.invoke = function (args, stack) {
        args = args.evaluate(stack).toValue();
        var x = args.numberValue();
        if (x !== undefined) {
            return Item.Num.valueOf(Math.sqrt(x));
        }
        return Value.Absent;
    };
    return SqrtFunc;
}(Func));
Func.Sqrt = new SqrtFunc();
var MaxFunc = (function (_super) {
    __extends(MaxFunc, _super);
    function MaxFunc() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(MaxFunc.prototype, "name", {
        get: function () {
            return 'max';
        },
        enumerable: true,
        configurable: true
    });
    MaxFunc.prototype.invoke = function (args, stack, expr) {
        var x;
        var y;
        if (args.length >= 2) {
            x = args.getItem(0).evaluate(stack).numberValue();
            y = args.getItem(1).evaluate(stack).numberValue();
        }
        else {
            x = args.evaluate(stack).numberValue();
        }
        if (x !== undefined && isFinite(x)) {
            expr.state = expr.state || {};
            if (y === undefined) {
                y = Math.max(x, expr.state.nax || x);
                expr.state.nax = y;
            }
            if (y !== undefined && isFinite(y)) {
                return Item.Num.valueOf(Math.max(x, y));
            }
        }
        return Value.Absent;
    };
    MaxFunc.prototype.partialInvoke = function (args, stack, expr) {
        if (args.length === 1) {
            args = args.evaluate(stack).toValue();
            return this.invoke(args, stack, expr);
        }
        return undefined;
    };
    return MaxFunc;
}(Func));
Func.Max = new MaxFunc();
var MinFunc = (function (_super) {
    __extends(MinFunc, _super);
    function MinFunc() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(MinFunc.prototype, "name", {
        get: function () {
            return 'min';
        },
        enumerable: true,
        configurable: true
    });
    MinFunc.prototype.invoke = function (args, stack, expr) {
        var x;
        var y;
        if (args.length >= 2) {
            x = args.getItem(0).evaluate(stack).numberValue();
            y = args.getItem(1).evaluate(stack).numberValue();
        }
        else {
            x = args.evaluate(stack).numberValue();
        }
        if (x !== undefined && isFinite(x)) {
            expr.state = expr.state || {};
            if (y === undefined) {
                y = Math.min(x, expr.state.min || x);
                expr.state.min = y;
            }
            if (y !== undefined && isFinite(y)) {
                return Item.Num.valueOf(Math.min(x, y));
            }
        }
        return Value.Absent;
    };
    MinFunc.prototype.partialInvoke = function (args, stack, expr) {
        if (args.length === 1) {
            args = args.evaluate(stack).toValue();
            return this.invoke(args, stack, expr);
        }
        return undefined;
    };
    return MinFunc;
}(Func));
Func.Min = new MinFunc();
var CountFunc = (function (_super) {
    __extends(CountFunc, _super);
    function CountFunc() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(CountFunc.prototype, "name", {
        get: function () {
            return 'count';
        },
        enumerable: true,
        configurable: true
    });
    CountFunc.prototype.invoke = function (args, stack, expr) {
        if (args instanceof Selector) {
            var count_1 = 0;
            args.forSelected(stack, function (stack) {
                count_1 += 1;
            }, this);
            return Item.Num.valueOf(count_1);
        }
        else if (args instanceof Record) {
            return Item.Num.valueOf(args.length);
        }
        return Value.Absent;
    };
    return CountFunc;
}(Func));
Func.Count = new CountFunc();
var PercentFunc = (function (_super) {
    __extends(PercentFunc, _super);
    function PercentFunc() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(PercentFunc.prototype, "name", {
        get: function () {
            return 'percent';
        },
        enumerable: true,
        configurable: true
    });
    PercentFunc.prototype.invoke = function (args, stack, expr) {
        var value;
        var total;
        if (args.length >= 2) {
            value = args.getItem(0).evaluate(stack).numberValue();
            total = args.getItem(1).evaluate(stack).numberValue();
        }
        else {
            value = args.evaluate(stack).numberValue();
        }
        if (value !== undefined && isFinite(value)) {
            expr.state = expr.state || {};
            if (total === undefined) {
                total = Math.max(value, expr.state.total || value);
                expr.state.total = total;
            }
            if (total !== 0 && isFinite(total)) {
                return Item.Text.valueOf(Math.round(100 * value / total) + '%');
            }
        }
        return Value.Absent;
    };
    PercentFunc.prototype.partialInvoke = function (args, stack, expr) {
        if (args.length === 1) {
            args = args.evaluate(stack).toValue();
            return this.invoke(args, stack, expr);
        }
        return undefined;
    };
    return PercentFunc;
}(Func));
Func.Percent = new PercentFunc();
var RandomFunc = (function (_super) {
    __extends(RandomFunc, _super);
    function RandomFunc() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(RandomFunc.prototype, "name", {
        get: function () {
            return 'random';
        },
        enumerable: true,
        configurable: true
    });
    RandomFunc.prototype.invoke = function (args, stack) {
        var lower = args.length >= 1 ? args.getItem(0).evaluate(stack).numberValue(0) : 0;
        var upper = args.length >= 2 ? args.getItem(1).evaluate(stack).numberValue(lower + 1) : lower + 1;
        var value = lower + Math.random() * (upper - lower);
        return Item.Num.valueOf(value);
    };
    return RandomFunc;
}(Func));
Func.Random = new RandomFunc();
var RateFunc = (function (_super) {
    __extends(RateFunc, _super);
    function RateFunc() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(RateFunc.prototype, "name", {
        get: function () {
            return 'rate';
        },
        enumerable: true,
        configurable: true
    });
    RateFunc.prototype.invoke = function (args, stack, expr) {
        var value;
        var period;
        if (args.length >= 2) {
            value = args.getItem(0).evaluate(stack).numberValue();
            period = args.getItem(1).evaluate(stack).numberValue();
        }
        else {
            value = args.evaluate(stack).numberValue();
        }
        if (value !== undefined && isFinite(value)) {
            expr.state = expr.state || {};
            if (period === undefined) {
                period = 1000;
            }
            if (expr.state.t0 === undefined) {
                expr.state.t0 = Date.now();
                expr.state.v0 = value;
            }
            else {
                var t1 = Date.now();
                var dt = t1 - expr.state.t0;
                if (dt > period && t1 > expr.state.t0 || dt > 2 * period) {
                    var dv = value - expr.state.v0;
                    expr.state.t0 = t1;
                    expr.state.v0 = value;
                    expr.state.dt = dt;
                    expr.state.dv = dv;
                }
                if (expr.state.dt !== undefined) {
                    var rate = period * expr.state.dv / (expr.state.dt || 1);
                    return Item.Num.valueOf(rate);
                }
            }
        }
        return Value.Absent;
    };
    RateFunc.prototype.partialInvoke = function (args, stack, expr) {
        args = args.evaluate(stack).toValue();
        return this.invoke(args, stack, expr);
    };
    return RateFunc;
}(Func));
Func.Rate = new RateFunc();
var NumberFunc = (function (_super) {
    __extends(NumberFunc, _super);
    function NumberFunc() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(NumberFunc.prototype, "name", {
        get: function () {
            return 'number';
        },
        enumerable: true,
        configurable: true
    });
    NumberFunc.prototype.invoke = function (args, stack) {
        args = args.evaluate(stack).toValue();
        if (args instanceof Item.Num) {
            return args;
        }
        else {
            var x = args.numberValue();
            if (x !== undefined) {
                return Item.Num.valueOf(x);
            }
        }
        return Value.Absent;
    };
    return NumberFunc;
}(Func));
Func.Number = new NumberFunc();
var StringFunc = (function (_super) {
    __extends(StringFunc, _super);
    function StringFunc() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(StringFunc.prototype, "name", {
        get: function () {
            return 'string';
        },
        enumerable: true,
        configurable: true
    });
    StringFunc.prototype.invoke = function (args, stack) {
        args = args.evaluate(stack).toValue();
        if (args instanceof Item.Text) {
            return args;
        }
        else {
            var s = args.stringValue();
            if (s !== undefined) {
                return Item.Text.valueOf(s);
            }
        }
        return Value.Absent;
    };
    return StringFunc;
}(Func));
Func.String = new StringFunc();
var ConsoleLogFunc = (function (_super) {
    __extends(ConsoleLogFunc, _super);
    function ConsoleLogFunc() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(ConsoleLogFunc.prototype, "name", {
        get: function () {
            return 'console.log';
        },
        enumerable: true,
        configurable: true
    });
    ConsoleLogFunc.prototype.invoke = function (args, stack) {
        args = args.evaluate(stack).toValue();
        console.log(args.toAny());
        return Item.Absent;
    };
    return ConsoleLogFunc;
}(Func));
Func.ConsoleLog = new ConsoleLogFunc();
Item.GlobalScope = Value.empty()
    .slot('eager', Func.Eager)
    .slot('abs', Func.Abs)
    .slot('ceil', Func.Ceil)
    .slot('floor', Func.Floor)
    .slot('round', Func.Round)
    .slot('pow', Func.Pow)
    .slot('sqrt', Func.Sqrt)
    .slot('max', Func.Max)
    .slot('min', Func.Min)
    .slot('count', Func.Count)
    .slot('random', Func.Random)
    .slot('rate', Func.Rate)
    .slot('percent', Func.Percent)
    .slot('number', Func.Number)
    .slot('string', Func.String)
    .slot('console', Value.empty()
    .slot('log', Func.ConsoleLog))
    .slot('log', Func.ConsoleLog)
    .commit();
EvalStack.GlobalScope = Item.GlobalScope;

var Expr = (function (_super) {
    __extends(Expr, _super);
    function Expr() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Expr.prototype.compare = function (that) {
        if (that instanceof Expr) {
            return 0;
        }
        else if (that === Value.Extant || that === Value.Absent) {
            return -1;
        }
        else {
            return 1;
        }
    };
    Expr.prototype.toString = function () {
        return this.toRecon();
    };
    return Expr;
}(DynamicValue));
Item.Expr = Expr;
var InfixExpr = (function (_super) {
    __extends(InfixExpr, _super);
    function InfixExpr(lhs, rhs) {
        var _this = _super.call(this) || this;
        _this.lhs = lhs.commit();
        _this.rhs = rhs.commit();
        return _this;
    }
    InfixExpr.prototype.writeRecon = function (output) {
        if (this.lhs.precedence < this.precedence) {
            output.push(40);
            this.lhs.writeRecon(output);
            output.push(41);
        }
        else {
            this.lhs.writeRecon(output);
        }
        output.push(32);
        Item.Text.writeIdent(this.operator, output);
        output.push(32);
        if (this.rhs.precedence < this.precedence) {
            output.push(40);
            this.rhs.writeRecon(output);
            output.push(41);
        }
        else {
            this.rhs.writeRecon(output);
        }
    };
    return InfixExpr;
}(Expr));
var PrefixExpr = (function (_super) {
    __extends(PrefixExpr, _super);
    function PrefixExpr(rhs) {
        var _this = _super.call(this) || this;
        _this.rhs = rhs.commit();
        return _this;
    }
    PrefixExpr.prototype.writeRecon = function (output) {
        Item.Text.writeIdent(this.operator, output);
        if (this.rhs.precedence < this.precedence) {
            output.push(40);
            this.rhs.writeRecon(output);
            output.push(41);
        }
        else {
            this.rhs.writeRecon(output);
        }
    };
    return PrefixExpr;
}(Expr));
var CondExpr = (function (_super) {
    __extends(CondExpr, _super);
    function CondExpr(predExpr, thenExpr, elseExpr) {
        var _this = _super.call(this) || this;
        _this.predExpr = predExpr.commit();
        _this.thenExpr = thenExpr.commit();
        _this.elseExpr = elseExpr.commit();
        return _this;
    }
    Object.defineProperty(CondExpr.prototype, "precedence", {
        get: function () {
            return 1;
        },
        enumerable: true,
        configurable: true
    });
    CondExpr.prototype.evaluate = function (stack) {
        stack = EvalStack.fromAny(stack);
        var predValue = this.predExpr.evaluate(stack);
        if (predValue.isDefined()) {
            var thenValue = this.thenExpr.evaluate(stack);
            return thenValue;
        }
        else {
            var elseValue = this.elseExpr.evaluate(stack);
            return elseValue;
        }
    };
    CondExpr.prototype.substitute = function (stack) {
        stack = EvalStack.fromAny(stack);
        var predExpr = this.predExpr.substitute(stack).toValue();
        var thenExpr = this.thenExpr.substitute(stack).toValue();
        var elseExpr = this.elseExpr.substitute(stack).toValue();
        return new CondExpr(predExpr, thenExpr, elseExpr);
    };
    CondExpr.prototype.writeRecon = function (output) {
        if (this.predExpr instanceof CondExpr) {
            output.push(40);
            this.predExpr.writeRecon(output);
            output.push(41);
        }
        else {
            this.predExpr.writeRecon(output);
        }
        output.push(32);
        output.push(63);
        output.push(32);
        this.thenExpr.writeRecon(output);
        output.push(32);
        output.push(58);
        output.push(32);
        this.elseExpr.writeRecon(output);
    };
    CondExpr.prototype.clone = function () {
        return new CondExpr(this.predExpr.clone(), this.thenExpr.clone(), this.elseExpr.clone());
    };
    CondExpr.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof CondExpr) {
            return this.predExpr.equals(that.predExpr) && this.thenExpr.equals(that.thenExpr)
                && this.elseExpr.equals(that.elseExpr);
        }
        return false;
    };
    CondExpr.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(Murmur3.mix(Murmur3.mix(0xA01D34F1, this.predExpr.hashCode()), this.thenExpr.hashCode()), this.elseExpr.hashCode()));
    };
    return CondExpr;
}(Expr));
Item.CondExpr = CondExpr;
var LorExpr = (function (_super) {
    __extends(LorExpr, _super);
    function LorExpr(lhs, rhs) {
        return _super.call(this, lhs, rhs) || this;
    }
    Object.defineProperty(LorExpr.prototype, "operator", {
        get: function () {
            return '||';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LorExpr.prototype, "precedence", {
        get: function () {
            return 2;
        },
        enumerable: true,
        configurable: true
    });
    LorExpr.prototype.evaluate = function (stack) {
        stack = EvalStack.fromAny(stack);
        var lvalue = this.lhs.evaluate(stack);
        if (lvalue.isDefined()) {
            return lvalue;
        }
        else {
            var rvalue = this.rhs.evaluate(stack);
            return rvalue;
        }
    };
    LorExpr.prototype.substitute = function (stack) {
        stack = EvalStack.fromAny(stack);
        var lvalue = this.lhs.substitute(stack);
        var rvalue = this.rhs.substitute(stack);
        return lvalue.or(rvalue);
    };
    LorExpr.prototype.clone = function () {
        return new LorExpr(this.lhs.clone(), this.rhs.clone());
    };
    LorExpr.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof LorExpr) {
            return this.lhs.equals(that.lhs) && this.rhs.equals(that.rhs);
        }
        return false;
    };
    LorExpr.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(Murmur3.mix(0xA425A728, this.lhs.hashCode()), this.rhs.hashCode()));
    };
    return LorExpr;
}(InfixExpr));
Item.LorExpr = LorExpr;
var LandExpr = (function (_super) {
    __extends(LandExpr, _super);
    function LandExpr(lhs, rhs) {
        return _super.call(this, lhs, rhs) || this;
    }
    Object.defineProperty(LandExpr.prototype, "operator", {
        get: function () {
            return '&&';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LandExpr.prototype, "precedence", {
        get: function () {
            return 3;
        },
        enumerable: true,
        configurable: true
    });
    LandExpr.prototype.evaluate = function (stack) {
        stack = EvalStack.fromAny(stack);
        var lvalue = this.lhs.evaluate(stack);
        if (lvalue.isDefined()) {
            var rvalue = this.rhs.evaluate(stack);
            return rvalue;
        }
        else {
            return lvalue;
        }
    };
    LandExpr.prototype.substitute = function (stack) {
        stack = EvalStack.fromAny(stack);
        var lvalue = this.lhs.substitute(stack);
        var rvalue = this.rhs.substitute(stack);
        return lvalue.and(rvalue);
    };
    LandExpr.prototype.clone = function () {
        return new LandExpr(this.lhs.clone(), this.rhs.clone());
    };
    LandExpr.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof LandExpr) {
            return this.lhs.equals(that.lhs) && this.rhs.equals(that.rhs);
        }
        return false;
    };
    LandExpr.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(Murmur3.mix(0xB4CCC7B9, this.lhs.hashCode()), this.rhs.hashCode()));
    };
    return LandExpr;
}(InfixExpr));
Item.LandExpr = LandExpr;
var BorExpr = (function (_super) {
    __extends(BorExpr, _super);
    function BorExpr(lhs, rhs) {
        return _super.call(this, lhs, rhs) || this;
    }
    Object.defineProperty(BorExpr.prototype, "operator", {
        get: function () {
            return '|';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BorExpr.prototype, "precedence", {
        get: function () {
            return 4;
        },
        enumerable: true,
        configurable: true
    });
    BorExpr.prototype.evaluate = function (stack) {
        stack = EvalStack.fromAny(stack);
        var lvalue = this.lhs.evaluate(stack);
        var rvalue = this.rhs.evaluate(stack);
        return lvalue.bor(rvalue);
    };
    BorExpr.prototype.substitute = function (stack) {
        stack = EvalStack.fromAny(stack);
        var lvalue = this.lhs.substitute(stack);
        var rvalue = this.rhs.substitute(stack);
        return lvalue.bor(rvalue);
    };
    BorExpr.prototype.clone = function () {
        return new BorExpr(this.lhs.clone(), this.rhs.clone());
    };
    BorExpr.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof BorExpr) {
            return this.lhs.equals(that.lhs) && this.rhs.equals(that.rhs);
        }
        return false;
    };
    BorExpr.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(Murmur3.mix(0xAFE940A7, this.lhs.hashCode()), this.rhs.hashCode()));
    };
    return BorExpr;
}(InfixExpr));
Item.BorExpr = BorExpr;
var BxorExpr = (function (_super) {
    __extends(BxorExpr, _super);
    function BxorExpr(lhs, rhs) {
        return _super.call(this, lhs, rhs) || this;
    }
    Object.defineProperty(BxorExpr.prototype, "operator", {
        get: function () {
            return '^';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BxorExpr.prototype, "precedence", {
        get: function () {
            return 5;
        },
        enumerable: true,
        configurable: true
    });
    BxorExpr.prototype.evaluate = function (stack) {
        stack = EvalStack.fromAny(stack);
        var lvalue = this.lhs.evaluate(stack);
        var rvalue = this.rhs.evaluate(stack);
        return lvalue.bxor(rvalue);
    };
    BxorExpr.prototype.substitute = function (stack) {
        stack = EvalStack.fromAny(stack);
        var lvalue = this.lhs.substitute(stack);
        var rvalue = this.rhs.substitute(stack);
        return lvalue.bxor(rvalue);
    };
    BxorExpr.prototype.clone = function () {
        return new BxorExpr(this.lhs.clone(), this.rhs.clone());
    };
    BxorExpr.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof BxorExpr) {
            return this.lhs.equals(that.lhs) && this.rhs.equals(that.rhs);
        }
        return false;
    };
    BxorExpr.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(Murmur3.mix(0x9680D943, this.lhs.hashCode()), this.rhs.hashCode()));
    };
    return BxorExpr;
}(InfixExpr));
Item.BxorExpr = BxorExpr;
var BandExpr = (function (_super) {
    __extends(BandExpr, _super);
    function BandExpr(lhs, rhs) {
        return _super.call(this, lhs, rhs) || this;
    }
    Object.defineProperty(BandExpr.prototype, "operator", {
        get: function () {
            return '&';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BandExpr.prototype, "precedence", {
        get: function () {
            return 6;
        },
        enumerable: true,
        configurable: true
    });
    BandExpr.prototype.evaluate = function (stack) {
        stack = EvalStack.fromAny(stack);
        var lvalue = this.lhs.evaluate(stack);
        var rvalue = this.rhs.evaluate(stack);
        return lvalue.band(rvalue);
    };
    BandExpr.prototype.substitute = function (stack) {
        stack = EvalStack.fromAny(stack);
        var lvalue = this.lhs.substitute(stack);
        var rvalue = this.rhs.substitute(stack);
        return lvalue.band(rvalue);
    };
    BandExpr.prototype.clone = function () {
        return new BandExpr(this.lhs.clone(), this.rhs.clone());
    };
    BandExpr.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof BandExpr) {
            return this.lhs.equals(that.lhs) && this.rhs.equals(that.rhs);
        }
        return false;
    };
    BandExpr.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(Murmur3.mix(0x6849F7D0, this.lhs.hashCode()), this.rhs.hashCode()));
    };
    return BandExpr;
}(InfixExpr));
Item.BandExpr = BandExpr;
var LtExpr = (function (_super) {
    __extends(LtExpr, _super);
    function LtExpr(lhs, rhs) {
        return _super.call(this, lhs, rhs) || this;
    }
    Object.defineProperty(LtExpr.prototype, "operator", {
        get: function () {
            return '<';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LtExpr.prototype, "precedence", {
        get: function () {
            return 0;
        },
        enumerable: true,
        configurable: true
    });
    LtExpr.prototype.evaluate = function (stack) {
        stack = EvalStack.fromAny(stack);
        var lvalue = this.lhs.evaluate(stack);
        var rvalue = this.rhs.evaluate(stack);
        return lvalue.lt(rvalue);
    };
    LtExpr.prototype.substitute = function (stack) {
        stack = EvalStack.fromAny(stack);
        var lvalue = this.lhs.substitute(stack);
        var rvalue = this.rhs.substitute(stack);
        return lvalue.lt(rvalue);
    };
    LtExpr.prototype.clone = function () {
        return new LtExpr(this.lhs.clone(), this.rhs.clone());
    };
    LtExpr.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof LtExpr) {
            return this.lhs.equals(that.lhs) && this.rhs.equals(that.rhs);
        }
        return false;
    };
    LtExpr.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(Murmur3.mix(0x39A4927F, this.lhs.hashCode()), this.rhs.hashCode()));
    };
    return LtExpr;
}(InfixExpr));
Item.LtExpr = LtExpr;
var LeExpr = (function (_super) {
    __extends(LeExpr, _super);
    function LeExpr(lhs, rhs) {
        return _super.call(this, lhs, rhs) || this;
    }
    Object.defineProperty(LeExpr.prototype, "operator", {
        get: function () {
            return '<=';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LeExpr.prototype, "precedence", {
        get: function () {
            return 0;
        },
        enumerable: true,
        configurable: true
    });
    LeExpr.prototype.evaluate = function (stack) {
        stack = EvalStack.fromAny(stack);
        var lvalue = this.lhs.evaluate(stack);
        var rvalue = this.rhs.evaluate(stack);
        return lvalue.le(rvalue);
    };
    LeExpr.prototype.substitute = function (stack) {
        stack = EvalStack.fromAny(stack);
        var lvalue = this.lhs.substitute(stack);
        var rvalue = this.rhs.substitute(stack);
        return lvalue.le(rvalue);
    };
    LeExpr.prototype.clone = function () {
        return new LeExpr(this.lhs.clone(), this.rhs.clone());
    };
    LeExpr.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof LeExpr) {
            return this.lhs.equals(that.lhs) && this.rhs.equals(that.rhs);
        }
        return false;
    };
    LeExpr.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(Murmur3.mix(0x62DD658C, this.lhs.hashCode()), this.rhs.hashCode()));
    };
    return LeExpr;
}(InfixExpr));
Item.LeExpr = LeExpr;
var EqExpr = (function (_super) {
    __extends(EqExpr, _super);
    function EqExpr(lhs, rhs) {
        return _super.call(this, lhs, rhs) || this;
    }
    Object.defineProperty(EqExpr.prototype, "operator", {
        get: function () {
            return '==';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EqExpr.prototype, "precedence", {
        get: function () {
            return 0;
        },
        enumerable: true,
        configurable: true
    });
    EqExpr.prototype.evaluate = function (stack) {
        stack = EvalStack.fromAny(stack);
        var lvalue = this.lhs.evaluate(stack);
        var rvalue = this.rhs.evaluate(stack);
        return lvalue.eq(rvalue);
    };
    EqExpr.prototype.substitute = function (stack) {
        stack = EvalStack.fromAny(stack);
        var lvalue = this.lhs.substitute(stack);
        var rvalue = this.rhs.substitute(stack);
        return lvalue.eq(rvalue);
    };
    EqExpr.prototype.clone = function () {
        return new EqExpr(this.lhs.clone(), this.rhs.clone());
    };
    EqExpr.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof EqExpr) {
            return this.lhs.equals(that.lhs) && this.rhs.equals(that.rhs);
        }
        return false;
    };
    EqExpr.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(Murmur3.mix(0x09007838, this.lhs.hashCode()), this.rhs.hashCode()));
    };
    return EqExpr;
}(InfixExpr));
Item.EqExpr = EqExpr;
var NeExpr = (function (_super) {
    __extends(NeExpr, _super);
    function NeExpr(lhs, rhs) {
        return _super.call(this, lhs, rhs) || this;
    }
    Object.defineProperty(NeExpr.prototype, "operator", {
        get: function () {
            return '!=';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NeExpr.prototype, "precedence", {
        get: function () {
            return 0;
        },
        enumerable: true,
        configurable: true
    });
    NeExpr.prototype.evaluate = function (stack) {
        stack = EvalStack.fromAny(stack);
        var lvalue = this.lhs.evaluate(stack);
        var rvalue = this.rhs.evaluate(stack);
        return lvalue.ne(rvalue);
    };
    NeExpr.prototype.substitute = function (stack) {
        stack = EvalStack.fromAny(stack);
        var lvalue = this.lhs.substitute(stack);
        var rvalue = this.rhs.substitute(stack);
        return lvalue.ne(rvalue);
    };
    NeExpr.prototype.clone = function () {
        return new NeExpr(this.lhs.clone(), this.rhs.clone());
    };
    NeExpr.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof NeExpr) {
            return this.lhs.equals(that.lhs) && this.rhs.equals(that.rhs);
        }
        return false;
    };
    NeExpr.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(Murmur3.mix(0xCAB339BA, this.lhs.hashCode()), this.rhs.hashCode()));
    };
    return NeExpr;
}(InfixExpr));
Item.NeExpr = NeExpr;
var GeExpr = (function (_super) {
    __extends(GeExpr, _super);
    function GeExpr(lhs, rhs) {
        return _super.call(this, lhs, rhs) || this;
    }
    Object.defineProperty(GeExpr.prototype, "operator", {
        get: function () {
            return '>=';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GeExpr.prototype, "precedence", {
        get: function () {
            return 0;
        },
        enumerable: true,
        configurable: true
    });
    GeExpr.prototype.evaluate = function (stack) {
        stack = EvalStack.fromAny(stack);
        var lvalue = this.lhs.evaluate(stack);
        var rvalue = this.rhs.evaluate(stack);
        return lvalue.ge(rvalue);
    };
    GeExpr.prototype.substitute = function (stack) {
        stack = EvalStack.fromAny(stack);
        var lvalue = this.lhs.substitute(stack);
        var rvalue = this.rhs.substitute(stack);
        return lvalue.ge(rvalue);
    };
    GeExpr.prototype.clone = function () {
        return new GeExpr(this.lhs.clone(), this.rhs.clone());
    };
    GeExpr.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof GeExpr) {
            return this.lhs.equals(that.lhs) && this.rhs.equals(that.rhs);
        }
        return false;
    };
    GeExpr.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(Murmur3.mix(0x2100DA05, this.lhs.hashCode()), this.rhs.hashCode()));
    };
    return GeExpr;
}(InfixExpr));
Item.GeExpr = GeExpr;
var GtExpr = (function (_super) {
    __extends(GtExpr, _super);
    function GtExpr(lhs, rhs) {
        return _super.call(this, lhs, rhs) || this;
    }
    Object.defineProperty(GtExpr.prototype, "operator", {
        get: function () {
            return '>';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GtExpr.prototype, "precedence", {
        get: function () {
            return 0;
        },
        enumerable: true,
        configurable: true
    });
    GtExpr.prototype.evaluate = function (stack) {
        stack = EvalStack.fromAny(stack);
        var lvalue = this.lhs.evaluate(stack);
        var rvalue = this.rhs.evaluate(stack);
        return lvalue.gt(rvalue);
    };
    GtExpr.prototype.substitute = function (stack) {
        stack = EvalStack.fromAny(stack);
        var lvalue = this.lhs.substitute(stack);
        var rvalue = this.rhs.substitute(stack);
        return lvalue.gt(rvalue);
    };
    GtExpr.prototype.clone = function () {
        return new GtExpr(this.lhs.clone(), this.rhs.clone());
    };
    GtExpr.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof GtExpr) {
            return this.lhs.equals(that.lhs) && this.rhs.equals(that.rhs);
        }
        return false;
    };
    GtExpr.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(Murmur3.mix(0x8E6240B5, this.lhs.hashCode()), this.rhs.hashCode()));
    };
    return GtExpr;
}(InfixExpr));
Item.GtExpr = GtExpr;
var AddExpr = (function (_super) {
    __extends(AddExpr, _super);
    function AddExpr(lhs, rhs) {
        return _super.call(this, lhs, rhs) || this;
    }
    Object.defineProperty(AddExpr.prototype, "operator", {
        get: function () {
            return '+';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AddExpr.prototype, "precedence", {
        get: function () {
            return 7;
        },
        enumerable: true,
        configurable: true
    });
    AddExpr.prototype.evaluate = function (stack) {
        stack = EvalStack.fromAny(stack);
        var lvalue = this.lhs.evaluate(stack);
        var rvalue = this.rhs.evaluate(stack);
        return lvalue.plus(rvalue);
    };
    AddExpr.prototype.substitute = function (stack) {
        stack = EvalStack.fromAny(stack);
        var lvalue = this.lhs.substitute(stack);
        var rvalue = this.rhs.substitute(stack);
        return lvalue.plus(rvalue);
    };
    AddExpr.prototype.clone = function () {
        return new AddExpr(this.lhs.clone(), this.rhs.clone());
    };
    AddExpr.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof AddExpr) {
            return this.lhs.equals(that.lhs) && this.rhs.equals(that.rhs);
        }
        return false;
    };
    AddExpr.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(Murmur3.mix(0xBB5AB088, this.lhs.hashCode()), this.rhs.hashCode()));
    };
    return AddExpr;
}(InfixExpr));
Item.AddExpr = AddExpr;
var SubExpr = (function (_super) {
    __extends(SubExpr, _super);
    function SubExpr(lhs, rhs) {
        return _super.call(this, lhs, rhs) || this;
    }
    Object.defineProperty(SubExpr.prototype, "operator", {
        get: function () {
            return '-';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SubExpr.prototype, "precedence", {
        get: function () {
            return 7;
        },
        enumerable: true,
        configurable: true
    });
    SubExpr.prototype.evaluate = function (stack) {
        stack = EvalStack.fromAny(stack);
        var lvalue = this.lhs.evaluate(stack);
        var rvalue = this.rhs.evaluate(stack);
        return lvalue.minus(rvalue);
    };
    SubExpr.prototype.substitute = function (stack) {
        stack = EvalStack.fromAny(stack);
        var lvalue = this.lhs.substitute(stack);
        var rvalue = this.rhs.substitute(stack);
        return lvalue.minus(rvalue);
    };
    SubExpr.prototype.clone = function () {
        return new SubExpr(this.lhs.clone(), this.rhs.clone());
    };
    SubExpr.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof SubExpr) {
            return this.lhs.equals(that.lhs) && this.rhs.equals(that.rhs);
        }
        return false;
    };
    SubExpr.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(Murmur3.mix(0x775F2746, this.lhs.hashCode()), this.rhs.hashCode()));
    };
    return SubExpr;
}(InfixExpr));
Item.SubExpr = SubExpr;
var MulExpr = (function (_super) {
    __extends(MulExpr, _super);
    function MulExpr(lhs, rhs) {
        return _super.call(this, lhs, rhs) || this;
    }
    Object.defineProperty(MulExpr.prototype, "operator", {
        get: function () {
            return '*';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MulExpr.prototype, "precedence", {
        get: function () {
            return 8;
        },
        enumerable: true,
        configurable: true
    });
    MulExpr.prototype.evaluate = function (stack) {
        stack = EvalStack.fromAny(stack);
        var lvalue = this.lhs.evaluate(stack);
        var rvalue = this.rhs.evaluate(stack);
        return lvalue.times(rvalue);
    };
    MulExpr.prototype.substitute = function (stack) {
        stack = EvalStack.fromAny(stack);
        var lvalue = this.lhs.substitute(stack);
        var rvalue = this.rhs.substitute(stack);
        return lvalue.times(rvalue);
    };
    MulExpr.prototype.clone = function () {
        return new MulExpr(this.lhs.clone(), this.rhs.clone());
    };
    MulExpr.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof MulExpr) {
            return this.lhs.equals(that.lhs) && this.rhs.equals(that.rhs);
        }
        return false;
    };
    MulExpr.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(Murmur3.mix(0xD19ED189, this.lhs.hashCode()), this.rhs.hashCode()));
    };
    return MulExpr;
}(InfixExpr));
Item.MulExpr = MulExpr;
var DivExpr = (function (_super) {
    __extends(DivExpr, _super);
    function DivExpr(lhs, rhs) {
        return _super.call(this, lhs, rhs) || this;
    }
    Object.defineProperty(DivExpr.prototype, "operator", {
        get: function () {
            return '/';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DivExpr.prototype, "precedence", {
        get: function () {
            return 8;
        },
        enumerable: true,
        configurable: true
    });
    DivExpr.prototype.evaluate = function (stack) {
        stack = EvalStack.fromAny(stack);
        var lvalue = this.lhs.evaluate(stack);
        var rvalue = this.rhs.evaluate(stack);
        return lvalue.divide(rvalue);
    };
    DivExpr.prototype.substitute = function (stack) {
        stack = EvalStack.fromAny(stack);
        var lvalue = this.lhs.substitute(stack);
        var rvalue = this.rhs.substitute(stack);
        return lvalue.divide(rvalue);
    };
    DivExpr.prototype.clone = function () {
        return new DivExpr(this.lhs.clone(), this.rhs.clone());
    };
    DivExpr.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof DivExpr) {
            return this.lhs.equals(that.lhs) && this.rhs.equals(that.rhs);
        }
        return false;
    };
    DivExpr.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(Murmur3.mix(0x2318A446, this.lhs.hashCode()), this.rhs.hashCode()));
    };
    return DivExpr;
}(InfixExpr));
Item.DivExpr = DivExpr;
var ModExpr = (function (_super) {
    __extends(ModExpr, _super);
    function ModExpr(lhs, rhs) {
        return _super.call(this, lhs, rhs) || this;
    }
    Object.defineProperty(ModExpr.prototype, "operator", {
        get: function () {
            return '%';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ModExpr.prototype, "precedence", {
        get: function () {
            return 8;
        },
        enumerable: true,
        configurable: true
    });
    ModExpr.prototype.evaluate = function (stack) {
        stack = EvalStack.fromAny(stack);
        var lvalue = this.lhs.evaluate(stack);
        var rvalue = this.rhs.evaluate(stack);
        return lvalue.modulo(rvalue);
    };
    ModExpr.prototype.substitute = function (stack) {
        stack = EvalStack.fromAny(stack);
        var lvalue = this.lhs.substitute(stack);
        var rvalue = this.rhs.substitute(stack);
        return lvalue.modulo(rvalue);
    };
    ModExpr.prototype.clone = function () {
        return new ModExpr(this.lhs.clone(), this.rhs.clone());
    };
    ModExpr.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof ModExpr) {
            return this.lhs.equals(that.lhs) && this.rhs.equals(that.rhs);
        }
        return false;
    };
    ModExpr.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(Murmur3.mix(0x73A0433A, this.lhs.hashCode()), this.rhs.hashCode()));
    };
    return ModExpr;
}(InfixExpr));
Item.ModExpr = ModExpr;
var LnotExpr = (function (_super) {
    __extends(LnotExpr, _super);
    function LnotExpr(rhs) {
        return _super.call(this, rhs) || this;
    }
    Object.defineProperty(LnotExpr.prototype, "operator", {
        get: function () {
            return '!';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LnotExpr.prototype, "precedence", {
        get: function () {
            return 9;
        },
        enumerable: true,
        configurable: true
    });
    LnotExpr.prototype.evaluate = function (stack) {
        stack = EvalStack.fromAny(stack);
        var rvalue = this.rhs.evaluate(stack);
        return rvalue.not();
    };
    LnotExpr.prototype.substitute = function (stack) {
        stack = EvalStack.fromAny(stack);
        var rvalue = this.rhs.substitute(stack);
        return rvalue.not();
    };
    LnotExpr.prototype.clone = function () {
        return new LnotExpr(this.rhs.clone());
    };
    LnotExpr.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof LnotExpr) {
            return this.rhs.equals(that.rhs);
        }
        return false;
    };
    LnotExpr.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(0x5E85FAB0, this.rhs.hashCode()));
    };
    return LnotExpr;
}(PrefixExpr));
Item.LnotExpr = LnotExpr;
var BnotExpr = (function (_super) {
    __extends(BnotExpr, _super);
    function BnotExpr(rhs) {
        return _super.call(this, rhs) || this;
    }
    Object.defineProperty(BnotExpr.prototype, "operator", {
        get: function () {
            return '~';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BnotExpr.prototype, "precedence", {
        get: function () {
            return 9;
        },
        enumerable: true,
        configurable: true
    });
    BnotExpr.prototype.evaluate = function (stack) {
        stack = EvalStack.fromAny(stack);
        var rvalue = this.rhs.evaluate(stack);
        return rvalue.bnot();
    };
    BnotExpr.prototype.substitute = function (stack) {
        stack = EvalStack.fromAny(stack);
        var rvalue = this.rhs.substitute(stack);
        return rvalue.bnot();
    };
    BnotExpr.prototype.clone = function () {
        return new BnotExpr(this.rhs.clone());
    };
    BnotExpr.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof BnotExpr) {
            return this.rhs.equals(that.rhs);
        }
        return false;
    };
    BnotExpr.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(0x25F0BBE8, this.rhs.hashCode()));
    };
    return BnotExpr;
}(PrefixExpr));
Item.BnotExpr = BnotExpr;
var NegExpr = (function (_super) {
    __extends(NegExpr, _super);
    function NegExpr(rhs) {
        return _super.call(this, rhs) || this;
    }
    Object.defineProperty(NegExpr.prototype, "operator", {
        get: function () {
            return '-';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NegExpr.prototype, "precedence", {
        get: function () {
            return 9;
        },
        enumerable: true,
        configurable: true
    });
    NegExpr.prototype.evaluate = function (stack) {
        stack = EvalStack.fromAny(stack);
        var rvalue = this.rhs.evaluate(stack);
        return rvalue.neg();
    };
    NegExpr.prototype.substitute = function (stack) {
        stack = EvalStack.fromAny(stack);
        var rvalue = this.rhs.substitute(stack);
        return rvalue.neg();
    };
    NegExpr.prototype.clone = function () {
        return new NegExpr(this.rhs.clone());
    };
    NegExpr.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof NegExpr) {
            return this.rhs.equals(that.rhs);
        }
        return false;
    };
    NegExpr.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(0x2052334D, this.rhs.hashCode()));
    };
    return NegExpr;
}(PrefixExpr));
Item.NegExpr = NegExpr;
var PosExpr = (function (_super) {
    __extends(PosExpr, _super);
    function PosExpr(rhs) {
        return _super.call(this, rhs) || this;
    }
    Object.defineProperty(PosExpr.prototype, "operator", {
        get: function () {
            return '+';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PosExpr.prototype, "precedence", {
        get: function () {
            return 9;
        },
        enumerable: true,
        configurable: true
    });
    PosExpr.prototype.evaluate = function (stack) {
        stack = EvalStack.fromAny(stack);
        var rvalue = this.rhs.evaluate(stack);
        return rvalue.pos();
    };
    PosExpr.prototype.substitute = function (stack) {
        stack = EvalStack.fromAny(stack);
        var rvalue = this.rhs.substitute(stack);
        return rvalue.pos();
    };
    PosExpr.prototype.clone = function () {
        return new PosExpr(this.rhs.clone());
    };
    PosExpr.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof PosExpr) {
            return this.rhs.equals(that.rhs);
        }
        return false;
    };
    PosExpr.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(0xC4C02A1E, this.rhs.hashCode()));
    };
    return PosExpr;
}(PrefixExpr));
Item.PosExpr = PosExpr;
var InvokeExpr = (function (_super) {
    __extends(InvokeExpr, _super);
    function InvokeExpr(func, args) {
        var _this = _super.call(this) || this;
        _this.func = func;
        _this.args = args.commit();
        return _this;
    }
    Object.defineProperty(InvokeExpr.prototype, "precedence", {
        get: function () {
            return 10;
        },
        enumerable: true,
        configurable: true
    });
    InvokeExpr.prototype.evaluate = function (stack) {
        stack = EvalStack.fromAny(stack);
        var func = this.func.evaluate(stack);
        if (func instanceof Item.Func) {
            return func.invoke(this.args, stack, this);
        }
        return Value.Absent;
    };
    InvokeExpr.prototype.substitute = function (stack) {
        stack = EvalStack.fromAny(stack);
        var func = this.func.evaluate(stack);
        if (func instanceof Item.Func) {
            var result = func.partialInvoke(this.args, stack, this);
            if (result) {
                return result;
            }
        }
        var args = this.args.substitute(stack).toValue();
        return new InvokeExpr(this.func, args);
    };
    InvokeExpr.prototype.writeRecon = function (output) {
        this.func.writeRecon(output);
        output.push(40);
        this.args.writeReconBlock(output);
        output.push(41);
    };
    InvokeExpr.prototype.clone = function () {
        return new InvokeExpr(this.func.clone(), this.args.clone());
    };
    InvokeExpr.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof InvokeExpr) {
            return this.func.equals(that.func) && this.args.equals(that.args);
        }
        return false;
    };
    InvokeExpr.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(Murmur3.mix(0xA214818C, this.func.hashCode()), this.args.hashCode()));
    };
    return InvokeExpr;
}(Expr));
Item.InvokeExpr = InvokeExpr;

var Extant = (function (_super) {
    __extends(Extant, _super);
    function Extant() {
        return _super.call(this) || this;
    }
    Extant.prototype.isDistinct = function () {
        return false;
    };
    Extant.prototype.not = function () {
        return Value.Absent;
    };
    Extant.prototype.stringValue = function () {
        return '';
    };
    Extant.prototype.booleanValue = function () {
        return true;
    };
    Extant.prototype.toAny = function () {
        return null;
    };
    Extant.prototype.valueOf = function () {
        return null;
    };
    Extant.prototype.writeRecon = function (output) {
    };
    Extant.prototype.toRecon = function () {
        return '';
    };
    Extant.prototype.toReconBlock = function () {
        return '';
    };
    Extant.prototype.compare = function (that) {
        if (that instanceof Extant) {
            return 0;
        }
        else if (that === Value.Absent) {
            return -1;
        }
        else {
            return 1;
        }
    };
    Extant.prototype.equals = function (that) {
        return this === that;
    };
    Extant.prototype.hashCode = function () {
        return 0xF69C1707;
    };
    Extant.prototype.toString = function () {
        return 'extant';
    };
    return Extant;
}(Value));
Item.Extant = new Extant();
Value.Extant = Item.Extant;

var Absent = (function (_super) {
    __extends(Absent, _super);
    function Absent() {
        return _super.call(this) || this;
    }
    Absent.prototype.isDefined = function () {
        return false;
    };
    Absent.prototype.isDistinct = function () {
        return false;
    };
    Absent.prototype.isEmpty = function () {
        return true;
    };
    Absent.prototype.concat = function () {
        var items = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            items[_i] = arguments[_i];
        }
        var record = Value.empty();
        for (var i = 0, n = items.length; i < n; i += 1) {
            items[i].forEach(function (item) {
                record.push(item);
            });
        }
        return record;
    };
    Absent.prototype.withField = function (key, newValue) {
        return Value.empty(1).withField(key, newValue);
    };
    Absent.prototype.withAttr = function (key, newValue) {
        return Value.empty(1).withAttr(key, newValue);
    };
    Absent.prototype.withSlot = function (key, newValue) {
        return Value.empty(1).withSlot(key, newValue);
    };
    Absent.prototype.withItem = function (newItem) {
        return Value.empty(1).withItem(newItem);
    };
    Absent.prototype.forEach = function (callback, thisArg) {
        return undefined;
    };
    Absent.prototype.iterator = function () {
        return Cursor.Empty;
    };
    Absent.prototype.cond = function (thenTerm, elseTerm) {
        elseTerm = Item.of(elseTerm);
        return elseTerm;
    };
    Absent.prototype.or = function (that) {
        that = Item.of(that);
        return that;
    };
    Absent.prototype.and = function (that) {
        return this;
    };
    Absent.prototype.not = function () {
        return Value.Extant;
    };
    Absent.prototype.booleanValue = function () {
        return false;
    };
    Absent.prototype.toAny = function () {
        return undefined;
    };
    Absent.prototype.valueOf = function () {
        return undefined;
    };
    Absent.prototype.writeRecon = function (output) {
    };
    Absent.prototype.toRecon = function () {
        return '';
    };
    Absent.prototype.toReconBlock = function () {
        return '';
    };
    Absent.prototype.compare = function (that) {
        if (that instanceof Absent) {
            return 0;
        }
        else {
            return 1;
        }
    };
    Absent.prototype.equals = function (that) {
        return this === that;
    };
    Absent.prototype.hashCode = function () {
        return 0xF7C00CCE;
    };
    Absent.prototype.toString = function () {
        return 'absent';
    };
    return Absent;
}(Value));
Item.Absent = new Absent();
Value.Absent = Item.Absent;

var HashGenCacheMap = (function () {
    function HashGenCacheMap(size) {
        this.buckets = new Array(size);
        this.gen4Hits = 0;
        this.gen3Hits = 0;
        this.gen2Hits = 0;
        this.gen1Hits = 0;
        this.misses = 0;
    }
    HashGenCacheMap.prototype.get = function (key) {
        if (this.buckets.length === 0) {
            return undefined;
        }
        var index = Math.abs(key.hashCode()) % this.buckets.length;
        var bucket = this.buckets[index];
        if (!bucket) {
            return undefined;
        }
        var gen4Key = bucket.gen4Key;
        if (gen4Key !== undefined && key.equals(gen4Key)) {
            var gen4Val = bucket.gen4Val;
            if (gen4Val !== undefined) {
                this.gen4Hits += 1;
                bucket.gen4Weight++;
                return gen4Val;
            }
            else {
                bucket.gen4Key = undefined;
            }
        }
        var gen3Key = bucket.gen3Key;
        if (gen3Key !== undefined && key.equals(gen3Key)) {
            var gen3Val = bucket.gen3Val;
            if (gen3Val !== undefined) {
                this.gen3Hits += 1;
                if (bucket.gen3Weight++ > bucket.gen4Weight) {
                    this.buckets[index] = new HashGenCacheMapBucket(bucket.gen3Key, bucket.gen3Val, bucket.gen3Weight, bucket.gen4Key, bucket.gen4Val, bucket.gen4Weight, bucket.gen2Key, bucket.gen2Val, bucket.gen2Weight, bucket.gen1Key, bucket.gen1Val, bucket.gen1Weight);
                }
                return gen3Val;
            }
            else {
                bucket.gen3Key = undefined;
            }
        }
        var gen2Key = bucket.gen2Key;
        if (gen2Key !== undefined && key.equals(gen2Key)) {
            var gen2Val = bucket.gen2Val;
            if (gen2Val !== undefined) {
                this.gen2Hits += 1;
                if (bucket.gen2Weight++ > bucket.gen3Weight) {
                    this.buckets[index] = new HashGenCacheMapBucket(bucket.gen4Key, bucket.gen4Val, bucket.gen4Weight, bucket.gen2Key, bucket.gen2Val, bucket.gen2Weight, bucket.gen3Key, bucket.gen3Val, bucket.gen3Weight, bucket.gen1Key, bucket.gen1Val, bucket.gen1Weight);
                }
                return gen2Val;
            }
            else {
                bucket.gen2Key = undefined;
            }
        }
        var gen1Key = bucket.gen1Key;
        if (gen1Key !== undefined && key.equals(gen1Key)) {
            var gen1Val = bucket.gen1Val;
            if (gen1Val !== undefined) {
                this.gen1Hits += 1;
                if (bucket.gen1Weight++ > bucket.gen2Weight) {
                    this.buckets[index] = new HashGenCacheMapBucket(bucket.gen4Key, bucket.gen4Val, bucket.gen4Weight, bucket.gen3Key, bucket.gen3Val, bucket.gen3Weight, bucket.gen1Key, bucket.gen1Val, bucket.gen1Weight, bucket.gen2Key, bucket.gen2Val, bucket.gen2Weight);
                }
                return gen1Val;
            }
            else {
                bucket.gen1Key = undefined;
            }
        }
        this.misses += 1;
        return undefined;
    };
    HashGenCacheMap.prototype.set = function (key, value) {
        if (this.buckets.length === 0) {
            return undefined;
        }
        var index = Math.abs(key.hashCode()) % this.buckets.length;
        var bucket = this.buckets[index] || new HashGenCacheMapBucket();
        var gen4Key = bucket.gen4Key;
        if (gen4Key !== undefined && key.equals(gen4Key)) {
            var gen4Val = bucket.gen4Val;
            if (gen4Val !== undefined) {
                this.gen4Hits += 1;
                bucket.gen4Weight++;
                return gen4Val;
            }
            else {
                bucket.gen4Key = undefined;
                gen4Key = undefined;
            }
        }
        var gen3Key = bucket.gen3Key;
        if (gen3Key !== undefined && key.equals(gen3Key)) {
            var gen3Val = bucket.gen3Val;
            if (gen3Val !== undefined) {
                this.gen3Hits += 1;
                if (bucket.gen3Weight++ > bucket.gen4Weight) {
                    this.buckets[index] = new HashGenCacheMapBucket(bucket.gen3Key, bucket.gen3Val, bucket.gen3Weight, bucket.gen4Key, bucket.gen4Val, bucket.gen4Weight, bucket.gen2Key, bucket.gen2Val, bucket.gen2Weight, bucket.gen1Key, bucket.gen1Val, bucket.gen1Weight);
                }
                return gen3Val;
            }
            else {
                bucket.gen3Key = undefined;
                gen3Key = undefined;
            }
        }
        var gen2Key = bucket.gen2Key;
        if (gen2Key !== undefined && key.equals(gen2Key)) {
            var gen2Val = bucket.gen2Val;
            if (gen2Val !== undefined) {
                this.gen2Hits += 1;
                if (bucket.gen2Weight++ > bucket.gen3Weight) {
                    this.buckets[index] = new HashGenCacheMapBucket(bucket.gen4Key, bucket.gen4Val, bucket.gen4Weight, bucket.gen2Key, bucket.gen2Val, bucket.gen2Weight, bucket.gen3Key, bucket.gen3Val, bucket.gen3Weight, bucket.gen1Key, bucket.gen1Val, bucket.gen1Weight);
                }
                return gen2Val;
            }
            else {
                bucket.gen2Key = undefined;
                gen2Key = undefined;
            }
        }
        var gen1Key = bucket.gen1Key;
        if (gen1Key !== undefined && key.equals(gen1Key)) {
            var gen1Val = bucket.gen1Val;
            if (gen1Val !== undefined) {
                this.gen1Hits += 1;
                if (bucket.gen1Weight++ > bucket.gen2Weight) {
                    this.buckets[index] = new HashGenCacheMapBucket(bucket.gen4Key, bucket.gen4Val, bucket.gen4Weight, bucket.gen3Key, bucket.gen3Val, bucket.gen3Weight, bucket.gen1Key, bucket.gen1Val, bucket.gen1Weight, bucket.gen2Key, bucket.gen2Val, bucket.gen2Weight);
                }
                return gen1Val;
            }
            else {
                bucket.gen1Key = undefined;
                gen1Key = undefined;
            }
        }
        this.misses += 1;
        if (gen4Key == null) {
            this.buckets[index] = new HashGenCacheMapBucket(bucket.gen3Key, bucket.gen3Val, bucket.gen3Weight, bucket.gen2Key, bucket.gen2Val, bucket.gen2Weight, bucket.gen1Key, bucket.gen1Val, bucket.gen1Weight, key, value, 1);
        }
        else if (gen3Key == null) {
            this.buckets[index] = new HashGenCacheMapBucket(bucket.gen4Key, bucket.gen4Val, bucket.gen4Weight, bucket.gen2Key, bucket.gen2Val, bucket.gen2Weight, bucket.gen1Key, bucket.gen1Val, bucket.gen1Weight, key, value, 1);
        }
        else if (gen2Key == null) {
            this.buckets[index] = new HashGenCacheMapBucket(bucket.gen4Key, bucket.gen4Val, bucket.gen4Weight, bucket.gen3Key, bucket.gen3Val, bucket.gen3Weight, bucket.gen1Key, bucket.gen1Val, bucket.gen1Weight, key, value, 1);
        }
        else if (gen1Key == null) {
            this.buckets[index] = new HashGenCacheMapBucket(bucket.gen4Key, bucket.gen4Val, bucket.gen4Weight, bucket.gen3Key, bucket.gen3Val, bucket.gen3Weight, bucket.gen2Key, bucket.gen2Val, bucket.gen2Weight, key, value, 1);
        }
        else {
            this.buckets[index] = new HashGenCacheMapBucket(bucket.gen4Key, bucket.gen4Val, bucket.gen4Weight - 1, bucket.gen3Key, bucket.gen3Val, bucket.gen3Weight - 1, bucket.gen1Key, bucket.gen1Val, bucket.gen1Weight, key, value, 1);
        }
        return undefined;
    };
    HashGenCacheMap.prototype.delete = function (key) {
        if (this.buckets.length === 0) {
            return undefined;
        }
        var index = Math.abs(key.hashCode()) % this.buckets.length;
        var bucket = this.buckets[index];
        if (!bucket) {
            return undefined;
        }
        var gen4Key = bucket.gen4Key;
        if (gen4Key !== undefined && key.equals(gen4Key)) {
            var gen4Val = bucket.gen4Val;
            this.buckets[index] = new HashGenCacheMapBucket(bucket.gen3Key, bucket.gen3Val, bucket.gen3Weight, bucket.gen2Key, bucket.gen2Val, bucket.gen2Weight, bucket.gen1Key, bucket.gen1Val, bucket.gen1Weight, undefined, undefined, 0);
            return gen4Val;
        }
        var gen3Key = bucket.gen3Key;
        if (gen3Key !== undefined && key.equals(gen3Key)) {
            var gen3Val = bucket.gen3Val;
            this.buckets[index] = new HashGenCacheMapBucket(bucket.gen4Key, bucket.gen4Val, bucket.gen4Weight, bucket.gen2Key, bucket.gen2Val, bucket.gen2Weight, bucket.gen1Key, bucket.gen1Val, bucket.gen1Weight, undefined, undefined, 0);
            return gen3Val;
        }
        var gen2Key = bucket.gen2Key;
        if (gen2Key !== undefined && key.equals(gen2Key)) {
            var gen2Val = bucket.gen2Val;
            this.buckets[index] = new HashGenCacheMapBucket(bucket.gen4Key, bucket.gen4Val, bucket.gen4Weight, bucket.gen3Key, bucket.gen3Val, bucket.gen3Weight, bucket.gen1Key, bucket.gen1Val, bucket.gen1Weight, undefined, undefined, 0);
            return gen2Val;
        }
        var gen1Key = bucket.gen1Key;
        if (gen1Key !== undefined && key.equals(gen1Key)) {
            var gen1Val = bucket.gen1Val;
            this.buckets[index] = new HashGenCacheMapBucket(bucket.gen4Key, bucket.gen4Val, bucket.gen4Weight, bucket.gen3Key, bucket.gen3Val, bucket.gen3Weight, bucket.gen2Key, bucket.gen2Val, bucket.gen2Weight, undefined, undefined, 0);
            return gen1Val;
        }
        return undefined;
    };
    HashGenCacheMap.prototype.clear = function () {
        for (var i = 0; i < this.buckets.length; i += 1) {
            this.buckets[i] = undefined;
        }
    };
    Object.defineProperty(HashGenCacheMap.prototype, "hits", {
        get: function () {
            return this.gen4Hits + this.gen3Hits + this.gen2Hits + this.gen1Hits;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HashGenCacheMap.prototype, "hitRatio", {
        get: function () {
            var hits = this.hits;
            return hits / (hits + this.misses);
        },
        enumerable: true,
        configurable: true
    });
    HashGenCacheMap.prototype.toString = function () {
        var hits = this.hits;
        var s = '@' + 'cache' + '('
            + 'gen4Hits' + ': ' + this.gen4Hits + ', '
            + 'gen3Hits' + ': ' + this.gen3Hits + ', '
            + 'gen2Hits' + ': ' + this.gen2Hits + ', '
            + 'gen1Hits' + ': ' + this.gen1Hits + ', '
            + "hits" + ': ' + hits + ', '
            + "misses" + ': ' + this.misses + ', '
            + "hitRatio" + ': ' + (hits / (hits + this.misses)) + ') '
            + '{\n';
        for (var i = 0; i < this.buckets.length; i += 1) {
            var bucket = this.buckets[i];
            s += '  ' + (bucket != null ? bucket.toString() : 'null') + '\n';
        }
        s += '}';
        return s;
    };
    return HashGenCacheMap;
}());
var HashGenCacheMapBucket = (function () {
    function HashGenCacheMapBucket(gen4Key, gen4Val, gen4Weight, gen3Key, gen3Val, gen3Weight, gen2Key, gen2Val, gen2Weight, gen1Key, gen1Val, gen1Weight) {
        if (gen4Weight === void 0) { gen4Weight = 0; }
        if (gen3Weight === void 0) { gen3Weight = 0; }
        if (gen2Weight === void 0) { gen2Weight = 0; }
        if (gen1Weight === void 0) { gen1Weight = 0; }
        this.gen4Key = gen4Key;
        this.gen4Val = gen4Val;
        this.gen4Weight = gen4Weight;
        this.gen3Key = gen3Key;
        this.gen3Val = gen3Val;
        this.gen3Weight = gen3Weight;
        this.gen2Key = gen2Key;
        this.gen2Val = gen2Val;
        this.gen2Weight = gen2Weight;
        this.gen1Key = gen1Key;
        this.gen1Val = gen1Val;
        this.gen1Weight = gen1Weight;
    }
    HashGenCacheMapBucket.prototype.toString = function () {
        return '@' + 'bucket' + '('
            + 'gen4Key' + ': ' + this.gen4Key + '; '
            + 'gen4Val' + ': ' + this.gen4Val + '; '
            + 'gen4Weight' + ': ' + this.gen4Weight + '; '
            + 'gen3Key' + ': ' + this.gen3Key + '; '
            + 'gen3Val' + ': ' + this.gen3Val + '; '
            + 'gen3Weight' + ': ' + this.gen3Weight + '; '
            + 'gen24Key' + ': ' + this.gen2Key + '; '
            + 'gen24Val' + ': ' + this.gen2Val + '; '
            + 'gen24Weight' + ': ' + this.gen2Weight + '; '
            + 'gen1Key' + ': ' + this.gen1Key + '; '
            + 'gen1Val' + ': ' + this.gen1Val + '; '
            + 'gen1Weight' + ': ' + this.gen1Weight + ')';
    };
    return HashGenCacheMapBucket;
}());

var UriParser = (function (_super) {
    __extends(UriParser, _super);
    function UriParser(schemeParser, authorityParser, pathParser, queryParser, fragmentParser, step) {
        var _this = _super.call(this) || this;
        _this.schemeParser = schemeParser;
        _this.authorityParser = authorityParser;
        _this.pathParser = pathParser;
        _this.queryParser = queryParser;
        _this.fragmentParser = fragmentParser;
        _this.step = step;
        return _this;
    }
    UriParser.prototype.feed = function (input) {
        return UriParser.parse(input, this.schemeParser, this.authorityParser, this.pathParser, this.queryParser, this.fragmentParser, this.step);
    };
    UriParser.parse = function (input, schemeParser, authorityParser, pathParser, queryParser, fragmentParser, step) {
        if (step === void 0) { step = 1; }
        var c = 0;
        if (step === 1) {
            if (!input.isEmpty()) {
                var look = input.clone();
                while (!look.isEmpty() && (c = look.head(), Uri.isSchemeChar(c))) {
                    look.step();
                }
                if (!look.isEmpty() && c === 58) {
                    step = 2;
                }
                else {
                    step = 3;
                }
            }
            else if (input.isDone()) {
                step = 3;
            }
        }
        if (step === 2) {
            if (!schemeParser) {
                schemeParser = UriSchemeParser.parse(input);
            }
            while (schemeParser.isCont() && (!input.isEmpty() || input.isDone())) {
                schemeParser = schemeParser.feed(input);
            }
            if (schemeParser.isDone()) {
                if (!input.isEmpty() && input.head() === 58) {
                    input.step();
                    step = 3;
                }
                else if (!input.isEmpty()) {
                    return Iteratee.expected('\':\'', input);
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            else if (schemeParser.isError()) {
                return schemeParser.asError();
            }
        }
        if (step === 3) {
            if (!input.isEmpty()) {
                c = input.head();
                if (c === 47) {
                    input.step();
                    step = 4;
                }
                else if (c === 63) {
                    input.step();
                    step = 7;
                }
                else if (c === 35) {
                    input.step();
                    step = 8;
                }
                else {
                    step = 6;
                }
            }
            else if (input.isDone()) {
                return Iteratee.done(Uri.of(schemeParser && schemeParser.bind()));
            }
        }
        if (step === 4) {
            if (!input.isEmpty() && input.head() === 47) {
                input.step();
                step = 5;
            }
            else if (!input.isEmpty()) {
                var pathBuilder = new UriPathBuilder();
                pathBuilder.push('/');
                pathParser = UriPathParser.parse(input, pathBuilder);
                step = 6;
            }
            else if (input.isDone()) {
                return Iteratee.done(Uri.of(schemeParser && schemeParser.bind(), undefined, UriPath.Slash));
            }
        }
        if (step === 5) {
            if (!authorityParser) {
                authorityParser = UriAuthorityParser.parse(input);
            }
            while (authorityParser.isCont() && (!input.isEmpty() || input.isDone())) {
                authorityParser = authorityParser.feed(input);
            }
            if (authorityParser.isDone()) {
                if (!input.isEmpty()) {
                    c = input.head();
                    if (c === 63) {
                        input.step();
                        step = 7;
                    }
                    else if (c === 35) {
                        input.step();
                        step = 8;
                    }
                    else {
                        step = 6;
                    }
                }
                else if (input.isDone()) {
                    return Iteratee.done(Uri.of(schemeParser && schemeParser.bind(), authorityParser && authorityParser.bind()));
                }
            }
            else if (authorityParser.isError()) {
                return authorityParser.asError();
            }
        }
        if (step === 6) {
            if (!pathParser) {
                pathParser = UriPathParser.parse(input);
            }
            while (pathParser.isCont() && (!input.isEmpty() || input.isDone())) {
                pathParser = pathParser.feed(input);
            }
            if (pathParser.isDone()) {
                if (!input.isEmpty() && input.head() === 63) {
                    input.step();
                    step = 7;
                }
                else if (!input.isEmpty() && input.head() === 35) {
                    input.step();
                    step = 8;
                }
                else if (!input.isEmpty() || input.isDone()) {
                    return Iteratee.done(Uri.of(schemeParser && schemeParser.bind(), authorityParser && authorityParser.bind(), pathParser.bind()));
                }
            }
            else if (pathParser.isError()) {
                return pathParser.asError();
            }
        }
        if (step === 7) {
            if (!queryParser) {
                queryParser = UriQueryParser.parse(input);
            }
            while (queryParser.isCont() && (!input.isEmpty() || input.isDone())) {
                queryParser = queryParser.feed(input);
            }
            if (queryParser.isDone()) {
                if (!input.isEmpty() && input.head() === 35) {
                    input.step();
                    step = 8;
                }
                else if (!input.isEmpty() || input.isDone()) {
                    return Iteratee.done(Uri.of(schemeParser && schemeParser.bind(), authorityParser && authorityParser.bind(), pathParser && pathParser.bind(), queryParser.bind()));
                }
            }
            else if (queryParser.isError()) {
                return queryParser.asError();
            }
        }
        if (step === 8) {
            if (!fragmentParser) {
                fragmentParser = UriFragmentParser.parse(input);
            }
            while (fragmentParser.isCont() && (!input.isEmpty() || input.isDone())) {
                fragmentParser = fragmentParser.feed(input);
            }
            if (fragmentParser.isDone()) {
                return Iteratee.done(Uri.of(schemeParser && schemeParser.bind(), authorityParser && authorityParser.bind(), pathParser && pathParser.bind(), queryParser && queryParser.bind(), fragmentParser.bind()));
            }
            else if (fragmentParser.isError()) {
                return fragmentParser.asError();
            }
        }
        return new UriParser(schemeParser, authorityParser, pathParser, queryParser, fragmentParser, step);
    };
    return UriParser;
}(Iteratee));
var UriSchemeParser = (function (_super) {
    __extends(UriSchemeParser, _super);
    function UriSchemeParser(output, step) {
        var _this = _super.call(this) || this;
        _this.output = output;
        _this.step = step;
        return _this;
    }
    UriSchemeParser.prototype.feed = function (input) {
        return UriSchemeParser.parse(input, this.output, this.step);
    };
    UriSchemeParser.parse = function (input, output, step) {
        if (step === void 0) { step = 1; }
        var c = 0;
        if (step === 1) {
            if (!input.isEmpty() && (c = input.head(), Iteratee.isAlpha(c))) {
                input.step();
                output = output || new StringOutput();
                output.push(Iteratee.toLowerCase(c));
                step = 2;
            }
            else if (!input.isEmpty() || input.isDone()) {
                return Iteratee.expected('scheme', input);
            }
        }
        if (step === 2) {
            while (!input.isEmpty() && (c = input.head(), Uri.isSchemeChar(c))) {
                input.step();
                output.push(Iteratee.toLowerCase(c));
            }
            if (!input.isEmpty() || input.isDone()) {
                return Iteratee.done(UriScheme.of(output.bind()));
            }
        }
        return new UriSchemeParser(output, step);
    };
    return UriSchemeParser;
}(Iteratee));
var UriAuthorityParser = (function (_super) {
    __extends(UriAuthorityParser, _super);
    function UriAuthorityParser(userParser, hostParser, portParser, step) {
        var _this = _super.call(this) || this;
        _this.userParser = userParser;
        _this.hostParser = hostParser;
        _this.portParser = portParser;
        _this.step = step;
        return _this;
    }
    UriAuthorityParser.prototype.feed = function (input) {
        return UriAuthorityParser.parse(input, this.userParser, this.hostParser, this.portParser, this.step);
    };
    UriAuthorityParser.parse = function (input, userParser, hostParser, portParser, step) {
        if (step === void 0) { step = 1; }
        var c = 0;
        if (step === 1) {
            if (!input.isEmpty()) {
                var look = input.clone();
                while (!look.isEmpty() && (c = look.head(), c !== 64 && c !== 47)) {
                    look.step();
                }
                if (!look.isEmpty() && c === 64) {
                    step = 2;
                }
                else {
                    step = 3;
                }
            }
            else if (input.isDone()) {
                step = 3;
            }
        }
        if (step === 2) {
            if (!userParser) {
                userParser = UriUserParser.parse(input);
            }
            while (userParser.isCont() && (!input.isEmpty() || input.isDone())) {
                userParser = userParser.feed(input);
            }
            if (userParser.isDone()) {
                if (!input.isEmpty() && input.head() === 64) {
                    input.step();
                    step = 3;
                }
                else if (!input.isEmpty()) {
                    return Iteratee.expected(64, input);
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            else if (userParser.isError()) {
                return userParser.asError();
            }
        }
        if (step === 3) {
            if (!hostParser) {
                hostParser = UriHostParser.parse(input);
            }
            while (hostParser.isCont() && (!input.isEmpty() || input.isDone())) {
                hostParser = hostParser.feed(input);
            }
            if (hostParser.isDone()) {
                if (!input.isEmpty() && input.head() === 58) {
                    input.step();
                    step = 4;
                }
                else if (!input.isEmpty() || input.isDone()) {
                    return Iteratee.done(UriAuthority.of(userParser && userParser.bind(), hostParser.bind()));
                }
            }
            else if (hostParser.isError()) {
                return hostParser.asError();
            }
        }
        if (step === 4) {
            if (!portParser) {
                portParser = UriPortParser.parse(input);
            }
            while (portParser.isCont() && (!input.isEmpty() || input.isDone())) {
                portParser = portParser.feed(input);
            }
            if (portParser.isError()) {
                return portParser.asError();
            }
            else if (!input.isEmpty() || input.isDone()) {
                return Iteratee.done(UriAuthority.of(userParser && userParser.bind(), hostParser.bind(), portParser.bind()));
            }
        }
        return new UriAuthorityParser(userParser, hostParser, portParser, step);
    };
    return UriAuthorityParser;
}(Iteratee));
var UriUserParser = (function (_super) {
    __extends(UriUserParser, _super);
    function UriUserParser(usernameOutput, passwordOutput, c1, step) {
        var _this = _super.call(this) || this;
        _this.usernameOutput = usernameOutput;
        _this.passwordOutput = passwordOutput;
        _this.c1 = c1;
        _this.step = step;
        return _this;
    }
    UriUserParser.prototype.feed = function (input) {
        return UriUserParser.parse(input, this.usernameOutput, this.passwordOutput, this.c1, this.step);
    };
    UriUserParser.parse = function (input, usernameOutput, passwordOutput, c1, step) {
        if (c1 === void 0) { c1 = 0; }
        if (step === void 0) { step = 1; }
        var c = 0;
        while (!input.isEmpty() || input.isDone()) {
            if (step === 1) {
                if (!usernameOutput) {
                    usernameOutput = new StringOutput();
                }
                while (!input.isEmpty() && (c = input.head(), Uri.isUserChar(c))) {
                    input.step();
                    usernameOutput.push(c);
                }
                if (!input.isEmpty() && c === 58) {
                    input.step();
                    step = 4;
                }
                else if (!input.isEmpty() && c === 37) {
                    input.step();
                    step = 2;
                }
                else if (!input.isEmpty() || input.isDone()) {
                    return Iteratee.done(UriUser.of(usernameOutput.bind()));
                }
            }
            if (step === 2) {
                if (!input.isEmpty() && (c = input.head(), Iteratee.isHexChar(c))) {
                    input.step();
                    c1 = c;
                    step = 3;
                }
                else if (!input.isEmpty()) {
                    return Iteratee.expected('hex digit', input);
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            if (step === 3) {
                if (!input.isEmpty() && (c = input.head(), Iteratee.isHexChar(c))) {
                    input.step();
                    usernameOutput.push((Iteratee.decodeHexChar(c1) << 4) + Iteratee.decodeHexChar(c));
                    c1 = 0;
                    step = 1;
                }
                else if (!input.isEmpty()) {
                    return Iteratee.expected('hex digit', input);
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            if (step === 4) {
                passwordOutput = passwordOutput || new StringOutput();
                while (!input.isEmpty() && (c = input.head(), Uri.isUserInfoChar(c))) {
                    input.step();
                    passwordOutput.push(c);
                }
                if (!input.isEmpty() && c === 37) {
                    input.step();
                    step = 5;
                }
                else if (!input.isEmpty() || input.isDone()) {
                    return Iteratee.done(UriUser.of(usernameOutput.bind(), passwordOutput.bind()));
                }
            }
            if (step === 5) {
                if (!input.isEmpty() && (c = input.head(), Iteratee.isHexChar(c))) {
                    input.step();
                    c1 = c;
                    step = 6;
                }
                else if (!input.isEmpty()) {
                    return Iteratee.expected('hex digit', input);
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            if (step === 6) {
                if (!input.isEmpty() && (c = input.head(), Iteratee.isHexChar(c))) {
                    input.step();
                    passwordOutput.push((Iteratee.decodeHexChar(c1) << 4) + Iteratee.decodeHexChar(c));
                    c1 = 0;
                    step = 4;
                }
                else if (!input.isEmpty()) {
                    return Iteratee.expected('hex digit', input);
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
        }
        return new UriUserParser(usernameOutput, passwordOutput, c1, step);
    };
    return UriUserParser;
}(Iteratee));
var UriHostParser = (function (_super) {
    __extends(UriHostParser, _super);
    function UriHostParser() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UriHostParser.prototype.feed = function (input) {
        return UriHostParser.parse(input);
    };
    UriHostParser.parse = function (input) {
        if (!input.isEmpty()) {
            var c = input.head();
            if (c === 91) {
                return UriHostLiteralParser.parse(input);
            }
            else {
                return UriHostAddressParser.parse(input);
            }
        }
        else if (input.isDone()) {
            return Iteratee.done(UriHostName.of(''));
        }
        return new UriHostParser();
    };
    return UriHostParser;
}(Iteratee));
var UriHostAddressParser = (function (_super) {
    __extends(UriHostAddressParser, _super);
    function UriHostAddressParser(output, c1, x, step) {
        var _this = _super.call(this) || this;
        _this.output = output;
        _this.c1 = c1;
        _this.x = x;
        _this.step = step;
        return _this;
    }
    UriHostAddressParser.prototype.feed = function (input) {
        return UriHostAddressParser.parse(input, this.output, this.c1, this.x, this.step);
    };
    UriHostAddressParser.parse = function (input, output, c1, x, step) {
        if (c1 === void 0) { c1 = 0; }
        if (x === void 0) { x = 0; }
        if (step === void 0) { step = 1; }
        var c = 0;
        while (step <= 4 && (!input.isEmpty() || input.isDone())) {
            output = output || new StringOutput();
            while (!input.isEmpty() && (c = input.head(), Iteratee.isDigit(c))) {
                input.step();
                output.push(c);
                x = 10 * x + Iteratee.decodeDigit(c);
            }
            if (!input.isEmpty()) {
                if (c === 46 && step < 4 && x <= 255) {
                    input.step();
                    output.push(c);
                    x = 0;
                    step += 1;
                }
                else if (!Uri.isHostChar(c) && c !== 37 && step === 4 && x <= 255) {
                    return Iteratee.done(UriHostIPv4.of(output.bind()));
                }
                else {
                    x = 0;
                    step = 5;
                }
            }
            else if (input.isDone()) {
                if (step === 4 && x <= 255) {
                    return Iteratee.done(UriHostIPv4.of(output.bind()));
                }
                else {
                    return Iteratee.done(UriHostName.of(output.bind()));
                }
            }
        }
        while (!input.isEmpty() || input.isDone()) {
            output = output;
            if (step === 5) {
                while (!input.isEmpty() && (c = input.head(), Uri.isHostChar(c))) {
                    input.step();
                    output.push(Iteratee.toLowerCase(c));
                }
                if (!input.isEmpty() && c === 37) {
                    input.step();
                    step = 6;
                }
                else if (!input.isEmpty() || input.isDone()) {
                    return Iteratee.done(UriHostName.of(output.bind()));
                }
            }
            if (step === 6) {
                if (!input.isEmpty() && (c = input.head(), Iteratee.isHexChar(c))) {
                    input.step();
                    c1 = c;
                    step = 7;
                }
                else if (!input.isEmpty()) {
                    return Iteratee.expected('hex digit', input);
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            if (step === 7) {
                if (!input.isEmpty() && (c = input.head(), Iteratee.isHexChar(c))) {
                    input.step();
                    output.push((Iteratee.decodeHexChar(c1) << 4) + Iteratee.decodeHexChar(c));
                    c1 = 0;
                    step = 5;
                }
                else if (!input.isEmpty()) {
                    return Iteratee.expected('hex digit', input);
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
        }
        return new UriHostAddressParser(output, c1, x, step);
    };
    return UriHostAddressParser;
}(Iteratee));
var UriHostLiteralParser = (function (_super) {
    __extends(UriHostLiteralParser, _super);
    function UriHostLiteralParser(output, step) {
        var _this = _super.call(this) || this;
        _this.output = output;
        _this.step = step;
        return _this;
    }
    UriHostLiteralParser.prototype.feed = function (input) {
        return UriHostLiteralParser.parse(input, this.output, this.step);
    };
    UriHostLiteralParser.parse = function (input, output, step) {
        if (step === void 0) { step = 1; }
        var c = 0;
        if (step === 1) {
            if (!input.isEmpty() && (c = input.head(), c === 91)) {
                input.step();
                step = 2;
            }
            else if (!input.isEmpty()) {
                return Iteratee.expected('\'[\'', input);
            }
            else if (input.isDone()) {
                return Iteratee.unexpected(input);
            }
        }
        if (step === 2) {
            output = output || new StringOutput();
            while (!input.isEmpty() && (c = input.head(), Uri.isHostChar(c) || c === 58)) {
                input.step();
                output.push(Iteratee.toLowerCase(c));
            }
            if (!input.isEmpty() && c === 93) {
                input.step();
                return Iteratee.done(UriHostIPv6.of(output.bind()));
            }
            else if (!input.isEmpty() || input.isDone()) {
                return Iteratee.unexpected(input);
            }
        }
        return new UriHostLiteralParser(output, step);
    };
    return UriHostLiteralParser;
}(Iteratee));
var UriPortParser = (function (_super) {
    __extends(UriPortParser, _super);
    function UriPortParser(port) {
        var _this = _super.call(this) || this;
        _this.port = port;
        return _this;
    }
    UriPortParser.prototype.feed = function (input) {
        return UriPortParser.parse(input, this.port);
    };
    UriPortParser.parse = function (input, port) {
        if (port === void 0) { port = 0; }
        var c = 0;
        while (!input.isEmpty() && (c = input.head(), Iteratee.isDigit(c))) {
            input.step();
            port = 10 * port + Iteratee.decodeDigit(c);
        }
        if (!input.isEmpty() || input.isDone()) {
            return Iteratee.done(UriPort.of(port));
        }
        return new UriPortParser(port);
    };
    return UriPortParser;
}(Iteratee));
var UriPathParser = (function (_super) {
    __extends(UriPathParser, _super);
    function UriPathParser(builder, output, c1, step) {
        var _this = _super.call(this) || this;
        _this.builder = builder;
        _this.output = output;
        _this.c1 = c1;
        _this.step = step;
        return _this;
    }
    UriPathParser.prototype.feed = function (input) {
        return UriPathParser.parse(input, this.builder, this.output, this.c1, this.step);
    };
    UriPathParser.parse = function (input, builder, output, c1, step) {
        if (c1 === void 0) { c1 = 0; }
        if (step === void 0) { step = 1; }
        var c = 0;
        while (!input.isEmpty() || input.isDone()) {
            if (step === 1) {
                while (!input.isEmpty() && (c = input.head(), Uri.isPathChar(c))) {
                    output = output || new StringOutput();
                    input.step();
                    output.push(c);
                }
                if (!input.isEmpty() && c === 47) {
                    input.step();
                    builder = builder || new UriPathBuilder();
                    if (output) {
                        builder.push(output.bind());
                        output = undefined;
                    }
                    builder.push('/');
                }
                else if (!input.isEmpty() && c === 37) {
                    input.step();
                    step = 2;
                }
                else if (!input.isEmpty() || input.isDone()) {
                    builder = builder || new UriPathBuilder();
                    if (output) {
                        builder.push(output.bind());
                    }
                    return Iteratee.done(builder.bind());
                }
            }
            if (step === 2) {
                if (!input.isEmpty() && (c = input.head(), Iteratee.isHexChar(c))) {
                    input.step();
                    c1 = c;
                    step = 3;
                }
                else if (!input.isEmpty()) {
                    return Iteratee.expected('hex digit', input);
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            if (step === 3) {
                if (!input.isEmpty() && (c = input.head(), Iteratee.isHexChar(c))) {
                    output = output || new StringOutput();
                    input.step();
                    output.push((Iteratee.decodeHexChar(c1) << 4) + Iteratee.decodeHexChar(c));
                    c1 = 0;
                    step = 1;
                }
                else if (!input.isEmpty()) {
                    return Iteratee.expected('hex digit', input);
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
        }
        return new UriPathParser(builder, output, c1, step);
    };
    return UriPathParser;
}(Iteratee));
var UriQueryParser = (function (_super) {
    __extends(UriQueryParser, _super);
    function UriQueryParser(keyOutput, valueOutput, builder, c1, step) {
        var _this = _super.call(this) || this;
        _this.keyOutput = keyOutput;
        _this.valueOutput = valueOutput;
        _this.builder = builder;
        _this.c1 = c1;
        _this.step = step;
        return _this;
    }
    UriQueryParser.prototype.feed = function (input) {
        return UriQueryParser.parse(input, this.keyOutput, this.valueOutput, this.builder, this.c1, this.step);
    };
    UriQueryParser.parse = function (input, keyOutput, valueOutput, builder, c1, step) {
        if (c1 === void 0) { c1 = 0; }
        if (step === void 0) { step = 1; }
        var c = 0;
        while (!input.isEmpty() || input.isDone()) {
            if (step === 1) {
                keyOutput = keyOutput || new StringOutput();
                while (!input.isEmpty() && (c = input.head(), Uri.isParamChar(c))) {
                    input.step();
                    keyOutput.push(c);
                }
                if (!input.isEmpty() && c === 61) {
                    input.step();
                    step = 4;
                }
                else if (!input.isEmpty() && c === 38) {
                    input.step();
                    builder = builder || new UriQueryBuilder();
                    builder.param(null, keyOutput.bind());
                    keyOutput = undefined;
                    step = 1;
                }
                else if (!input.isEmpty() && c === 37) {
                    input.step();
                    step = 2;
                }
                else if (!input.isEmpty() || input.isDone()) {
                    builder = builder || new UriQueryBuilder();
                    builder.param(null, keyOutput.bind());
                    return Iteratee.done(builder.bind());
                }
            }
            if (step === 2) {
                if (!input.isEmpty() && (c = input.head(), Iteratee.isHexChar(c))) {
                    input.step();
                    c1 = c;
                    step = 3;
                }
                else if (!input.isEmpty()) {
                    return Iteratee.expected('hex digit', input);
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            if (step === 3) {
                if (!input.isEmpty() && (c = input.head(), Iteratee.isHexChar(c))) {
                    input.step();
                    keyOutput.push((Iteratee.decodeHexChar(c1) << 4) + Iteratee.decodeHexChar(c));
                    c1 = 0;
                    step = 1;
                }
                else if (!input.isEmpty()) {
                    return Iteratee.expected('hex digit', input);
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            if (step === 4) {
                valueOutput = valueOutput || new StringOutput();
                while (!input.isEmpty() && (c = input.head(), Uri.isParamChar(c) || c === 61)) {
                    input.step();
                    valueOutput.push(c);
                }
                if (!input.isEmpty() && c === 38) {
                    input.step();
                    builder = builder || new UriQueryBuilder();
                    builder.param(keyOutput.bind(), valueOutput.bind());
                    keyOutput = undefined;
                    valueOutput = undefined;
                    step = 1;
                }
                else if (!input.isEmpty() && c === 38) {
                    input.step();
                    step = 5;
                }
                else if (!input.isEmpty() || input.isDone()) {
                    builder = builder || new UriQueryBuilder();
                    builder.param(keyOutput.bind(), valueOutput.bind());
                    return Iteratee.done(builder.bind());
                }
            }
            if (step === 5) {
                if (!input.isEmpty() && (c = input.head(), Iteratee.isHexChar(c))) {
                    input.step();
                    c1 = c;
                    step = 6;
                }
                else if (!input.isEmpty()) {
                    return Iteratee.expected('hex digit', input);
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            if (step === 6) {
                if (!input.isEmpty() && (c = input.head(), Iteratee.isHexChar(c))) {
                    input.step();
                    valueOutput.push((Iteratee.decodeHexChar(c1) << 4) + Iteratee.decodeHexChar(c));
                    c1 = 0;
                    step = 4;
                }
                else if (!input.isEmpty()) {
                    return Iteratee.expected('hex digit', input);
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
        }
        return new UriQueryParser(keyOutput, valueOutput, builder, c1, step);
    };
    return UriQueryParser;
}(Iteratee));
var UriFragmentParser = (function (_super) {
    __extends(UriFragmentParser, _super);
    function UriFragmentParser(output, c1, step) {
        var _this = _super.call(this) || this;
        _this.output = output;
        _this.c1 = c1;
        _this.step = step;
        return _this;
    }
    UriFragmentParser.prototype.feed = function (input) {
        return UriFragmentParser.parse(input, this.output, this.c1, this.step);
    };
    UriFragmentParser.parse = function (input, output, c1, step) {
        if (output === void 0) { output = new StringOutput(); }
        if (c1 === void 0) { c1 = 0; }
        if (step === void 0) { step = 1; }
        var c = 0;
        while (!input.isEmpty() || input.isDone()) {
            if (step === 1) {
                while (!input.isEmpty() && (c = input.head(), Uri.isFragmentChar(c))) {
                    input.step();
                    output.push(c);
                }
                if (!input.isEmpty() && c === 37) {
                    input.step();
                    step = 2;
                }
                else if (!input.isEmpty() || input.isDone()) {
                    return Iteratee.done(UriFragment.of(output.bind()));
                }
            }
            if (step === 2) {
                if (!input.isEmpty() && (c = input.head(), Iteratee.isHexChar(c))) {
                    input.step();
                    c1 = c;
                    step = 3;
                }
                else if (!input.isEmpty()) {
                    return Iteratee.expected('hex digit', input);
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            if (step === 3) {
                if (!input.isEmpty() && (c = input.head(), Iteratee.isHexChar(c))) {
                    input.step();
                    output.push((Iteratee.decodeHexChar(c1) << 4) + Iteratee.decodeHexChar(c));
                    c1 = 0;
                    step = 1;
                }
                else if (!input.isEmpty()) {
                    return Iteratee.expected('hex digit', input);
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
        }
        return new UriFragmentParser(output, c1, step);
    };
    return UriFragmentParser;
}(Iteratee));

var Uri = (function () {
    function Uri(scheme, authority, path, query, fragment) {
        this._scheme = scheme;
        this._authority = authority;
        this._path = path;
        this._query = query;
        this._fragment = fragment;
    }
    Uri.prototype.isDefined = function () {
        return this._scheme.isDefined() || this._authority.isDefined() || this._path.isDefined()
            || this._query.isDefined() || this._fragment.isDefined();
    };
    Uri.prototype.isEmpty = function () {
        return !this._scheme.isDefined() && !this._authority.isDefined() && !this._path.isDefined()
            && !this._query.isDefined() && !this._fragment.isDefined();
    };
    Uri.prototype.scheme = function (scheme) {
        if (scheme === undefined) {
            return this._scheme;
        }
        else {
            scheme = UriScheme.fromAny(scheme);
            return Uri.of(scheme, this._authority, this._path, this._query, this._fragment);
        }
    };
    Uri.prototype.authority = function (authority) {
        if (authority === undefined) {
            return this._authority;
        }
        else {
            authority = UriAuthority.fromAny(authority);
            return Uri.of(this._scheme, authority, this._path, this._query, this._fragment);
        }
    };
    Uri.prototype.user = function (user) {
        if (user === undefined) {
            return this._authority._user;
        }
        else {
            var authority = this._authority.user(user);
            return Uri.of(this._scheme, authority, this._path, this._query, this._fragment);
        }
    };
    Uri.prototype.username = function (username, password) {
        if (username === undefined) {
            return this._authority._user._username || '';
        }
        else {
            var authority = this._authority.username(username, password);
            return Uri.of(this._scheme, authority, this._path, this._query, this._fragment);
        }
    };
    Uri.prototype.password = function (password) {
        if (password === undefined) {
            return this._authority._user._password;
        }
        else {
            var authority = this._authority.password(password);
            return Uri.of(this._scheme, authority, this._path, this._query, this._fragment);
        }
    };
    Uri.prototype.host = function (host) {
        if (host === undefined) {
            return this._authority._host;
        }
        else {
            var authority = this._authority.host(host);
            return Uri.of(this._scheme, authority, this._path, this._query, this._fragment);
        }
    };
    Uri.prototype.hostName = function (address) {
        if (address === undefined) {
            return this._authority._host.name();
        }
        else {
            var authority = this._authority.hostName(address);
            return Uri.of(this._scheme, authority, this._path, this._query, this._fragment);
        }
    };
    Uri.prototype.hostIPv4 = function (address) {
        if (address === undefined) {
            return this._authority._host.ipv4();
        }
        else {
            var authority = this._authority.hostIPv4(address);
            return Uri.of(this._scheme, authority, this._path, this._query, this._fragment);
        }
    };
    Uri.prototype.hostIPv6 = function (address) {
        if (address === undefined) {
            return this._authority._host.ipv6();
        }
        else {
            var authority = this._authority.hostIPv6(address);
            return Uri.of(this._scheme, authority, this._path, this._query, this._fragment);
        }
    };
    Uri.prototype.port = function (port) {
        if (port === undefined) {
            return this._authority._port;
        }
        else {
            var authority = this._authority.port(port);
            return Uri.of(this._scheme, authority, this._path, this._query, this._fragment);
        }
    };
    Uri.prototype.path = function (path) {
        if (path === undefined) {
            return this._path;
        }
        else {
            path = UriPath.fromAny(path);
            return Uri.of(this._scheme, this._authority, path, this._query, this._fragment);
        }
    };
    Uri.prototype.query = function (query) {
        if (query === undefined) {
            return this._query;
        }
        else {
            query = UriQuery.fromAny(query);
            return Uri.of(this._scheme, this._authority, this._path, query, this._fragment);
        }
    };
    Uri.prototype.param = function (key, value) {
        if (value === undefined) {
            return this._query.get(key);
        }
        else {
            var query = this._query.param(key, value);
            return Uri.of(this._scheme, this._authority, this._path, query, this._fragment);
        }
    };
    Uri.prototype.fragment = function (fragment) {
        if (fragment === undefined) {
            return this._fragment;
        }
        else {
            fragment = UriFragment.fromAny(fragment);
            return Uri.of(this._scheme, this._authority, this._path, this._query, fragment);
        }
    };
    Uri.prototype.base = function () {
        if (this._path.isDefined() || this._query.isDefined() || this._fragment.isDefined()) {
            return Uri.of(this._scheme, this._authority);
        }
        else {
            return this;
        }
    };
    Uri.prototype.resolve = function (relative) {
        relative = Uri.fromAny(relative);
        if (relative._scheme.isDefined()) {
            return Uri.of(relative._scheme, relative._authority, relative._path.removeDotSegments(), relative._query, relative._fragment);
        }
        else if (relative._authority.isDefined()) {
            return Uri.of(this._scheme, relative._authority, relative._path.removeDotSegments(), relative._query, relative._fragment);
        }
        else if (relative._path.isEmpty()) {
            return Uri.of(this._scheme, this._authority, this._path, relative._query.isDefined() ? relative._query : this._query, relative._fragment);
        }
        else if (relative._path.head() === '/') {
            return Uri.of(this._scheme, this._authority, relative._path.removeDotSegments(), relative._query, relative._fragment);
        }
        else {
            return Uri.of(this._scheme, this._authority, this.merge(relative._path).removeDotSegments(), relative._query, relative._fragment);
        }
    };
    Uri.prototype.merge = function (relative) {
        if (this._authority.isDefined() && this._path.isEmpty()) {
            return new UriPathSlash(relative);
        }
        else if (this._path.isEmpty()) {
            return relative;
        }
        else {
            return this._path.merge(relative);
        }
    };
    Uri.prototype.unresolve = function (absolute) {
        absolute = Uri.fromAny(absolute);
        if (!this._scheme.equals(absolute._scheme) || !this._authority.equals(absolute._authority)) {
            return absolute;
        }
        else {
            return Uri.of(UriScheme.Undefined, UriAuthority.Undefined, this._path.unmerge(absolute._path), absolute._query, absolute._fragment);
        }
    };
    Uri.prototype.writeUri = function (output) {
        if (this._scheme.isDefined()) {
            this._scheme.writeUri(output);
            output.push(58);
        }
        if (this._authority.isDefined()) {
            output.push(47, 47);
            this._authority.writeUri(output);
        }
        this._path.writeUri(output);
        if (this._query.isDefined()) {
            output.push(63);
            this._query.writeUri(output);
        }
        if (this._fragment.isDefined()) {
            output.push(35);
            this._fragment.writeUri(output);
        }
    };
    Uri.prototype.toUri = function () {
        var str = this._string;
        if (str === undefined) {
            var output = new StringOutput();
            this.writeUri(output);
            str = output.bind();
            this._string = str;
        }
        return str;
    };
    Uri.prototype.compare = function (that) {
        var order = this.toUri().localeCompare(that.toUri());
        return order < 0 ? -1 : order > 0 ? 1 : 0;
    };
    Uri.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof Uri) {
            if (this._hashCode !== undefined && that._hashCode !== undefined && this._hashCode !== that._hashCode) {
                return false;
            }
            return this._scheme.equals(that._scheme) && this._authority.equals(that._authority)
                && this._path.equals(that._path) && this._query.equals(that._query)
                && this._fragment.equals(that._fragment);
        }
        return false;
    };
    Uri.prototype.hashCode = function () {
        var code = this._hashCode;
        if (code === undefined) {
            code = Murmur3.mash(Murmur3.mix(Murmur3.mix(Murmur3.mix(Murmur3.mix(Murmur3.mix(0xF5785F14, this._scheme.hashCode()), this._authority.hashCode()), this._path.hashCode()), this._query.hashCode()), this._fragment.hashCode()));
            this._hashCode = code;
        }
        return code;
    };
    Uri.prototype.toString = function () {
        return this.toUri();
    };
    Uri.parse = function (str) {
        var key = Text$1.valueOf(str);
        if (str.length <= 128) {
            var uri_1 = Uri.ParseCache.get(key);
            if (uri_1 !== undefined) {
                return uri_1;
            }
        }
        var input = new StringInput(str);
        var parser = UriParser.parse(input);
        if (!input.isEmpty() && parser.isDone()) {
            parser = Iteratee.unexpected(input);
        }
        var uri = parser.bind();
        Uri.ParseCache.set(key, uri);
        return uri;
    };
    Uri.of = function (scheme, authority, path, query, fragment) {
        if (scheme === void 0) { scheme = UriScheme.Undefined; }
        if (authority === void 0) { authority = UriAuthority.Undefined; }
        if (path === void 0) { path = UriPath.Empty; }
        if (query === void 0) { query = UriQuery.Undefined; }
        if (fragment === void 0) { fragment = UriFragment.Undefined; }
        if (scheme.isDefined() || authority.isDefined() || path.isDefined()
            || query.isDefined() || fragment.isDefined()) {
            return new Uri(scheme, authority, path, query, fragment);
        }
        else {
            return Uri.Empty;
        }
    };
    Uri.scheme = function (scheme) {
        scheme = UriScheme.fromAny(scheme);
        return Uri.of(scheme, undefined, undefined, undefined, undefined);
    };
    Uri.authority = function (authority) {
        authority = UriAuthority.fromAny(authority);
        return Uri.of(undefined, authority, undefined, undefined, undefined);
    };
    Uri.user = function (user) {
        var authority = UriAuthority.user(user);
        return Uri.of(undefined, authority, undefined, undefined, undefined);
    };
    Uri.username = function (username, password) {
        var authority = UriAuthority.username(username, password);
        return Uri.of(undefined, authority, undefined, undefined, undefined);
    };
    Uri.password = function (password) {
        var authority = UriAuthority.password(password);
        return Uri.of(undefined, authority, undefined, undefined, undefined);
    };
    Uri.host = function (host) {
        var authority = UriAuthority.host(host);
        return Uri.of(undefined, authority, undefined, undefined, undefined);
    };
    Uri.hostName = function (address) {
        var authority = UriAuthority.hostName(address);
        return Uri.of(undefined, authority, undefined, undefined, undefined);
    };
    Uri.hostIPv4 = function (address) {
        var authority = UriAuthority.hostIPv4(address);
        return Uri.of(undefined, authority, undefined, undefined, undefined);
    };
    Uri.hostIPv6 = function (address) {
        var authority = UriAuthority.hostIPv6(address);
        return Uri.of(undefined, authority, undefined, undefined, undefined);
    };
    Uri.port = function (port) {
        var authority = UriAuthority.port(port);
        return Uri.of(undefined, authority, undefined, undefined, undefined);
    };
    Uri.path = function (path) {
        path = UriPath.fromAny(path);
        return Uri.of(undefined, undefined, path, undefined, undefined);
    };
    Uri.query = function (query) {
        query = UriQuery.fromAny(query);
        return Uri.of(undefined, undefined, undefined, query, undefined);
    };
    Uri.param = function (key, value) {
        var query = UriQuery.param(key, value);
        return Uri.of(undefined, undefined, undefined, query, undefined);
    };
    Uri.fragment = function (fragment) {
        fragment = UriFragment.fromAny(fragment);
        return Uri.of(undefined, undefined, undefined, undefined, fragment);
    };
    Uri.fromAny = function (uri) {
        if (uri === null || uri === undefined) {
            return Uri.Empty;
        }
        else if (uri instanceof Uri) {
            return uri;
        }
        else if (typeof uri === 'object') {
            var scheme = UriScheme.fromAny(uri.scheme);
            var authority = UriAuthority.fromAny(uri.authority || uri);
            var path = UriPath.fromAny(uri.path);
            var query = UriQuery.fromAny(uri.query);
            var fragment = UriFragment.fromAny(uri.fragment);
            if (scheme.isDefined() || authority.isDefined() || path.isDefined()
                || query.isDefined() || fragment.isDefined()) {
                return new Uri(scheme, authority, path, query, fragment);
            }
            else {
                return Uri.Empty;
            }
        }
        else if (typeof uri === 'string') {
            return Uri.parse(uri);
        }
        else {
            throw new TypeError('' + uri);
        }
    };
    Uri.resolve = function (base, relative) {
        return Uri.fromAny(base).resolve(relative);
    };
    Uri.unresolve = function (base, absolute) {
        return Uri.fromAny(base).unresolve(absolute);
    };
    Uri.isUnreservedChar = function (c) {
        return c >= 65 && c <= 90
            || c >= 97 && c <= 122
            || c >= 48 && c <= 57
            || c === 45 || c === 46
            || c === 95 || c === 126;
    };
    Uri.isSubDelimChar = function (c) {
        return c === 33 || c === 36
            || c === 38 || c === 40
            || c === 41 || c === 42
            || c === 43 || c === 44
            || c === 59 || c === 61
            || c === 39;
    };
    Uri.isSchemeChar = function (c) {
        return c >= 65 && c <= 90
            || c >= 97 && c <= 122
            || c >= 48 && c <= 57
            || c === 43 || c === 45
            || c === 46;
    };
    Uri.isUserInfoChar = function (c) {
        return Uri.isUnreservedChar(c)
            || Uri.isSubDelimChar(c)
            || c === 58;
    };
    Uri.isUserChar = function (c) {
        return Uri.isUnreservedChar(c)
            || Uri.isSubDelimChar(c);
    };
    Uri.isHostChar = function (c) {
        return Uri.isUnreservedChar(c)
            || Uri.isSubDelimChar(c);
    };
    Uri.isPathChar = function (c) {
        return Uri.isUnreservedChar(c)
            || Uri.isSubDelimChar(c)
            || c === 58 || c === 64;
    };
    Uri.isQueryChar = function (c) {
        return Uri.isUnreservedChar(c)
            || Uri.isSubDelimChar(c)
            || c === 47 || c === 58
            || c === 63 || c === 64;
    };
    Uri.isParamChar = function (c) {
        return Uri.isUnreservedChar(c)
            || c === 33 || c === 36
            || c === 40 || c === 41
            || c === 42 || c === 43
            || c === 44 || c === 47
            || c === 58 || c === 59
            || c === 63 || c === 64
            || c === 39;
    };
    Uri.isFragmentChar = function (c) {
        return Uri.isUnreservedChar(c)
            || Uri.isSubDelimChar(c)
            || c === 47 || c === 58
            || c === 63 || c === 64;
    };
    Uri.writeScheme = function (scheme, output) {
        for (var i = 0, n = scheme.length; i < n; i += 1) {
            var c = scheme.charCodeAt(i);
            if (i > 0 && Uri.isSchemeChar(c) || i === 0 && Iteratee.isAlpha(c)) {
                output.push(c);
            }
            else {
                throw new Error('invalid scheme: ' + scheme);
            }
        }
    };
    Uri.writeUserInfo = function (userInfo, output) {
        for (var i = 0, n = userInfo.length; i < n; i += 1) {
            var c = userInfo.charCodeAt(i);
            if (Uri.isUserInfoChar(c)) {
                output.push(c);
            }
            else {
                Uri.writeEncoded(c, output);
            }
        }
    };
    Uri.writeUser = function (user, output) {
        for (var i = 0, n = user.length; i < n; i += 1) {
            var c = user.charCodeAt(i);
            if (Uri.isUserChar(c)) {
                output.push(c);
            }
            else {
                Uri.writeEncoded(c, output);
            }
        }
    };
    Uri.writeHost = function (address, output) {
        for (var i = 0, n = address.length; i < n; i += 1) {
            var c = address.charCodeAt(i);
            if (Uri.isHostChar(c)) {
                output.push(c);
            }
            else {
                Uri.writeEncoded(c, output);
            }
        }
    };
    Uri.writeHostLiteral = function (address, output) {
        for (var i = 0, n = address.length; i < n; i += 1) {
            var c = address.charCodeAt(i);
            if (Uri.isHostChar(c) || c === 58) {
                output.push(c);
            }
            else {
                Uri.writeEncoded(c, output);
            }
        }
    };
    Uri.writePort = function (port, output) {
        var i = 9;
        var digits = new Array(10);
        while (port > 0) {
            digits[i] = port % 10;
            port = Math.floor(port / 10);
            i -= 1;
        }
        i += 1;
        while (i < 10) {
            output.push(48 + digits[i]);
            i += 1;
        }
    };
    Uri.writePathSegment = function (segment, output) {
        for (var i = 0, n = segment.length; i < n; i += 1) {
            var c = segment.charCodeAt(i);
            if (Uri.isPathChar(c)) {
                output.push(c);
            }
            else {
                Uri.writeEncoded(c, output);
            }
        }
    };
    Uri.writeQuery = function (query, output) {
        for (var i = 0, n = query.length; i < n; i += 1) {
            var c = query.charCodeAt(i);
            if (Uri.isQueryChar(c)) {
                output.push(c);
            }
            else {
                Uri.writeEncoded(c, output);
            }
        }
    };
    Uri.writeParam = function (param, output) {
        for (var i = 0, n = param.length; i < n; i += 1) {
            var c = param.charCodeAt(i);
            if (Uri.isParamChar(c)) {
                output.push(c);
            }
            else {
                Uri.writeEncoded(c, output);
            }
        }
    };
    Uri.writeFragment = function (fragment, output) {
        for (var i = 0, n = fragment.length; i < n; i += 1) {
            var c = fragment.charCodeAt(i);
            if (Uri.isFragmentChar(c)) {
                output.push(c);
            }
            else {
                Uri.writeEncoded(c, output);
            }
        }
    };
    Uri.writeEncoded = function (c, output) {
        if (c === 0x00) {
            Uri.writePctEncoded(0xC0, output);
            Uri.writePctEncoded(0x80, output);
        }
        else if (c >= 0x00 && c <= 0x7F) {
            Uri.writePctEncoded(c, output);
        }
        else if (c >= 0x80 && c <= 0x07FF) {
            Uri.writePctEncoded(0xC0 | (c >>> 6), output);
            Uri.writePctEncoded(0x80 | (c & 0x3F), output);
        }
        else if (c >= 0x0800 && c <= 0xFFFF
            || c >= 0xE000 && c <= 0xFFFF) {
            Uri.writePctEncoded(0xE0 | (c >>> 12), output);
            Uri.writePctEncoded(0x80 | (c >>> 6 & 0x3F), output);
            Uri.writePctEncoded(0x80 | (c & 0x3F), output);
        }
        else if (c >= 0x10000 && c <= 0x10FFFF) {
            Uri.writePctEncoded(0xF0 | (c >>> 18), output);
            Uri.writePctEncoded(0x80 | (c >>> 12 & 0x3F), output);
            Uri.writePctEncoded(0x80 | (c >>> 6 & 0x3F), output);
            Uri.writePctEncoded(0x80 | (c & 0x3F), output);
        }
        else {
            Uri.writePctEncoded(0xEF, output);
            Uri.writePctEncoded(0xBF, output);
            Uri.writePctEncoded(0xBD, output);
        }
    };
    Uri.writePctEncoded = function (c, output) {
        output.push(37, Uri.encodeHexChar(c >>> 4 & 0xF), Uri.encodeHexChar(c & 0xF));
    };
    Uri.encodeHexChar = function (x) {
        if (x < 10) {
            return 48 + x;
        }
        else {
            return 97 + (x - 10);
        }
    };
    Uri.Empty = undefined;
    Uri.ParseCache = new HashGenCacheMap(64);
    return Uri;
}());
var UriScheme = (function () {
    function UriScheme(name) {
        this._name = name;
    }
    UriScheme.prototype.isDefined = function () {
        return this._name.length !== 0;
    };
    Object.defineProperty(UriScheme.prototype, "name", {
        get: function () {
            return this._name;
        },
        enumerable: true,
        configurable: true
    });
    UriScheme.prototype.valueOf = function () {
        return this._name;
    };
    UriScheme.prototype.writeUri = function (output) {
        Uri.writeScheme(this._name, output);
    };
    UriScheme.prototype.toUri = function () {
        var output = new StringOutput();
        this.writeUri(output);
        return output.bind();
    };
    UriScheme.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof UriScheme) {
            return this._name === that._name;
        }
        return false;
    };
    UriScheme.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(0x79D3C784, Murmur3.hash(this._name)));
    };
    UriScheme.prototype.toString = function () {
        return this._name;
    };
    UriScheme.parse = function (input) {
        if (typeof input === 'string') {
            input = new StringInput(input);
        }
        var parser = UriSchemeParser.parse(input);
        if (!input.isEmpty() && parser.isDone()) {
            parser = Iteratee.unexpected(input);
        }
        return parser.bind();
    };
    UriScheme.of = function (name) {
        if (name.length !== 0) {
            return new UriScheme(name);
        }
        else {
            return UriScheme.Undefined;
        }
    };
    UriScheme.fromAny = function (scheme) {
        if (scheme === null || scheme === undefined) {
            return UriScheme.Undefined;
        }
        else if (scheme instanceof UriScheme) {
            return scheme;
        }
        else if (typeof scheme === 'string') {
            return UriScheme.of(scheme);
        }
        else {
            throw new TypeError('' + scheme);
        }
    };
    UriScheme.Undefined = new UriScheme('');
    return UriScheme;
}());
var UriAuthority = (function () {
    function UriAuthority(user, host, port) {
        this._user = user;
        this._host = host;
        this._port = port;
    }
    UriAuthority.prototype.isDefined = function () {
        return this._user.isDefined() || this._host.isDefined() || this._port.isDefined();
    };
    UriAuthority.prototype.user = function (user) {
        if (user === undefined) {
            return this._user;
        }
        else {
            user = UriUser.fromAny(user);
            return UriAuthority.of(user, this._host, this._port);
        }
    };
    UriAuthority.prototype.username = function (username, password) {
        if (username === undefined) {
            return this._user._username || '';
        }
        else {
            var user = this._user.username(username, password);
            return UriAuthority.of(user, this._host, this._port);
        }
    };
    UriAuthority.prototype.password = function (password) {
        if (password === undefined) {
            return this._user._password;
        }
        else {
            var user = this._user.password(password);
            return UriAuthority.of(user, this._host, this._port);
        }
    };
    UriAuthority.prototype.host = function (host) {
        if (host === undefined) {
            return this._host;
        }
        else {
            host = UriHost.fromAny(host);
            return UriAuthority.of(this._user, host, this._port);
        }
    };
    UriAuthority.prototype.hostName = function (address) {
        if (address === undefined) {
            return this._host.name();
        }
        else {
            var host = UriHostName.of(address);
            return UriAuthority.of(this._user, host, this._port);
        }
    };
    UriAuthority.prototype.hostIPv4 = function (address) {
        if (address === undefined) {
            return this._host.ipv4();
        }
        else {
            var host = UriHostIPv4.of(address);
            return UriAuthority.of(this._user, host, this._port);
        }
    };
    UriAuthority.prototype.hostIPv6 = function (address) {
        if (address === undefined) {
            return this._host.ipv6();
        }
        else {
            var host = UriHostIPv6.of(address);
            return UriAuthority.of(this._user, host, this._port);
        }
    };
    UriAuthority.prototype.port = function (port) {
        if (port === undefined) {
            return this._port;
        }
        else {
            port = UriPort.fromAny(port);
            return UriAuthority.of(this._user, this._host, port);
        }
    };
    UriAuthority.prototype.writeUri = function (output) {
        if (this._user.isDefined()) {
            this._user.writeUri(output);
            output.push(64);
        }
        this._host.writeUri(output);
        if (this._port.isDefined()) {
            output.push(58);
            this._port.writeUri(output);
        }
    };
    UriAuthority.prototype.toUri = function () {
        var output = new StringOutput();
        this.writeUri(output);
        return output.bind();
    };
    UriAuthority.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof UriAuthority) {
            return this._user.equals(that._user) && this._host.equals(that._host)
                && this._port.equals(that._port);
        }
        return false;
    };
    UriAuthority.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(Murmur3.mix(Murmur3.mix(0x6D685FC2, this._user.hashCode()), this._host.hashCode()), this._port.hashCode()));
    };
    UriAuthority.prototype.toString = function () {
        return this.toUri();
    };
    UriAuthority.parse = function (input) {
        if (typeof input === 'string') {
            input = new StringInput(input);
        }
        var parser = UriAuthorityParser.parse(input);
        if (!input.isEmpty() && parser.isDone()) {
            parser = Iteratee.unexpected(input);
        }
        return parser.bind();
    };
    UriAuthority.of = function (user, host, port) {
        if (user === void 0) { user = UriUser.Undefined; }
        if (host === void 0) { host = UriHost.Undefined; }
        if (port === void 0) { port = UriPort.Undefined; }
        if (user.isDefined() || host.isDefined() || port.isDefined()) {
            return new UriAuthority(user, host, port);
        }
        else {
            return UriAuthority.Undefined;
        }
    };
    UriAuthority.user = function (user) {
        user = UriUser.fromAny(user);
        return UriAuthority.of(user, undefined, undefined);
    };
    UriAuthority.username = function (username, password) {
        var user = UriUser.of(username, password);
        return UriAuthority.of(user, undefined, undefined);
    };
    UriAuthority.password = function (password) {
        var user = UriUser.of('', password);
        return UriAuthority.of(user, undefined, undefined);
    };
    UriAuthority.host = function (host) {
        host = UriHost.fromAny(host);
        return UriAuthority.of(undefined, host, undefined);
    };
    UriAuthority.hostName = function (address) {
        var host = UriHostName.of(address);
        return UriAuthority.of(undefined, host, undefined);
    };
    UriAuthority.hostIPv4 = function (address) {
        var host = UriHostIPv4.of(address);
        return UriAuthority.of(undefined, host, undefined);
    };
    UriAuthority.hostIPv6 = function (address) {
        var host = UriHostIPv6.of(address);
        return UriAuthority.of(undefined, host, undefined);
    };
    UriAuthority.port = function (port) {
        port = UriPort.fromAny(port);
        return UriAuthority.of(undefined, undefined, port);
    };
    UriAuthority.fromAny = function (authority) {
        if (authority === null || authority === undefined) {
            return UriAuthority.Undefined;
        }
        else if (authority instanceof UriAuthority) {
            return authority;
        }
        else if (typeof authority === 'object') {
            var user = UriUser.fromAny(authority.user || authority);
            var host = UriHost.fromAny(authority.host);
            var port = UriPort.fromAny(authority.port);
            return UriAuthority.of(user, host, port);
        }
        else if (typeof authority === 'string') {
            return UriAuthority.parse(authority);
        }
        else {
            throw new TypeError('' + authority);
        }
    };
    UriAuthority.Undefined = undefined;
    return UriAuthority;
}());
var UriUser = (function () {
    function UriUser(username, password) {
        if (password === void 0) { password = null; }
        this._username = username;
        this._password = password;
    }
    UriUser.prototype.isDefined = function () {
        return this._username !== null;
    };
    UriUser.prototype.username = function (username, password) {
        if (password === void 0) { password = this._password; }
        if (username === undefined) {
            return this._username || '';
        }
        else {
            return UriUser.of(username, this._password);
        }
    };
    UriUser.prototype.password = function (password) {
        if (password === undefined) {
            return this._password;
        }
        else {
            return UriUser.of(this._username, password);
        }
    };
    UriUser.prototype.writeUri = function (output) {
        if (this._username !== null) {
            Uri.writeUser(this._username, output);
            if (this._password !== null) {
                output.push(58);
                Uri.writeUser(this._password, output);
            }
        }
    };
    UriUser.prototype.toUri = function () {
        var output = new StringOutput();
        this.writeUri(output);
        return output.bind();
    };
    UriUser.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof UriUser) {
            return this._username === that._username && this._password === that._password;
        }
        return false;
    };
    UriUser.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(Murmur3.mix(0x07CAAB751, Murmur3.hash(this._username)), Murmur3.hash(this._password)));
    };
    UriUser.prototype.toString = function () {
        return this.toUri();
    };
    UriUser.parse = function (input) {
        if (typeof input === 'string') {
            input = new StringInput(input);
        }
        var parser = UriUserParser.parse(input);
        if (!input.isEmpty() && parser.isDone()) {
            parser = Iteratee.unexpected(input);
        }
        return parser.bind();
    };
    UriUser.of = function (username, password) {
        if (password === void 0) { password = null; }
        if (username !== null || password !== null) {
            return new UriUser(username || '', password);
        }
        else {
            return UriUser.Undefined;
        }
    };
    UriUser.fromAny = function (user) {
        if (user === null || user === undefined) {
            return UriUser.Undefined;
        }
        else if (user instanceof UriUser) {
            return user;
        }
        else if (typeof user === 'object') {
            var username = typeof user.username === 'string' ? user.username : null;
            var password = typeof user.password === 'string' ? user.password : null;
            return UriUser.of(username, password);
        }
        else if (typeof user === 'string') {
            return UriUser.parse(user);
        }
        else {
            throw new TypeError('' + user);
        }
    };
    UriUser.Undefined = new UriUser(null, null);
    return UriUser;
}());
var UriHost = (function () {
    function UriHost() {
    }
    UriHost.prototype.name = function () {
        return null;
    };
    UriHost.prototype.ipv4 = function () {
        return null;
    };
    UriHost.prototype.ipv6 = function () {
        return null;
    };
    UriHost.prototype.toUri = function () {
        var output = new StringOutput();
        this.writeUri(output);
        return output.bind();
    };
    UriHost.prototype.toString = function () {
        return this.toUri();
    };
    UriHost.parse = function (input) {
        if (typeof input === 'string') {
            input = new StringInput(input);
        }
        var parser = UriHostParser.parse(input);
        if (!input.isEmpty() && parser.isDone()) {
            parser = Iteratee.unexpected(input);
        }
        return parser.bind();
    };
    UriHost.fromAny = function (host) {
        if (host === null || host === undefined) {
            return UriHost.Undefined;
        }
        else if (host instanceof UriHost) {
            return host;
        }
        else if (typeof host === 'string') {
            return UriHost.parse(host);
        }
        else {
            throw new TypeError('' + host);
        }
    };
    UriHost.Undefined = undefined;
    return UriHost;
}());
var UriHostName = (function (_super) {
    __extends(UriHostName, _super);
    function UriHostName(address) {
        var _this = _super.call(this) || this;
        _this._address = address;
        return _this;
    }
    UriHostName.prototype.isDefined = function () {
        return true;
    };
    Object.defineProperty(UriHostName.prototype, "address", {
        get: function () {
            return this._address;
        },
        enumerable: true,
        configurable: true
    });
    UriHostName.prototype.name = function () {
        return this._address;
    };
    UriHostName.prototype.writeUri = function (output) {
        Uri.writeHost(this._address, output);
    };
    UriHostName.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof UriHostName) {
            return this._address === that._address;
        }
        return false;
    };
    UriHostName.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(0xEAB43698, Murmur3.hash(this._address)));
    };
    UriHostName.of = function (address) {
        return new UriHostName(address);
    };
    return UriHostName;
}(UriHost));
var UriHostIPv4 = (function (_super) {
    __extends(UriHostIPv4, _super);
    function UriHostIPv4(address) {
        var _this = _super.call(this) || this;
        _this._address = address;
        return _this;
    }
    UriHostIPv4.prototype.isDefined = function () {
        return true;
    };
    Object.defineProperty(UriHostIPv4.prototype, "address", {
        get: function () {
            return this._address;
        },
        enumerable: true,
        configurable: true
    });
    UriHostIPv4.prototype.ipv4 = function () {
        return this._address;
    };
    UriHostIPv4.prototype.writeUri = function (output) {
        Uri.writeHost(this._address, output);
    };
    UriHostIPv4.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof UriHostIPv4) {
            return this._address === that._address;
        }
        return false;
    };
    UriHostIPv4.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(0xA3A94D7A, Murmur3.hash(this._address)));
    };
    UriHostIPv4.of = function (address) {
        return new UriHostIPv4(address);
    };
    return UriHostIPv4;
}(UriHost));
var UriHostIPv6 = (function (_super) {
    __extends(UriHostIPv6, _super);
    function UriHostIPv6(address) {
        var _this = _super.call(this) || this;
        _this._address = address;
        return _this;
    }
    UriHostIPv6.prototype.isDefined = function () {
        return true;
    };
    Object.defineProperty(UriHostIPv6.prototype, "address", {
        get: function () {
            return this._address;
        },
        enumerable: true,
        configurable: true
    });
    UriHostIPv6.prototype.ipv6 = function () {
        return this._address;
    };
    UriHostIPv6.prototype.writeUri = function (output) {
        output.push(91);
        Uri.writeHostLiteral(this._address, output);
        output.push(93);
    };
    UriHostIPv6.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof UriHostIPv6) {
            return this._address === that._address;
        }
        return false;
    };
    UriHostIPv6.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(0x436A9EB1, Murmur3.hash(this._address)));
    };
    UriHostIPv6.of = function (address) {
        return new UriHostIPv6(address);
    };
    return UriHostIPv6;
}(UriHost));
var UriHostUndefined = (function (_super) {
    __extends(UriHostUndefined, _super);
    function UriHostUndefined() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UriHostUndefined.prototype.isDefined = function () {
        return false;
    };
    Object.defineProperty(UriHostUndefined.prototype, "address", {
        get: function () {
            return '';
        },
        enumerable: true,
        configurable: true
    });
    UriHostUndefined.prototype.writeUri = function (output) {
    };
    UriHostUndefined.prototype.equals = function (that) {
        return that instanceof UriHostUndefined;
    };
    UriHostUndefined.prototype.hashCode = function () {
        return 0x8F7430F8;
    };
    return UriHostUndefined;
}(UriHost));
UriHost.Undefined = new UriHostUndefined();
var UriPort = (function () {
    function UriPort(num) {
        this._number = num;
    }
    UriPort.prototype.isDefined = function () {
        return this._number !== 0;
    };
    Object.defineProperty(UriPort.prototype, "number", {
        get: function () {
            return this._number;
        },
        enumerable: true,
        configurable: true
    });
    UriPort.prototype.valueOf = function () {
        return this._number;
    };
    UriPort.prototype.writeUri = function (output) {
        Uri.writePort(this._number, output);
    };
    UriPort.prototype.toUri = function () {
        var output = new StringOutput();
        this.writeUri(output);
        return output.bind();
    };
    UriPort.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof UriPort) {
            return this._number === that._number;
        }
        return false;
    };
    UriPort.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(0x0CC080DD, this._number));
    };
    UriPort.prototype.toString = function () {
        return this.toUri();
    };
    UriPort.parse = function (input) {
        if (typeof input === 'string') {
            input = new StringInput(input);
        }
        var parser = UriPortParser.parse(input);
        if (!input.isEmpty() && parser.isDone()) {
            parser = Iteratee.unexpected(input);
        }
        return parser.bind();
    };
    UriPort.of = function (port) {
        if (port !== 0) {
            return new UriPort(port);
        }
        else {
            return UriPort.Undefined;
        }
    };
    UriPort.fromAny = function (port) {
        if (port === null || port === undefined) {
            return UriPort.Undefined;
        }
        else if (port instanceof UriPort) {
            return port;
        }
        else if (typeof port === 'number') {
            return UriPort.of(port);
        }
        else if (typeof port === 'string') {
            return UriPort.parse(port);
        }
        else {
            throw new TypeError('' + port);
        }
    };
    UriPort.Undefined = new UriPort(0);
    return UriPort;
}());
var UriPath = (function () {
    function UriPath() {
    }
    Object.defineProperty(UriPath.prototype, "length", {
        get: function () {
            var size = 0;
            var path = this;
            while (!path.isEmpty()) {
                size += 1;
                path = path.tail();
            }
            return size;
        },
        enumerable: true,
        configurable: true
    });
    UriPath.prototype.removeDotSegments = function () {
        var path = this;
        var builder = new UriPathBuilder();
        while (!path.isEmpty()) {
            var head = path.head();
            if (head === '.' || head === '..') {
                path = path.tail();
                if (!path.isEmpty()) {
                    path = path.tail();
                }
            }
            else if (head === '/') {
                var rest = path.tail();
                if (!rest.isEmpty()) {
                    var next = rest.head();
                    if (next === '.') {
                        path = rest.tail();
                        if (path.isEmpty()) {
                            path = UriPath.Slash;
                        }
                    }
                    else if (next === '..') {
                        path = rest.tail();
                        if (path.isEmpty()) {
                            path = UriPath.Slash;
                        }
                        if (!builder.isEmpty() && builder.pop() !== '/') {
                            if (!builder.isEmpty()) {
                                builder.pop();
                            }
                        }
                    }
                    else {
                        builder.push(head, next);
                        path = rest.tail();
                    }
                }
                else {
                    builder.push(path.head());
                    path = path.tail();
                }
            }
            else {
                builder.push(path.head());
                path = path.tail();
            }
        }
        return builder.bind();
    };
    UriPath.prototype.merge = function (that) {
        var builder = new UriPathBuilder();
        var head = this.head();
        var tail = this.tail();
        while (!tail.isEmpty()) {
            builder.push(head);
            head = tail.head();
            tail = tail.tail();
        }
        if (head === '/') {
            builder.push(head);
        }
        builder.push(that);
        return builder.bind();
    };
    UriPath.prototype.unmerge = function (relative, root) {
        if (root === void 0) { root = relative; }
        var base = this;
        do {
            if (base.isEmpty()) {
                if (!relative.isEmpty() && !relative.tail().isEmpty()) {
                    return relative.tail();
                }
                else {
                    return relative;
                }
            }
            else if (base.isRelative()) {
                return relative;
            }
            else if (relative.isRelative()) {
                return new UriPathSlash(relative);
            }
            else {
                var a = base.tail();
                var b = relative.tail();
                if (!a.isEmpty() && b.isEmpty()) {
                    return UriPath.Slash;
                }
                else if (a.isEmpty() || b.isEmpty() || a.head() !== b.head()) {
                    return b;
                }
                else {
                    a = a.tail();
                    b = b.tail();
                    if (!a.isEmpty() && b.isEmpty()) {
                        return root;
                    }
                    else {
                        base = a;
                        relative = b;
                    }
                }
            }
        } while (true);
    };
    UriPath.prototype.toArray = function () {
        var components = [];
        var path = this;
        while (!path.isEmpty()) {
            components.push(path.head());
            path = path.tail();
        }
        return components;
    };
    UriPath.prototype.writeUri = function (output) {
        var path = this;
        while (!path.isEmpty()) {
            if (path instanceof UriPathSlash) {
                output.push(47);
            }
            else {
                Uri.writePathSegment(path.head(), output);
            }
            path = path.tail();
        }
    };
    UriPath.prototype.toUri = function () {
        var output = new StringOutput();
        this.writeUri(output);
        return output.bind();
    };
    UriPath.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof UriPath) {
            var xs = this;
            var ys = that;
            while (!xs.isEmpty() && !ys.isEmpty()) {
                if (xs.head() !== ys.head()) {
                    return false;
                }
                xs = xs.tail();
                ys = ys.tail();
            }
            return xs.isEmpty() === ys.isEmpty();
        }
        return false;
    };
    UriPath.prototype.hashCode = function () {
        var code = 0xD7B0CC51;
        var path = this;
        while (!path.isEmpty()) {
            code = Murmur3.mix(code, Murmur3.hash(path.head()));
            path = path.tail();
        }
        return Murmur3.mash(code);
    };
    UriPath.prototype.toString = function () {
        return this.toUri();
    };
    UriPath.builder = function () {
        return new UriPathBuilder();
    };
    UriPath.parse = function (input) {
        if (typeof input === 'string') {
            input = new StringInput(input);
        }
        var parser = UriPathParser.parse(input);
        if (!input.isEmpty() && parser.isDone()) {
            parser = Iteratee.unexpected(input);
        }
        return parser.bind();
    };
    UriPath.of = function () {
        var components = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            components[_i] = arguments[_i];
        }
        var builder = new UriPathBuilder();
        builder.push.apply(builder, arguments);
        return builder.bind();
    };
    UriPath.fromAny = function (path) {
        if (path === null || path === undefined) {
            return UriPath.Empty;
        }
        else if (path instanceof UriPath) {
            return path;
        }
        else if (Array.isArray(path)) {
            return UriPath.of.apply(undefined, path);
        }
        else if (typeof path === 'string') {
            return UriPath.parse(path);
        }
        else {
            throw new TypeError('' + path);
        }
    };
    UriPath.Empty = undefined;
    UriPath.Slash = undefined;
    return UriPath;
}());
var UriPathSegment = (function (_super) {
    __extends(UriPathSegment, _super);
    function UriPathSegment(head, tail) {
        var _this = _super.call(this) || this;
        _this._head = head;
        _this._tail = tail;
        return _this;
    }
    UriPathSegment.prototype.isDefined = function () {
        return true;
    };
    UriPathSegment.prototype.isAbsolute = function () {
        return false;
    };
    UriPathSegment.prototype.isRelative = function () {
        return true;
    };
    UriPathSegment.prototype.isEmpty = function () {
        return false;
    };
    UriPathSegment.prototype.head = function () {
        return this._head;
    };
    UriPathSegment.prototype.tail = function () {
        return this._tail;
    };
    UriPathSegment.prototype.setTail = function (tail) {
        if (tail instanceof UriPathSegment) {
            tail = new UriPathSlash(tail);
        }
        this._tail = tail;
    };
    return UriPathSegment;
}(UriPath));
var UriPathSlash = (function (_super) {
    __extends(UriPathSlash, _super);
    function UriPathSlash(tail) {
        var _this = _super.call(this) || this;
        _this._tail = tail;
        return _this;
    }
    UriPathSlash.prototype.isDefined = function () {
        return true;
    };
    UriPathSlash.prototype.isAbsolute = function () {
        return true;
    };
    UriPathSlash.prototype.isRelative = function () {
        return false;
    };
    UriPathSlash.prototype.isEmpty = function () {
        return false;
    };
    UriPathSlash.prototype.head = function () {
        return '/';
    };
    UriPathSlash.prototype.tail = function () {
        return this._tail;
    };
    UriPathSlash.prototype.setTail = function (tail) {
        this._tail = tail;
    };
    return UriPathSlash;
}(UriPath));
var UriPathEmpty = (function (_super) {
    __extends(UriPathEmpty, _super);
    function UriPathEmpty() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UriPathEmpty.prototype.isDefined = function () {
        return false;
    };
    UriPathEmpty.prototype.isAbsolute = function () {
        return false;
    };
    UriPathEmpty.prototype.isRelative = function () {
        return true;
    };
    UriPathEmpty.prototype.isEmpty = function () {
        return true;
    };
    UriPathEmpty.prototype.head = function () {
        return '';
    };
    UriPathEmpty.prototype.tail = function () {
        throw new Error('empty path');
    };
    UriPathEmpty.prototype.setTail = function (tail) {
        throw new Error('empty path');
    };
    return UriPathEmpty;
}(UriPath));
UriPath.Empty = new UriPathEmpty();
UriPath.Slash = new UriPathSlash(UriPath.Empty);
var UriPathBuilder = (function () {
    function UriPathBuilder() {
        this._first = UriPath.Empty;
        this._last = null;
        this._size = 0;
        this._aliased = 0;
    }
    UriPathBuilder.prototype.isEmpty = function () {
        return this._size === 0;
    };
    UriPathBuilder.prototype.push = function () {
        var components = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            components[_i] = arguments[_i];
        }
        for (var i = 0; i < components.length; i += 1) {
            var component = components[i];
            if (component instanceof UriPath) {
                if (!component.isEmpty()) {
                    if (this._size === 0) {
                        this._first = component;
                    }
                    else {
                        this.dealias(this._size - 1).setTail(component);
                    }
                    this._size += 1;
                    while (!component.tail().isEmpty()) {
                        component = component.tail();
                        this._size += 1;
                    }
                    this._last = component;
                }
            }
            else if (Array.isArray(component)) {
                this.push.apply(this, component);
            }
            else if (typeof component === 'string') {
                var xn = void 0;
                if (component === '/') {
                    xn = new UriPathSlash(UriPath.Empty);
                }
                else {
                    xn = new UriPathSegment(component, UriPath.Empty);
                }
                if (this._size === 0) {
                    this._first = xn;
                }
                else {
                    this.dealias(this._size - 1).setTail(xn);
                }
                this._last = xn;
                this._size += 1;
                this._aliased += 1;
            }
            else {
                throw new TypeError('' + component);
            }
        }
    };
    UriPathBuilder.prototype.pop = function () {
        if (this._size === 0) {
            throw new Error();
        }
        else if (this._size === 1) {
            var x0 = this._first;
            var x = x0.head();
            this._first = x0.tail();
            if (x0.tail().isEmpty()) {
                this._last = null;
            }
            this._size -= 1;
            if (this._aliased > 0) {
                this._aliased -= 1;
            }
            return x;
        }
        else {
            var xi = this.dealias(this._size - 2);
            var x = xi.tail().head();
            xi.setTail(UriPath.Empty);
            this._last = xi;
            this._size -= 1;
            this._aliased -= 1;
            return x;
        }
    };
    UriPathBuilder.prototype.bind = function () {
        this._aliased = 0;
        return this._first;
    };
    UriPathBuilder.prototype.dealias = function (n) {
        var i = 0;
        var xi = null;
        var xs = this._first;
        if (this._aliased <= n) {
            while (i < this._aliased) {
                xi = xs;
                xs = xs.tail();
                i += 1;
            }
            while (i <= n) {
                var xn = void 0;
                if (xs instanceof UriPathSlash) {
                    xn = new UriPathSlash(xs.tail());
                }
                else {
                    xn = new UriPathSegment(xs.head(), xs.tail());
                }
                if (i === 0) {
                    this._first = xn;
                }
                else {
                    xi.setTail(xn);
                }
                xi = xn;
                xs = xs.tail();
                i += 1;
            }
            if (i === this._size) {
                this._last = xi;
            }
            this._aliased = i;
        }
        else if (n === 0) {
            xi = this._first;
        }
        else if (n === this._size - 1) {
            xi = this._last;
        }
        else {
            while (i <= n) {
                xi = xs;
                xs = xs.tail();
                i += 1;
            }
        }
        return xi;
    };
    return UriPathBuilder;
}());
var UriQuery = (function () {
    function UriQuery() {
    }
    Object.defineProperty(UriQuery.prototype, "length", {
        get: function () {
            var size = 0;
            var query = this;
            while (!query.isEmpty()) {
                size += 1;
                query = query.tail();
            }
            return size;
        },
        enumerable: true,
        configurable: true
    });
    UriQuery.prototype.get = function (key) {
        var query = this;
        while (!query.isEmpty()) {
            if (key === query.key) {
                return query.value;
            }
            query = query.tail();
        }
        return undefined;
    };
    UriQuery.prototype.param = function (key, value) {
        if (value === undefined) {
            return this.get(key);
        }
        else {
            var builder = new UriQueryBuilder();
            var query = this;
            var updated = false;
            while (!query.isEmpty()) {
                if (!updated && key !== null && key === query.key) {
                    builder.param(key, value);
                    updated = true;
                }
                else {
                    builder.param(query.key, query.value);
                }
                query = query.tail();
            }
            if (!updated) {
                builder.param(key, value);
            }
            return builder.bind();
        }
    };
    UriQuery.prototype.toObject = function () {
        var params = {};
        var query = this;
        var i = 0;
        while (!query.isEmpty()) {
            if (query.key !== null) {
                params[query.key] = query.value;
            }
            else {
                params['$' + i] = query.value;
            }
            query = query.tail();
            i += 1;
        }
        return params;
    };
    UriQuery.prototype.writeUri = function (output) {
        var query = this;
        var first = true;
        while (!query.isEmpty()) {
            if (!first) {
                output.push(38);
            }
            else {
                first = false;
            }
            if (query.key !== null) {
                Uri.writeParam(query.key, output);
                output.push(61);
            }
            Uri.writeParam(query.value, output);
            query = query.tail();
        }
    };
    UriQuery.prototype.toUri = function () {
        var output = new StringOutput();
        this.writeUri(output);
        return output.bind();
    };
    UriQuery.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof UriQuery) {
            var xs = this;
            var ys = that;
            while (!xs.isEmpty() && !ys.isEmpty()) {
                if (xs.key !== ys.key || xs.value !== ys.value) {
                    return false;
                }
                xs = xs.tail();
                ys = ys.tail();
            }
            return xs.isEmpty() === ys.isEmpty();
        }
        return false;
    };
    UriQuery.prototype.hashCode = function () {
        var code = 0x36FCED64;
        var query = this;
        while (!query.isEmpty()) {
            code = Murmur3.mix(Murmur3.mix(code, Murmur3.hash(query.key)), Murmur3.hash(query.value));
            query = query.tail();
        }
        return Murmur3.mash(code);
    };
    UriQuery.prototype.toString = function () {
        return this.toUri();
    };
    UriQuery.builder = function () {
        return new UriQueryBuilder();
    };
    UriQuery.parse = function (input) {
        if (typeof input === 'string') {
            input = new StringInput(input);
        }
        var parser = UriQueryParser.parse(input);
        if (!input.isEmpty() && parser.isDone()) {
            parser = Iteratee.unexpected(input);
        }
        return parser.bind();
    };
    UriQuery.fromAny = function (query) {
        if (query === null || query === undefined) {
            return UriQuery.Undefined;
        }
        else if (query instanceof UriQuery) {
            return query;
        }
        else if (typeof query === 'object') {
            return UriQuery.fromObject(query);
        }
        else if (typeof query === 'string') {
            return UriQuery.parse(query);
        }
        else {
            throw new TypeError('' + query);
        }
    };
    UriQuery.param = function (key, value) {
        return new UriQueryParam(key, value, UriQuery.Undefined);
    };
    UriQuery.fromObject = function (params) {
        var query = UriQuery.Undefined;
        var last = null;
        var i = 0;
        for (var k in params) {
            var key = k;
            var value = params[k];
            if (k.charCodeAt(0) === 36 && k === '$' + i) {
                key = null;
            }
            var param = new UriQueryParam(key, value, UriQuery.Undefined);
            if (last === null) {
                query = param;
            }
            else {
                last.setTail(param);
            }
            last = param;
            i += 1;
        }
        return query;
    };
    UriQuery.Undefined = undefined;
    return UriQuery;
}());
var UriQueryParam = (function (_super) {
    __extends(UriQueryParam, _super);
    function UriQueryParam(key, value, tail) {
        var _this = _super.call(this) || this;
        _this._key = key;
        _this._value = value;
        _this._tail = tail;
        return _this;
    }
    UriQueryParam.prototype.isDefined = function () {
        return true;
    };
    UriQueryParam.prototype.isEmpty = function () {
        return false;
    };
    Object.defineProperty(UriQueryParam.prototype, "key", {
        get: function () {
            return this._key;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UriQueryParam.prototype, "value", {
        get: function () {
            return this._value;
        },
        enumerable: true,
        configurable: true
    });
    UriQueryParam.prototype.tail = function () {
        return this._tail;
    };
    UriQueryParam.prototype.setTail = function (tail) {
        this._tail = tail;
    };
    return UriQueryParam;
}(UriQuery));
var UriQueryUndefined = (function (_super) {
    __extends(UriQueryUndefined, _super);
    function UriQueryUndefined() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UriQueryUndefined.prototype.isDefined = function () {
        return false;
    };
    UriQueryUndefined.prototype.isEmpty = function () {
        return true;
    };
    Object.defineProperty(UriQueryUndefined.prototype, "key", {
        get: function () {
            return null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UriQueryUndefined.prototype, "value", {
        get: function () {
            return '';
        },
        enumerable: true,
        configurable: true
    });
    UriQueryUndefined.prototype.tail = function () {
        throw new Error('undefined query');
    };
    UriQueryUndefined.prototype.setTail = function (tail) {
        throw new Error('undefined query');
    };
    return UriQueryUndefined;
}(UriQuery));
UriQuery.Undefined = new UriQueryUndefined();
var UriQueryBuilder = (function () {
    function UriQueryBuilder() {
        this._first = UriQuery.Undefined;
        this._last = null;
        this._size = 0;
        this._aliased = 0;
    }
    UriQueryBuilder.prototype.isEmpty = function () {
        return this._size === 0;
    };
    UriQueryBuilder.prototype.param = function (key, value) {
        var xn = new UriQueryParam(key, value, UriQuery.Undefined);
        if (this._size === 0) {
            this._first = xn;
        }
        else {
            this.dealias(this._size - 1).setTail(xn);
        }
        this._last = xn;
        this._size += 1;
        this._aliased += 1;
    };
    UriQueryBuilder.prototype.bind = function () {
        this._aliased = 0;
        return this._first;
    };
    UriQueryBuilder.prototype.dealias = function (n) {
        var i = 0;
        var xi = null;
        var xs = this._first;
        if (this._aliased <= n) {
            while (i < this._aliased) {
                xi = xs;
                xs = xs.tail();
                i += 1;
            }
            while (i <= n) {
                var xn = new UriQueryParam(xs.key, xs.value, xs.tail());
                if (i === 0) {
                    this._first = xn;
                }
                else {
                    xi.setTail(xn);
                }
                xi = xn;
                xs = xs.tail();
                i += 1;
            }
            if (i === this._size) {
                this._last = xi;
            }
            this._aliased = i;
        }
        else if (n === 0) {
            xi = this._first;
        }
        else if (n === this._size - 1) {
            xi = this._last;
        }
        else {
            while (i <= n) {
                xi = xs;
                xs = xs.tail();
                i += 1;
            }
        }
        return xi;
    };
    return UriQueryBuilder;
}());
var UriFragment = (function () {
    function UriFragment(part) {
        this._part = part;
    }
    UriFragment.prototype.isDefined = function () {
        return this._part !== null;
    };
    Object.defineProperty(UriFragment.prototype, "part", {
        get: function () {
            return this._part || '';
        },
        enumerable: true,
        configurable: true
    });
    UriFragment.prototype.writeUri = function (output) {
        if (this._part !== null) {
            Uri.writeFragment(this._part, output);
        }
    };
    UriFragment.prototype.toUri = function () {
        var output = new StringOutput();
        this.writeUri(output);
        return output.bind();
    };
    UriFragment.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof UriFragment) {
            return this._part === that._part;
        }
        return false;
    };
    UriFragment.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(0x1797110E, Murmur3.hash(this._part)));
    };
    UriFragment.prototype.toString = function () {
        return this.toUri();
    };
    UriFragment.parse = function (input) {
        if (typeof input === 'string') {
            input = new StringInput(input);
        }
        var parser = UriFragmentParser.parse(input);
        if (!input.isEmpty() && parser.isDone()) {
            parser = Iteratee.unexpected(input);
        }
        return parser.bind();
    };
    UriFragment.of = function (part) {
        if (part !== null) {
            return new UriFragment(part);
        }
        else {
            return UriFragment.Undefined;
        }
    };
    UriFragment.fromAny = function (fragment) {
        if (fragment === null || fragment === undefined) {
            return UriFragment.Undefined;
        }
        else if (fragment instanceof UriFragment) {
            return fragment;
        }
        else if (typeof fragment === 'string') {
            return UriFragment.of(fragment);
        }
        else {
            throw new TypeError('' + fragment);
        }
    };
    UriFragment.Undefined = new UriFragment(null);
    return UriFragment;
}());
UriAuthority.Undefined = new UriAuthority(UriUser.Undefined, UriHost.Undefined, UriPort.Undefined);
Uri.Empty = new Uri(UriScheme.Undefined, UriAuthority.Undefined, UriPath.Empty, UriQuery.Undefined, UriFragment.Undefined);

var Form = (function () {
    function Form() {
    }
    Object.defineProperty(Form.prototype, "tag", {
        get: function () {
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    Form.Any = undefined;
    Form.Value = undefined;
    Form.String = undefined;
    Form.Number = undefined;
    Form.Boolean = undefined;
    Form.Uri = undefined;
    return Form;
}());
var AnyForm = (function (_super) {
    __extends(AnyForm, _super);
    function AnyForm() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(AnyForm.prototype, "unit", {
        get: function () {
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    AnyForm.prototype.mold = function (value) {
        return Value.fromAny(value);
    };
    AnyForm.prototype.cast = function (value) {
        return value.toAny();
    };
    return AnyForm;
}(Form));
Form.Any = new AnyForm();
var ValueForm = (function (_super) {
    __extends(ValueForm, _super);
    function ValueForm() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(ValueForm.prototype, "unit", {
        get: function () {
            return Value.Absent;
        },
        enumerable: true,
        configurable: true
    });
    ValueForm.prototype.mold = function (value) {
        return Value.fromAny(value);
    };
    ValueForm.prototype.cast = function (value) {
        return value;
    };
    return ValueForm;
}(Form));
Form.Value = new ValueForm();
var StringForm = (function (_super) {
    __extends(StringForm, _super);
    function StringForm(unit) {
        if (unit === void 0) { unit = ''; }
        var _this = _super.call(this) || this;
        _this.unit = unit;
        return _this;
    }
    StringForm.prototype.mold = function (value) {
        return Text$1.valueOf(value);
    };
    StringForm.prototype.cast = function (value) {
        return value.target.stringValue();
    };
    return StringForm;
}(Form));
Form.String = new StringForm();
var NumberForm = (function (_super) {
    __extends(NumberForm, _super);
    function NumberForm(unit) {
        if (unit === void 0) { unit = 0; }
        var _this = _super.call(this) || this;
        _this.unit = unit;
        return _this;
    }
    NumberForm.prototype.mold = function (value) {
        return Num.valueOf(value);
    };
    NumberForm.prototype.cast = function (value) {
        return value.target.numberValue();
    };
    return NumberForm;
}(Form));
Form.Number = new NumberForm();
var BooleanForm = (function (_super) {
    __extends(BooleanForm, _super);
    function BooleanForm(unit) {
        if (unit === void 0) { unit = false; }
        var _this = _super.call(this) || this;
        _this.unit = unit;
        return _this;
    }
    BooleanForm.prototype.mold = function (value) {
        return Bool.valueOf(value);
    };
    BooleanForm.prototype.cast = function (value) {
        return value.target.booleanValue();
    };
    return BooleanForm;
}(Form));
Form.Boolean = new BooleanForm();
var UriForm = (function (_super) {
    __extends(UriForm, _super);
    function UriForm(unit) {
        if (unit === void 0) { unit = Uri.Empty; }
        var _this = _super.call(this) || this;
        _this.unit = unit;
        return _this;
    }
    UriForm.prototype.mold = function (uri) {
        return Text$1.valueOf(uri.toUri());
    };
    UriForm.prototype.cast = function (value) {
        try {
            var str = value.target.stringValue();
            if (str !== undefined) {
                return Uri.parse(str);
            }
        }
        catch (e) {
        }
        return undefined;
    };
    return UriForm;
}(Form));
Form.Uri = new UriForm();

var FormCursor = (function (_super) {
    __extends(FormCursor, _super);
    function FormCursor(cursor, form) {
        var _this = _super.call(this) || this;
        _this.cursor = cursor;
        _this.form = form;
        return _this;
    }
    FormCursor.prototype.isEmpty = function () {
        return this.cursor.isEmpty();
    };
    FormCursor.prototype.head = function () {
        var value = this.cursor.head();
        return value.coerce(this.form);
    };
    FormCursor.prototype.step = function () {
        this.cursor.step();
    };
    FormCursor.prototype.skip = function (count) {
        this.cursor.skip(count);
    };
    FormCursor.prototype.hasNext = function () {
        return this.cursor.hasNext();
    };
    FormCursor.prototype.nextIndex = function () {
        return this.cursor.nextIndex();
    };
    FormCursor.prototype.next = function () {
        var _a = this.cursor.next(), value = _a.value, done = _a.done;
        return { value: value && value.coerce(this.form), done: done };
    };
    FormCursor.prototype.hasPrevious = function () {
        return this.cursor.hasPrevious();
    };
    FormCursor.prototype.previousIndex = function () {
        return this.cursor.previousIndex();
    };
    FormCursor.prototype.previous = function () {
        var _a = this.cursor.next(), value = _a.value, done = _a.done;
        return { value: value && value.coerce(this.form), done: done };
    };
    FormCursor.prototype.delete = function () {
        this.cursor.delete();
    };
    return FormCursor;
}(Cursor));
var FormPairCursor = (function (_super) {
    __extends(FormPairCursor, _super);
    function FormPairCursor(cursor, keyForm, valueForm) {
        var _this = _super.call(this) || this;
        _this.cursor = cursor;
        _this.keyForm = keyForm;
        _this.valueForm = valueForm;
        return _this;
    }
    FormPairCursor.prototype.isEmpty = function () {
        return this.cursor.isEmpty();
    };
    FormPairCursor.prototype.head = function () {
        var pair = this.cursor.head();
        return [pair[0].coerce(this.keyForm), pair[1].coerce(this.valueForm)];
    };
    FormPairCursor.prototype.step = function () {
        this.cursor.step();
    };
    FormPairCursor.prototype.skip = function (count) {
        this.cursor.skip(count);
    };
    FormPairCursor.prototype.hasNext = function () {
        return this.cursor.hasNext();
    };
    FormPairCursor.prototype.nextIndex = function () {
        return this.cursor.nextIndex();
    };
    FormPairCursor.prototype.next = function () {
        var _a = this.cursor.next(), value = _a.value, done = _a.done;
        return { value: value && [value[0].coerce(this.keyForm), value[1].coerce(this.valueForm)], done: done };
    };
    FormPairCursor.prototype.hasPrevious = function () {
        return this.cursor.hasPrevious();
    };
    FormPairCursor.prototype.previousIndex = function () {
        return this.cursor.previousIndex();
    };
    FormPairCursor.prototype.previous = function () {
        var _a = this.cursor.next(), value = _a.value, done = _a.done;
        return { value: value && [value[0].coerce(this.keyForm), value[1].coerce(this.valueForm)], done: done };
    };
    FormPairCursor.prototype.delete = function () {
        this.cursor.delete();
    };
    return FormPairCursor;
}(Cursor));

var ValueBuilder = (function () {
    function ValueBuilder() {
        this._record = null;
        this._value = null;
    }
    ValueBuilder.prototype.push = function () {
        var items = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            items[_i] = arguments[_i];
        }
        for (var i = 0, n = items.length; i < n; i += 1) {
            var item = items[i];
            if (item instanceof Field) {
                this.pushField(item);
            }
            else if (item instanceof Value) {
                this.pushValue(item);
            }
        }
    };
    ValueBuilder.prototype.pushField = function (field) {
        if (this._record === null) {
            this._record = Record.empty();
            if (this._value !== null) {
                this._record.push(this._value);
                this._value = null;
            }
        }
        this._record.push(field);
    };
    ValueBuilder.prototype.pushValue = function (value) {
        if (this._record !== null) {
            this._record.push(value);
        }
        else if (this._value !== null) {
            this._record = Record.empty();
            this._record.push(this._value, value);
            this._value = null;
        }
        else {
            this._value = value;
        }
    };
    ValueBuilder.prototype.bind = function () {
        if (this._record !== null) {
            return this._record;
        }
        else if (this._value !== null) {
            return this._value;
        }
        else {
            return Value.Absent;
        }
    };
    return ValueBuilder;
}());

var BlockParser = (function (_super) {
    __extends(BlockParser, _super);
    function BlockParser(recon, builder, keyParser, valueParser, step) {
        var _this = _super.call(this) || this;
        _this.builder = builder;
        _this.keyParser = keyParser;
        _this.valueParser = valueParser;
        _this.step = step;
        return _this;
    }
    BlockParser.prototype.feed = function (input) {
        return BlockParser.parse(input, this.recon, this.builder, this.keyParser, this.valueParser, this.step);
    };
    BlockParser.parse = function (input, recon, builder, keyParser, valueParser, step) {
        if (step === void 0) { step = 1; }
        var c = 0;
        block: do {
            if (step === 1) {
                while (!input.isEmpty() && (c = input.head(), Iteratee.isWhitespace(c))) {
                    input.step();
                }
                if (!input.isEmpty()) {
                    if (c === 33 || c === 34 || c === 36 || c === 37
                        || c === 39 || c === 40 || c === 43 || c === 45
                        || c >= 48 && c <= 57 || c === 64
                        || c === 91 || c === 123 || c === 126
                        || Recon.isIdentStartChar(c)) {
                        builder = builder || recon.valueBuilder();
                        step = 2;
                    }
                    else if (c === 35) {
                        input.step();
                        step = 7;
                    }
                    else {
                        if (builder) {
                            return Iteratee.done(builder.bind());
                        }
                        else {
                            return Iteratee.done(recon.absent());
                        }
                    }
                }
                else if (input.isDone()) {
                    if (builder) {
                        return Iteratee.done(builder.bind());
                    }
                    else {
                        return Iteratee.done(recon.absent());
                    }
                }
            }
            if (step === 2) {
                if (!keyParser) {
                    keyParser = recon.parseBlockExpr(input);
                }
                while (keyParser.isCont() && (!input.isEmpty() || input.isDone())) {
                    keyParser = keyParser.feed(input);
                }
                if (keyParser.isDone()) {
                    step = 3;
                }
                else if (keyParser.isError()) {
                    return keyParser;
                }
            }
            if (step === 3) {
                while (!input.isEmpty() && (c = input.head(), Iteratee.isSpace(c))) {
                    input.step();
                }
                if (!input.isEmpty()) {
                    if (c === 58) {
                        input.step();
                        step = 4;
                    }
                    else {
                        builder.push(recon.item(keyParser.bind()));
                        keyParser = undefined;
                        step = 6;
                    }
                }
                else if (input.isDone()) {
                    builder.push(recon.item(keyParser.bind()));
                    return Iteratee.done(builder.bind());
                }
            }
            if (step === 4) {
                while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                    input.step();
                }
                if (!input.isEmpty()) {
                    step = 5;
                }
                else if (input.isDone()) {
                    builder.push(recon.slot(keyParser.bind()));
                    return Iteratee.done(builder.bind());
                }
            }
            if (step === 5) {
                if (!valueParser) {
                    valueParser = recon.parseBlockExpr(input);
                }
                while (valueParser.isCont() && (!input.isEmpty() || input.isDone())) {
                    valueParser = valueParser.feed(input);
                }
                if (valueParser.isDone()) {
                    builder.push(recon.slot(keyParser.bind(), valueParser.bind()));
                    keyParser = undefined;
                    valueParser = undefined;
                    step = 6;
                }
                else if (valueParser.isError()) {
                    return valueParser;
                }
            }
            if (step === 6) {
                while (!input.isEmpty() && (c = input.head(), Iteratee.isSpace(c))) {
                    input.step();
                }
                if (!input.isEmpty()) {
                    if (c === 44 || c === 59 || Iteratee.isNewline(c)) {
                        input.step();
                        step = 1;
                        continue;
                    }
                    else if (c === 35) {
                        input.step();
                        step = 7;
                    }
                    else {
                        return Iteratee.done(builder.bind());
                    }
                }
                else if (input.isDone()) {
                    return Iteratee.done(builder.bind());
                }
            }
            if (step === 7) {
                while (!input.isEmpty()) {
                    c = input.head();
                    if (!Iteratee.isNewline(c)) {
                        input.step();
                    }
                    else {
                        step = 1;
                        continue block;
                    }
                }
                if (input.isDone()) {
                    step = 1;
                    continue;
                }
            }
            break;
        } while (true);
        return new BlockParser(recon, builder, keyParser, valueParser, step);
    };
    return BlockParser;
}(Iteratee));
var AttrParser = (function (_super) {
    __extends(AttrParser, _super);
    function AttrParser(recon, keyParser, valueParser, step) {
        var _this = _super.call(this) || this;
        _this.recon = recon;
        _this.keyParser = keyParser;
        _this.valueParser = valueParser;
        _this.step = step;
        return _this;
    }
    AttrParser.prototype.feed = function (input) {
        return AttrParser.parse(input, this.recon, this.keyParser, this.valueParser, this.step);
    };
    AttrParser.parse = function (input, recon, keyParser, valueParser, step) {
        if (step === void 0) { step = 1; }
        var c = 0;
        if (step === 1) {
            if (!input.isEmpty()) {
                c = input.head();
                if (c === 64) {
                    input.step();
                    step = 2;
                }
                else {
                    return Iteratee.expected('@', input);
                }
            }
            else if (input.isDone()) {
                return Iteratee.unexpected(input);
            }
        }
        if (step === 2) {
            if (!keyParser) {
                if (!input.isEmpty()) {
                    c = input.head();
                    if (c === 34 || c === 39) {
                        keyParser = recon.parseString(input);
                    }
                    else if (Recon.isIdentStartChar(c)) {
                        keyParser = recon.parseIdent(input);
                    }
                    else {
                        return Iteratee.expected('attribute name', input);
                    }
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            else {
                keyParser = keyParser.feed(input);
            }
            if (keyParser) {
                if (keyParser.isDone()) {
                    step = 3;
                }
                else if (keyParser.isError()) {
                    return keyParser.asError();
                }
            }
        }
        if (step === 3) {
            if (!input.isEmpty() && input.head() === 40) {
                input.step();
                step = 4;
            }
            else if (!input.isEmpty() || input.isDone()) {
                return Iteratee.done(recon.attr(keyParser.bind()));
            }
        }
        if (step === 4) {
            while (!input.isEmpty() && (c = input.head(), Iteratee.isWhitespace(c))) {
                input.step();
            }
            if (!input.isEmpty()) {
                if (c === 41) {
                    input.step();
                    return Iteratee.done(recon.attr(keyParser.bind()));
                }
                else {
                    if (!valueParser) {
                        valueParser = recon.parseBlock(input);
                    }
                    step = 5;
                }
            }
            else if (input.isDone()) {
                return Iteratee.unexpected(input);
            }
        }
        if (step === 5) {
            valueParser = valueParser;
            while (valueParser.isCont() && (!input.isEmpty() || input.isDone())) {
                valueParser = valueParser.feed(input);
            }
            if (valueParser.isDone()) {
                step = 6;
            }
            else if (valueParser.isError()) {
                return valueParser.asError();
            }
        }
        if (step === 6) {
            while (!input.isEmpty() && (c = input.head(), Iteratee.isWhitespace(c))) {
                input.step();
            }
            if (!input.isEmpty()) {
                if (c === 41) {
                    input.step();
                    return Iteratee.done(recon.attr(keyParser.bind(), valueParser.bind()));
                }
                else {
                    return Iteratee.expected(')', input);
                }
            }
            else if (input.isDone()) {
                return Iteratee.unexpected(input);
            }
        }
        return new AttrParser(recon, keyParser, valueParser, step);
    };
    return AttrParser;
}(Iteratee));
var BlockValueParser = (function (_super) {
    __extends(BlockValueParser, _super);
    function BlockValueParser(recon, builder, fieldParser, valueParser, step) {
        var _this = _super.call(this) || this;
        _this.recon = recon;
        _this.builder = builder;
        _this.fieldParser = fieldParser;
        _this.valueParser = valueParser;
        _this.step = step;
        return _this;
    }
    BlockValueParser.prototype.feed = function (input) {
        return BlockValueParser.parse(input, this.recon, this.builder, this.fieldParser, this.valueParser, this.step);
    };
    BlockValueParser.parse = function (input, recon, builder, fieldParser, valueParser, step) {
        if (step === void 0) { step = 1; }
        var c = 0;
        do {
            if (step === 1) {
                if (!input.isEmpty()) {
                    c = input.head();
                    if (c === 64) {
                        fieldParser = recon.parseAttr(input);
                        step = 2;
                    }
                    else if (c === 123) {
                        builder = builder || recon.recordBuilder();
                        valueParser = recon.parseRecord(input, builder);
                        step = 5;
                    }
                    else if (c === 91) {
                        builder = builder || recon.recordBuilder();
                        valueParser = recon.parseMarkup(input, builder);
                        step = 5;
                    }
                    else if (Recon.isIdentStartChar(c)) {
                        valueParser = recon.parseIdent(input);
                        step = 4;
                    }
                    else if (c === 34 || c === 39) {
                        valueParser = recon.parseString(input);
                        step = 4;
                    }
                    else if (c === 45 || c >= 48 && c <= 57) {
                        valueParser = recon.parseNumber(input);
                        step = 4;
                    }
                    else if (c === 37) {
                        valueParser = recon.parseData(input);
                        step = 4;
                    }
                    else if (c === 36) {
                        valueParser = recon.parseSelector(input);
                        step = 4;
                    }
                    else if (!builder) {
                        return Iteratee.done(recon.extant());
                    }
                    else {
                        return Iteratee.done(builder.bind());
                    }
                }
                else if (input.isDone()) {
                    if (!builder) {
                        return Iteratee.done(recon.extant());
                    }
                    else {
                        return Iteratee.done(builder.bind());
                    }
                }
            }
            if (step === 2) {
                fieldParser = fieldParser;
                while (fieldParser.isCont() && (!input.isEmpty() || input.isDone())) {
                    fieldParser = fieldParser.feed(input);
                }
                if (fieldParser.isDone()) {
                    builder = builder || recon.valueBuilder();
                    builder.push(fieldParser.bind());
                    fieldParser = undefined;
                    step = 3;
                }
                else if (fieldParser.isError()) {
                    return fieldParser.asError();
                }
            }
            if (step === 3) {
                while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                    input.step();
                }
                if (!input.isEmpty()) {
                    step = 1;
                    continue;
                }
                else if (input.isDone()) {
                    return Iteratee.done(builder.bind());
                }
            }
            if (step === 4) {
                valueParser = valueParser;
                while (valueParser.isCont() && (!input.isEmpty() || input.isDone())) {
                    valueParser = valueParser.feed(input);
                }
                if (valueParser.isDone()) {
                    builder = builder || recon.valueBuilder();
                    builder.push(recon.item(valueParser.bind()));
                    valueParser = undefined;
                    step = 6;
                }
                else if (valueParser.isError()) {
                    return valueParser.asError();
                }
            }
            if (step === 5) {
                valueParser = valueParser;
                while (valueParser.isCont() && (!input.isEmpty() || input.isDone())) {
                    valueParser = valueParser.feed(input);
                }
                if (valueParser.isDone()) {
                    valueParser = undefined;
                    step = 6;
                }
                else if (valueParser.isError()) {
                    return valueParser.asError();
                }
            }
            if (step === 6) {
                while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                    input.step();
                }
                if (!input.isEmpty()) {
                    if (input.head() === 64) {
                        step = 1;
                        continue;
                    }
                    else {
                        return Iteratee.done(builder.bind());
                    }
                }
                else if (input.isDone()) {
                    return Iteratee.done(builder.bind());
                }
            }
            break;
        } while (true);
        return new BlockValueParser(recon, builder, fieldParser, valueParser, step);
    };
    return BlockValueParser;
}(Iteratee));
var InlineValueParser = (function (_super) {
    __extends(InlineValueParser, _super);
    function InlineValueParser(recon, builder, fieldParser, valueParser, step) {
        var _this = _super.call(this) || this;
        _this.recon = recon;
        _this.builder = builder;
        _this.fieldParser = fieldParser;
        _this.valueParser = valueParser;
        _this.step = step;
        return _this;
    }
    InlineValueParser.prototype.feed = function (input) {
        return InlineValueParser.parse(input, this.recon, this.builder, this.fieldParser, this.valueParser, this.step);
    };
    InlineValueParser.parse = function (input, recon, builder, fieldParser, valueParser, step) {
        if (step === void 0) { step = 1; }
        var c = 0;
        if (step === 1) {
            if (!input.isEmpty()) {
                c = input.head();
                if (c === 64) {
                    fieldParser = recon.parseAttr(input);
                    step = 2;
                }
                else if (c === 123) {
                    if (builder) {
                        valueParser = recon.parseRecord(input, builder);
                        step = 5;
                    }
                    else {
                        valueParser = recon.parseRecord(input);
                        step = 4;
                    }
                }
                else if (c === 91) {
                    if (builder) {
                        valueParser = recon.parseMarkup(input, builder);
                        step = 5;
                    }
                    else {
                        valueParser = recon.parseMarkup(input);
                        step = 4;
                    }
                }
                else if (!builder) {
                    return Iteratee.done(recon.extant());
                }
                else {
                    return Iteratee.done(builder.bind());
                }
            }
            else if (input.isDone()) {
                if (!builder) {
                    return Iteratee.done(recon.extant());
                }
                else {
                    return Iteratee.done(builder.bind());
                }
            }
        }
        if (step === 2) {
            fieldParser = fieldParser;
            while (fieldParser.isCont() && (!input.isEmpty() || input.isDone())) {
                fieldParser = fieldParser.feed(input);
            }
            if (fieldParser.isDone()) {
                builder = builder || recon.valueBuilder();
                builder.push(fieldParser.bind());
                fieldParser = undefined;
                step = 3;
            }
            else if (fieldParser.isError()) {
                return fieldParser.asError();
            }
        }
        if (step === 3) {
            if (!input.isEmpty()) {
                c = input.head();
                if (c === 123) {
                    valueParser = recon.parseRecord(input, builder);
                    step = 5;
                }
                else if (c === 91) {
                    valueParser = recon.parseMarkup(input, builder);
                    step = 5;
                }
                else {
                    return Iteratee.done(builder.bind());
                }
            }
            else if (input.isDone()) {
                return Iteratee.done(builder.bind());
            }
        }
        if (step === 4) {
            valueParser = valueParser;
            while (valueParser.isCont() && (!input.isEmpty() || input.isDone())) {
                valueParser = valueParser.feed(input);
            }
            if (valueParser.isDone()) {
                builder = builder || recon.valueBuilder();
                builder.push(recon.item(valueParser.bind()));
                return Iteratee.done(builder.bind());
            }
            else if (valueParser.isError()) {
                return valueParser.asError();
            }
        }
        if (step === 5) {
            valueParser = valueParser;
            while (valueParser.isCont() && (!input.isEmpty() || input.isDone())) {
                valueParser = valueParser.feed(input);
            }
            if (valueParser.isDone()) {
                return Iteratee.done(builder.bind());
            }
            else if (valueParser.isError()) {
                return valueParser.asError();
            }
        }
        return new InlineValueParser(recon, builder, fieldParser, valueParser, step);
    };
    return InlineValueParser;
}(Iteratee));
var RecordParser = (function (_super) {
    __extends(RecordParser, _super);
    function RecordParser(recon, builder, keyParser, valueParser, step) {
        var _this = _super.call(this) || this;
        _this.recon = recon;
        _this.builder = builder;
        _this.keyParser = keyParser;
        _this.valueParser = valueParser;
        _this.step = step;
        return _this;
    }
    RecordParser.prototype.feed = function (input) {
        return RecordParser.parse(input, this.recon, this.builder, this.keyParser, this.valueParser, this.step);
    };
    RecordParser.parse = function (input, recon, builder, keyParser, valueParser, step) {
        if (step === void 0) { step = 1; }
        var c = 0;
        if (step === 1) {
            if (!input.isEmpty()) {
                c = input.head();
                if (c === 123) {
                    input.step();
                    step = 2;
                }
                else {
                    return Iteratee.expected('{', input);
                }
            }
            else if (input.isDone()) {
                return Iteratee.unexpected(input);
            }
        }
        record: do {
            if (step === 2) {
                while (!input.isEmpty() && (c = input.head(), Iteratee.isWhitespace(c))) {
                    input.step();
                }
                if (!input.isEmpty()) {
                    builder = builder || recon.recordBuilder();
                    if (c === 125) {
                        input.step();
                        return Iteratee.done(builder.bind());
                    }
                    else if (c === 35) {
                        input.step();
                        step = 8;
                    }
                    else {
                        step = 3;
                    }
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            if (step === 3) {
                if (!keyParser) {
                    keyParser = recon.parseBlockExpr(input);
                }
                while (keyParser.isCont() && (!input.isEmpty() || input.isDone())) {
                    keyParser = keyParser.feed(input);
                }
                if (keyParser.isDone()) {
                    step = 4;
                }
                else if (keyParser.isError()) {
                    return keyParser.asError();
                }
            }
            if (step === 4) {
                while (!input.isEmpty() && (c = input.head(), Iteratee.isSpace(c))) {
                    input.step();
                }
                if (!input.isEmpty()) {
                    if (c === 58) {
                        input.step();
                        step = 5;
                    }
                    else {
                        builder.push(recon.item(keyParser.bind()));
                        keyParser = undefined;
                        step = 7;
                    }
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            if (step === 5) {
                while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                    input.step();
                }
                if (!input.isEmpty()) {
                    step = 6;
                }
                else if (input.isDone()) {
                    builder.push(recon.slot(keyParser.bind()));
                    return Iteratee.done(builder.bind());
                }
            }
            if (step === 6) {
                if (!valueParser) {
                    valueParser = recon.parseBlockExpr(input);
                }
                while (valueParser.isCont() && (!input.isEmpty() || input.isDone())) {
                    valueParser = valueParser.feed(input);
                }
                if (valueParser.isDone()) {
                    builder.push(recon.slot(keyParser.bind(), valueParser.bind()));
                    keyParser = undefined;
                    valueParser = undefined;
                    step = 7;
                }
                else if (valueParser.isError()) {
                    return valueParser.asError();
                }
            }
            if (step === 7) {
                while (!input.isEmpty() && (c = input.head(), Iteratee.isSpace(c))) {
                    input.step();
                }
                if (!input.isEmpty()) {
                    if (c === 44 || c === 59 || Iteratee.isNewline(c)) {
                        input.step();
                        step = 2;
                        continue;
                    }
                    else if (c === 35) {
                        input.step();
                        step = 8;
                    }
                    else if (c === 125) {
                        input.step();
                        return Iteratee.done(builder.bind());
                    }
                    else {
                        return Iteratee.expected('"}", ";", ",", or newline', input);
                    }
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            if (step === 8) {
                while (!input.isEmpty()) {
                    c = input.head();
                    if (!Iteratee.isNewline(c)) {
                        input.step();
                    }
                    else {
                        step = 2;
                        continue record;
                    }
                }
                if (input.isDone()) {
                    step = 2;
                    continue;
                }
            }
            break;
        } while (true);
        return new RecordParser(recon, builder, keyParser, valueParser, step);
    };
    return RecordParser;
}(Iteratee));
var MarkupParser = (function (_super) {
    __extends(MarkupParser, _super);
    function MarkupParser(recon, builder, textOutput, valueParser, step) {
        var _this = _super.call(this) || this;
        _this.recon = recon;
        _this.builder = builder;
        _this.textOutput = textOutput;
        _this.valueParser = valueParser;
        _this.step = step;
        return _this;
    }
    MarkupParser.prototype.feed = function (input) {
        return MarkupParser.parse(input, this.recon, this.builder, this.textOutput, this.valueParser, this.step);
    };
    MarkupParser.parse = function (input, recon, builder, textOutput, valueParser, step) {
        if (step === void 0) { step = 1; }
        var c = 0;
        if (step === 1) {
            if (!input.isEmpty()) {
                c = input.head();
                if (c === 91) {
                    input.step();
                    step = 2;
                }
                else {
                    return Iteratee.expected('[', input);
                }
            }
            else if (input.isDone()) {
                return Iteratee.unexpected(input);
            }
        }
        do {
            if (step === 2) {
                while (!input.isEmpty() && (c = input.head(),
                    c !== 64
                        && c !== 91
                        && c !== 92
                        && c !== 93
                        && c !== 123
                        && c !== 125)) {
                    input.step();
                    textOutput = textOutput || recon.textOutput();
                    textOutput.push(c);
                }
                if (!input.isEmpty()) {
                    if (c === 93) {
                        input.step();
                        builder = builder || recon.recordBuilder();
                        if (textOutput) {
                            builder.push(recon.item(textOutput.bind()));
                        }
                        return Iteratee.done(builder.bind());
                    }
                    else if (c === 64) {
                        builder = builder || recon.recordBuilder();
                        if (textOutput) {
                            builder.push(recon.item(textOutput.bind()));
                            textOutput = undefined;
                        }
                        valueParser = recon.parseInlineValue(input);
                        step = 3;
                    }
                    else if (c === 123) {
                        builder = builder || recon.recordBuilder();
                        if (textOutput) {
                            builder.push(recon.item(textOutput.bind()));
                            textOutput = undefined;
                        }
                        valueParser = recon.parseRecord(input, builder);
                        step = 4;
                    }
                    else if (c === 91) {
                        builder = builder || recon.recordBuilder();
                        if (textOutput) {
                            builder.push(recon.item(textOutput.bind()));
                            textOutput = undefined;
                        }
                        valueParser = recon.parseMarkup(input, builder);
                        step = 4;
                    }
                    else if (c === 92) {
                        input.step();
                        step = 5;
                    }
                    else {
                        return Iteratee.unexpected(input);
                    }
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            if (step === 3) {
                valueParser = valueParser;
                while (valueParser.isCont() && (!input.isEmpty() || input.isDone())) {
                    valueParser = valueParser.feed(input);
                }
                if (valueParser.isDone()) {
                    builder.push(recon.item(valueParser.bind()));
                    valueParser = undefined;
                    step = 2;
                    continue;
                }
                else if (valueParser.isError()) {
                    return valueParser.asError();
                }
            }
            if (step === 4) {
                valueParser = valueParser;
                while (valueParser.isCont() && (!input.isEmpty() || input.isDone())) {
                    valueParser = valueParser.feed(input);
                }
                if (valueParser.isDone()) {
                    valueParser = undefined;
                    step = 2;
                    continue;
                }
                else if (valueParser.isError()) {
                    return valueParser.asError();
                }
            }
            if (step === 5) {
                if (!input.isEmpty()) {
                    c = input.head();
                    textOutput = textOutput || recon.textOutput();
                    if (c === 34
                        || c === 36
                        || c === 39
                        || c === 47
                        || c === 64
                        || c === 91
                        || c === 92
                        || c === 93
                        || c === 123
                        || c === 125) {
                        input.step();
                        textOutput.push(c);
                        step = 2;
                    }
                    else if (c === 98) {
                        input.step();
                        textOutput.push(8);
                        step = 2;
                    }
                    else if (c === 102) {
                        input.step();
                        textOutput.push(12);
                        step = 2;
                    }
                    else if (c === 110) {
                        input.step();
                        textOutput.push(10);
                        step = 2;
                    }
                    else if (c === 114) {
                        input.step();
                        textOutput.push(13);
                        step = 2;
                    }
                    else if (c === 116) {
                        input.step();
                        textOutput.push(9);
                        step = 2;
                    }
                    else {
                        return Iteratee.expected('escape character', input);
                    }
                    continue;
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            break;
        } while (true);
        return new MarkupParser(recon, builder, textOutput, valueParser, step);
    };
    return MarkupParser;
}(Iteratee));
var DataParser = (function (_super) {
    __extends(DataParser, _super);
    function DataParser(recon, dataOutput, p, q, r, step) {
        var _this = _super.call(this) || this;
        _this.recon = recon;
        _this.dataOutput = dataOutput;
        _this.p = p;
        _this.q = q;
        _this.r = r;
        _this.step = step;
        return _this;
    }
    DataParser.prototype.feed = function (input) {
        return DataParser.parse(input, this.recon, this.dataOutput, this.p, this.q, this.r, this.step);
    };
    DataParser.parse = function (input, recon, dataOutput, p, q, r, step) {
        if (p === void 0) { p = 0; }
        if (q === void 0) { q = 0; }
        if (r === void 0) { r = 0; }
        if (step === void 0) { step = 1; }
        var c = 0;
        if (step === 1) {
            if (!input.isEmpty()) {
                c = input.head();
                if (c === 37) {
                    input.step();
                    dataOutput = dataOutput || recon.dataOutput();
                    step = 2;
                }
                else {
                    return Iteratee.expected('%', input);
                }
            }
            else if (input.isDone()) {
                return Iteratee.unexpected(input);
            }
        }
        do {
            if (step === 2) {
                if (!input.isEmpty()) {
                    c = input.head();
                    if (Iteratee.isBase64Char(c)) {
                        input.step();
                        p = c;
                        step = 3;
                    }
                    else {
                        return Iteratee.done(dataOutput.bind());
                    }
                }
                else if (input.isDone()) {
                    return Iteratee.done(dataOutput.bind());
                }
            }
            if (step === 3) {
                if (!input.isEmpty()) {
                    c = input.head();
                    if (Iteratee.isBase64Char(c)) {
                        input.step();
                        q = c;
                        step = 4;
                    }
                    else {
                        return Iteratee.expected('base64 digit', input);
                    }
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            if (step === 4) {
                if (!input.isEmpty()) {
                    c = input.head();
                    if (Iteratee.isBase64Char(c) || c === 61) {
                        input.step();
                        r = c;
                        if (c !== 61) {
                            step = 5;
                        }
                        else {
                            step = 6;
                        }
                    }
                    else {
                        return Iteratee.expected('base64 digit', input);
                    }
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            if (step === 5) {
                if (!input.isEmpty()) {
                    c = input.head();
                    if (Iteratee.isBase64Char(c) || c === 61) {
                        input.step();
                        DataParser.decodeBase64Quantum(p, q, r, c, dataOutput);
                        r = 0;
                        q = 0;
                        p = 0;
                        if (c !== 61) {
                            step = 2;
                            continue;
                        }
                        else {
                            return Iteratee.done(dataOutput.bind());
                        }
                    }
                    else {
                        return Iteratee.expected('base64 digit', input);
                    }
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            else if (step === 6) {
                if (!input.isEmpty()) {
                    c = input.head();
                    if (c === 61) {
                        input.step();
                        DataParser.decodeBase64Quantum(p, q, r, c, dataOutput);
                        r = 0;
                        q = 0;
                        p = 0;
                        return Iteratee.done(dataOutput.bind());
                    }
                    else {
                        return Iteratee.expected('=', input);
                    }
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            break;
        } while (true);
        return new DataParser(recon, dataOutput, p, q, r, step);
    };
    DataParser.parseBase64 = function (input, recon) {
        return DataParser.parse(input, recon, recon.dataOutput(), undefined, undefined, undefined, 2);
    };
    DataParser.decodeBase64Quantum = function (p, q, r, s, output) {
        var x = Iteratee.decodeBase64Digit(p);
        var y = Iteratee.decodeBase64Digit(q);
        if (r !== 61) {
            var z = Iteratee.decodeBase64Digit(r);
            if (s !== 61) {
                var w = Iteratee.decodeBase64Digit(s);
                output.push((x << 2) | (y >>> 4), (y << 4) | (z >>> 2), (z << 6) | w);
            }
            else {
                output.push((x << 2) | (y >>> 4), (y << 4) | (z >>> 2));
            }
        }
        else {
            if (s !== 61) {
                throw 'incomplete base64 quantum';
            }
            output.push((x << 2) | (y >>> 4));
        }
    };
    return DataParser;
}(Iteratee));
var IdentParser = (function (_super) {
    __extends(IdentParser, _super);
    function IdentParser(lang, output, step) {
        var _this = _super.call(this) || this;
        _this.lang = lang;
        _this.output = output;
        _this.step = step;
        return _this;
    }
    IdentParser.prototype.feed = function (input) {
        return IdentParser.parse(input, this.lang, this.output, this.step);
    };
    IdentParser.parse = function (input, lang, output, step) {
        if (step === void 0) { step = 1; }
        var c = 0;
        if (step === 1) {
            if (!input.isEmpty()) {
                c = input.head();
                if (Recon.isIdentStartChar(c)) {
                    input.step();
                    output = output || lang.textOutput();
                    output.push(c);
                    step = 2;
                }
                else {
                    return Iteratee.expected('identifier', input);
                }
            }
            else if (input.isDone()) {
                return Iteratee.unexpected(input);
            }
        }
        if (step === 2) {
            while (!input.isEmpty() && (c = input.head(), Recon.isIdentChar(c))) {
                input.step();
                output.push(c);
            }
            if (!input.isEmpty() || input.isDone()) {
                return Iteratee.done(lang.ident(output.bind()));
            }
        }
        return new IdentParser(lang, output, step);
    };
    return IdentParser;
}(Iteratee));
var StringParser = (function (_super) {
    __extends(StringParser, _super);
    function StringParser(lang, output, quote, code, step) {
        var _this = _super.call(this) || this;
        _this.lang = lang;
        _this.output = output;
        _this.quote = quote;
        _this.code = code;
        _this.step = step;
        return _this;
    }
    StringParser.prototype.feed = function (input) {
        return StringParser.parse(input, this.lang, this.output, this.quote, this.code, this.step);
    };
    StringParser.parse = function (input, lang, output, quote, code, step) {
        if (quote === void 0) { quote = 0; }
        if (code === void 0) { code = 0; }
        if (step === void 0) { step = 1; }
        var c = 0;
        if (step === 1) {
            while (!input.isEmpty() && (c = input.head(), Iteratee.isWhitespace(c))) {
                input.step();
            }
            if (!input.isEmpty()) {
                if (c === 34 || c === 39 && (quote === c || quote === 0)) {
                    input.step();
                    output = output || lang.textOutput();
                    quote = c;
                    step = 2;
                }
                else {
                    return Iteratee.expected('string', input);
                }
            }
            else if (input.isDone()) {
                return Iteratee.unexpected(input);
            }
        }
        string: do {
            output = output;
            if (step === 2) {
                while (!input.isEmpty() && (c = input.head(), c !== quote && c !== 92)) {
                    input.step();
                    output.push(c);
                }
                if (!input.isEmpty()) {
                    if (c === quote) {
                        input.step();
                        return Iteratee.done(output.bind());
                    }
                    else if (c === 92) {
                        input.step();
                        step = 3;
                    }
                    else {
                        return Iteratee.unexpected(input);
                    }
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            if (step === 3) {
                if (!input.isEmpty()) {
                    c = input.head();
                    if (c === 34
                        || c === 36
                        || c === 39
                        || c === 47
                        || c === 64
                        || c === 91
                        || c === 92
                        || c === 93
                        || c === 123
                        || c === 125) {
                        input.step();
                        output.push(c);
                        step = 2;
                        continue;
                    }
                    else if (c === 98) {
                        input.step();
                        output.push(8);
                        step = 2;
                        continue;
                    }
                    else if (c === 102) {
                        input.step();
                        output.push(12);
                        step = 2;
                        continue;
                    }
                    else if (c === 110) {
                        input.step();
                        output.push(10);
                        step = 2;
                        continue;
                    }
                    else if (c === 114) {
                        input.step();
                        output.push(13);
                        step = 2;
                        continue;
                    }
                    else if (c === 116) {
                        input.step();
                        output.push(9);
                        step = 2;
                        continue;
                    }
                    else if (c === 117) {
                        input.step();
                        step = 4;
                    }
                    else {
                        return Iteratee.expected('escape character', input);
                    }
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            if (step >= 4) {
                do {
                    if (!input.isEmpty()) {
                        c = input.head();
                        if (Iteratee.isHexChar(c)) {
                            input.step();
                            code = 16 * code + Iteratee.decodeHexChar(c);
                            if (step <= 6) {
                                step += 1;
                                continue;
                            }
                            else {
                                output.push(code);
                                code = 0;
                                step = 2;
                                continue string;
                            }
                        }
                        else {
                            return Iteratee.expected('hex digit', input);
                        }
                    }
                    else if (input.isDone()) {
                        return Iteratee.unexpected(input);
                    }
                    break;
                } while (true);
            }
            break;
        } while (true);
        return new StringParser(lang, output, quote, code, step);
    };
    return StringParser;
}(Iteratee));
var NumberParser = (function (_super) {
    __extends(NumberParser, _super);
    function NumberParser(lang, sign, value, mode, step) {
        var _this = _super.call(this) || this;
        _this.lang = lang;
        _this.sign = sign;
        _this.value = value;
        _this.mode = mode;
        _this.step = step;
        return _this;
    }
    NumberParser.prototype.feed = function (input) {
        return NumberParser.parse(input, this.lang, this.sign, this.value, this.mode, this.step);
    };
    NumberParser.parse = function (input, lang, sign, value, mode, step) {
        if (sign === void 0) { sign = 1; }
        if (value === void 0) { value = 0; }
        if (mode === void 0) { mode = 2; }
        if (step === void 0) { step = 1; }
        var c = 0;
        if (step === 1) {
            while (!input.isEmpty() && (c = input.head(), Iteratee.isWhitespace(c))) {
                input.step();
            }
            if (!input.isEmpty()) {
                if (c === 45) {
                    input.step();
                    sign = -1;
                }
                step = 2;
            }
            else if (input.isDone()) {
                return Iteratee.unexpected(input);
            }
        }
        if (step === 2) {
            if (!input.isEmpty()) {
                c = input.head();
                if (c === 48) {
                    input.step();
                    step = 4;
                }
                else if (c >= 49 && c <= 57) {
                    input.step();
                    value = sign * (c - 48);
                    step = 3;
                }
                else {
                    return Iteratee.expected('digit', input);
                }
            }
            else if (input.isDone()) {
                return Iteratee.unexpected(input);
            }
        }
        if (step === 3) {
            while (!input.isEmpty() && (c = input.head(), c >= 48 && c <= 57)) {
                input.step();
                value = 10 * value + sign * (c - 48);
            }
            if (!input.isEmpty()) {
                step = 4;
            }
            else if (input.isDone()) {
                return Iteratee.done(lang.number(value));
            }
        }
        if (step === 4) {
            if (!input.isEmpty()) {
                c = input.head();
                if (mode > 0 && (c === 46 || c === 69 || c === 101)) {
                    var output = new StringOutput();
                    if (sign < 0 && value === 0) {
                        output.push(45, 48);
                    }
                    else {
                        output.push(value.toString());
                    }
                    return DecimalParser.parse(input, lang, output, mode);
                }
                else if (c === 120 && sign > 0 && value === 0) {
                    input.step();
                    return HexadecimalParser.parse(input, lang);
                }
                else {
                    return Iteratee.done(lang.number(value));
                }
            }
            else if (input.isDone()) {
                return Iteratee.done(lang.number(value));
            }
        }
        return new NumberParser(lang, sign, value, mode, step);
    };
    NumberParser.parseInteger = function (input, lang) {
        return this.parse(input, lang, undefined, undefined, 0);
    };
    NumberParser.parseDecimal = function (input, lang) {
        return this.parse(input, lang, undefined, undefined, 1);
    };
    return NumberParser;
}(Iteratee));
var DecimalParser = (function (_super) {
    __extends(DecimalParser, _super);
    function DecimalParser(lang, output, mode, step) {
        var _this = _super.call(this) || this;
        _this.lang = lang;
        _this.output = output;
        _this.mode = mode;
        _this.step = step;
        return _this;
    }
    DecimalParser.prototype.feed = function (input) {
        return DecimalParser.parse(input, this.lang, this.output, this.mode, this.step);
    };
    DecimalParser.parse = function (input, lang, output, mode, step) {
        if (mode === void 0) { mode = 2; }
        if (step === void 0) { step = 1; }
        var c = 0;
        if (step === 1) {
            if (!input.isEmpty()) {
                c = input.head();
                if (c === 46) {
                    input.step();
                    output.push(c);
                    step = 2;
                }
                else if (mode > 1 && (c === 69 || c === 101)) {
                    input.step();
                    output.push(c);
                    step = 5;
                }
                else {
                    return Iteratee.expected('fraction or exponent', input);
                }
            }
            else if (input.isDone()) {
                return Iteratee.unexpected(input);
            }
        }
        if (step === 2) {
            if (!input.isEmpty()) {
                c = input.head();
                if (c >= 48 && c <= 57) {
                    input.step();
                    output.push(c);
                    step = 3;
                }
                else {
                    return Iteratee.expected('digit', input);
                }
            }
            else if (input.isDone()) {
                return Iteratee.unexpected(input);
            }
        }
        if (step === 3) {
            while (!input.isEmpty() && (c = input.head(), c >= 48 && c <= 57)) {
                input.step();
                output.push(c);
            }
            if (!input.isEmpty()) {
                if (mode > 1) {
                    step = 4;
                }
                else {
                    return Iteratee.done(lang.number(output.bind()));
                }
            }
            else if (input.isDone()) {
                return Iteratee.done(lang.number(output.bind()));
            }
        }
        if (step === 4) {
            c = input.head();
            if (c === 69 || c === 101) {
                input.step();
                output.push(c);
                step = 5;
            }
            else {
                return Iteratee.done(lang.number(output.bind()));
            }
        }
        if (step === 5) {
            if (!input.isEmpty()) {
                c = input.head();
                if (c === 43 || c === 45) {
                    input.step();
                    output.push(c);
                }
                step = 6;
            }
            else if (input.isDone()) {
                return Iteratee.unexpected(input);
            }
        }
        if (step === 6) {
            if (!input.isEmpty()) {
                c = input.head();
                if (c >= 48 && c <= 57) {
                    input.step();
                    output.push(c);
                    step = 7;
                }
                else {
                    return Iteratee.expected('digit', input);
                }
            }
            else if (input.isDone()) {
                return Iteratee.unexpected(input);
            }
        }
        if (step === 7) {
            while (!input.isEmpty() && (c = input.head(), c >= 48 && c <= 57)) {
                input.step();
                output.push(c);
            }
            if (!input.isEmpty() || input.isDone()) {
                return Iteratee.done(lang.number(output.bind()));
            }
        }
        return new DecimalParser(lang, output, mode, step);
    };
    return DecimalParser;
}(Iteratee));
var HexadecimalParser = (function (_super) {
    __extends(HexadecimalParser, _super);
    function HexadecimalParser(lang, value, size) {
        var _this = _super.call(this) || this;
        _this.lang = lang;
        _this.value = value;
        _this.size = size;
        return _this;
    }
    HexadecimalParser.prototype.feed = function (input) {
        return HexadecimalParser.parse(input, this.lang, this.value, this.size);
    };
    HexadecimalParser.parse = function (input, lang, value, size) {
        if (value === void 0) { value = 0; }
        if (size === void 0) { size = 0; }
        var c = 0;
        while (!input.isEmpty()) {
            c = input.head();
            if (Iteratee.isHexChar(c)) {
                input.step();
                value = 16 * value + Iteratee.decodeHexChar(c);
                size += 1;
            }
            else {
                break;
            }
        }
        if (!input.isEmpty() || input.isDone()) {
            if (size > 0) {
                return Iteratee.done(lang.number(value));
            }
            else {
                return Iteratee.expected('hex number', input);
            }
        }
        return new HexadecimalParser(lang, value, size);
    };
    return HexadecimalParser;
}(Iteratee));

var SelectorParser = (function (_super) {
    __extends(SelectorParser, _super);
    function SelectorParser(recon, builder, selector, valueParser, step) {
        var _this = _super.call(this) || this;
        _this.recon = recon;
        _this.builder = builder;
        _this.selector = selector;
        _this.valueParser = valueParser;
        _this.step = step;
        return _this;
    }
    SelectorParser.prototype.feed = function (input) {
        return SelectorParser.parse(input, this.recon, this.builder, this.selector, this.valueParser, this.step);
    };
    SelectorParser.parse = function (input, recon, builder, selector, valueParser, step) {
        if (selector === void 0) { selector = recon.selector(); }
        if (step === void 0) { step = 1; }
        var c = 0;
        if (step === 1) {
            while (!input.isEmpty() && (c = input.head(), Iteratee.isSpace(c))) {
                input.step();
            }
            if (!input.isEmpty() && c === 36) {
                input.step();
                step = 2;
            }
            else if (input.isDone()) {
                return Iteratee.unexpected(input);
            }
        }
        if (step === 2) {
            if (!input.isEmpty()) {
                c = input.head();
                if (c === 91) {
                    input.step();
                    step = 7;
                }
                else if (c === 64) {
                    input.step();
                    step = 6;
                }
                else if (c === 42) {
                    input.step();
                    step = 5;
                }
                else if (c === 35) {
                    input.step();
                    step = 4;
                }
                else {
                    step = 3;
                }
            }
            else if (input.isDone()) {
                return Iteratee.unexpected(input);
            }
        }
        do {
            if (step === 3) {
                if (!valueParser) {
                    valueParser = recon.parseLiteral(input, recon.valueBuilder());
                }
                while (valueParser.isCont() && (!input.isEmpty() || input.isDone())) {
                    valueParser = valueParser.feed(input);
                }
                if (valueParser.isDone()) {
                    selector = recon.get(selector, valueParser.bind());
                    valueParser = undefined;
                    step = 9;
                }
                else if (valueParser.isError()) {
                    return valueParser.asError();
                }
            }
            if (step === 4) {
                if (!valueParser) {
                    valueParser = recon.parseInteger(input);
                }
                while (valueParser.isCont() && (!input.isEmpty() || input.isDone())) {
                    valueParser = valueParser.feed(input);
                }
                if (valueParser.isDone()) {
                    selector = recon.value(recon.getItem(selector, valueParser.bind()));
                    valueParser = undefined;
                    step = 9;
                }
                else if (valueParser.isError()) {
                    return valueParser.asError();
                }
            }
            if (step === 5) {
                if (!input.isEmpty()) {
                    c = input.head();
                    if (c === 58) {
                        input.step();
                        selector = recon.keys(selector);
                    }
                    else if (c === 42) {
                        input.step();
                        selector = recon.descendants(selector);
                    }
                    else {
                        selector = recon.children(selector);
                    }
                    step = 9;
                }
                else if (input.isDone()) {
                    selector = recon.children(selector);
                    step = 9;
                }
            }
            if (step === 6) {
                if (!valueParser) {
                    valueParser = recon.parseIdent(input);
                }
                while (valueParser.isCont() && (!input.isEmpty() || input.isDone())) {
                    valueParser = valueParser.feed(input);
                }
                if (valueParser.isDone()) {
                    selector = recon.getAttr(selector, valueParser.bind());
                    valueParser = undefined;
                    step = 9;
                }
                else if (valueParser.isError()) {
                    return valueParser.asError();
                }
            }
            if (step === 7) {
                if (!valueParser) {
                    valueParser = recon.parseBlockExpr(input);
                }
                while (valueParser.isCont() && (!input.isEmpty() || input.isDone())) {
                    valueParser = valueParser.feed(input);
                }
                if (valueParser.isDone()) {
                    step = 8;
                }
                else if (valueParser.isError()) {
                    return valueParser.asError();
                }
            }
            if (step === 8) {
                while (!input.isEmpty() && (c = input.head(), Iteratee.isSpace(c))) {
                    input.step();
                }
                if (!input.isEmpty()) {
                    if (c === 93) {
                        input.step();
                        selector = recon.filter(selector, valueParser.bind());
                        valueParser = undefined;
                        step = 9;
                    }
                    else {
                        return Iteratee.expected(']', input);
                    }
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            if (step === 9) {
                if (!input.isEmpty()) {
                    c = input.head();
                    if (c === 91) {
                        input.step();
                        step = 7;
                        continue;
                    }
                    else if (c === 42) {
                        input.step();
                        step = 5;
                        continue;
                    }
                    else if (c === 35) {
                        input.step();
                        step = 4;
                        continue;
                    }
                    else if (c === 46) {
                        input.step();
                        step = 10;
                    }
                    else if (builder) {
                        builder.push(recon.item(selector));
                        return Iteratee.done(builder.bind());
                    }
                    else {
                        return Iteratee.done(selector);
                    }
                }
                else if (input.isDone()) {
                    if (builder) {
                        builder.push(recon.item(selector));
                        return Iteratee.done(builder.bind());
                    }
                    else {
                        return Iteratee.done(selector);
                    }
                }
            }
            if (step === 10) {
                if (!input.isEmpty()) {
                    c = input.head();
                    if (c === 64) {
                        input.step();
                        step = 6;
                    }
                    else if (c === 42) {
                        input.step();
                        step = 5;
                        continue;
                    }
                    else {
                        step = 3;
                        continue;
                    }
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            break;
        } while (true);
        return new SelectorParser(recon, builder, selector, valueParser, step);
    };
    return SelectorParser;
}(Iteratee));
var LiteralParser = (function (_super) {
    __extends(LiteralParser, _super);
    function LiteralParser(recon, builder, valueParser, step) {
        var _this = _super.call(this) || this;
        _this.recon = recon;
        _this.builder = builder;
        _this.valueParser = valueParser;
        _this.step = step;
        return _this;
    }
    LiteralParser.prototype.feed = function (input) {
        return LiteralParser.parse(input, this.recon, this.builder, this.valueParser, this.step);
    };
    LiteralParser.parse = function (input, recon, builder, valueParser, step) {
        if (step === void 0) { step = 1; }
        var c = 0;
        if (step === 1) {
            while (!input.isEmpty() && (c = input.head(), Iteratee.isSpace(c))) {
                input.step();
            }
            if (!input.isEmpty()) {
                if (c === 40) {
                    input.step();
                    step = 5;
                }
                else if (c === 123) {
                    builder = builder || recon.recordBuilder();
                    valueParser = recon.parseRecord(input, builder);
                    step = 4;
                }
                else if (c === 91) {
                    builder = builder || recon.recordBuilder();
                    valueParser = recon.parseMarkup(input, builder);
                    step = 4;
                }
                else if (Recon.isIdentStartChar(c)) {
                    valueParser = recon.parseIdent(input);
                    step = 2;
                }
                else if (c === 34 || c === 39) {
                    valueParser = recon.parseString(input);
                    step = 2;
                }
                else if (c === 45 || c >= 48 && c <= 57) {
                    valueParser = recon.parseNumber(input);
                    step = 2;
                }
                else if (c === 37) {
                    valueParser = recon.parseData(input);
                    step = 2;
                }
                else if (c === 36) {
                    valueParser = recon.parseSelector(input);
                    step = 2;
                }
                else if (!builder) {
                    return Iteratee.done(recon.extant());
                }
                else {
                    return Iteratee.done(builder.bind());
                }
            }
            else if (input.isDone()) {
                if (!builder) {
                    return Iteratee.done(recon.extant());
                }
                else {
                    return Iteratee.done(builder.bind());
                }
            }
        }
        if (step === 2) {
            valueParser = valueParser;
            while (valueParser.isCont() && (!input.isEmpty() || input.isDone())) {
                valueParser = valueParser.feed(input);
            }
            if (valueParser.isDone()) {
                builder = builder || recon.valueBuilder();
                builder.push(recon.item(valueParser.bind()));
                return Iteratee.done(builder.bind());
            }
            else if (valueParser.isError()) {
                return valueParser.asError();
            }
        }
        if (step === 4) {
            valueParser = valueParser;
            while (valueParser.isCont() && (!input.isEmpty() || input.isDone())) {
                valueParser = valueParser.feed(input);
            }
            if (valueParser.isDone()) {
                return Iteratee.done(builder.bind());
            }
            else if (valueParser.isError()) {
                return valueParser.asError();
            }
        }
        if (step === 5) {
            if (!valueParser) {
                valueParser = recon.parseBlockExpr(input);
            }
            while (valueParser.isCont() && (!input.isEmpty() || input.isDone())) {
                valueParser = valueParser.feed(input);
            }
            if (valueParser.isDone()) {
                step = 6;
            }
            else if (valueParser.isError()) {
                return valueParser.asError();
            }
        }
        if (step === 6) {
            while (!input.isEmpty() && (c = input.head(), Iteratee.isSpace(c))) {
                input.step();
            }
            if (!input.isEmpty()) {
                if (c === 41) {
                    input.step();
                    builder = builder || recon.valueBuilder();
                    builder.push(recon.item(valueParser.bind()));
                    return Iteratee.done(builder.bind());
                }
                else {
                    return Iteratee.expected(')', input);
                }
            }
            else if (input.isDone()) {
                return Iteratee.unexpected(input);
            }
        }
        return new LiteralParser(recon, builder, valueParser, step);
    };
    return LiteralParser;
}(Iteratee));

var CondExprParser = (function (_super) {
    __extends(CondExprParser, _super);
    function CondExprParser(recon, builder, predParser, thenParser, elseParser, step) {
        var _this = _super.call(this) || this;
        _this.recon = recon;
        _this.builder = builder;
        _this.predParser = predParser;
        _this.thenParser = thenParser;
        _this.elseParser = elseParser;
        _this.step = step;
        return _this;
    }
    CondExprParser.prototype.feed = function (input) {
        return CondExprParser.parse(input, this.recon, this.builder, this.predParser, this.thenParser, this.elseParser, this.step);
    };
    CondExprParser.parse = function (input, recon, builder, predParser, thenParser, elseParser, step) {
        if (step === void 0) { step = 1; }
        var c = 0;
        if (step === 1) {
            if (!predParser) {
                predParser = recon.parseLorExpr(input, builder);
            }
            while (predParser.isCont() && (!input.isEmpty() || input.isDone())) {
                predParser = predParser.feed(input);
            }
            if (predParser.isDone()) {
                step = 2;
            }
            else if (predParser.isError()) {
                return predParser.asError();
            }
        }
        if (step === 2) {
            while (!input.isEmpty() && (c = input.head(), Iteratee.isSpace(c))) {
                input.step();
            }
            if (!input.isEmpty()) {
                if (c === 63) {
                    input.step();
                    step = 3;
                }
                else {
                    return predParser;
                }
            }
            else if (input.isDone()) {
                return predParser;
            }
        }
        if (step === 3) {
            if (!thenParser) {
                thenParser = recon.parseCondExpr(input, builder);
            }
            while (thenParser.isCont() && (!input.isEmpty() || input.isDone())) {
                thenParser = thenParser.feed(input);
            }
            if (thenParser.isDone()) {
                step = 4;
            }
            else if (thenParser.isError()) {
                return thenParser.asError();
            }
        }
        if (step === 4) {
            while (!input.isEmpty() && (c = input.head(), Iteratee.isSpace(c))) {
                input.step();
            }
            if (!input.isEmpty()) {
                if (c === 58) {
                    input.step();
                    step = 5;
                }
                else {
                    return Iteratee.expected(':', input);
                }
            }
            else if (input.isDone()) {
                return Iteratee.unexpected(input);
            }
        }
        if (step === 5) {
            if (!elseParser) {
                elseParser = recon.parseCondExpr(input, builder);
            }
            while (elseParser.isCont() && (!input.isEmpty() || input.isDone())) {
                elseParser = elseParser.feed(input);
            }
            if (elseParser.isDone()) {
                var predExpr = predParser.bind();
                var thenExpr = thenParser.bind();
                var elseExpr = elseParser.bind();
                return Iteratee.done(recon.cond(predExpr, thenExpr, elseExpr));
            }
            else if (elseParser.isError()) {
                return elseParser.asError();
            }
        }
        return new CondExprParser(recon, builder, predParser, thenParser, elseParser, step);
    };
    return CondExprParser;
}(Iteratee));
var LorExprParser = (function (_super) {
    __extends(LorExprParser, _super);
    function LorExprParser(recon, builder, lhsParser, rhsParser, step) {
        var _this = _super.call(this) || this;
        _this.recon = recon;
        _this.builder = builder;
        _this.lhsParser = lhsParser;
        _this.rhsParser = rhsParser;
        _this.step = step;
        return _this;
    }
    LorExprParser.prototype.feed = function (input) {
        return LorExprParser.parse(input, this.recon, this.builder, this.lhsParser, this.rhsParser, this.step);
    };
    LorExprParser.parse = function (input, recon, builder, lhsParser, rhsParser, step) {
        if (step === void 0) { step = 1; }
        var c = 0;
        do {
            if (step === 1) {
                if (!lhsParser) {
                    lhsParser = recon.parseLandExpr(input, builder);
                }
                while (lhsParser.isCont() && (!input.isEmpty() || input.isDone())) {
                    lhsParser = lhsParser.feed(input);
                }
                if (lhsParser.isDone()) {
                    step = 2;
                }
                else if (lhsParser.isError()) {
                    return lhsParser.asError();
                }
            }
            if (step === 2) {
                if (!input.isEmpty()) {
                    c = input.head();
                    if (c === 124) {
                        input.step();
                        step = 3;
                    }
                    else {
                        return lhsParser;
                    }
                }
                else if (input.isDone()) {
                    return lhsParser;
                }
            }
            if (step === 3) {
                if (!rhsParser) {
                    rhsParser = recon.parseLandExpr(input, builder);
                }
                while (rhsParser.isCont() && (!input.isEmpty() || input.isDone())) {
                    rhsParser = rhsParser.feed(input);
                }
                if (rhsParser.isDone()) {
                    var lhs = lhsParser.bind();
                    var rhs = rhsParser.bind();
                    lhsParser = Iteratee.done(recon.or(lhs, rhs));
                    rhsParser = undefined;
                    step = 2;
                    continue;
                }
                else if (rhsParser.isError()) {
                    return rhsParser.asError();
                }
            }
            break;
        } while (true);
        return new LorExprParser(recon, builder, lhsParser, rhsParser, step);
    };
    return LorExprParser;
}(Iteratee));
var LandExprParser = (function (_super) {
    __extends(LandExprParser, _super);
    function LandExprParser(recon, builder, lhsParser, rhsParser, step) {
        var _this = _super.call(this) || this;
        _this.recon = recon;
        _this.builder = builder;
        _this.lhsParser = lhsParser;
        _this.rhsParser = rhsParser;
        _this.step = step;
        return _this;
    }
    LandExprParser.prototype.feed = function (input) {
        return LandExprParser.parse(input, this.recon, this.builder, this.lhsParser, this.rhsParser, this.step);
    };
    LandExprParser.parse = function (input, recon, builder, lhsParser, rhsParser, step) {
        if (step === void 0) { step = 1; }
        var c = 0;
        do {
            if (step === 1) {
                if (!lhsParser) {
                    lhsParser = recon.parseBorExpr(input, builder);
                }
                while (lhsParser.isCont() && (!input.isEmpty() || input.isDone())) {
                    lhsParser = lhsParser.feed(input);
                }
                if (lhsParser.isDone()) {
                    step = 2;
                }
                else if (lhsParser.isError()) {
                    return lhsParser.asError();
                }
            }
            if (step === 2) {
                if (!input.isEmpty()) {
                    c = input.head();
                    if (c === 38) {
                        input.step();
                        step = 3;
                    }
                    else {
                        return lhsParser;
                    }
                }
                else if (input.isDone()) {
                    return lhsParser;
                }
            }
            if (step === 3) {
                if (!rhsParser) {
                    rhsParser = recon.parseBorExpr(input, builder);
                }
                while (rhsParser.isCont() && (!input.isEmpty() || input.isDone())) {
                    rhsParser = rhsParser.feed(input);
                }
                if (rhsParser.isDone()) {
                    var lhs = lhsParser.bind();
                    var rhs = rhsParser.bind();
                    lhsParser = Iteratee.done(recon.and(lhs, rhs));
                    rhsParser = undefined;
                    step = 2;
                    continue;
                }
                else if (rhsParser.isError()) {
                    return rhsParser.asError();
                }
            }
            break;
        } while (true);
        return new LandExprParser(recon, builder, lhsParser, rhsParser, step);
    };
    return LandExprParser;
}(Iteratee));
var BorExprParser = (function (_super) {
    __extends(BorExprParser, _super);
    function BorExprParser(recon, builder, lhsParser, rhsParser, step) {
        var _this = _super.call(this) || this;
        _this.recon = recon;
        _this.builder = builder;
        _this.lhsParser = lhsParser;
        _this.rhsParser = rhsParser;
        _this.step = step;
        return _this;
    }
    BorExprParser.prototype.feed = function (input) {
        return BorExprParser.parse(input, this.recon, this.builder, this.lhsParser, this.rhsParser, this.step);
    };
    BorExprParser.parse = function (input, recon, builder, lhsParser, rhsParser, step) {
        if (step === void 0) { step = 1; }
        var c = 0;
        do {
            if (step === 1) {
                if (!lhsParser) {
                    lhsParser = recon.parseBxorExpr(input, builder);
                }
                while (lhsParser.isCont() && (!input.isEmpty() || input.isDone())) {
                    lhsParser = lhsParser.feed(input);
                }
                if (lhsParser.isDone()) {
                    step = 2;
                }
                else if (lhsParser.isError()) {
                    return lhsParser.asError();
                }
            }
            if (step === 2) {
                while (!input.isEmpty() && (c = input.head(), Iteratee.isSpace(c))) {
                    input.step();
                }
                if (!input.isEmpty()) {
                    if (c === 124) {
                        input.step();
                        step = 3;
                    }
                    else {
                        return lhsParser;
                    }
                }
                else if (input.isDone()) {
                    return lhsParser;
                }
            }
            if (step === 3) {
                if (!input.isEmpty()) {
                    c = input.head();
                    if (c === 124) {
                        return lhsParser;
                    }
                    else {
                        step = 4;
                    }
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            if (step === 4) {
                if (!rhsParser) {
                    rhsParser = recon.parseBxorExpr(input, builder);
                }
                while (rhsParser.isCont() && (!input.isEmpty() || input.isDone())) {
                    rhsParser = rhsParser.feed(input);
                }
                if (rhsParser.isDone()) {
                    var lhs = lhsParser.bind();
                    var rhs = rhsParser.bind();
                    lhsParser = Iteratee.done(recon.bor(lhs, rhs));
                    rhsParser = undefined;
                    step = 2;
                    continue;
                }
                else if (rhsParser.isError()) {
                    return rhsParser.asError();
                }
            }
            break;
        } while (true);
        return new BorExprParser(recon, builder, lhsParser, rhsParser, step);
    };
    return BorExprParser;
}(Iteratee));
var BxorExprParser = (function (_super) {
    __extends(BxorExprParser, _super);
    function BxorExprParser(recon, builder, lhsParser, rhsParser, step) {
        var _this = _super.call(this) || this;
        _this.recon = recon;
        _this.builder = builder;
        _this.lhsParser = lhsParser;
        _this.rhsParser = rhsParser;
        _this.step = step;
        return _this;
    }
    BxorExprParser.prototype.feed = function (input) {
        return BxorExprParser.parse(input, this.recon, this.builder, this.lhsParser, this.rhsParser, this.step);
    };
    BxorExprParser.parse = function (input, recon, builder, lhsParser, rhsParser, step) {
        if (step === void 0) { step = 1; }
        var c = 0;
        do {
            if (step === 1) {
                if (!lhsParser) {
                    lhsParser = recon.parseBandExpr(input, builder);
                }
                while (lhsParser.isCont() && (!input.isEmpty() || input.isDone())) {
                    lhsParser = lhsParser.feed(input);
                }
                if (lhsParser.isDone()) {
                    step = 2;
                }
                else if (lhsParser.isError()) {
                    return lhsParser.asError();
                }
            }
            if (step === 2) {
                while (!input.isEmpty() && (c = input.head(), Iteratee.isSpace(c))) {
                    input.step();
                }
                if (!input.isEmpty()) {
                    if (c === 94) {
                        input.step();
                        step = 3;
                    }
                    else {
                        return lhsParser;
                    }
                }
                else if (input.isDone()) {
                    return lhsParser;
                }
            }
            if (step === 3) {
                if (!rhsParser) {
                    rhsParser = recon.parseBandExpr(input, builder);
                }
                while (rhsParser.isCont() && (!input.isEmpty() || input.isDone())) {
                    rhsParser = rhsParser.feed(input);
                }
                if (rhsParser.isDone()) {
                    var lhs = lhsParser.bind();
                    var rhs = rhsParser.bind();
                    lhsParser = Iteratee.done(recon.bxor(lhs, rhs));
                    rhsParser = undefined;
                    step = 2;
                    continue;
                }
                else if (rhsParser.isError()) {
                    return rhsParser.asError();
                }
            }
            break;
        } while (true);
        return new BxorExprParser(recon, builder, lhsParser, rhsParser, step);
    };
    return BxorExprParser;
}(Iteratee));
var BandExprParser = (function (_super) {
    __extends(BandExprParser, _super);
    function BandExprParser(recon, builder, lhsParser, rhsParser, step) {
        var _this = _super.call(this) || this;
        _this.recon = recon;
        _this.builder = builder;
        _this.lhsParser = lhsParser;
        _this.rhsParser = rhsParser;
        _this.step = step;
        return _this;
    }
    BandExprParser.prototype.feed = function (input) {
        return BandExprParser.parse(input, this.recon, this.builder, this.lhsParser, this.rhsParser, this.step);
    };
    BandExprParser.parse = function (input, recon, builder, lhsParser, rhsParser, step) {
        if (step === void 0) { step = 1; }
        var c = 0;
        do {
            if (step === 1) {
                if (!lhsParser) {
                    lhsParser = recon.parseCompExpr(input, builder);
                }
                while (lhsParser.isCont() && (!input.isEmpty() || input.isDone())) {
                    lhsParser = lhsParser.feed(input);
                }
                if (lhsParser.isDone()) {
                    step = 2;
                }
                else if (lhsParser.isError()) {
                    return lhsParser.asError();
                }
            }
            if (step === 2) {
                while (!input.isEmpty() && (c = input.head(), Iteratee.isSpace(c))) {
                    input.step();
                }
                if (!input.isEmpty()) {
                    if (c === 38) {
                        input.step();
                        step = 3;
                    }
                    else {
                        return lhsParser;
                    }
                }
                else if (input.isDone()) {
                    return lhsParser;
                }
            }
            if (step === 3) {
                if (!input.isEmpty()) {
                    c = input.head();
                    if (c === 38) {
                        return lhsParser;
                    }
                    else {
                        step = 4;
                    }
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            if (step === 4) {
                if (!rhsParser) {
                    rhsParser = recon.parseCompExpr(input, builder);
                }
                while (rhsParser.isCont() && (!input.isEmpty() || input.isDone())) {
                    rhsParser = rhsParser.feed(input);
                }
                if (rhsParser.isDone()) {
                    var lhs = lhsParser.bind();
                    var rhs = rhsParser.bind();
                    lhsParser = Iteratee.done(recon.band(lhs, rhs));
                    rhsParser = undefined;
                    step = 2;
                    continue;
                }
                else if (rhsParser.isError()) {
                    return rhsParser.asError();
                }
            }
            break;
        } while (true);
        return new BandExprParser(recon, builder, lhsParser, rhsParser, step);
    };
    return BandExprParser;
}(Iteratee));
var CompExprParser = (function (_super) {
    __extends(CompExprParser, _super);
    function CompExprParser(recon, builder, lhsParser, operator, rhsParser, step) {
        var _this = _super.call(this) || this;
        _this.recon = recon;
        _this.builder = builder;
        _this.lhsParser = lhsParser;
        _this.operator = operator;
        _this.rhsParser = rhsParser;
        _this.step = step;
        return _this;
    }
    CompExprParser.prototype.feed = function (input) {
        return CompExprParser.parse(input, this.recon, this.builder, this.lhsParser, this.operator, this.rhsParser, this.step);
    };
    CompExprParser.parse = function (input, recon, builder, lhsParser, operator, rhsParser, step) {
        if (step === void 0) { step = 1; }
        var c = 0;
        if (step === 1) {
            if (!lhsParser) {
                lhsParser = recon.parseAttrExpr(input, builder);
            }
            while (lhsParser.isCont() && (!input.isEmpty() || input.isDone())) {
                lhsParser = lhsParser.feed(input);
            }
            if (lhsParser.isDone()) {
                step = 2;
            }
            else if (lhsParser.isError()) {
                return lhsParser.asError();
            }
        }
        if (step === 2) {
            while (!input.isEmpty() && (c = input.head(), Iteratee.isSpace(c))) {
                input.step();
            }
            if (!input.isEmpty()) {
                if (c === 33) {
                    input.step();
                    step = 3;
                }
                else if (c === 60) {
                    input.step();
                    step = 4;
                }
                else if (c === 62) {
                    input.step();
                    step = 5;
                }
                else if (c === 61) {
                    input.step();
                    step = 6;
                }
                else {
                    return lhsParser;
                }
            }
            else if (input.isDone()) {
                return lhsParser;
            }
        }
        if (step === 3) {
            if (!input.isEmpty()) {
                c = input.head();
                if (c === 61) {
                    input.step();
                    operator = '!=';
                    step = 7;
                }
                else {
                    operator = '!';
                    step = 7;
                }
            }
            else if (input.isDone()) {
                return Iteratee.unexpected(input);
            }
        }
        if (step === 4) {
            if (!input.isEmpty()) {
                c = input.head();
                if (c === 61) {
                    input.step();
                    operator = '<=';
                    step = 7;
                }
                else {
                    operator = '<';
                    step = 7;
                }
            }
            else if (input.isDone()) {
                return Iteratee.unexpected(input);
            }
        }
        if (step === 5) {
            if (!input.isEmpty()) {
                c = input.head();
                if (c === 61) {
                    input.step();
                    operator = '>=';
                    step = 7;
                }
                else {
                    operator = '>';
                    step = 7;
                }
            }
            else if (input.isDone()) {
                return Iteratee.unexpected(input);
            }
        }
        if (step === 6) {
            if (!input.isEmpty()) {
                c = input.head();
                if (c === 61) {
                    input.step();
                    operator = '==';
                    step = 7;
                }
                else {
                    operator = '=';
                    step = 7;
                }
            }
            else if (input.isDone()) {
                return Iteratee.unexpected(input);
            }
        }
        if (step === 7) {
            if (!rhsParser) {
                rhsParser = recon.parseAttrExpr(input, builder);
            }
            while (rhsParser.isCont() && (!input.isEmpty() || input.isDone())) {
                rhsParser = rhsParser.feed(input);
            }
            if (rhsParser.isDone()) {
                var lhs = lhsParser.bind();
                var rhs = rhsParser.bind();
                if (operator === '<') {
                    return Iteratee.done(recon.lt(lhs, rhs));
                }
                else if (operator === '<=') {
                    return Iteratee.done(recon.le(lhs, rhs));
                }
                else if (operator === '==') {
                    return Iteratee.done(recon.eq(lhs, rhs));
                }
                else if (operator === '!=') {
                    return Iteratee.done(recon.ne(lhs, rhs));
                }
                else if (operator === '>=') {
                    return Iteratee.done(recon.ge(lhs, rhs));
                }
                else if (operator === '>') {
                    return Iteratee.done(recon.gt(lhs, rhs));
                }
                else {
                    return Iteratee.error(operator);
                }
            }
            else if (rhsParser.isError()) {
                return rhsParser.asError();
            }
        }
        return new CompExprParser(recon, builder, lhsParser, operator, rhsParser, step);
    };
    return CompExprParser;
}(Iteratee));
var AttrExprParser = (function (_super) {
    __extends(AttrExprParser, _super);
    function AttrExprParser(recon, builder, fieldParser, valueParser, step) {
        var _this = _super.call(this) || this;
        _this.recon = recon;
        _this.builder = builder;
        _this.fieldParser = fieldParser;
        _this.valueParser = valueParser;
        _this.step = step;
        return _this;
    }
    AttrExprParser.prototype.feed = function (input) {
        return AttrExprParser.parse(input, this.recon, this.builder, this.fieldParser, this.valueParser, this.step);
    };
    AttrExprParser.parse = function (input, recon, builder, fieldParser, valueParser, step) {
        if (step === void 0) { step = 1; }
        var c = 0;
        do {
            if (step === 1) {
                while (!input.isEmpty() && (c = input.head(), Iteratee.isSpace(c))) {
                    input.step();
                }
                if (!input.isEmpty()) {
                    if (c === 64) {
                        step = 2;
                    }
                    else if (c === 123 || c === 91) {
                        builder = builder || recon.recordBuilder();
                        step = 5;
                    }
                    else if (c === 33 || c === 34 || c === 36 || c === 37
                        || c === 39 || c === 40 || c === 43 || c === 45
                        || c >= 48 && c <= 57 || c === 126
                        || Recon.isIdentStartChar(c)) {
                        step = 4;
                    }
                    else if (!builder) {
                        return Iteratee.done(recon.extant());
                    }
                    else {
                        return Iteratee.done(builder.bind());
                    }
                }
                else if (input.isDone()) {
                    if (!builder) {
                        return Iteratee.done(recon.extant());
                    }
                    else {
                        return Iteratee.done(builder.bind());
                    }
                }
            }
            if (step === 2) {
                if (!fieldParser) {
                    fieldParser = recon.parseAttr(input);
                }
                while (fieldParser.isCont() && (!input.isEmpty() || input.isDone())) {
                    fieldParser = fieldParser.feed(input);
                }
                if (fieldParser.isDone()) {
                    builder = builder || recon.valueBuilder();
                    builder.push(fieldParser.bind());
                    fieldParser = undefined;
                    step = 3;
                }
                else if (fieldParser.isError()) {
                    return fieldParser.asError();
                }
            }
            if (step === 3) {
                while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                    input.step();
                }
                if (!input.isEmpty()) {
                    step = 1;
                    continue;
                }
                else if (input.isDone()) {
                    return Iteratee.done(builder.bind());
                }
            }
            if (step === 4) {
                if (!valueParser) {
                    valueParser = recon.parseAddRingExpr(input);
                }
                while (valueParser.isCont() && (!input.isEmpty() || input.isDone())) {
                    valueParser = valueParser.feed(input);
                }
                if (valueParser.isDone()) {
                    builder = builder || recon.valueBuilder();
                    builder.push(recon.item(valueParser.bind()));
                    valueParser = undefined;
                    step = 6;
                }
                else if (valueParser.isError()) {
                    return valueParser.asError();
                }
            }
            if (step === 5) {
                if (!valueParser) {
                    valueParser = recon.parseAddRingExpr(input, builder);
                }
                while (valueParser.isCont() && (!input.isEmpty() || input.isDone())) {
                    valueParser = valueParser.feed(input);
                }
                if (valueParser.isDone()) {
                    valueParser = undefined;
                    step = 6;
                }
                else if (valueParser.isError()) {
                    return valueParser.asError();
                }
            }
            if (step === 6) {
                while (!input.isEmpty() && (c = input.head(), Iteratee.isSpace(c))) {
                    input.step();
                }
                if (!input.isEmpty()) {
                    if (c === 64) {
                        step = 1;
                        continue;
                    }
                    else {
                        return Iteratee.done(builder.bind());
                    }
                }
                else if (input.isDone()) {
                    return Iteratee.done(builder.bind());
                }
            }
            break;
        } while (true);
        return new AttrExprParser(recon, builder, fieldParser, valueParser, step);
    };
    return AttrExprParser;
}(Iteratee));
var AddRingExprParser = (function (_super) {
    __extends(AddRingExprParser, _super);
    function AddRingExprParser(recon, builder, lhsParser, operator, rhsParser, step) {
        var _this = _super.call(this) || this;
        _this.recon = recon;
        _this.builder = builder;
        _this.lhsParser = lhsParser;
        _this.operator = operator;
        _this.rhsParser = rhsParser;
        _this.step = step;
        return _this;
    }
    AddRingExprParser.prototype.feed = function (input) {
        return AddRingExprParser.parse(input, this.recon, this.builder, this.lhsParser, this.operator, this.rhsParser, this.step);
    };
    AddRingExprParser.parse = function (input, recon, builder, lhsParser, operator, rhsParser, step) {
        if (step === void 0) { step = 1; }
        var c = 0;
        do {
            if (step === 1) {
                if (!lhsParser) {
                    lhsParser = recon.parseMulRingExpr(input, builder);
                }
                while (lhsParser.isCont() && (!input.isEmpty() || input.isDone())) {
                    lhsParser = lhsParser.feed(input);
                }
                if (lhsParser.isDone()) {
                    step = 2;
                }
                else if (lhsParser.isError()) {
                    return lhsParser.asError();
                }
            }
            if (step === 2) {
                while (!input.isEmpty() && (c = input.head(), Iteratee.isSpace(c))) {
                    input.step();
                }
                if (!input.isEmpty()) {
                    if (c === 43) {
                        input.step();
                        operator = '+';
                        step = 3;
                    }
                    else if (c === 45) {
                        input.step();
                        operator = '-';
                        step = 3;
                    }
                    else {
                        return lhsParser;
                    }
                }
                else if (input.isDone()) {
                    return lhsParser;
                }
            }
            if (step === 3) {
                if (!rhsParser) {
                    rhsParser = recon.parseMulRingExpr(input, builder);
                }
                while (rhsParser.isCont() && (!input.isEmpty() || input.isDone())) {
                    rhsParser = rhsParser.feed(input);
                }
                if (rhsParser.isDone()) {
                    var lhs = lhsParser.bind();
                    var rhs = rhsParser.bind();
                    if (operator === '+') {
                        lhsParser = Iteratee.done(recon.add(lhs, rhs));
                    }
                    else if (operator === '-') {
                        lhsParser = Iteratee.done(recon.sub(lhs, rhs));
                    }
                    else {
                        return Iteratee.error(operator);
                    }
                    rhsParser = undefined;
                    operator = undefined;
                    step = 2;
                    continue;
                }
                else if (rhsParser.isError()) {
                    return rhsParser.asError();
                }
            }
            break;
        } while (true);
        return new AddRingExprParser(recon, builder, lhsParser, operator, rhsParser, step);
    };
    return AddRingExprParser;
}(Iteratee));
var MulRingExprParser = (function (_super) {
    __extends(MulRingExprParser, _super);
    function MulRingExprParser(recon, builder, lhsParser, operator, rhsParser, step) {
        var _this = _super.call(this) || this;
        _this.recon = recon;
        _this.builder = builder;
        _this.lhsParser = lhsParser;
        _this.operator = operator;
        _this.rhsParser = rhsParser;
        _this.step = step;
        return _this;
    }
    MulRingExprParser.prototype.feed = function (input) {
        return MulRingExprParser.parse(input, this.recon, this.builder, this.lhsParser, this.operator, this.rhsParser, this.step);
    };
    MulRingExprParser.parse = function (input, recon, builder, lhsParser, operator, rhsParser, step) {
        if (step === void 0) { step = 1; }
        var c = 0;
        do {
            if (step === 1) {
                if (!lhsParser) {
                    lhsParser = recon.parsePrefixExpr(input, builder);
                }
                while (lhsParser.isCont() && (!input.isEmpty() || input.isDone())) {
                    lhsParser = lhsParser.feed(input);
                }
                if (lhsParser.isDone()) {
                    step = 2;
                }
                else if (lhsParser.isError()) {
                    return lhsParser.asError();
                }
            }
            if (step === 2) {
                while (!input.isEmpty() && (c = input.head(), Iteratee.isSpace(c))) {
                    input.step();
                }
                if (!input.isEmpty()) {
                    if (c === 42) {
                        input.step();
                        operator = '*';
                        step = 3;
                    }
                    else if (c === 47) {
                        input.step();
                        operator = '/';
                        step = 3;
                    }
                    else if (c === 37) {
                        input.step();
                        operator = '%';
                        step = 3;
                    }
                    else {
                        return lhsParser;
                    }
                }
                else if (input.isDone()) {
                    return lhsParser;
                }
            }
            if (step === 3) {
                if (!rhsParser) {
                    rhsParser = recon.parsePrefixExpr(input, builder);
                }
                while (rhsParser.isCont() && (!input.isEmpty() || input.isDone())) {
                    rhsParser = rhsParser.feed(input);
                }
                if (rhsParser.isDone()) {
                    var lhs = lhsParser.bind();
                    var rhs = rhsParser.bind();
                    if (operator === '*') {
                        lhsParser = Iteratee.done(recon.mul(lhs, rhs));
                    }
                    else if (operator === '/') {
                        lhsParser = Iteratee.done(recon.div(lhs, rhs));
                    }
                    else if (operator === '%') {
                        lhsParser = Iteratee.done(recon.mod(lhs, rhs));
                    }
                    else {
                        return Iteratee.error(operator);
                    }
                    rhsParser = undefined;
                    operator = undefined;
                    step = 2;
                    continue;
                }
                else if (rhsParser.isError()) {
                    return rhsParser.asError();
                }
            }
            break;
        } while (true);
        return new MulRingExprParser(recon, builder, lhsParser, operator, rhsParser, step);
    };
    return MulRingExprParser;
}(Iteratee));
var PrefixExprParser = (function (_super) {
    __extends(PrefixExprParser, _super);
    function PrefixExprParser(recon, builder, operator, rhsParser, step) {
        var _this = _super.call(this) || this;
        _this.recon = recon;
        _this.builder = builder;
        _this.operator = operator;
        _this.rhsParser = rhsParser;
        _this.step = step;
        return _this;
    }
    PrefixExprParser.prototype.feed = function (input) {
        return PrefixExprParser.parse(input, this.recon, this.builder, this.operator, this.rhsParser, this.step);
    };
    PrefixExprParser.parse = function (input, recon, builder, operator, rhsParser, step) {
        if (step === void 0) { step = 1; }
        var c = 0;
        if (step === 1) {
            while (!input.isEmpty() && (c = input.head(), Iteratee.isSpace(c))) {
                input.step();
            }
            if (!input.isEmpty()) {
                if (c === 33) {
                    input.step();
                    operator = '!';
                }
                else if (c === 126) {
                    input.step();
                    operator = '~';
                }
                else if (c === 45) {
                    input.step();
                    operator = '-';
                }
                else if (c === 43) {
                    input.step();
                    operator = '+';
                }
                else {
                    return recon.parsePrimaryExpr(input, builder);
                }
                step = 2;
            }
            else if (input.isDone()) {
                return recon.parsePrimaryExpr(input, builder);
            }
        }
        if (step === 2) {
            if (!rhsParser) {
                rhsParser = recon.parsePrefixExpr(input, builder);
            }
            while (rhsParser.isCont() && (!input.isEmpty() || input.isDone())) {
                rhsParser = rhsParser.feed(input);
            }
            if (rhsParser.isDone()) {
                var rhs = rhsParser.bind();
                if (!recon.isDistinct(rhs)) {
                    return Iteratee.expected('value', input);
                }
                else if (operator === '!') {
                    return Iteratee.done(recon.not(rhs));
                }
                else if (operator === '~') {
                    return Iteratee.done(recon.bnot(rhs));
                }
                else if (operator === '-') {
                    return Iteratee.done(recon.neg(rhs));
                }
                else if (operator === '+') {
                    return Iteratee.done(recon.pos(rhs));
                }
                else {
                    return Iteratee.error(operator);
                }
            }
            else if (rhsParser.isError()) {
                return rhsParser.asError();
            }
        }
        return new PrefixExprParser(recon, builder, operator, rhsParser, step);
    };
    return PrefixExprParser;
}(Iteratee));
var PrimaryExprParser = (function (_super) {
    __extends(PrimaryExprParser, _super);
    function PrimaryExprParser(recon, builder, exprParser, argsParser, step) {
        var _this = _super.call(this) || this;
        _this.recon = recon;
        _this.builder = builder;
        _this.exprParser = exprParser;
        _this.argsParser = argsParser;
        _this.step = step;
        return _this;
    }
    PrimaryExprParser.prototype.feed = function (input) {
        return PrimaryExprParser.parse(input, this.recon, this.builder, this.exprParser, this.argsParser, this.step);
    };
    PrimaryExprParser.parse = function (input, recon, builder, exprParser, argsParser, step) {
        if (step === void 0) { step = 1; }
        var c = 0;
        if (step === 1) {
            while (!input.isEmpty() && (c = input.head(), Iteratee.isSpace(c))) {
                input.step();
            }
            if (!input.isEmpty()) {
                if (c === 40) {
                    input.step();
                    step = 3;
                }
                else {
                    step = 2;
                }
            }
            else if (input.isDone()) {
                step = 2;
            }
        }
        if (step === 2) {
            if (!exprParser) {
                exprParser = recon.parseLiteral(input, builder);
            }
            while (exprParser.isCont() && (!input.isEmpty() || input.isDone())) {
                exprParser = exprParser.feed(input);
            }
            if (exprParser.isDone()) {
                step = 5;
            }
            else if (exprParser.isError()) {
                return exprParser.asError();
            }
        }
        if (step === 3) {
            if (!exprParser) {
                exprParser = recon.parseBlockExpr(input);
            }
            while (exprParser.isCont() && (!input.isEmpty() || input.isDone())) {
                exprParser = exprParser.feed(input);
            }
            if (exprParser.isDone()) {
                step = 4;
            }
            else if (exprParser.isError()) {
                return exprParser.asError();
            }
        }
        if (step === 4) {
            while (!input.isEmpty() && (c = input.head(), Iteratee.isSpace(c))) {
                input.step();
            }
            if (!input.isEmpty()) {
                if (c === 41) {
                    input.step();
                    step = 5;
                }
                else {
                    return Iteratee.expected(')', input);
                }
            }
            else if (input.isDone()) {
                return Iteratee.unexpected(input);
            }
        }
        do {
            if (step === 5) {
                while (!input.isEmpty() && (c = input.head(), Iteratee.isSpace(c))) {
                    input.step();
                }
                if (!input.isEmpty()) {
                    if (c === 40) {
                        input.step();
                        step = 6;
                    }
                    else {
                        return exprParser;
                    }
                }
                else if (input.isDone()) {
                    return exprParser;
                }
            }
            if (step === 6) {
                while (!input.isEmpty() && (c = input.head(), Iteratee.isWhitespace(c))) {
                    input.step();
                }
                if (!input.isEmpty()) {
                    if (c === 41) {
                        input.step();
                        var expr = exprParser.bind();
                        exprParser = Iteratee.done(recon.invoke(expr, recon.extant()));
                        step = 5;
                        continue;
                    }
                    else {
                        step = 7;
                    }
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            if (step === 7) {
                if (!argsParser) {
                    argsParser = recon.parseBlock(input);
                }
                while (argsParser.isCont() && (!input.isEmpty() || input.isDone())) {
                    argsParser = argsParser.feed(input);
                }
                if (argsParser.isDone()) {
                    step = 8;
                }
                else if (argsParser.isError()) {
                    return argsParser.asError();
                }
            }
            if (step === 8) {
                while (!input.isEmpty() && (c = input.head(), Iteratee.isSpace(c))) {
                    input.step();
                }
                if (!input.isEmpty()) {
                    if (c === 41) {
                        input.step();
                        var expr = exprParser.bind();
                        var args = argsParser.bind();
                        exprParser = Iteratee.done(recon.invoke(expr, args));
                        argsParser = undefined;
                        step = 5;
                        continue;
                    }
                    else {
                        return Iteratee.expected(')', input);
                    }
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            break;
        } while (true);
        return new PrimaryExprParser(recon, builder, exprParser, argsParser, step);
    };
    return PrimaryExprParser;
}(Iteratee));

var Recon = (function () {
    function Recon() {
    }
    Recon.prototype.parseRecon = function (input) {
        if (typeof input === 'string') {
            input = new StringInput(input);
        }
        while (!input.isEmpty() && Iteratee.isWhitespace(input.head())) {
            input.step();
        }
        var parser = this.parseBlock(input);
        if (parser.isDone()) {
            while (!input.isEmpty() && Iteratee.isWhitespace(input.head())) {
                input.step();
            }
            if (!input.isEmpty()) {
                parser = Iteratee.unexpected(input);
            }
        }
        return parser.bind();
    };
    Recon.prototype.parseAttr = function (input) {
        return AttrParser.parse(input, this);
    };
    Recon.prototype.parseBlock = function (input) {
        return BlockParser.parse(input, this);
    };
    Recon.prototype.parseBlockValue = function (input) {
        return BlockValueParser.parse(input, this);
    };
    Recon.prototype.parseInlineValue = function (input) {
        return InlineValueParser.parse(input, this);
    };
    Recon.prototype.parseRecord = function (input, builder) {
        return RecordParser.parse(input, this, builder);
    };
    Recon.prototype.parseMarkup = function (input, builder) {
        return MarkupParser.parse(input, this, builder);
    };
    Recon.prototype.parseData = function (input) {
        return DataParser.parse(input, this);
    };
    Recon.prototype.parseBase64 = function (input) {
        return DataParser.parseBase64(input, this);
    };
    Recon.prototype.parseIdent = function (input) {
        return IdentParser.parse(input, this);
    };
    Recon.prototype.parseString = function (input) {
        return StringParser.parse(input, this);
    };
    Recon.prototype.parseNumber = function (input) {
        return NumberParser.parse(input, this);
    };
    Recon.prototype.parseInteger = function (input) {
        return NumberParser.parseInteger(input, this);
    };
    Recon.prototype.parseDecimal = function (input) {
        return NumberParser.parseDecimal(input, this);
    };
    Recon.prototype.parseBlockExpr = function (input, builder) {
        return this.parseCondExpr(input, builder);
    };
    Recon.prototype.parseCondExpr = function (input, builder) {
        return CondExprParser.parse(input, this, builder);
    };
    Recon.prototype.parseLorExpr = function (input, builder) {
        return LorExprParser.parse(input, this, builder);
    };
    Recon.prototype.parseLandExpr = function (input, builder) {
        return LandExprParser.parse(input, this, builder);
    };
    Recon.prototype.parseBorExpr = function (input, builder) {
        return BorExprParser.parse(input, this, builder);
    };
    Recon.prototype.parseBxorExpr = function (input, builder) {
        return BxorExprParser.parse(input, this, builder);
    };
    Recon.prototype.parseBandExpr = function (input, builder) {
        return BandExprParser.parse(input, this, builder);
    };
    Recon.prototype.parseCompExpr = function (input, builder) {
        return CompExprParser.parse(input, this, builder);
    };
    Recon.prototype.parseAttrExpr = function (input, builder) {
        return AttrExprParser.parse(input, this, builder);
    };
    Recon.prototype.parseAddRingExpr = function (input, builder) {
        return AddRingExprParser.parse(input, this, builder);
    };
    Recon.prototype.parseMulRingExpr = function (input, builder) {
        return MulRingExprParser.parse(input, this, builder);
    };
    Recon.prototype.parsePrefixExpr = function (input, builder) {
        return PrefixExprParser.parse(input, this, builder);
    };
    Recon.prototype.parsePrimaryExpr = function (input, builder) {
        return PrimaryExprParser.parse(input, this, builder);
    };
    Recon.prototype.parseLiteral = function (input, builder) {
        return LiteralParser.parse(input, this, builder);
    };
    Recon.prototype.parseSelector = function (input, builder) {
        return SelectorParser.parse(input, this, builder);
    };
    Recon.prototype.blockParser = function () {
        return new BlockParser(this);
    };
    Recon.isIdentStartChar = function (c) {
        return c >= 65 && c <= 90
            || c === 95
            || c >= 97 && c <= 122
            || c >= 0xC0 && c <= 0xD6
            || c >= 0xD8 && c <= 0xF6
            || c >= 0xF8 && c <= 0x2FF
            || c >= 0x370 && c <= 0x37D
            || c >= 0x37F && c <= 0x1FFF
            || c >= 0x200C && c <= 0x200D
            || c >= 0x2070 && c <= 0x218F
            || c >= 0x2C00 && c <= 0x2FEF
            || c >= 0x3001 && c <= 0xD7FF
            || c >= 0xF900 && c <= 0xFDCF
            || c >= 0xFDF0 && c <= 0xFFFD
            || c >= 0x10000 && c <= 0xEFFFF;
    };
    Recon.isIdentChar = function (c) {
        return c === 45
            || c >= 48 && c <= 57
            || c >= 65 && c <= 90
            || c === 95
            || c >= 97 && c <= 122
            || c === 0xB7
            || c >= 0xC0 && c <= 0xD6
            || c >= 0xD8 && c <= 0xF6
            || c >= 0xF8 && c <= 0x37D
            || c >= 0x37F && c <= 0x1FFF
            || c >= 0x200C && c <= 0x200D
            || c >= 0x203F && c <= 0x2040
            || c >= 0x2070 && c <= 0x218F
            || c >= 0x2C00 && c <= 0x2FEF
            || c >= 0x3001 && c <= 0xD7FF
            || c >= 0xF900 && c <= 0xFDCF
            || c >= 0xFDF0 && c <= 0xFFFD
            || c >= 0x10000 && c <= 0xEFFFF;
    };
    Recon.Factory = undefined;
    return Recon;
}());
Item.Recon = Recon;
var ReconFactory = (function (_super) {
    __extends(ReconFactory, _super);
    function ReconFactory() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ReconFactory.prototype.isDistinct = function (value) {
        return value.isDistinct();
    };
    ReconFactory.prototype.item = function (value) {
        return value;
    };
    ReconFactory.prototype.value = function (item) {
        return item.toValue();
    };
    ReconFactory.prototype.attr = function (key, value) {
        return new Attr(key, value);
    };
    ReconFactory.prototype.slot = function (key, value) {
        return new Slot(key, value);
    };
    ReconFactory.prototype.valueBuilder = function () {
        return new ValueBuilder();
    };
    ReconFactory.prototype.recordBuilder = function () {
        return Record.empty();
    };
    ReconFactory.prototype.dataOutput = function () {
        return Data.empty();
    };
    ReconFactory.prototype.textOutput = function () {
        return Text$1.empty();
    };
    ReconFactory.prototype.ident = function (value) {
        if (value instanceof Text$1) {
            if (value.value === 'true') {
                return Bool.True;
            }
            else if (value.value === 'false') {
                return Bool.False;
            }
        }
        return value;
    };
    ReconFactory.prototype.number = function (value) {
        if (typeof value === 'number') {
            return Num.valueOf(value);
        }
        else if (typeof value === 'string') {
            return Num.valueOf(+value);
        }
        else {
            throw new TypeError('' + value);
        }
    };
    ReconFactory.prototype.boolean = function (value) {
        return Bool.valueOf(value);
    };
    ReconFactory.prototype.selector = function () {
        return Selector.Identity;
    };
    ReconFactory.prototype.extant = function () {
        return Value.Extant;
    };
    ReconFactory.prototype.absent = function () {
        return Value.Absent;
    };
    ReconFactory.prototype.cond = function (pred, thenTerm, elseTerm) {
        return pred.cond(thenTerm, elseTerm);
    };
    ReconFactory.prototype.or = function (lhs, rhs) {
        return lhs.or(rhs);
    };
    ReconFactory.prototype.and = function (lhs, rhs) {
        return lhs.and(rhs);
    };
    ReconFactory.prototype.bor = function (lhs, rhs) {
        return lhs.bor(rhs);
    };
    ReconFactory.prototype.bxor = function (lhs, rhs) {
        return lhs.bxor(rhs);
    };
    ReconFactory.prototype.band = function (lhs, rhs) {
        return lhs.band(rhs);
    };
    ReconFactory.prototype.lt = function (lhs, rhs) {
        return lhs.lt(rhs);
    };
    ReconFactory.prototype.le = function (lhs, rhs) {
        return lhs.le(rhs);
    };
    ReconFactory.prototype.eq = function (lhs, rhs) {
        return lhs.eq(rhs);
    };
    ReconFactory.prototype.ne = function (lhs, rhs) {
        return lhs.ne(rhs);
    };
    ReconFactory.prototype.ge = function (lhs, rhs) {
        return lhs.ge(rhs);
    };
    ReconFactory.prototype.gt = function (lhs, rhs) {
        return lhs.gt(rhs);
    };
    ReconFactory.prototype.add = function (lhs, rhs) {
        return lhs.plus(rhs);
    };
    ReconFactory.prototype.sub = function (lhs, rhs) {
        return lhs.minus(rhs);
    };
    ReconFactory.prototype.mul = function (lhs, rhs) {
        return lhs.times(rhs);
    };
    ReconFactory.prototype.div = function (lhs, rhs) {
        return lhs.divide(rhs);
    };
    ReconFactory.prototype.mod = function (lhs, rhs) {
        return lhs.modulo(rhs);
    };
    ReconFactory.prototype.not = function (rhs) {
        return rhs.not();
    };
    ReconFactory.prototype.bnot = function (rhs) {
        return rhs.bnot();
    };
    ReconFactory.prototype.neg = function (rhs) {
        return rhs.neg();
    };
    ReconFactory.prototype.pos = function (rhs) {
        return rhs.pos();
    };
    ReconFactory.prototype.invoke = function (func, args) {
        return Selector.literal(func).invoke(args);
    };
    ReconFactory.prototype.get = function (selector, key) {
        return selector.get(key);
    };
    ReconFactory.prototype.getAttr = function (selector, key) {
        return selector.getAttr(Text$1.of(key));
    };
    ReconFactory.prototype.getItem = function (selector, index) {
        return selector.getItem(Num.of(index));
    };
    ReconFactory.prototype.children = function (selector) {
        return Selector.literal(selector).children();
    };
    ReconFactory.prototype.descendants = function (selector) {
        return Selector.literal(selector).descendants();
    };
    ReconFactory.prototype.keys = function (selector) {
        return Selector.literal(selector).keys();
    };
    ReconFactory.prototype.filter = function (selector, predicate) {
        return selector.filter(predicate);
    };
    return ReconFactory;
}(Recon));
Recon.Factory = new ReconFactory();

var RecordScope = (function (_super) {
    __extends(RecordScope, _super);
    function RecordScope(record) {
        if (record === void 0) { record = Record.empty(); }
        var _this = _super.call(this) || this;
        _this._record = record;
        return _this;
    }
    Object.defineProperty(RecordScope.prototype, "record", {
        get: function () {
            return this._record;
        },
        set: function (record) {
            this._record = record;
            record.forEach(function (newItem, index) {
                this.didChange(newItem, Item.Absent, index);
            }, this);
        },
        enumerable: true,
        configurable: true
    });
    RecordScope.prototype.isEmpty = function () {
        var parent;
        return this._record.isEmpty() && (parent = this.parentScope, parent ? parent.isEmpty() : true);
    };
    RecordScope.prototype.isArray = function () {
        var parent;
        return this._record.isArray() && (parent = this.parentScope, parent ? parent.isArray() : true);
    };
    RecordScope.prototype.isObject = function () {
        var parent;
        return this._record.isObject() && (parent = this.parentScope, parent ? parent.isObject() : true);
    };
    Object.defineProperty(RecordScope.prototype, "length", {
        get: function () {
            var parent;
            return this._record.length + (parent = this.parentScope, parent ? parent.length : 0);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RecordScope.prototype, "size", {
        get: function () {
            var parent;
            return this._record.size + (parent = this.parentScope, parent ? parent.size : 0);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RecordScope.prototype, "fieldCount", {
        get: function () {
            var parent;
            return this._record.fieldCount + (parent = this.parentScope, parent ? parent.fieldCount : 0);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RecordScope.prototype, "valueCount", {
        get: function () {
            var parent;
            return this._record.valueCount + (parent = this.parentScope, parent ? parent.valueCount : 0);
        },
        enumerable: true,
        configurable: true
    });
    RecordScope.prototype.has = function (key) {
        key = Value.of(key);
        var parent;
        return this._record.has(key) || (parent = this.parentScope, parent ? parent.has(key) : false);
    };
    RecordScope.prototype.get = function (key) {
        key = Value.of(key);
        var value = this._record.get(key);
        var parent;
        if (!value.isDefined() && (parent = this.parentScope, parent)) {
            value = parent.get(key);
        }
        return value;
    };
    RecordScope.prototype.getAttr = function (key) {
        key = Text$1.of(key);
        var value = this._record.getAttr(key);
        var parent;
        if (!value.isDefined() && (parent = this.parentScope, parent)) {
            value = parent.getAttr(key);
        }
        return value;
    };
    RecordScope.prototype.getField = function (key) {
        key = Value.of(key);
        var field = this._record.getField(key);
        var parent;
        if (field === undefined && (parent = this.parentScope, parent)) {
            field = parent.getField(key);
        }
        return field;
    };
    RecordScope.prototype.getItem = function (index) {
        if (index instanceof Num) {
            index = index.value;
        }
        if (index < 0) {
            index = this.length + index;
        }
        index = Math.max(0, index);
        var n = this._record.length;
        var parent;
        if (index < n) {
            return this._record.getItem(index);
        }
        else if ((parent = this.parentScope, parent) && index < n + parent.length) {
            return parent.getItem(index - n);
        }
        return Item.Absent;
    };
    RecordScope.prototype.set = function (key, newValue) {
        var oldField = this._record.getField(key);
        var parent;
        if (oldField !== undefined) {
            this._record.set(key, newValue);
            var newField = this._record.getField(key);
            this.didChange(newField, oldField);
        }
        else if ((parent = this.parentScope, parent) && parent.get(key).isDefined()) {
            parent.set(key, newValue);
        }
        else {
            this._record.set(key, newValue);
            var newField = this._record.getField(key);
            this.didChange(newField, Item.Absent);
        }
        return this;
    };
    RecordScope.prototype.setAttr = function (key, newValue) {
        var oldField = this._record.getField(key);
        var parent;
        if (oldField !== undefined && oldField instanceof Attr) {
            this._record.set(key, newValue);
            var newField = this._record.getField(key);
            this.didChange(newField, oldField);
        }
        else if ((parent = this.parentScope, parent) && parent.getAttr(key).isDefined()) {
            parent.set(key, newValue);
        }
        else {
            this._record.set(key, newValue);
            var newField = this._record.getField(key);
            this.didChange(newField, Item.Absent);
        }
        return this;
    };
    RecordScope.prototype.setItem = function (index, item) {
        if (index instanceof Num) {
            index = index.value;
        }
        if (index < 0) {
            index = this.length + index;
        }
        index = Math.max(0, index);
        var n = this._record.length;
        var parent;
        if (index < n) {
            var oldItem = this._record.getItem(index);
            this._record.setItem(index, item);
            var newItem = this._record.getItem(index);
            this.didChange(newItem, oldItem, index);
        }
        else if ((parent = this.parentScope, parent) && index < n + parent.length) {
            parent.setItem(index - n, item);
        }
        return this;
    };
    RecordScope.prototype.push = function () {
        var newItems = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            newItems[_i] = arguments[_i];
        }
        var i = this._record.length;
        var n = this._record.push.apply(this._record, arguments);
        while (i < n) {
            var newItem = this._record.get(i);
            this.didChange(newItem, Item.Absent, i);
            i += 1;
        }
        return n;
    };
    RecordScope.prototype.splice = function (start, deleteCount) {
        if (deleteCount === void 0) { deleteCount = 0; }
        var newItems = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            newItems[_i - 2] = arguments[_i];
        }
        if (start < 0) {
            start = this.length + start;
        }
        start = Math.max(0, start);
        var n = this._record.length;
        deleteCount = Math.max(0, deleteCount);
        var deleted;
        var parent;
        if (start < n) {
            deleted = this._record.splice.apply(this._record, arguments);
            for (var i = 0; i < deleted.length; i += 1) {
                this.didChange(Item.Absent, deleted[i], start + i);
            }
            for (var i = start; i < start + newItems.length; i += 1) {
                this.didChange(this._record.get(i), Item.Absent, i);
            }
            if (start + deleteCount > n && (parent = this.parentScope, parent)) {
                var rest = parent.splice(n, start + deleteCount - n);
                deleted.push.apply(deleted, rest);
            }
        }
        else if (parent = this.parentScope, parent) {
            deleted = parent.splice.apply(parent, [start - n, deleteCount].concat(newItems));
        }
        return deleted;
    };
    RecordScope.prototype.delete = function (key) {
        var oldItem = this._record.delete(key);
        var parent;
        if (oldItem.isDefined()) {
            this.didChange(Item.Absent, oldItem);
        }
        else if (parent = this.parentScope, parent) {
            oldItem = parent.delete(key);
        }
        return oldItem;
    };
    RecordScope.prototype.clear = function () {
        var record = this._record.branch();
        this._record.clear();
        record.forEach(function (oldItem, index) {
            this.didChange(Item.Absent, oldItem, index);
        }, this);
        var parent = this.parentScope;
        if (parent) {
            parent.clear();
        }
    };
    RecordScope.prototype.withField = function (key, newValue) {
        var oldField = this._record.getField(key);
        var parent;
        if (oldField !== undefined) {
            this._record = this._record.withField(key, newValue);
            var newField = this._record.getField(key);
            this.didChange(newField, oldField);
        }
        else if ((parent = this.parentScope, parent) && parent.has(key)) {
            parent.set(key, newValue);
        }
        else {
            this._record = this._record.withField(key, newValue);
            var newField = this._record.getField(key);
            this.didChange(newField, Item.Absent);
        }
        return this;
    };
    RecordScope.prototype.withAttr = function (key, newValue) {
        var oldField = this._record.getField(key);
        var parent;
        if (oldField !== undefined) {
            this._record = this._record.withAttr(key, newValue);
            var newField = this._record.getField(key);
            this.didChange(newField, oldField);
        }
        else if ((parent = this.parentScope, parent) && parent.has(key)) {
            parent.set(key, newValue);
        }
        else {
            this._record = this._record.withAttr(key, newValue);
            var newField = this._record.getField(key);
            this.didChange(newField, Item.Absent);
        }
        return this;
    };
    RecordScope.prototype.withSlot = function (key, newValue) {
        var oldField = this._record.getField(key);
        var parent;
        if (oldField !== undefined) {
            this._record = this._record.withSlot(key, newValue);
            var newField = this._record.getField(key);
            this.didChange(newField, oldField);
        }
        else if ((parent = this.parentScope, parent) && parent.has(key)) {
            parent.set(key, newValue);
        }
        else {
            this._record = this._record.withSlot(key, newValue);
            var newField = this._record.getField(key);
            this.didChange(newField, Item.Absent);
        }
        return this;
    };
    RecordScope.prototype.forEach = function (callback, thisArg) {
        var result = this._record.forEach(callback, thisArg);
        if (result === undefined) {
            var parent_1 = this.parentScope;
            if (parent_1) {
                result = parent_1.forEach(callback, thisArg);
            }
        }
        return result;
    };
    RecordScope.prototype.indexOf = function (item, index) {
        if (index === void 0) { index = 0; }
        if (index < 0) {
            index = this.length + index;
        }
        index = Math.max(0, index);
        var n = this._record.length;
        var i = -1;
        if (index < n) {
            this._record.indexOf(item, index);
            index = 0;
        }
        else {
            index -= n;
        }
        var parent;
        if (i < 0 && (parent = this.parentScope, parent)) {
            i = parent.indexOf(item, index);
            if (i >= 0) {
                i += n;
            }
        }
        return i;
    };
    RecordScope.prototype.lastIndexOf = function (item, index) {
        if (index === void 0) { index = 0; }
        if (index < 0) {
            index = this.length + index;
        }
        index = Math.max(0, index);
        var n = this._record.length;
        var i = -1;
        var parent;
        if (index >= n && (parent = this.parentScope, parent)) {
            i = parent.lastIndexOf(item, index - n);
            if (i >= 0) {
                i += n;
            }
        }
        if (i < 0) {
            i = this._record.lastIndexOf(item, index);
        }
        return i;
    };
    RecordScope.prototype.isAliased = function () {
        return this._record.isAliased();
    };
    RecordScope.prototype.isMutable = function () {
        return this._record.isMutable();
    };
    RecordScope.prototype.alias = function () {
        this._record.alias();
        var parent = this.parentScope;
        if (parent) {
            parent.alias();
        }
    };
    RecordScope.prototype.branch = function () {
        this._record = this._record.branch();
        return this;
    };
    RecordScope.prototype.commit = function () {
        this._record.commit();
        var parent = this.parentScope;
        if (parent) {
            parent.commit();
        }
        return this;
    };
    RecordScope.prototype.didChange = function (newItem, oldItem, index) {
    };
    RecordScope.prototype.stack = function () {
        return EvalStack.of(Item.GlobalScope, this);
    };
    return RecordScope;
}(Record));

var BTree = (function () {
    function BTree(root) {
        if (root === void 0) { root = BTreePage.Empty; }
        this.root = root;
    }
    Object.defineProperty(BTree.prototype, "size", {
        get: function () {
            return this.root.size;
        },
        enumerable: true,
        configurable: true
    });
    BTree.prototype.isEmpty = function () {
        return this.root.isEmpty();
    };
    BTree.prototype.has = function (key) {
        return this.root.has(key, this);
    };
    BTree.prototype.get = function (key) {
        return this.root.get(key, this);
    };
    BTree.prototype.getEntry = function (index) {
        return this.root.getEntry(index);
    };
    BTree.prototype.firstKey = function () {
        var entry = this.root.firstEntry();
        if (entry) {
            return entry[0];
        }
        else {
            return undefined;
        }
    };
    BTree.prototype.firstValue = function () {
        var entry = this.root.firstEntry();
        if (entry) {
            return entry[1];
        }
        else {
            return undefined;
        }
    };
    BTree.prototype.firstEntry = function () {
        return this.root.firstEntry();
    };
    BTree.prototype.lastKey = function () {
        var entry = this.root.lastEntry();
        if (entry) {
            return entry[0];
        }
        else {
            return undefined;
        }
    };
    BTree.prototype.lastValue = function () {
        var entry = this.root.lastEntry();
        if (entry) {
            return entry[1];
        }
        else {
            return undefined;
        }
    };
    BTree.prototype.lastEntry = function () {
        return this.root.lastEntry();
    };
    BTree.prototype.nextKey = function (key) {
        var entry = this.root.nextEntry(key, this);
        if (entry) {
            return entry[0];
        }
        else {
            return undefined;
        }
    };
    BTree.prototype.nextValue = function (key) {
        var entry = this.root.nextEntry(key, this);
        if (entry) {
            return entry[1];
        }
        else {
            return undefined;
        }
    };
    BTree.prototype.nextEntry = function (key) {
        return this.root.nextEntry(key, this);
    };
    BTree.prototype.previousKey = function (key) {
        var entry = this.root.previousEntry(key, this);
        if (entry) {
            return entry[0];
        }
        else {
            return undefined;
        }
    };
    BTree.prototype.previousValue = function (key) {
        var entry = this.root.previousEntry(key, this);
        if (entry) {
            return entry[1];
        }
        else {
            return undefined;
        }
    };
    BTree.prototype.previousEntry = function (key) {
        return this.root.previousEntry(key, this);
    };
    BTree.prototype.set = function (key, newValue) {
        var oldRoot = this.root;
        var newRoot = this.root.updated(key, newValue, this);
        if (oldRoot !== newRoot) {
            if (newRoot.size > oldRoot.size) {
                newRoot = newRoot.balanced(this);
            }
            this.root = newRoot;
        }
        return this;
    };
    BTree.prototype.delete = function (key) {
        var oldRoot = this.root;
        var newRoot = this.root.removed(key, this);
        if (oldRoot !== newRoot) {
            this.root = newRoot;
            return true;
        }
        else {
            return false;
        }
    };
    BTree.prototype.drop = function (lower) {
        if (lower > 0 && this.root.size > 0) {
            if (lower < this.root.size) {
                this.root = this.root.drop(lower, this);
            }
            else {
                this.root = BTreePage.Empty;
            }
        }
        return this;
    };
    BTree.prototype.take = function (upper) {
        if (upper < this.root.size && this.root.size > 0) {
            if (upper > 0) {
                this.root = this.root.take(upper, this);
            }
            else {
                this.root = BTreePage.Empty;
            }
        }
        return this;
    };
    BTree.prototype.clear = function () {
        this.root = BTreePage.Empty;
    };
    BTree.prototype.updated = function (key, newValue) {
        var oldRoot = this.root;
        var newRoot = oldRoot.updated(key, newValue, this);
        if (oldRoot !== newRoot) {
            if (newRoot.size > oldRoot.size) {
                newRoot = newRoot.balanced(this);
            }
            return this.copy(newRoot);
        }
        else {
            return this;
        }
    };
    BTree.prototype.removed = function (key) {
        var oldRoot = this.root;
        var newRoot = oldRoot.removed(key, this);
        if (oldRoot !== newRoot) {
            return this.copy(newRoot);
        }
        else {
            return this;
        }
    };
    BTree.prototype.cleared = function () {
        if (!this.root.isEmpty()) {
            return this.copy(BTreePage.Empty);
        }
        else {
            return this;
        }
    };
    BTree.prototype.forEach = function (callback, thisArg) {
        return this.root.forEach(callback, thisArg, this);
    };
    BTree.prototype.keys = function () {
        return this.root.keys();
    };
    BTree.prototype.values = function () {
        return this.root.values();
    };
    BTree.prototype.entries = function () {
        return this.root.entries();
    };
    BTree.prototype.reverseKeys = function () {
        return this.root.reverseKeys();
    };
    BTree.prototype.reverseValues = function () {
        return this.root.reverseValues();
    };
    BTree.prototype.reverseEntries = function () {
        return this.root.reverseEntries();
    };
    BTree.prototype.clone = function () {
        return this.copy(this.root);
    };
    BTree.prototype.copy = function (root) {
        var tree = new BTree(root);
        if (tree.compare !== this.compare) {
            tree.compare = this.compare;
        }
        if (tree.pageSplitSize !== this.pageSplitSize) {
            tree.pageSplitSize = this.pageSplitSize;
        }
        return tree;
    };
    BTree.prototype.toValue = function () {
        return this.root.toValue();
    };
    BTree.prototype.toRecon = function () {
        return this.toValue().toRecon();
    };
    BTree.prototype.compare = function (x, y) {
        return compare(x, y);
    };
    BTree.prototype.pageShouldSplit = function (page) {
        return page.arity > this.pageSplitSize;
    };
    BTree.prototype.pageShouldMerge = function (page) {
        return page.arity < this.pageSplitSize >>> 1;
    };
    return BTree;
}());
BTree.prototype.pageSplitSize = 32;
var BTreePage = (function () {
    function BTreePage() {
    }
    BTreePage.prototype.keys = function () {
        return new KeyCursor(this.entries());
    };
    BTreePage.prototype.values = function () {
        return new ValueCursor(this.entries());
    };
    BTreePage.prototype.reverseKeys = function () {
        return new KeyCursor(this.reverseEntries());
    };
    BTreePage.prototype.reverseValues = function () {
        return new ValueCursor(this.reverseEntries());
    };
    BTreePage.prototype.toRecon = function () {
        return this.toValue().toRecon();
    };
    BTreePage.Empty = undefined;
    return BTreePage;
}());
var BTreeLeaf = (function (_super) {
    __extends(BTreeLeaf, _super);
    function BTreeLeaf(slots) {
        var _this = _super.call(this) || this;
        _this.slots = slots;
        return _this;
    }
    Object.defineProperty(BTreeLeaf.prototype, "arity", {
        get: function () {
            return this.slots.length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BTreeLeaf.prototype, "size", {
        get: function () {
            return this.slots.length;
        },
        enumerable: true,
        configurable: true
    });
    BTreeLeaf.prototype.isEmpty = function () {
        return this.slots.length === 0;
    };
    BTreeLeaf.prototype.minKey = function () {
        return this.slots[0][0];
    };
    BTreeLeaf.prototype.maxKey = function () {
        return this.slots[this.slots.length - 1][0];
    };
    BTreeLeaf.prototype.has = function (key, tree) {
        return this.lookup(key, tree) >= 0;
    };
    BTreeLeaf.prototype.get = function (key, tree) {
        var index = this.lookup(key, tree);
        if (index >= 0) {
            return this.slots[index][1];
        }
        else {
            return undefined;
        }
    };
    BTreeLeaf.prototype.getEntry = function (index) {
        return this.slots[index];
    };
    BTreeLeaf.prototype.firstEntry = function () {
        if (this.slots.length) {
            return this.slots[0];
        }
        else {
            return undefined;
        }
    };
    BTreeLeaf.prototype.lastEntry = function () {
        if (this.slots.length) {
            return this.slots[this.slots.length - 1];
        }
        else {
            return undefined;
        }
    };
    BTreeLeaf.prototype.nextEntry = function (key, tree) {
        var index = this.lookup(key, tree);
        if (index >= 0) {
            index += 1;
        }
        else {
            index = -(index + 1);
        }
        return this.slots[index];
    };
    BTreeLeaf.prototype.previousEntry = function (key, tree) {
        var index = this.lookup(key, tree);
        if (index >= 0) {
            index -= 1;
        }
        else {
            index = -(index + 2);
        }
        return this.slots[index];
    };
    BTreeLeaf.prototype.updated = function (key, newValue, tree) {
        var index = this.lookup(key, tree);
        if (index >= 0) {
            return this.updatedSlot(index, key, newValue);
        }
        else {
            index = -(index + 1);
            return this.insertedSlot(index, key, newValue);
        }
    };
    BTreeLeaf.prototype.updatedSlot = function (index, key, newValue) {
        var oldSlots = this.slots;
        if (newValue !== oldSlots[index][1]) {
            var newSlots = oldSlots.slice(0);
            newSlots[index] = [key, newValue];
            return new BTreeLeaf(newSlots);
        }
        else {
            return this;
        }
    };
    BTreeLeaf.prototype.insertedSlot = function (index, key, newValue) {
        var oldSlots = this.slots;
        var newSlots = new Array(oldSlots.length + 1);
        for (var i = 0; i < index; i += 1) {
            newSlots[i] = oldSlots[i];
        }
        newSlots[index] = [key, newValue];
        for (var i = index; i < oldSlots.length; i += 1) {
            newSlots[i + 1] = oldSlots[i];
        }
        return new BTreeLeaf(newSlots);
    };
    BTreeLeaf.prototype.removed = function (key, tree) {
        var index = this.lookup(key, tree);
        if (index >= 0) {
            if (this.slots.length > 1) {
                return this.removedSlot(index);
            }
            else {
                return BTreePage.Empty;
            }
        }
        else {
            return this;
        }
    };
    BTreeLeaf.prototype.removedSlot = function (index) {
        var oldSlots = this.slots;
        var newSlots = new Array(oldSlots.length - 1);
        for (var i = 0; i < index; i += 1) {
            newSlots[i] = oldSlots[i];
        }
        for (var i = index; i < newSlots.length; i += 1) {
            newSlots[i] = oldSlots[i + 1];
        }
        return new BTreeLeaf(newSlots);
    };
    BTreeLeaf.prototype.drop = function (lower, tree) {
        var oldSlots = this.slots;
        if (lower > 0 && oldSlots.length > 0) {
            if (lower < oldSlots.length) {
                var size = oldSlots.length - lower;
                var newSlots = new Array(size);
                for (var i = 0; i < size; i += 1) {
                    newSlots[i] = oldSlots[i + lower];
                }
                return new BTreeLeaf(newSlots);
            }
            else {
                return BTreePage.Empty;
            }
        }
        else {
            return this;
        }
    };
    BTreeLeaf.prototype.take = function (upper, tree) {
        var oldSlots = this.slots;
        if (upper < oldSlots.length && oldSlots.length > 0) {
            if (upper > 0) {
                var newSlots = new Array(upper);
                for (var i = 0; i < upper; i += 1) {
                    newSlots[i] = oldSlots[i];
                }
                return new BTreeLeaf(newSlots);
            }
            else {
                return BTreePage.Empty;
            }
        }
        else {
            return this;
        }
    };
    BTreeLeaf.prototype.balanced = function (tree) {
        var size = this.slots.length;
        if (size > 1 && tree.pageShouldSplit(this)) {
            return this.split(size >>> 1);
        }
        else {
            return this;
        }
    };
    BTreeLeaf.prototype.split = function (index) {
        var newPages = new Array(2);
        var newLeftPage = this.splitLeft(index);
        var newRightPage = this.splitRight(index);
        newPages[0] = newLeftPage;
        newPages[1] = newRightPage;
        var newKnots = new Array(1);
        newKnots[0] = newRightPage.minKey();
        return new BTreeNode(newPages, newKnots, this.slots.length);
    };
    BTreeLeaf.prototype.splitLeft = function (index) {
        var oldSlots = this.slots;
        var newSlots = new Array(index);
        for (var i = 0; i < index; i += 1) {
            newSlots[i] = oldSlots[i];
        }
        return new BTreeLeaf(newSlots);
    };
    BTreeLeaf.prototype.splitRight = function (index) {
        var oldSlots = this.slots;
        var newSize = oldSlots.length - index;
        var newSlots = new Array(newSize);
        for (var i = 0; i < newSize; i += 1) {
            newSlots[i] = oldSlots[i + index];
        }
        return new BTreeLeaf(newSlots);
    };
    BTreeLeaf.prototype.forEach = function (callback, thisArg, tree) {
        for (var i = 0; i < this.slots.length; i += 1) {
            var slot = this.slots[i];
            var result = callback.call(thisArg, slot[0], slot[1], tree);
            if (result !== undefined) {
                return result;
            }
        }
        return undefined;
    };
    BTreeLeaf.prototype.entries = function () {
        return new LeafCursor(this.slots);
    };
    BTreeLeaf.prototype.reverseEntries = function () {
        return new LeafCursor(this.slots, this.slots.length);
    };
    BTreeLeaf.prototype.toValue = function () {
        var record = Record.empty(1 + this.slots.length);
        record.attr('bleaf', Record.empty(1).slot('size', this.slots.length));
        for (var i = 0; i < this.slots.length; i += 1) {
            var slot = this.slots[i];
            record.slot(Value.fromAny(slot[0]), Value.fromAny(slot[1]));
        }
        return record;
    };
    BTreeLeaf.prototype.lookup = function (key, tree) {
        var lo = 0;
        var hi = this.slots.length - 1;
        while (lo <= hi) {
            var mid = (lo + hi) >>> 1;
            var order = tree.compare(key, this.slots[mid][0]);
            if (order > 0) {
                lo = mid + 1;
            }
            else if (order < 0) {
                hi = mid - 1;
            }
            else {
                return mid;
            }
        }
        return -(lo + 1);
    };
    return BTreeLeaf;
}(BTreePage));
BTreePage.Empty = new BTreeLeaf([]);
var BTreeNode = (function (_super) {
    __extends(BTreeNode, _super);
    function BTreeNode(pages, knots, size) {
        var _this = _super.call(this) || this;
        _this.pages = pages;
        _this.knots = knots;
        _this.size = size;
        return _this;
    }
    Object.defineProperty(BTreeNode.prototype, "arity", {
        get: function () {
            return this.pages.length;
        },
        enumerable: true,
        configurable: true
    });
    BTreeNode.prototype.isEmpty = function () {
        return this.size === 0;
    };
    BTreeNode.prototype.minKey = function () {
        return this.pages[0].minKey();
    };
    BTreeNode.prototype.maxKey = function () {
        return this.pages[this.pages.length - 1].maxKey();
    };
    BTreeNode.prototype.has = function (key, tree) {
        var index = this.lookup(key, tree);
        if (index > 0) {
            index += 1;
        }
        else if (index < 0) {
            index = -(index + 1);
        }
        else {
            return true;
        }
        return this.pages[index].has(key, tree);
    };
    BTreeNode.prototype.get = function (key, tree) {
        var index = this.lookup(key, tree);
        if (index >= 0) {
            index += 1;
        }
        else {
            index = -(index + 1);
        }
        return this.pages[index].get(key, tree);
    };
    BTreeNode.prototype.getEntry = function (index) {
        for (var i = 0; i < this.pages.length; i += 1) {
            var page = this.pages[i];
            if (index < page.size) {
                return page.getEntry(index);
            }
            else {
                index -= page.size;
            }
        }
        return undefined;
    };
    BTreeNode.prototype.firstEntry = function () {
        if (this.pages.length) {
            return this.pages[0].firstEntry();
        }
        else {
            return undefined;
        }
    };
    BTreeNode.prototype.lastEntry = function () {
        if (this.pages.length) {
            return this.pages[this.pages.length - 1].lastEntry();
        }
        else {
            return undefined;
        }
    };
    BTreeNode.prototype.nextEntry = function (key, tree) {
        var index = this.lookup(key, tree);
        if (index >= 0) {
            index += 1;
        }
        else {
            index = -(index + 1);
        }
        var entry = this.pages[index].nextEntry(key, tree);
        if (entry === undefined && index + 1 < this.pages.length) {
            entry = this.pages[index + 1].nextEntry(key, tree);
        }
        return entry;
    };
    BTreeNode.prototype.previousEntry = function (key, tree) {
        var index = this.lookup(key, tree);
        if (index >= 0) {
            index += 1;
        }
        else {
            index = -(index + 1);
        }
        var entry = this.pages[index].previousEntry(key, tree);
        if (entry === undefined && index > 0) {
            entry = this.pages[index - 1].previousEntry(key, tree);
        }
        return entry;
    };
    BTreeNode.prototype.updated = function (key, newValue, tree) {
        var index = this.lookup(key, tree);
        if (index >= 0) {
            index += 1;
        }
        else {
            index = -(index + 1);
        }
        var oldPage = this.pages[index];
        var newPage = oldPage.updated(key, newValue, tree);
        if (oldPage !== newPage) {
            if (oldPage.size !== newPage.size && tree.pageShouldSplit(newPage)) {
                return this.updatedPageSplit(index, newPage, oldPage);
            }
            else {
                return this.updatedPage(index, newPage, oldPage);
            }
        }
        else {
            return this;
        }
    };
    BTreeNode.prototype.updatedPage = function (index, newPage, oldPage) {
        var oldPages = this.pages;
        var newPages = oldPages.slice(0);
        newPages[index] = newPage;
        var oldKnots = this.knots;
        var newKnots;
        if (oldKnots.length > 0) {
            newKnots = oldKnots.slice(0);
            if (index > 0) {
                newKnots[index - 1] = newPage.minKey();
            }
        }
        else {
            newKnots = [];
        }
        var newSize = this.size - oldPage.size + newPage.size;
        return new BTreeNode(newPages, newKnots, newSize);
    };
    BTreeNode.prototype.updatedPageSplit = function (index, newPage, oldPage) {
        var oldPages = this.pages;
        var newPages = new Array(oldPages.length + 1);
        for (var i = 0; i < index; i += 1) {
            newPages[i] = oldPages[i];
        }
        var newLeftPage = newPage.splitLeft(newPage.arity >>> 1);
        var newRightPage = newPage.splitRight(newPage.arity >>> 1);
        newPages[index] = newLeftPage;
        newPages[index + 1] = newRightPage;
        for (var i = index + 1; i < oldPages.length; i += 1) {
            newPages[i + 1] = oldPages[i];
        }
        var oldKnots = this.knots;
        var newKnots = new Array(oldPages.length);
        if (index > 0) {
            for (var i = 0; i < index - 1; i += 1) {
                newKnots[i] = oldKnots[i];
            }
            newKnots[index - 1] = newLeftPage.minKey();
            newKnots[index] = newRightPage.minKey();
            for (var i = index; i < oldKnots.length; i += 1) {
                newKnots[i + 1] = oldKnots[i];
            }
        }
        else {
            newKnots[0] = newRightPage.minKey();
            for (var i = 0; i < oldKnots.length; i += 1) {
                newKnots[i + 1] = oldKnots[i];
            }
        }
        var newSize = this.size - oldPage.size + newPage.size;
        return new BTreeNode(newPages, newKnots, newSize);
    };
    BTreeNode.prototype.updatedPageMerge = function (index, newPage, oldPage) {
        var oldPages = this.pages;
        var midPages = newPage.pages;
        var newPages = new Array(oldPages.length + midPages.length - 1);
        for (var i = 0; i < index; i += 1) {
            newPages[i] = oldPages[i];
        }
        for (var i = 0; i < midPages.length; i += 1) {
            newPages[i + index] = midPages[i];
        }
        for (var i = index + 1; i < oldPages.length; i += 1) {
            newPages[i + midPages.length - 1] = oldPages[i];
        }
        var oldKnots = this.knots;
        var midKnots = newPage.knots;
        var newKnots = new Array(newPages.length - 1);
        if (index > 0) {
            for (var i = 0; i < index - 1; i += 1) {
                newKnots[i] = oldKnots[i];
            }
            newKnots[index - 1] = midPages[0].minKey();
            for (var i = 0; i < midKnots.length; i += 1) {
                newKnots[i + index] = midKnots[i];
            }
            for (var i = index; i < oldKnots.length; i += 1) {
                newKnots[i + midKnots.length] = oldKnots[i];
            }
        }
        else {
            for (var i = 0; i < midKnots.length; i += 1) {
                newKnots[i] = midKnots[i];
            }
            newKnots[midKnots.length] = oldPages[1].minKey();
            for (var i = 1; i < oldKnots.length; i += 1) {
                newKnots[i + midKnots.length] = oldKnots[i];
            }
        }
        var newSize = this.size - oldPage.size + newPage.size;
        return new BTreeNode(newPages, newKnots, newSize);
    };
    BTreeNode.prototype.removed = function (key, tree) {
        var index = this.lookup(key, tree);
        if (index >= 0) {
            index += 1;
        }
        else {
            index = -(index + 1);
        }
        var oldPage = this.pages[index];
        var newPage = oldPage.removed(key, tree);
        if (oldPage !== newPage) {
            return this.replacedPage(index, newPage, oldPage, tree);
        }
        else {
            return this;
        }
    };
    BTreeNode.prototype.replacedPage = function (index, newPage, oldPage, tree) {
        if (!newPage.isEmpty()) {
            if (newPage instanceof BTreeNode && tree.pageShouldMerge(newPage)) {
                return this.updatedPageMerge(index, newPage, oldPage);
            }
            else {
                return this.updatedPage(index, newPage, oldPage);
            }
        }
        else if (this.pages.length > 2) {
            return this.removedPage(index, newPage, oldPage);
        }
        else if (this.pages.length > 1) {
            if (index === 0) {
                return this.pages[1];
            }
            else {
                return this.pages[0];
            }
        }
        else {
            return BTreePage.Empty;
        }
    };
    BTreeNode.prototype.removedPage = function (index, newPage, oldPage) {
        var oldPages = this.pages;
        var newPages = new Array(oldPages.length - 1);
        for (var i = 0; i < index; i += 1) {
            newPages[i] = oldPages[i];
        }
        for (var i = index + 1; i < oldPages.length; i += 1) {
            newPages[i - 1] = oldPages[i];
        }
        var oldKnots = this.knots;
        var newKnots = new Array(oldKnots.length - 1);
        if (index > 0) {
            for (var i = 0; i < index - 1; i += 1) {
                newKnots[i] = oldKnots[i];
            }
            for (var i = index; i < oldKnots.length; i += 1) {
                newKnots[i - 1] = oldKnots[i];
            }
        }
        else {
            for (var i = 1; i < oldKnots.length; i += 1) {
                newKnots[i - 1] = oldKnots[i];
            }
        }
        var newSize = this.size - oldPage.size;
        return new BTreeNode(newPages, newKnots, newSize);
    };
    BTreeNode.prototype.drop = function (lower, tree) {
        if (lower > 0) {
            var newSize = this.size;
            if (lower < newSize) {
                var oldPages = this.pages;
                var index = 0;
                while (index < oldPages.length) {
                    var size = oldPages[index].size;
                    if (size <= lower) {
                        newSize -= size;
                        lower -= size;
                        index += 1;
                    }
                    else {
                        break;
                    }
                }
                var newArity = oldPages.length - index;
                if (newArity > 1) {
                    var newNode = void 0;
                    if (index > 0) {
                        var newPages = new Array(newArity);
                        for (var i = 0; i < newArity; i += 1) {
                            newPages[i] = oldPages[i + index];
                        }
                        var newKnots = new Array(newArity - 1);
                        for (var i = 0; i < newKnots.length; i += 1) {
                            newKnots[i] = this.knots[i + index];
                        }
                        newNode = new BTreeNode(newPages, newKnots, newSize);
                    }
                    else {
                        newNode = this;
                    }
                    if (lower > 0) {
                        var oldPage = oldPages[index];
                        var newPage = oldPage.drop(lower, tree);
                        return newNode.replacedPage(0, newPage, oldPage, tree);
                    }
                    else {
                        return newNode;
                    }
                }
                else {
                    return oldPages[index].drop(lower, tree);
                }
            }
            else {
                return BTreePage.Empty;
            }
        }
        else {
            return this;
        }
    };
    BTreeNode.prototype.take = function (upper, tree) {
        if (upper < this.size) {
            if (upper > 0) {
                var oldPages = this.pages;
                var newSize = 0;
                var index = 0;
                while (index < oldPages.length && upper > 0) {
                    var size = oldPages[index].size;
                    newSize += size;
                    index += 1;
                    if (size <= upper) {
                        upper -= size;
                    }
                    else {
                        break;
                    }
                }
                var newArity = upper === 0 ? index : index + 1;
                if (newArity > 1) {
                    var newNode = void 0;
                    if (index < oldPages.length) {
                        var newPages = new Array(newArity);
                        for (var i = 0; i < newArity; i += 1) {
                            newPages[i] = oldPages[i];
                        }
                        var newKnots = new Array(newArity - 1);
                        for (var i = 0; i < newKnots.length; i += 1) {
                            newKnots[i] = this.knots[i];
                        }
                        newNode = new BTreeNode(newPages, newKnots, newSize);
                    }
                    else {
                        newNode = this;
                    }
                    if (upper > 0) {
                        var oldPage = oldPages[index - 1];
                        var newPage = oldPage.take(upper, tree);
                        return newNode.replacedPage(index - 1, newPage, oldPage, tree);
                    }
                    else {
                        return newNode;
                    }
                }
                else if (upper > 0) {
                    return oldPages[0].take(upper, tree);
                }
                else {
                    return oldPages[0];
                }
            }
            else {
                return BTreePage.Empty;
            }
        }
        else {
            return this;
        }
    };
    BTreeNode.prototype.balanced = function (tree) {
        if (this.pages.length > 1 && tree.pageShouldSplit(this)) {
            return this.split(this.knots.length >>> 1);
        }
        else {
            return this;
        }
    };
    BTreeNode.prototype.split = function (index) {
        var newPages = new Array(2);
        var newLeftPage = this.splitLeft(index);
        var newRightPage = this.splitRight(index);
        newPages[0] = newLeftPage;
        newPages[1] = newRightPage;
        var newKnots = new Array(1);
        newKnots[0] = newRightPage.minKey();
        return new BTreeNode(newPages, newKnots, this.size);
    };
    BTreeNode.prototype.splitLeft = function (index) {
        var oldPages = this.pages;
        var newPages = new Array(index + 1);
        for (var i = 0; i < index + 1; i += 1) {
            newPages[i] = oldPages[i];
        }
        var oldKnots = this.knots;
        var newKnots = new Array(index);
        for (var i = 0; i < index; i += 1) {
            newKnots[i] = oldKnots[i];
        }
        var newSize = 0;
        for (var i = 0; i <= index; i += 1) {
            newSize += newPages[i].size;
        }
        return new BTreeNode(newPages, newKnots, newSize);
    };
    BTreeNode.prototype.splitRight = function (index) {
        var oldPages = this.pages;
        var newArity = oldPages.length - (index + 1);
        var newPages = new Array(newArity);
        for (var i = 0; i < newArity; i += 1) {
            newPages[i] = oldPages[i + (index + 1)];
        }
        var oldKnots = this.knots;
        var newKnots = new Array(newArity - 1);
        for (var i = 0; i < newKnots.length; i += 1) {
            newKnots[i] = oldKnots[i + (index + 1)];
        }
        var newSize = 0;
        for (var i = 0; i < newArity; i += 1) {
            newSize += newPages[i].size;
        }
        return new BTreeNode(newPages, newKnots, newSize);
    };
    BTreeNode.prototype.forEach = function (callback, thisArg, tree) {
        for (var i = 0; i < this.pages.length; i += 1) {
            var result = this.pages[i].forEach(callback, thisArg, tree);
            if (result !== undefined) {
                return result;
            }
        }
        return undefined;
    };
    BTreeNode.prototype.entries = function () {
        return new BTreeNodeCursor(this.pages);
    };
    BTreeNode.prototype.reverseEntries = function () {
        return new BTreeNodeCursor(this.pages, this.size, this.pages.length);
    };
    BTreeNode.prototype.toValue = function () {
        var record = Record.empty(1 + this.pages.length + this.knots.length);
        record.attr('bnode', Record.empty(1).slot('size', this.size));
        for (var i = 0; i < this.pages.length; i += 1) {
            if (i > 0) {
                var key = Value.fromAny(this.knots[i - 1]);
                record.push(Record.empty(1).attr('knot', Record.empty(1).slot('key', key)));
            }
            record.push(this.pages[i].toValue());
        }
        return record;
    };
    BTreeNode.prototype.lookup = function (key, tree) {
        var lo = 0;
        var hi = this.knots.length - 1;
        while (lo <= hi) {
            var mid = (lo + hi) >>> 1;
            var order = tree.compare(key, this.knots[mid]);
            if (order > 0) {
                lo = mid + 1;
            }
            else if (order < 0) {
                hi = mid - 1;
            }
            else {
                return mid;
            }
        }
        return -(lo + 1);
    };
    return BTreeNode;
}(BTreePage));
var BTreeNodeCursor = (function (_super) {
    __extends(BTreeNodeCursor, _super);
    function BTreeNodeCursor(pages, index, pageIndex, subCursor) {
        return _super.call(this, pages, index, pageIndex, subCursor) || this;
    }
    BTreeNodeCursor.prototype.pageSize = function (page) {
        return page.size;
    };
    BTreeNodeCursor.prototype.pageCursor = function (page) {
        return page.entries();
    };
    BTreeNodeCursor.prototype.reversePageCursor = function (page) {
        return page.reverseEntries();
    };
    return BTreeNodeCursor;
}(NodeCursor));

var STree = (function () {
    function STree(root) {
        if (root === void 0) { root = STreePage.Empty; }
        this.root = root;
    }
    Object.defineProperty(STree.prototype, "length", {
        get: function () {
            return this.root.size;
        },
        enumerable: true,
        configurable: true
    });
    STree.prototype.isEmpty = function () {
        return this.root.isEmpty();
    };
    STree.prototype.get = function (index, id) {
        if (id !== undefined) {
            index = this.lookup(id, index);
            if (index < 0) {
                return undefined;
            }
        }
        return this.root.get(index);
    };
    STree.prototype.getEntry = function (index, id) {
        if (id !== undefined) {
            index = this.lookup(id, index);
            if (index < 0) {
                return undefined;
            }
        }
        return this.root.getEntry(index);
    };
    STree.prototype.set = function (index, newValue, id) {
        if (id !== undefined) {
            index = this.lookup(id, index);
            if (index < 0) {
                throw new RangeError('' + id);
            }
        }
        if (index < 0 || index >= this.root.size) {
            throw new RangeError('' + index);
        }
        this.root = this.root.updated(index, newValue, this);
        return this;
    };
    STree.prototype.insert = function (index, newValue, id) {
        if (index < 0 || index > this.root.size) {
            throw new RangeError('' + index);
        }
        this.root = this.root.inserted(index, newValue, id, this).balanced(this);
        return this;
    };
    STree.prototype.remove = function (index, id) {
        if (id !== undefined) {
            index = this.lookup(id, index);
            if (index < 0) {
                throw new RangeError('' + id);
            }
        }
        if (index < 0 || index > this.root.size) {
            throw new RangeError('' + index);
        }
        this.root = this.root.removed(index, this);
        return this;
    };
    STree.prototype.push = function () {
        var newValues = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            newValues[_i] = arguments[_i];
        }
        for (var i = 0; i < newValues.length; i += 1) {
            this.root = this.root.inserted(this.root.size, newValues[i], undefined, this).balanced(this);
        }
        return this.root.size;
    };
    STree.prototype.pop = function () {
        var index = this.root.size - 1;
        if (index >= 0) {
            var oldValue = this.root.get(index);
            this.root = this.root.removed(index, this);
            return oldValue;
        }
        else {
            return undefined;
        }
    };
    STree.prototype.unshift = function () {
        var newValues = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            newValues[_i] = arguments[_i];
        }
        for (var i = newValues.length - 1; i >= 0; i -= 1) {
            this.root = this.root.inserted(0, newValues[i], undefined, this).balanced(this);
        }
        return this.root.size;
    };
    STree.prototype.shift = function () {
        if (this.root.size > 0) {
            var oldValue = this.root.get(0);
            this.root = this.root.removed(0, this);
            return oldValue;
        }
        else {
            return undefined;
        }
    };
    STree.prototype.move = function (fromIndex, toIndex, id) {
        if (id !== undefined) {
            fromIndex = this.lookup(id, fromIndex);
            if (fromIndex < 0) {
                throw new RangeError('' + id);
            }
        }
        if (fromIndex < 0 || fromIndex >= this.root.size) {
            throw new RangeError('' + fromIndex);
        }
        if (toIndex < 0 || toIndex >= this.root.size) {
            throw new RangeError('' + toIndex);
        }
        if (fromIndex !== toIndex) {
            var entry = this.root.getEntry(fromIndex);
            this.root = this.root.removed(fromIndex, this)
                .inserted(toIndex, entry[1], entry[0], this)
                .balanced(this);
        }
        return this;
    };
    STree.prototype.splice = function (start, deleteCount) {
        var newValues = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            newValues[_i - 2] = arguments[_i];
        }
        if (start < 0) {
            start = this.root.size + start;
        }
        start = Math.min(Math.max(0, start), this.root.size);
        if (deleteCount === undefined) {
            deleteCount = this.root.size - start;
        }
        var deleted = [];
        for (var i = start, n = start + deleteCount; i < n; i += 1) {
            deleted.push(this.root.get(start));
            this.root = this.root.removed(start, this);
        }
        for (var i = 0; i < newValues.length; i += 1) {
            this.root = this.root.inserted(start + i, newValues[i], undefined, this).balanced(this);
        }
        return deleted;
    };
    STree.prototype.drop = function (lower) {
        if (lower > 0 && this.root.size > 0) {
            if (lower < this.root.size) {
                this.root = this.root.drop(lower, this);
            }
            else {
                this.root = STreePage.Empty;
            }
        }
        return this;
    };
    STree.prototype.take = function (upper) {
        if (upper < this.root.size && this.root.size > 0) {
            if (upper > 0) {
                this.root = this.root.take(upper, this);
            }
            else {
                this.root = STreePage.Empty;
            }
        }
        return this;
    };
    STree.prototype.clear = function () {
        this.root = STreePage.Empty;
    };
    STree.prototype.forEach = function (callback, thisArg) {
        return this.root.forEach(callback, thisArg, 0, this);
    };
    STree.prototype.keys = function () {
        return this.root.keys();
    };
    STree.prototype.values = function () {
        return this.root.values();
    };
    STree.prototype.entries = function () {
        return this.root.entries();
    };
    STree.prototype.reverseKeys = function () {
        return this.root.reverseKeys();
    };
    STree.prototype.reverseValues = function () {
        return this.root.reverseValues();
    };
    STree.prototype.reverseEntries = function () {
        return this.root.reverseEntries();
    };
    STree.prototype.clone = function () {
        return this.copy(this.root);
    };
    STree.prototype.copy = function (root) {
        var tree = new STree(root);
        if (tree.identify !== this.identify) {
            tree.identify = this.identify;
        }
        if (tree.compare !== this.compare) {
            tree.compare = this.compare;
        }
        if (tree.pageSplitSize !== this.pageSplitSize) {
            tree.pageSplitSize = this.pageSplitSize;
        }
        return tree;
    };
    STree.prototype.toValue = function () {
        return this.root.toValue();
    };
    STree.prototype.toRecon = function () {
        return this.toValue().toRecon();
    };
    STree.prototype.identify = function (value) {
        var id = new Uint8Array(6);
        Random.fillBytes(id);
        return id;
    };
    STree.prototype.compare = function (x, y) {
        return compare(x, y);
    };
    STree.prototype.pageShouldSplit = function (page) {
        return page.arity > this.pageSplitSize;
    };
    STree.prototype.pageShouldMerge = function (page) {
        return page.arity < this.pageSplitSize >>> 1;
    };
    STree.prototype.lookup = function (id, start) {
        if (start === void 0) { start = 0; }
        start = Math.min(Math.max(0, start), this.root.size - 1);
        var index = start;
        do {
            var entry = this.root.getEntry(index);
            if (entry && this.compare(entry[0], id) === 0) {
                return index;
            }
            index = (index + 1) % this.root.size;
        } while (isFinite(index) && index !== start);
        return -1;
    };
    return STree;
}());
STree.prototype.pageSplitSize = 32;
var STreePage = (function () {
    function STreePage() {
    }
    STreePage.prototype.keys = function () {
        return new KeyCursor(this.entries());
    };
    STreePage.prototype.values = function () {
        return new ValueCursor(this.entries());
    };
    STreePage.prototype.reverseKeys = function () {
        return new KeyCursor(this.reverseEntries());
    };
    STreePage.prototype.reverseValues = function () {
        return new ValueCursor(this.reverseEntries());
    };
    STreePage.prototype.toRecon = function () {
        return this.toValue().toRecon();
    };
    STreePage.Empty = undefined;
    return STreePage;
}());
var STreeLeaf = (function (_super) {
    __extends(STreeLeaf, _super);
    function STreeLeaf(slots) {
        var _this = _super.call(this) || this;
        _this.slots = slots;
        return _this;
    }
    Object.defineProperty(STreeLeaf.prototype, "arity", {
        get: function () {
            return this.slots.length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(STreeLeaf.prototype, "size", {
        get: function () {
            return this.slots.length;
        },
        enumerable: true,
        configurable: true
    });
    STreeLeaf.prototype.isEmpty = function () {
        return this.slots.length === 0;
    };
    STreeLeaf.prototype.get = function (index) {
        var slot = this.slots[index];
        if (slot) {
            return slot[1];
        }
        else {
            return undefined;
        }
    };
    STreeLeaf.prototype.getEntry = function (index) {
        return this.slots[index];
    };
    STreeLeaf.prototype.updated = function (index, newValue, tree) {
        if (index < 0 || index >= this.slots.length) {
            throw new RangeError('' + index);
        }
        return this.updatedItem(index, newValue);
    };
    STreeLeaf.prototype.updatedItem = function (index, newValue) {
        var oldItems = this.slots;
        var oldSlot = oldItems[index];
        if (newValue !== oldSlot[1]) {
            var newValues = oldItems.slice(0);
            newValues[index] = [oldSlot[0], newValue];
            return new STreeLeaf(newValues);
        }
        else {
            return this;
        }
    };
    STreeLeaf.prototype.inserted = function (index, newValue, id, tree) {
        if (index < 0 || index > this.slots.length) {
            throw new RangeError('' + index);
        }
        return this.insertedItem(index, newValue, id, tree);
    };
    STreeLeaf.prototype.insertedItem = function (index, newValue, id, tree) {
        if (id === undefined) {
            id = tree.identify(newValue);
        }
        var oldSlots = this.slots;
        var newSlots = new Array(oldSlots.length + 1);
        for (var i = 0; i < index; i += 1) {
            newSlots[i] = oldSlots[i];
        }
        newSlots[index] = [id, newValue];
        for (var i = index; i < oldSlots.length; i += 1) {
            newSlots[i + 1] = oldSlots[i];
        }
        return new STreeLeaf(newSlots);
    };
    STreeLeaf.prototype.removed = function (index, tree) {
        if (index < 0 || index >= this.slots.length) {
            throw new RangeError('' + index);
        }
        if (this.slots.length > 1) {
            return this.removedSlot(index);
        }
        else {
            return STreePage.Empty;
        }
    };
    STreeLeaf.prototype.removedSlot = function (index) {
        var oldSlots = this.slots;
        var newSlots = new Array(oldSlots.length - 1);
        for (var i = 0; i < index; i += 1) {
            newSlots[i] = oldSlots[i];
        }
        for (var i = index; i < newSlots.length; i += 1) {
            newSlots[i] = oldSlots[i + 1];
        }
        return new STreeLeaf(newSlots);
    };
    STreeLeaf.prototype.drop = function (lower, tree) {
        var oldSlots = this.slots;
        if (lower > 0 && oldSlots.length > 0) {
            if (lower < oldSlots.length) {
                var size = oldSlots.length - lower;
                var newSlots = new Array(size);
                for (var i = 0; i < size; i += 1) {
                    newSlots[i] = oldSlots[i + lower];
                }
                return new STreeLeaf(newSlots);
            }
            else {
                return STreePage.Empty;
            }
        }
        else {
            return this;
        }
    };
    STreeLeaf.prototype.take = function (upper, tree) {
        var oldSlots = this.slots;
        if (upper < oldSlots.length && oldSlots.length > 0) {
            if (upper > 0) {
                var newSlots = new Array(upper);
                for (var i = 0; i < upper; i += 1) {
                    newSlots[i] = oldSlots[i];
                }
                return new STreeLeaf(newSlots);
            }
            else {
                return STreePage.Empty;
            }
        }
        else {
            return this;
        }
    };
    STreeLeaf.prototype.balanced = function (tree) {
        var size = this.slots.length;
        if (size > 1 && tree.pageShouldSplit(this)) {
            return this.split(size >>> 1);
        }
        else {
            return this;
        }
    };
    STreeLeaf.prototype.split = function (index) {
        var newPages = new Array(2);
        var newLeftPage = this.splitLeft(index);
        var newRightPage = this.splitRight(index);
        newPages[0] = newLeftPage;
        newPages[1] = newRightPage;
        var newKnots = new Array(1);
        newKnots[0] = index;
        return new STreeNode(newPages, newKnots, this.slots.length);
    };
    STreeLeaf.prototype.splitLeft = function (index) {
        var oldSlots = this.slots;
        var newSlots = new Array(index);
        for (var i = 0; i < index; i += 1) {
            newSlots[i] = oldSlots[i];
        }
        return new STreeLeaf(newSlots);
    };
    STreeLeaf.prototype.splitRight = function (index) {
        var oldSlots = this.slots;
        var newSize = oldSlots.length - index;
        var newSlots = new Array(newSize);
        for (var i = 0; i < newSize; i += 1) {
            newSlots[i] = oldSlots[i + index];
        }
        return new STreeLeaf(newSlots);
    };
    STreeLeaf.prototype.forEach = function (callback, thisArg, offset, tree) {
        for (var i = 0; i < this.slots.length; i += 1) {
            var slot = this.slots[i];
            var result = callback.call(thisArg, slot[1], offset + i, tree, slot[0]);
            if (result !== undefined) {
                return result;
            }
        }
        return undefined;
    };
    STreeLeaf.prototype.entries = function () {
        return new LeafCursor(this.slots);
    };
    STreeLeaf.prototype.reverseEntries = function () {
        return new LeafCursor(this.slots, this.slots.length);
    };
    STreeLeaf.prototype.toValue = function () {
        var record = Record.empty(1 + this.slots.length);
        record.attr('sleaf', Record.empty(1).slot('size', this.slots.length));
        for (var i = 0; i < this.slots.length; i += 1) {
            var slot = this.slots[i];
            record.slot(Value.of(slot[0]), Value.of(slot[1]));
        }
        return record;
    };
    return STreeLeaf;
}(STreePage));
STreePage.Empty = new STreeLeaf([]);
var STreeNode = (function (_super) {
    __extends(STreeNode, _super);
    function STreeNode(pages, knots, size) {
        var _this = _super.call(this) || this;
        _this.pages = pages;
        if (knots === undefined || size === undefined) {
            knots = new Array(pages.length - 1);
            size = 0;
            for (var i = 0; i < knots.length; i += 1) {
                size += pages[i].size;
                knots[i] = size;
            }
            size += pages[knots.length].size;
        }
        _this.knots = knots;
        _this.size = size;
        return _this;
    }
    Object.defineProperty(STreeNode.prototype, "arity", {
        get: function () {
            return this.pages.length;
        },
        enumerable: true,
        configurable: true
    });
    STreeNode.prototype.isEmpty = function () {
        return this.size === 0;
    };
    STreeNode.prototype.get = function (index) {
        var pageIndex = this.lookup(index);
        if (pageIndex >= 0) {
            pageIndex += 1;
        }
        else {
            pageIndex = -(pageIndex + 1);
        }
        var subIndex = pageIndex === 0 ? index : index - this.knots[pageIndex - 1];
        return this.pages[pageIndex].get(subIndex);
    };
    STreeNode.prototype.getEntry = function (index) {
        var pageIndex = this.lookup(index);
        if (pageIndex >= 0) {
            pageIndex += 1;
        }
        else {
            pageIndex = -(pageIndex + 1);
        }
        var subIndex = pageIndex === 0 ? index : index - this.knots[pageIndex - 1];
        return this.pages[pageIndex].getEntry(subIndex);
    };
    STreeNode.prototype.updated = function (index, newValue, tree) {
        var pageIndex = this.lookup(index);
        if (pageIndex >= 0) {
            pageIndex += 1;
        }
        else {
            pageIndex = -(pageIndex + 1);
        }
        var subIndex = pageIndex === 0 ? index : index - this.knots[pageIndex - 1];
        var oldPage = this.pages[pageIndex];
        var newPage = oldPage.updated(subIndex, newValue, tree);
        if (oldPage !== newPage) {
            if (oldPage.size !== newPage.size && tree.pageShouldSplit(newPage)) {
                return this.updatedPageSplit(pageIndex, newPage, oldPage);
            }
            else {
                return this.updatedPage(pageIndex, newPage, oldPage);
            }
        }
        else {
            return this;
        }
    };
    STreeNode.prototype.updatedPage = function (pageIndex, newPage, oldPage) {
        var oldPages = this.pages;
        var newPages = oldPages.slice(0);
        newPages[pageIndex] = newPage;
        var oldKnots = this.knots;
        var newKnots;
        var newSize;
        if (oldPages.length - 1 > 0) {
            newKnots = oldKnots.slice(0);
            if (pageIndex > 0) {
                newSize = oldKnots[pageIndex - 1];
            }
            else {
                newSize = 0;
            }
            for (var i = pageIndex; i < newKnots.length; i += 1) {
                newSize += newPages[i].size;
                newKnots[i] = newSize;
            }
            newSize += newPages[newKnots.length].size;
        }
        else {
            newKnots = [];
            newSize = 0;
        }
        return new STreeNode(newPages, newKnots, newSize);
    };
    STreeNode.prototype.updatedPageSplit = function (pageIndex, newPage, oldPage) {
        var oldPages = this.pages;
        var newPages = new Array(oldPages.length + 1);
        for (var i = 0; i < pageIndex; i += 1) {
            newPages[i] = oldPages[i];
        }
        var newLeftPage = newPage.splitLeft(newPage.arity >>> 1);
        var newRightPage = newPage.splitRight(newPage.arity >>> 1);
        newPages[pageIndex] = newLeftPage;
        newPages[pageIndex + 1] = newRightPage;
        for (var i = pageIndex + 1; i < oldPages.length; i += 1) {
            newPages[i + 1] = oldPages[i];
        }
        return new STreeNode(newPages);
    };
    STreeNode.prototype.updatedPageMerge = function (pageIndex, newPage, oldPage) {
        var oldPages = this.pages;
        var midPages = newPage.pages;
        var newPages = new Array(oldPages.length + midPages.length - 1);
        for (var i = 0; i < pageIndex; i += 1) {
            newPages[i] = oldPages[i];
        }
        for (var i = 0; i < midPages.length; i += 1) {
            newPages[i + pageIndex] = midPages[i];
        }
        for (var i = pageIndex + 1; i < oldPages.length; i += 1) {
            newPages[i + midPages.length - 1] = oldPages[i];
        }
        return new STreeNode(newPages);
    };
    STreeNode.prototype.inserted = function (index, newValue, id, tree) {
        var pageIndex = this.lookup(index);
        if (pageIndex >= 0) {
            pageIndex += 1;
        }
        else {
            pageIndex = -(pageIndex + 1);
        }
        var subIndex = pageIndex === 0 ? index : index - this.knots[pageIndex - 1];
        var oldPage = this.pages[pageIndex];
        var newPage = oldPage.inserted(subIndex, newValue, id, tree);
        if (oldPage !== newPage) {
            if (tree.pageShouldSplit(newPage)) {
                return this.updatedPageSplit(pageIndex, newPage, oldPage);
            }
            else {
                return this.updatedPage(pageIndex, newPage, oldPage);
            }
        }
        else {
            return this;
        }
    };
    STreeNode.prototype.removed = function (index, tree) {
        var pageIndex = this.lookup(index);
        if (pageIndex >= 0) {
            pageIndex += 1;
        }
        else {
            pageIndex = -(pageIndex + 1);
        }
        var subIndex = pageIndex === 0 ? index : index - this.knots[pageIndex - 1];
        var oldPage = this.pages[pageIndex];
        var newPage = oldPage.removed(subIndex, tree);
        if (oldPage !== newPage) {
            return this.replacedPage(pageIndex, newPage, oldPage, tree);
        }
        else {
            return this;
        }
    };
    STreeNode.prototype.replacedPage = function (pageIndex, newPage, oldPage, tree) {
        if (!newPage.isEmpty()) {
            if (newPage instanceof STreeNode && tree.pageShouldMerge(newPage)) {
                return this.updatedPageMerge(pageIndex, newPage, oldPage);
            }
            else {
                return this.updatedPage(pageIndex, newPage, oldPage);
            }
        }
        else if (this.pages.length > 2) {
            return this.removedPage(pageIndex, newPage, oldPage);
        }
        else if (this.pages.length > 1) {
            if (pageIndex === 0) {
                return this.pages[1];
            }
            else {
                return this.pages[0];
            }
        }
        else {
            return STreePage.Empty;
        }
    };
    STreeNode.prototype.removedPage = function (pageIndex, newPage, oldPage) {
        var oldPages = this.pages;
        var newPages = new Array(oldPages.length - 1);
        for (var i = 0; i < pageIndex; i += 1) {
            newPages[i] = oldPages[i];
        }
        for (var i = pageIndex + 1; i < oldPages.length; i += 1) {
            newPages[i - 1] = oldPages[i];
        }
        var oldKnots = this.knots;
        var newKnots = new Array(oldKnots.length - 1);
        var newSize;
        if (pageIndex > 0) {
            for (var i = 0; i < pageIndex; i += 1) {
                newKnots[i] = oldKnots[i];
            }
            newSize = oldKnots[pageIndex - 1];
        }
        else {
            newSize = 0;
        }
        for (var i = pageIndex; i < newKnots.length; i += 1) {
            newSize += newPages[i].size;
            newKnots[i] = newSize;
        }
        newSize += newPages[newKnots.length].size;
        return new STreeNode(newPages, newKnots, newSize);
    };
    STreeNode.prototype.drop = function (lower, tree) {
        if (lower > 0) {
            if (lower < this.size) {
                var pageIndex = this.lookup(lower);
                if (pageIndex >= 0) {
                    pageIndex += 1;
                }
                else {
                    pageIndex = -(pageIndex + 1);
                }
                lower = pageIndex === 0 ? lower : lower - this.knots[pageIndex - 1];
                var oldPages = this.pages;
                var newArity = oldPages.length - pageIndex;
                if (newArity > 1) {
                    var newNode = void 0;
                    if (pageIndex > 0) {
                        var newPages = new Array(newArity);
                        for (var i = 0; i < newArity; i += 1) {
                            newPages[i] = oldPages[i + pageIndex];
                        }
                        newNode = new STreeNode(newPages);
                    }
                    else {
                        newNode = this;
                    }
                    if (lower > 0) {
                        var oldPage = oldPages[pageIndex];
                        var newPage = oldPage.drop(lower, tree);
                        return newNode.replacedPage(0, newPage, oldPage, tree);
                    }
                    else {
                        return newNode;
                    }
                }
                else {
                    return oldPages[pageIndex].drop(lower, tree);
                }
            }
            else {
                return STreePage.Empty;
            }
        }
        else {
            return this;
        }
    };
    STreeNode.prototype.take = function (upper, tree) {
        if (upper < this.size) {
            if (upper > 0) {
                var pageIndex = this.lookup(upper);
                if (pageIndex >= 0) {
                    pageIndex += 1;
                }
                else {
                    pageIndex = -(pageIndex + 1);
                }
                upper = pageIndex === 0 ? upper : upper - this.knots[pageIndex - 1];
                var oldPages = this.pages;
                var newArity = upper === 0 ? pageIndex : pageIndex + 1;
                if (newArity > 1) {
                    var newNode = void 0;
                    if (pageIndex < oldPages.length) {
                        var newPages = new Array(newArity);
                        for (var i = 0; i < newArity; i += 1) {
                            newPages[i] = oldPages[i];
                        }
                        var newKnots = new Array(newArity - 1);
                        for (var i = 0; i < newKnots.length; i += 1) {
                            newKnots[i] = this.knots[i];
                        }
                        var newSize = newKnots[newArity - 2] + newPages[newArity - 1].size;
                        newNode = new STreeNode(newPages, newKnots, newSize);
                    }
                    else {
                        newNode = this;
                    }
                    if (upper > 0) {
                        var oldPage = oldPages[pageIndex];
                        var newPage = oldPage.take(upper, tree);
                        return newNode.replacedPage(pageIndex, newPage, oldPage, tree);
                    }
                    else {
                        return newNode;
                    }
                }
                else if (upper > 0) {
                    return oldPages[0].take(upper, tree);
                }
                else {
                    return oldPages[0];
                }
            }
            else {
                return STreePage.Empty;
            }
        }
        else {
            return this;
        }
    };
    STreeNode.prototype.balanced = function (tree) {
        if (this.pages.length > 1 && tree.pageShouldSplit(this)) {
            return this.split(this.knots.length >>> 1);
        }
        else {
            return this;
        }
    };
    STreeNode.prototype.split = function (pageIndex) {
        var newPages = new Array(2);
        var newLeftPage = this.splitLeft(pageIndex);
        var newRightPage = this.splitRight(pageIndex);
        newPages[0] = newLeftPage;
        newPages[1] = newRightPage;
        var newKnots = new Array(1);
        newKnots[0] = newLeftPage.size;
        return new STreeNode(newPages, newKnots, this.size);
    };
    STreeNode.prototype.splitLeft = function (pageIndex) {
        var oldPages = this.pages;
        var newPages = new Array(pageIndex + 1);
        for (var i = 0; i < pageIndex + 1; i += 1) {
            newPages[i] = oldPages[i];
        }
        var oldKnots = this.knots;
        var newKnots = new Array(pageIndex);
        for (var i = 0; i < pageIndex; i += 1) {
            newKnots[i] = oldKnots[i];
        }
        var newSize = 0;
        for (var i = 0; i <= pageIndex; i += 1) {
            newSize += newPages[i].size;
        }
        return new STreeNode(newPages, newKnots, newSize);
    };
    STreeNode.prototype.splitRight = function (pageIndex) {
        var oldPages = this.pages;
        var newArity = oldPages.length - (pageIndex + 1);
        var newPages = new Array(newArity);
        for (var i = 0; i < newArity; i += 1) {
            newPages[i] = oldPages[i + (pageIndex + 1)];
        }
        var newKnots = new Array(newArity - 1);
        var newSize;
        if (newArity > 0) {
            newSize = newPages[0].size;
            for (var i = 1; i < newArity; i += 1) {
                newKnots[i - 1] = newSize;
                newSize += newPages[i].size;
            }
        }
        else {
            newSize = 0;
        }
        return new STreeNode(newPages, newKnots, newSize);
    };
    STreeNode.prototype.forEach = function (callback, thisArg, offset, tree) {
        for (var i = 0; i < this.pages.length; i += 1) {
            var page = this.pages[i];
            var result = page.forEach(callback, thisArg, offset, tree);
            if (result !== undefined) {
                return result;
            }
            offset += page.size;
        }
        return undefined;
    };
    STreeNode.prototype.entries = function () {
        return new STreeNodeCursor(this.pages);
    };
    STreeNode.prototype.reverseEntries = function () {
        return new STreeNodeCursor(this.pages, this.size, this.pages.length);
    };
    STreeNode.prototype.toValue = function () {
        var record = Record.empty(1 + this.pages.length + this.knots.length);
        record.attr('snode', Record.empty(1).slot('size', this.size));
        for (var i = 0; i < this.pages.length; i += 1) {
            if (i > 0) {
                record.push(Record.empty(1).attr('knot', Record.empty(1).slot('index', this.knots[i - 1])));
            }
            record.push(this.pages[i].toValue());
        }
        return record;
    };
    STreeNode.prototype.lookup = function (index) {
        var lo = 0;
        var hi = this.knots.length - 1;
        while (lo <= hi) {
            var mid = (lo + hi) >>> 1;
            if (index > this.knots[mid]) {
                lo = mid + 1;
            }
            else if (index < this.knots[mid]) {
                hi = mid - 1;
            }
            else {
                return mid;
            }
        }
        return -(lo + 1);
    };
    return STreeNode;
}(STreePage));
var STreeNodeCursor = (function (_super) {
    __extends(STreeNodeCursor, _super);
    function STreeNodeCursor(pages, index, pageIndex, subCursor) {
        return _super.call(this, pages, index, pageIndex, subCursor) || this;
    }
    STreeNodeCursor.prototype.pageSize = function (page) {
        return page.size;
    };
    STreeNodeCursor.prototype.pageCursor = function (page) {
        return page.entries();
    };
    STreeNodeCursor.prototype.reversePageCursor = function (page) {
        return page.reverseEntries();
    };
    return STreeNodeCursor;
}(NodeCursor));

var UriCache = (function () {
    function UriCache(base, size) {
        if (size === void 0) { size = 32; }
        this.base = base;
        this.resolveCache = new HashGenCacheMap(size);
        this.unresolveCache = new HashGenCacheMap(size);
    }
    UriCache.prototype.resolve = function (relative) {
        relative = Uri.fromAny(relative);
        var absolute = this.resolveCache.get(relative);
        if (absolute === undefined) {
            absolute = this.base.resolve(relative);
            this.resolveCache.set(relative, absolute);
        }
        return absolute;
    };
    UriCache.prototype.unresolve = function (absolute) {
        absolute = Uri.fromAny(absolute);
        var relative = this.unresolveCache.get(absolute);
        if (relative === undefined) {
            relative = this.base.unresolve(absolute);
            this.unresolveCache.set(absolute, relative);
        }
        return relative;
    };
    return UriCache;
}());

var Envelope = (function () {
    function Envelope() {
    }
    Object.defineProperty(Envelope.prototype, "tag", {
        get: function () {
            return this.constructor.tag;
        },
        enumerable: true,
        configurable: true
    });
    Envelope.prototype.prio = function (prio) {
        if (prio === undefined) {
            return 0;
        }
        else {
            return this;
        }
    };
    Envelope.prototype.rate = function (rate) {
        if (rate === undefined) {
            return 0;
        }
        else {
            return this;
        }
    };
    Envelope.prototype.toRecon = function () {
        return this.toValue().toRecon();
    };
    Object.defineProperty(Envelope, "tag", {
        get: function () {
            return '';
        },
        enumerable: true,
        configurable: true
    });
    Envelope.fromValue = function (value) {
        switch (value.tag) {
            case 'event': return EventMessage.fromValue(value);
            case 'command': return CommandMessage.fromValue(value);
            case 'link': return LinkRequest.fromValue(value);
            case 'linked': return LinkedResponse.fromValue(value);
            case 'sync': return SyncRequest.fromValue(value);
            case 'synced': return SyncedResponse.fromValue(value);
            case 'unlink': return UnlinkRequest.fromValue(value);
            case 'unlinked': return UnlinkedResponse.fromValue(value);
            case 'auth': return AuthRequest.fromValue(value);
            case 'authed': return AuthedResponse.fromValue(value);
            case 'deauth': return DeauthRequest.fromValue(value);
            case 'deauthed': return DeauthedResponse.fromValue(value);
            default: return undefined;
        }
    };
    Envelope.parseRecon = function (input) {
        return Envelope.fromValue(Value.parseRecon(input));
    };
    return Envelope;
}());
var HostEnvelope = (function (_super) {
    __extends(HostEnvelope, _super);
    function HostEnvelope(body) {
        var _this = _super.call(this) || this;
        _this._body = body;
        return _this;
    }
    HostEnvelope.prototype.node = function (node) {
        if (node === undefined) {
            return Uri.Empty;
        }
        else {
            return this;
        }
    };
    HostEnvelope.prototype.lane = function (lane) {
        if (lane === undefined) {
            return Uri.Empty;
        }
        else {
            return this;
        }
    };
    HostEnvelope.prototype.body = function (body) {
        if (body === undefined) {
            return this._body;
        }
        else {
            body = Value.fromAny(body);
            return this.copy(body);
        }
    };
    HostEnvelope.prototype.toValue = function () {
        return Attr.of(this.tag).concat(this._body);
    };
    HostEnvelope.fromValue = function (value, E) {
        var header = value.header(E.tag);
        if (header.isDefined()) {
            var body = value.body();
            return new E(body);
        }
        return undefined;
    };
    return HostEnvelope;
}(Envelope));
var LaneEnvelope = (function (_super) {
    __extends(LaneEnvelope, _super);
    function LaneEnvelope(node, lane, body) {
        var _this = _super.call(this) || this;
        _this._node = node;
        _this._lane = lane;
        _this._body = body;
        return _this;
    }
    LaneEnvelope.prototype.node = function (node) {
        if (node === undefined) {
            return this._node;
        }
        else {
            node = Uri.fromAny(node);
            return this.copy(node, this._lane, this._body);
        }
    };
    LaneEnvelope.prototype.lane = function (lane) {
        if (lane === undefined) {
            return this._lane;
        }
        else {
            lane = Uri.fromAny(lane);
            return this.copy(this._node, lane, this._body);
        }
    };
    LaneEnvelope.prototype.body = function (body) {
        if (body === undefined) {
            return this._body;
        }
        else {
            body = Value.fromAny(body);
            return this.copy(this._node, this._lane, body);
        }
    };
    LaneEnvelope.prototype.toValue = function () {
        var header = Record.empty(2)
            .slot('node', this._node.toUri())
            .slot('lane', this._lane.toUri());
        return Attr.of(this.tag, header).concat(this._body);
    };
    LaneEnvelope.fromValue = function (value, E) {
        var node;
        var lane;
        var header = value.header(E.tag);
        header.forEach(function (item, index) {
            if (item.key instanceof Text$1) {
                var key = item.key.value;
                if (key === 'node') {
                    node = item.cast(Form.Uri, node);
                }
                else if (key === 'lane') {
                    lane = item.cast(Form.Uri, lane);
                }
            }
            else if (item instanceof Value) {
                if (index === 0) {
                    node = item.cast(Form.Uri, node);
                }
                else if (index === 1) {
                    lane = item.cast(Form.Uri, lane);
                }
            }
        }, this);
        if (node && lane) {
            var body = value.body();
            return new E(node, lane, body);
        }
        return undefined;
    };
    return LaneEnvelope;
}(Envelope));
var LinkEnvelope = (function (_super) {
    __extends(LinkEnvelope, _super);
    function LinkEnvelope(node, lane, prio, rate, body) {
        var _this = _super.call(this) || this;
        _this._node = node;
        _this._lane = lane;
        _this._prio = prio;
        _this._rate = rate;
        _this._body = body;
        return _this;
    }
    LinkEnvelope.prototype.node = function (node) {
        if (node === undefined) {
            return this._node;
        }
        else {
            node = Uri.fromAny(node);
            return this.copy(node, this._lane, this._prio, this._rate, this._body);
        }
    };
    LinkEnvelope.prototype.lane = function (lane) {
        if (lane === undefined) {
            return this._lane;
        }
        else {
            lane = Uri.fromAny(lane);
            return this.copy(this._node, lane, this._prio, this._rate, this._body);
        }
    };
    LinkEnvelope.prototype.prio = function (prio) {
        if (prio === undefined) {
            return this._prio;
        }
        else {
            return this.copy(this._node, this._lane, prio, this._rate, this._body);
        }
    };
    LinkEnvelope.prototype.rate = function (rate) {
        if (rate === undefined) {
            return this._rate;
        }
        else {
            return this.copy(this._node, this._lane, this._prio, rate, this._body);
        }
    };
    LinkEnvelope.prototype.body = function (body) {
        if (body === undefined) {
            return this._body;
        }
        else {
            body = Value.fromAny(body);
            return this.copy(this._node, this._lane, this._prio, this._rate, body);
        }
    };
    LinkEnvelope.prototype.toValue = function () {
        var header = Record.empty(4)
            .slot('node', this._node.toUri())
            .slot('lane', this._lane.toUri());
        if (this._prio) {
            header.slot('prio', this._prio);
        }
        if (this._rate) {
            header.slot('rate', this._rate);
        }
        return Attr.of(this.tag, header).concat(this._body);
    };
    LinkEnvelope.fromValue = function (value, E) {
        var node;
        var lane;
        var prio = 0;
        var rate = 0;
        var header = value.header(E.tag);
        header.forEach(function (item, index) {
            if (item.key instanceof Text$1) {
                var key = item.key.value;
                if (key === 'node') {
                    node = item.cast(Form.Uri, node);
                }
                else if (key === 'lane') {
                    lane = item.cast(Form.Uri, lane);
                }
                else if (key === 'prio') {
                    prio = item.numberValue(prio);
                }
                else if (key === 'rate') {
                    rate = item.numberValue(rate);
                }
            }
            else if (item instanceof Value) {
                if (index === 0) {
                    node = item.cast(Form.Uri, node);
                }
                else if (index === 1) {
                    lane = item.cast(Form.Uri, lane);
                }
            }
        }, this);
        if (node && lane) {
            var body = value.body();
            return new E(node, lane, prio, rate, body);
        }
        return undefined;
    };
    return LinkEnvelope;
}(Envelope));
var EventMessage = (function (_super) {
    __extends(EventMessage, _super);
    function EventMessage(node, lane, body) {
        return _super.call(this, node, lane, body) || this;
    }
    EventMessage.prototype.copy = function (node, lane, body) {
        return new EventMessage(node, lane, body);
    };
    EventMessage.fromValue = function (value) {
        return LaneEnvelope.fromValue(value, EventMessage);
    };
    Object.defineProperty(EventMessage, "tag", {
        get: function () {
            return 'event';
        },
        enumerable: true,
        configurable: true
    });
    EventMessage.of = function (node, lane, body) {
        if (body === void 0) { body = Value.Absent; }
        node = Uri.fromAny(node);
        lane = Uri.fromAny(lane);
        body = Value.fromAny(body);
        return new EventMessage(node, lane, body);
    };
    return EventMessage;
}(LaneEnvelope));
var CommandMessage = (function (_super) {
    __extends(CommandMessage, _super);
    function CommandMessage(node, lane, body) {
        return _super.call(this, node, lane, body) || this;
    }
    CommandMessage.prototype.copy = function (node, lane, body) {
        return new CommandMessage(node, lane, body);
    };
    CommandMessage.fromValue = function (value) {
        return LaneEnvelope.fromValue(value, CommandMessage);
    };
    Object.defineProperty(CommandMessage, "tag", {
        get: function () {
            return 'command';
        },
        enumerable: true,
        configurable: true
    });
    CommandMessage.of = function (node, lane, body) {
        if (body === void 0) { body = Value.Absent; }
        node = Uri.fromAny(node);
        lane = Uri.fromAny(lane);
        body = Value.fromAny(body);
        return new CommandMessage(node, lane, body);
    };
    return CommandMessage;
}(LaneEnvelope));
var LinkRequest = (function (_super) {
    __extends(LinkRequest, _super);
    function LinkRequest(node, lane, prio, rate, body) {
        return _super.call(this, node, lane, prio, rate, body) || this;
    }
    LinkRequest.prototype.copy = function (node, lane, prio, rate, body) {
        return new LinkRequest(node, lane, prio, rate, body);
    };
    LinkRequest.fromValue = function (value) {
        return LinkEnvelope.fromValue(value, LinkRequest);
    };
    Object.defineProperty(LinkRequest, "tag", {
        get: function () {
            return 'link';
        },
        enumerable: true,
        configurable: true
    });
    LinkRequest.of = function (node, lane, prio, rate, body) {
        if (prio === void 0) { prio = 0; }
        if (rate === void 0) { rate = 0; }
        if (body === void 0) { body = Value.Absent; }
        node = Uri.fromAny(node);
        lane = Uri.fromAny(lane);
        body = Value.fromAny(body);
        return new LinkRequest(node, lane, prio, rate, body);
    };
    return LinkRequest;
}(LinkEnvelope));
var LinkedResponse = (function (_super) {
    __extends(LinkedResponse, _super);
    function LinkedResponse(node, lane, prio, rate, body) {
        return _super.call(this, node, lane, prio, rate, body) || this;
    }
    LinkedResponse.prototype.copy = function (node, lane, prio, rate, body) {
        return new LinkedResponse(node, lane, prio, rate, body);
    };
    LinkedResponse.fromValue = function (value) {
        return LinkEnvelope.fromValue(value, LinkedResponse);
    };
    Object.defineProperty(LinkedResponse, "tag", {
        get: function () {
            return 'linked';
        },
        enumerable: true,
        configurable: true
    });
    LinkedResponse.of = function (node, lane, prio, rate, body) {
        if (prio === void 0) { prio = 0; }
        if (rate === void 0) { rate = 0; }
        if (body === void 0) { body = Value.Absent; }
        node = Uri.fromAny(node);
        lane = Uri.fromAny(lane);
        body = Value.fromAny(body);
        return new LinkedResponse(node, lane, prio, rate, body);
    };
    return LinkedResponse;
}(LinkEnvelope));
var SyncRequest = (function (_super) {
    __extends(SyncRequest, _super);
    function SyncRequest(node, lane, prio, rate, body) {
        return _super.call(this, node, lane, prio, rate, body) || this;
    }
    SyncRequest.prototype.copy = function (node, lane, prio, rate, body) {
        return new SyncRequest(node, lane, prio, rate, body);
    };
    SyncRequest.fromValue = function (value) {
        return LinkEnvelope.fromValue(value, SyncRequest);
    };
    Object.defineProperty(SyncRequest, "tag", {
        get: function () {
            return 'sync';
        },
        enumerable: true,
        configurable: true
    });
    SyncRequest.of = function (node, lane, prio, rate, body) {
        if (prio === void 0) { prio = 0; }
        if (rate === void 0) { rate = 0; }
        if (body === void 0) { body = Value.Absent; }
        node = Uri.fromAny(node);
        lane = Uri.fromAny(lane);
        body = Value.fromAny(body);
        return new SyncRequest(node, lane, prio, rate, body);
    };
    return SyncRequest;
}(LinkEnvelope));
var SyncedResponse = (function (_super) {
    __extends(SyncedResponse, _super);
    function SyncedResponse(node, lane, body) {
        return _super.call(this, node, lane, body) || this;
    }
    SyncedResponse.prototype.copy = function (node, lane, body) {
        return new SyncedResponse(node, lane, body);
    };
    SyncedResponse.fromValue = function (value) {
        return LaneEnvelope.fromValue(value, SyncedResponse);
    };
    Object.defineProperty(SyncedResponse, "tag", {
        get: function () {
            return 'synced';
        },
        enumerable: true,
        configurable: true
    });
    SyncedResponse.of = function (node, lane, body) {
        if (body === void 0) { body = Value.Absent; }
        node = Uri.fromAny(node);
        lane = Uri.fromAny(lane);
        body = Value.fromAny(body);
        return new SyncedResponse(node, lane, body);
    };
    return SyncedResponse;
}(LaneEnvelope));
var UnlinkRequest = (function (_super) {
    __extends(UnlinkRequest, _super);
    function UnlinkRequest(node, lane, body) {
        return _super.call(this, node, lane, body) || this;
    }
    UnlinkRequest.prototype.copy = function (node, lane, body) {
        return new UnlinkRequest(node, lane, body);
    };
    UnlinkRequest.fromValue = function (value) {
        return LaneEnvelope.fromValue(value, UnlinkRequest);
    };
    Object.defineProperty(UnlinkRequest, "tag", {
        get: function () {
            return 'unlink';
        },
        enumerable: true,
        configurable: true
    });
    UnlinkRequest.of = function (node, lane, body) {
        if (body === void 0) { body = Value.Absent; }
        node = Uri.fromAny(node);
        lane = Uri.fromAny(lane);
        body = Value.fromAny(body);
        return new UnlinkRequest(node, lane, body);
    };
    return UnlinkRequest;
}(LaneEnvelope));
var UnlinkedResponse = (function (_super) {
    __extends(UnlinkedResponse, _super);
    function UnlinkedResponse(node, lane, body) {
        return _super.call(this, node, lane, body) || this;
    }
    UnlinkedResponse.prototype.copy = function (node, lane, body) {
        return new UnlinkedResponse(node, lane, body);
    };
    UnlinkedResponse.fromValue = function (value) {
        return LaneEnvelope.fromValue(value, UnlinkedResponse);
    };
    Object.defineProperty(UnlinkedResponse, "tag", {
        get: function () {
            return 'unlinked';
        },
        enumerable: true,
        configurable: true
    });
    UnlinkedResponse.of = function (node, lane, body) {
        if (body === void 0) { body = Value.Absent; }
        node = Uri.fromAny(node);
        lane = Uri.fromAny(lane);
        body = Value.fromAny(body);
        return new UnlinkedResponse(node, lane, body);
    };
    return UnlinkedResponse;
}(LaneEnvelope));
var AuthRequest = (function (_super) {
    __extends(AuthRequest, _super);
    function AuthRequest(body) {
        return _super.call(this, body) || this;
    }
    AuthRequest.prototype.copy = function (body) {
        return new AuthRequest(body);
    };
    AuthRequest.fromValue = function (value) {
        return HostEnvelope.fromValue(value, AuthRequest);
    };
    Object.defineProperty(AuthRequest, "tag", {
        get: function () {
            return 'auth';
        },
        enumerable: true,
        configurable: true
    });
    AuthRequest.of = function (body) {
        if (body === void 0) { body = Value.Absent; }
        body = Value.fromAny(body);
        return new AuthRequest(body);
    };
    return AuthRequest;
}(HostEnvelope));
var AuthedResponse = (function (_super) {
    __extends(AuthedResponse, _super);
    function AuthedResponse(body) {
        return _super.call(this, body) || this;
    }
    AuthedResponse.prototype.copy = function (body) {
        return new AuthedResponse(body);
    };
    AuthedResponse.fromValue = function (value) {
        return HostEnvelope.fromValue(value, AuthedResponse);
    };
    Object.defineProperty(AuthedResponse, "tag", {
        get: function () {
            return 'authed';
        },
        enumerable: true,
        configurable: true
    });
    AuthedResponse.of = function (body) {
        if (body === void 0) { body = Value.Absent; }
        body = Value.fromAny(body);
        return new AuthedResponse(body);
    };
    return AuthedResponse;
}(HostEnvelope));
var DeauthRequest = (function (_super) {
    __extends(DeauthRequest, _super);
    function DeauthRequest(body) {
        return _super.call(this, body) || this;
    }
    DeauthRequest.prototype.copy = function (body) {
        return new DeauthRequest(body);
    };
    DeauthRequest.fromValue = function (value) {
        return HostEnvelope.fromValue(value, DeauthRequest);
    };
    Object.defineProperty(DeauthRequest, "tag", {
        get: function () {
            return 'deauth';
        },
        enumerable: true,
        configurable: true
    });
    DeauthRequest.of = function (body) {
        if (body === void 0) { body = Value.Absent; }
        body = Value.fromAny(body);
        return new DeauthRequest(body);
    };
    return DeauthRequest;
}(HostEnvelope));
var DeauthedResponse = (function (_super) {
    __extends(DeauthedResponse, _super);
    function DeauthedResponse(body) {
        return _super.call(this, body) || this;
    }
    DeauthedResponse.prototype.copy = function (body) {
        return new DeauthedResponse(body);
    };
    DeauthedResponse.fromValue = function (value) {
        return HostEnvelope.fromValue(value, DeauthedResponse);
    };
    Object.defineProperty(DeauthedResponse, "tag", {
        get: function () {
            return 'deauthed';
        },
        enumerable: true,
        configurable: true
    });
    DeauthedResponse.of = function (body) {
        if (body === void 0) { body = Value.Absent; }
        body = Value.fromAny(body);
        return new DeauthedResponse(body);
    };
    return DeauthedResponse;
}(HostEnvelope));

var MAX_RECONNECT_TIMEOUT = 30000;
var IDLE_TIMEOUT = 1000;
var SEND_BUFFER_SIZE = 1024;
var RemoteHost = (function () {
    function RemoteHost(context, hostUri, options) {
        if (options === void 0) { options = {}; }
        this._context = context;
        this._hostUri = hostUri;
        this._options = options;
        this._downlinks = new BTree();
        this._downlinkCount = 0;
        this._authenticated = false;
        this._session = Value.Absent;
        this._uriCache = new UriCache(hostUri);
        this._sendBuffer = [];
        this._reconnectTimer = 0;
        this._reconnectTimeout = 0;
        this._idleTimer = 0;
        this.open = this.open.bind(this);
        this.checkIdle = this.checkIdle.bind(this);
    }
    Object.defineProperty(RemoteHost.prototype, "hostUri", {
        get: function () {
            return this._hostUri;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RemoteHost.prototype, "credentials", {
        get: function () {
            return this._options.credentials || Value.Absent;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RemoteHost.prototype, "maxReconnectTimeout", {
        get: function () {
            return this._options.maxReconnectTimeout || MAX_RECONNECT_TIMEOUT;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RemoteHost.prototype, "idleTimeout", {
        get: function () {
            return this._options.idleTimeout || IDLE_TIMEOUT;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RemoteHost.prototype, "sendBufferSize", {
        get: function () {
            return this._options.sendBufferSize || SEND_BUFFER_SIZE;
        },
        enumerable: true,
        configurable: true
    });
    RemoteHost.prototype.isAuthenticated = function () {
        return this._authenticated;
    };
    Object.defineProperty(RemoteHost.prototype, "session", {
        get: function () {
            return this._session;
        },
        enumerable: true,
        configurable: true
    });
    RemoteHost.prototype.isIdle = function () {
        return !this._sendBuffer.length && !this._downlinkCount;
    };
    RemoteHost.prototype.resolve = function (relative) {
        return this._uriCache.resolve(relative);
    };
    RemoteHost.prototype.unresolve = function (absolute) {
        return this._uriCache.unresolve(absolute);
    };
    RemoteHost.prototype.authenticate = function (credentials) {
        credentials = Value.fromAny(credentials);
        if (!credentials.equals(this._options.credentials)) {
            this._options.credentials = credentials;
            if (this.isConnected()) {
                var request = AuthRequest.of(credentials);
                this.push(request);
            }
            else {
                this.open();
            }
        }
    };
    RemoteHost.prototype.openDownlink = function (downlink) {
        this.clearIdle();
        var nodeUri = this.resolve(downlink.nodeUri());
        var laneUri = downlink.laneUri();
        if (!this._downlinkCount) {
            this.open();
        }
        var nodeDownlinks = this._downlinks.get(nodeUri);
        if (!nodeDownlinks) {
            nodeDownlinks = new BTree();
            this._downlinks.set(nodeUri, nodeDownlinks);
        }
        if (nodeDownlinks.get(laneUri)) {
            throw new Error('duplicate downlink');
        }
        nodeDownlinks.set(laneUri, downlink);
        this._downlinkCount += 1;
        downlink.openUp(this);
        if (this.isConnected()) {
            downlink.hostDidConnect(this);
        }
    };
    RemoteHost.prototype.unlinkDownlink = function (downlink) {
        var nodeUri = this.resolve(downlink.nodeUri());
        var laneUri = downlink.laneUri();
        var nodeDownlinks = this._downlinks.get(nodeUri);
        if (nodeDownlinks && nodeDownlinks.get(laneUri) && this.isConnected()) {
            var request = UnlinkRequest.of(this.unresolve(nodeUri), laneUri);
            downlink.onUnlinkRequest(request, this);
            this.push(request);
        }
    };
    RemoteHost.prototype.closeDownlink = function (downlink) {
        var nodeUri = this.resolve(downlink.nodeUri());
        var laneUri = downlink.laneUri();
        var nodeDownlinks = this._downlinks.get(nodeUri);
        if (nodeDownlinks) {
            if (nodeDownlinks.get(laneUri)) {
                this._downlinkCount -= 1;
                nodeDownlinks.delete(laneUri);
                if (nodeDownlinks.isEmpty()) {
                    this._downlinks.delete(nodeUri);
                }
                if (!this._downlinkCount) {
                    this.watchIdle();
                }
                downlink.closeUp(this);
            }
        }
    };
    RemoteHost.prototype.command = function (nodeUri, laneUri, body) {
        nodeUri = Uri.fromAny(nodeUri);
        nodeUri = this.resolve(nodeUri);
        laneUri = Uri.fromAny(laneUri);
        body = Value.fromAny(body);
        var message = CommandMessage.of(this.unresolve(nodeUri), laneUri, body);
        this.push(message);
    };
    RemoteHost.prototype.onEnvelope = function (envelope) {
        if (envelope instanceof EventMessage) {
            this.onEventMessage(envelope);
        }
        else if (envelope instanceof CommandMessage) {
            this.onCommandMessage(envelope);
        }
        else if (envelope instanceof LinkRequest) {
            this.onLinkRequest(envelope);
        }
        else if (envelope instanceof LinkedResponse) {
            this.onLinkedResponse(envelope);
        }
        else if (envelope instanceof SyncRequest) {
            this.onSyncRequest(envelope);
        }
        else if (envelope instanceof SyncedResponse) {
            this.onSyncedResponse(envelope);
        }
        else if (envelope instanceof UnlinkRequest) {
            this.onUnlinkRequest(envelope);
        }
        else if (envelope instanceof UnlinkedResponse) {
            this.onUnlinkedResponse(envelope);
        }
        else if (envelope instanceof AuthRequest) {
            this.onAuthRequest(envelope);
        }
        else if (envelope instanceof AuthedResponse) {
            this.onAuthedResponse(envelope);
        }
        else if (envelope instanceof DeauthRequest) {
            this.onDeauthRequest(envelope);
        }
        else if (envelope instanceof DeauthedResponse) {
            this.onDeauthedResponse(envelope);
        }
        else {
            this.onUnknownEnvelope(envelope);
        }
    };
    RemoteHost.prototype.onEventMessage = function (message) {
        var nodeUri = this.resolve(message.node());
        var laneUri = message.lane();
        var nodeDownlinks = this._downlinks.get(nodeUri);
        if (nodeDownlinks) {
            var downlink = nodeDownlinks.get(laneUri);
            if (downlink) {
                var resolvedMessage = message.node(nodeUri);
                downlink.onEventMessage(resolvedMessage, this);
            }
        }
    };
    RemoteHost.prototype.onCommandMessage = function (message) {
    };
    RemoteHost.prototype.onLinkRequest = function (request) {
    };
    RemoteHost.prototype.onLinkedResponse = function (response) {
        var nodeUri = this.resolve(response.node());
        var laneUri = response.lane();
        var nodeDownlinks = this._downlinks.get(nodeUri);
        if (nodeDownlinks) {
            var downlink = nodeDownlinks.get(laneUri);
            if (downlink) {
                var resolvedResponse = response.node(nodeUri);
                downlink.onLinkedResponse(resolvedResponse, this);
            }
        }
    };
    RemoteHost.prototype.onSyncRequest = function (request) {
    };
    RemoteHost.prototype.onSyncedResponse = function (response) {
        var nodeUri = this.resolve(response.node());
        var laneUri = response.lane();
        var nodeDownlinks = this._downlinks.get(nodeUri);
        if (nodeDownlinks) {
            var downlink = nodeDownlinks.get(laneUri);
            if (downlink) {
                var resolvedResponse = response.node(nodeUri);
                downlink.onSyncedResponse(resolvedResponse, this);
            }
        }
    };
    RemoteHost.prototype.onUnlinkRequest = function (request) {
    };
    RemoteHost.prototype.onUnlinkedResponse = function (response) {
        var nodeUri = this.resolve(response.node());
        var laneUri = response.lane();
        var nodeDownlinks = this._downlinks.get(nodeUri);
        if (nodeDownlinks) {
            var downlink = nodeDownlinks.get(laneUri);
            if (downlink) {
                var resolvedResponse = response.node(nodeUri);
                downlink.onUnlinkedResponse(resolvedResponse, this);
            }
        }
    };
    RemoteHost.prototype.onAuthRequest = function (request) {
    };
    RemoteHost.prototype.onAuthedResponse = function (response) {
        this._authenticated = true;
        this._session = response.body();
        this._context.hostDidAuthenticate(response.body(), this);
    };
    RemoteHost.prototype.onDeauthRequest = function (request) {
    };
    RemoteHost.prototype.onDeauthedResponse = function (response) {
        this._authenticated = false;
        this._session = Value.Absent;
        this._context.hostDidDeauthenticate(response.body(), this);
    };
    RemoteHost.prototype.onUnknownEnvelope = function (envelope) {
    };
    RemoteHost.prototype.onConnect = function () {
        this._reconnectTimeout = 0;
        this._context.hostDidConnect(this);
        this._downlinks.forEach(function (nodeUri, nodeDownlinks) {
            nodeDownlinks.forEach(function (laneUri, downlink) {
                downlink.hostDidConnect(this);
            }, this);
        }, this);
    };
    RemoteHost.prototype.onDisconnect = function () {
        this._authenticated = false;
        this._session = Value.Absent;
        this._context.hostDidDisconnect(this);
        this._downlinks.forEach(function (nodeUri, nodeDownlinks) {
            nodeDownlinks.forEach(function (laneUri, downlink) {
                downlink.hostDidDisconnect(this);
            }, this);
        }, this);
    };
    RemoteHost.prototype.onError = function (error) {
        this._context.hostDidFail(error, this);
        this._downlinks.forEach(function (nodeUri, nodeDownlinks) {
            nodeDownlinks.forEach(function (laneUri, downlink) {
                downlink.hostDidFail(error, this);
            }, this);
        }, this);
    };
    RemoteHost.prototype.reconnect = function () {
        if (!this._reconnectTimer) {
            if (!this._reconnectTimeout) {
                this._reconnectTimeout = Math.floor(500 + 1000 * Math.random());
            }
            else {
                this._reconnectTimeout = Math.min(Math.floor(1.8 * this._reconnectTimeout), this.maxReconnectTimeout);
            }
            this._reconnectTimer = setTimeout(this.open, this._reconnectTimeout);
        }
    };
    RemoteHost.prototype.clearReconnect = function () {
        if (this._reconnectTimer) {
            clearTimeout(this._reconnectTimer);
            this._reconnectTimer = 0;
        }
    };
    RemoteHost.prototype.watchIdle = function () {
        if (!this._idleTimer && this.isConnected() && this.isIdle()) {
            this._idleTimer = setTimeout(this.checkIdle, this.idleTimeout);
        }
    };
    RemoteHost.prototype.clearIdle = function () {
        if (this._idleTimer) {
            clearTimeout(this._idleTimer);
            this._idleTimer = 0;
        }
    };
    RemoteHost.prototype.checkIdle = function () {
        if (this.isConnected() && this.isIdle()) {
            this.close();
        }
    };
    RemoteHost.prototype.close = function () {
        this._context.closeHost(this);
    };
    RemoteHost.prototype.closeUp = function () {
        this._downlinks.forEach(function (nodeUri, nodeDownlinks) {
            nodeDownlinks.forEach(function (laneUri, downlink) {
                downlink.closeUp(this);
            }, this);
        }, this);
    };
    return RemoteHost;
}());

var LINKING = 1;
var LINKED = 2;
var SYNCING = 4;
var SYNCED = 8;
var UNLINKING = 16;
var DownlinkFlags;
(function (DownlinkFlags) {
    DownlinkFlags[DownlinkFlags["KeepLinked"] = 1] = "KeepLinked";
    DownlinkFlags[DownlinkFlags["KeepSynced"] = 2] = "KeepSynced";
    DownlinkFlags[DownlinkFlags["KeepLinkedSynced"] = 3] = "KeepLinkedSynced";
})(DownlinkFlags || (DownlinkFlags = {}));
var DownlinkModel = (function () {
    function DownlinkModel(context, hostUri, nodeUri, laneUri, prio, rate, body) {
        if (prio === void 0) { prio = 0; }
        if (rate === void 0) { rate = 0; }
        if (body === void 0) { body = Value.Absent; }
        this._context = context;
        this._hostUri = hostUri;
        this._nodeUri = nodeUri;
        this._laneUri = laneUri;
        this._prio = prio;
        this._rate = rate;
        this._body = body;
        this._views = [];
        this._host = null;
        this._status = 0;
    }
    DownlinkModel.prototype.hostUri = function () {
        return this._hostUri;
    };
    DownlinkModel.prototype.nodeUri = function () {
        return this._nodeUri;
    };
    DownlinkModel.prototype.laneUri = function () {
        return this._laneUri;
    };
    DownlinkModel.prototype.prio = function () {
        return this._prio;
    };
    DownlinkModel.prototype.rate = function () {
        return this._rate;
    };
    DownlinkModel.prototype.body = function () {
        return this._body;
    };
    DownlinkModel.prototype.keepLinked = function () {
        for (var i = 0; i < this._views.length; i += 1) {
            if (this._views[i].keepLinked()) {
                return true;
            }
        }
        return false;
    };
    DownlinkModel.prototype.keepSynced = function () {
        for (var i = 0; i < this._views.length; i += 1) {
            if (this._views[i].keepSynced()) {
                return true;
            }
        }
        return false;
    };
    DownlinkModel.prototype.isConnected = function () {
        return !!(this._host && this._host.isConnected());
    };
    DownlinkModel.prototype.isAuthenticated = function () {
        return !!(this._host && this._host.isAuthenticated());
    };
    DownlinkModel.prototype.isLinked = function () {
        return (this._status & LINKED) !== 0;
    };
    DownlinkModel.prototype.isSynced = function () {
        return (this._status & SYNCED) !== 0;
    };
    Object.defineProperty(DownlinkModel.prototype, "session", {
        get: function () {
            return this._host ? this._host.session : Value.Absent;
        },
        enumerable: true,
        configurable: true
    });
    DownlinkModel.prototype.addDownlink = function (view) {
        this._views.push(view);
    };
    DownlinkModel.prototype.removeDownlink = function (view) {
        for (var i = 0; i < this._views.length; i += 1) {
            if (this._views[i] === view) {
                this._views.splice(i, 1);
                view.closeUp();
            }
        }
        if (this._views.length === 0) {
            this.unlink();
        }
    };
    DownlinkModel.prototype.onEventMessage = function (message, host) {
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].onEventMessage(message);
        }
    };
    DownlinkModel.prototype.onCommandMessage = function (body) {
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].onCommandMessage(body);
        }
    };
    DownlinkModel.prototype.onLinkRequest = function (request) {
        this._status |= LINKING;
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].onLinkRequest(request);
        }
    };
    DownlinkModel.prototype.onLinkedResponse = function (response, host) {
        this._status = this._status & ~LINKING | LINKED;
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].onLinkedResponse(response);
        }
    };
    DownlinkModel.prototype.onSyncRequest = function (request) {
        this._status |= SYNCING;
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].onSyncRequest(request);
        }
    };
    DownlinkModel.prototype.onSyncedResponse = function (response, host) {
        this._status = this._status & ~SYNCING | SYNCED;
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].onSyncedResponse(response);
        }
    };
    DownlinkModel.prototype.onUnlinkRequest = function (request, host) {
        this._status = this._status & ~(LINKING | SYNCING) | UNLINKING;
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].onUnlinkRequest(request);
        }
    };
    DownlinkModel.prototype.onUnlinkedResponse = function (response, host) {
        this._status &= ~UNLINKING;
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].onUnlinkedResponse(response);
        }
        if (this._status === 0) {
            this.close();
        }
    };
    DownlinkModel.prototype.hostDidConnect = function (host) {
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].hostDidConnect();
        }
        var nodeUri = this._host.unresolve(this._nodeUri);
        var request;
        if (this.keepSynced()) {
            request = SyncRequest.of(nodeUri, this._laneUri, this._prio, this._rate, this._body);
            this.onSyncRequest(request);
        }
        else {
            request = LinkRequest.of(nodeUri, this._laneUri, this._prio, this._rate, this._body);
            this.onLinkRequest(request);
        }
        this._host.push(request);
    };
    DownlinkModel.prototype.hostDidDisconnect = function (host) {
        this._status = 0;
        var keepLinked = false;
        for (var i = 0; i < this._views.length; i += 1) {
            var view = this._views[i];
            view.hostDidDisconnect();
            keepLinked = keepLinked || view.keepLinked();
        }
        if (!keepLinked) {
            this.close();
        }
    };
    DownlinkModel.prototype.hostDidFail = function (error, host) {
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].hostDidFail(error);
        }
    };
    DownlinkModel.prototype.command = function (body) {
        body = Value.fromAny(body);
        this.onCommandMessage(body);
        this._host.command(this._nodeUri, this._laneUri, body);
    };
    DownlinkModel.prototype.unlink = function () {
        this._status = UNLINKING;
        this._context.unlinkDownlink(this);
    };
    DownlinkModel.prototype.close = function () {
        this._context.closeDownlink(this);
    };
    DownlinkModel.prototype.openUp = function (host) {
        this._host = host;
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].openUp(host);
        }
    };
    DownlinkModel.prototype.closeUp = function () {
        var views = this._views;
        this._views = [];
        for (var i = 0; i < views.length; i += 1) {
            views[i].closeUp();
        }
    };
    return DownlinkModel;
}());
var Downlink = (function () {
    function Downlink(context, owner, init, hostUri, nodeUri, laneUri, prio, rate, body, flags, delegate) {
        if (hostUri === void 0) { hostUri = Uri.Empty; }
        if (nodeUri === void 0) { nodeUri = Uri.Empty; }
        if (laneUri === void 0) { laneUri = Uri.Empty; }
        if (prio === void 0) { prio = 0; }
        if (rate === void 0) { rate = 0; }
        if (body === void 0) { body = Value.Absent; }
        if (flags === void 0) { flags = 0; }
        if (delegate === void 0) { delegate = {}; }
        if (init) {
            hostUri = init.hostUri !== undefined ? Uri.fromAny(init.hostUri) : hostUri;
            nodeUri = init.nodeUri !== undefined ? Uri.fromAny(init.nodeUri) : nodeUri;
            laneUri = init.laneUri !== undefined ? Uri.fromAny(init.laneUri) : laneUri;
            prio = init.prio !== undefined ? init.prio : prio;
            rate = init.rate !== undefined ? init.rate : rate;
            body = init.body !== undefined ? Value.fromAny(init.body) : body;
            delegate.onEvent = init.onEvent || delegate.onEvent;
            delegate.onCommand = init.onCommand || delegate.onCommand;
            delegate.willLink = init.willLink || delegate.willLink;
            delegate.didLink = init.didLink || delegate.didLink;
            delegate.willSync = init.willSync || delegate.willSync;
            delegate.didSync = init.didSync || delegate.didSync;
            delegate.willUnlink = init.willUnlink || delegate.willUnlink;
            delegate.didUnlink = init.didUnlink || delegate.didUnlink;
            delegate.didConnect = init.didConnect || delegate.didConnect;
            delegate.didDisconnect = init.didDisconnect || delegate.didDisconnect;
            delegate.didClose = init.didClose || delegate.didClose;
            delegate.didFail = init.didFail || delegate.didFail;
        }
        this._context = context;
        this._owner = owner;
        this._hostUri = hostUri;
        this._nodeUri = nodeUri;
        this._laneUri = laneUri;
        this._prio = prio;
        this._rate = rate;
        this._body = body;
        this._flags = flags;
        this._model = undefined;
        this.delegate = delegate;
    }
    Downlink.prototype.hostUri = function (hostUri) {
        if (hostUri === undefined) {
            return this._hostUri;
        }
        else {
            hostUri = Uri.fromAny(hostUri);
            return this.copy(this._context, this._owner, hostUri, this._nodeUri, this._laneUri, this._prio, this._rate, this._body, this._flags, this.delegate);
        }
    };
    Downlink.prototype.nodeUri = function (nodeUri) {
        if (nodeUri === undefined) {
            return this._nodeUri;
        }
        else {
            nodeUri = Uri.fromAny(nodeUri);
            return this.copy(this._context, this._owner, this._hostUri, nodeUri, this._laneUri, this._prio, this._rate, this._body, this._flags, this.delegate);
        }
    };
    Downlink.prototype.laneUri = function (laneUri) {
        if (laneUri === undefined) {
            return this._laneUri;
        }
        else {
            laneUri = Uri.fromAny(laneUri);
            return this.copy(this._context, this._owner, this._hostUri, this._nodeUri, laneUri, this._prio, this._rate, this._body, this._flags, this.delegate);
        }
    };
    Downlink.prototype.prio = function (prio) {
        if (prio === undefined) {
            return this._prio;
        }
        else {
            return this.copy(this._context, this._owner, this._hostUri, this._nodeUri, this._laneUri, prio, this._rate, this._body, this._flags, this.delegate);
        }
    };
    Downlink.prototype.rate = function (rate) {
        if (rate === undefined) {
            return this._rate;
        }
        else {
            return this.copy(this._context, this._owner, this._hostUri, this._nodeUri, this._laneUri, this._prio, rate, this._body, this._flags, this.delegate);
        }
    };
    Downlink.prototype.body = function (body) {
        if (body === undefined) {
            return this._body;
        }
        else {
            body = Value.fromAny(body);
            return this.copy(this._context, this._owner, this._hostUri, this._nodeUri, this._laneUri, this._prio, this._rate, body, this._flags, this.delegate);
        }
    };
    Downlink.prototype.keepLinked = function (keepLinked) {
        if (keepLinked === undefined) {
            return (this._flags & 1) !== 0;
        }
        else {
            var flags = keepLinked ? this._flags | 1 : this._flags & ~1;
            return this.copy(this._context, this._owner, this._hostUri, this._nodeUri, this._laneUri, this._prio, this._rate, this._body, flags, this.delegate);
        }
    };
    Downlink.prototype.keepSynced = function (keepSynced) {
        if (keepSynced === undefined) {
            return (this._flags & 2) !== 0;
        }
        else {
            var flags = keepSynced ? this._flags | 2 : this._flags & ~2;
            return this.copy(this._context, this._owner, this._hostUri, this._nodeUri, this._laneUri, this._prio, this._rate, this._body, flags, this.delegate);
        }
    };
    Downlink.prototype.onEvent = function (onEvent) {
        if (onEvent === undefined) {
            return this.delegate.onEvent || null;
        }
        else {
            this.delegate.onEvent = onEvent || undefined;
            return this;
        }
    };
    Downlink.prototype.onCommand = function (onCommand) {
        if (onCommand === undefined) {
            return this.delegate.onCommand || null;
        }
        else {
            this.delegate.onCommand = onCommand || undefined;
            return this;
        }
    };
    Downlink.prototype.willLink = function (willLink) {
        if (willLink === undefined) {
            return this.delegate.willLink || null;
        }
        else {
            this.delegate.willLink = willLink || undefined;
            return this;
        }
    };
    Downlink.prototype.didLink = function (didLink) {
        if (didLink === undefined) {
            return this.delegate.didLink || null;
        }
        else {
            this.delegate.didLink = didLink || undefined;
            return this;
        }
    };
    Downlink.prototype.willSync = function (willSync) {
        if (willSync === undefined) {
            return this.delegate.willSync || null;
        }
        else {
            this.delegate.willSync = willSync || undefined;
            return this;
        }
    };
    Downlink.prototype.didSync = function (didSync) {
        if (didSync === undefined) {
            return this.delegate.didSync || null;
        }
        else {
            this.delegate.didSync = didSync || undefined;
            return this;
        }
    };
    Downlink.prototype.willUnlink = function (willUnlink) {
        if (willUnlink === undefined) {
            return this.delegate.willUnlink || null;
        }
        else {
            this.delegate.willUnlink = willUnlink || undefined;
            return this;
        }
    };
    Downlink.prototype.didUnlink = function (didUnlink) {
        if (didUnlink === undefined) {
            return this.delegate.didUnlink || null;
        }
        else {
            this.delegate.didUnlink = didUnlink || undefined;
            return this;
        }
    };
    Downlink.prototype.didConnect = function (didConnect) {
        if (didConnect === undefined) {
            return this.delegate.didConnect || null;
        }
        else {
            this.delegate.didConnect = didConnect || undefined;
            return this;
        }
    };
    Downlink.prototype.didDisconnect = function (didDisconnect) {
        if (didDisconnect === undefined) {
            return this.delegate.didDisconnect || null;
        }
        else {
            this.delegate.didDisconnect = didDisconnect || undefined;
            return this;
        }
    };
    Downlink.prototype.didClose = function (didClose) {
        if (didClose === undefined) {
            return this.delegate.didClose || null;
        }
        else {
            this.delegate.didClose = didClose || undefined;
            return this;
        }
    };
    Downlink.prototype.didFail = function (didFail) {
        if (didFail === undefined) {
            return this.delegate.didFail || null;
        }
        else {
            this.delegate.didFail = didFail || undefined;
            return this;
        }
    };
    Downlink.prototype.isConnected = function () {
        return this._model ? this._model.isConnected() : false;
    };
    Downlink.prototype.isAuthenticated = function () {
        return this._model ? this._model.isAuthenticated() : false;
    };
    Downlink.prototype.isLinked = function () {
        return this._model ? this._model.isLinked() : false;
    };
    Downlink.prototype.isSynced = function () {
        return this._model ? this._model.isSynced() : false;
    };
    Downlink.prototype.session = function () {
        return this._model ? this._model.session : Value.Absent;
    };
    Downlink.prototype.onEventMessage = function (message) {
        if (this.delegate.onEvent) {
            this.delegate.onEvent(message.body(), this);
        }
    };
    Downlink.prototype.onCommandMessage = function (body) {
        if (this.delegate.onCommand) {
            this.delegate.onCommand(body, this);
        }
    };
    Downlink.prototype.onLinkRequest = function (request) {
        if (this.delegate.willLink) {
            this.delegate.willLink(this);
        }
    };
    Downlink.prototype.onLinkedResponse = function (response) {
        if (this.delegate.didLink) {
            this.delegate.didLink(this);
        }
    };
    Downlink.prototype.onSyncRequest = function (request) {
        if (this.delegate.willSync) {
            this.delegate.willSync(this);
        }
    };
    Downlink.prototype.onSyncedResponse = function (response) {
        if (this.delegate.didSync) {
            this.delegate.didSync(this);
        }
    };
    Downlink.prototype.onUnlinkRequest = function (request) {
        if (this.delegate.willUnlink) {
            this.delegate.willUnlink(this);
        }
    };
    Downlink.prototype.onUnlinkedResponse = function (response) {
        if (this.delegate.didUnlink) {
            this.delegate.didUnlink(this);
        }
    };
    Downlink.prototype.hostDidConnect = function () {
        if (this.delegate.didConnect) {
            this.delegate.didConnect(this);
        }
    };
    Downlink.prototype.hostDidDisconnect = function () {
        if (this.delegate.didDisconnect) {
            this.delegate.didDisconnect(this);
        }
    };
    Downlink.prototype.hostDidFail = function (error) {
        if (this.delegate.didFail) {
            this.delegate.didFail(error, this);
        }
    };
    Downlink.prototype.command = function (body) {
        this._model.command(body);
    };
    Downlink.prototype.close = function () {
        if (this._owner) {
            this._owner.removeDownlink(this);
        }
        if (this._model) {
            this._model.removeDownlink(this);
        }
    };
    Downlink.prototype.openUp = function (host) {
    };
    Downlink.prototype.closeUp = function () {
        if (this.delegate.didClose) {
            this.delegate.didClose(this);
        }
    };
    Downlink.InitForm = undefined;
    return Downlink;
}());
var DownlinkInitForm = (function (_super) {
    __extends(DownlinkInitForm, _super);
    function DownlinkInitForm() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(DownlinkInitForm.prototype, "tag", {
        get: function () {
            return 'link';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DownlinkInitForm.prototype, "unit", {
        get: function () {
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    DownlinkInitForm.prototype.mold = function (init) {
        if (init) {
            var header = Record.empty();
            if (init.hostUri !== undefined) {
                header.slot('host', Uri.fromAny(init.hostUri).toUri());
            }
            if (init.nodeUri !== undefined) {
                header.slot('node', Uri.fromAny(init.nodeUri).toUri());
            }
            if (init.laneUri !== undefined) {
                header.slot('lane', Uri.fromAny(init.laneUri).toUri());
            }
            if (init.prio !== undefined) {
                header.slot('prio', init.prio);
            }
            if (init.rate !== undefined) {
                header.slot('rate', init.rate);
            }
            if (init.body !== undefined) {
                header.slot('body', init.body);
            }
            if (init.type !== undefined) {
                header.slot('type', init.type);
            }
            return Record.of(Attr.of('link', header));
        }
        return Value.Absent;
    };
    DownlinkInitForm.prototype.cast = function (value) {
        var header = value.get('link');
        if (header.isDefined()) {
            var init = {};
            var host = header.get('host');
            if (host.isDefined()) {
                init.hostUri = host.cast(Form.Uri);
            }
            var node = header.get('node');
            if (node.isDefined()) {
                init.nodeUri = node.cast(Form.Uri);
            }
            var lane = header.get('lane');
            if (lane.isDefined()) {
                init.laneUri = lane.cast(Form.Uri);
            }
            var prio = header.get('prio');
            if (prio.isDefined()) {
                init.prio = prio.numberValue();
            }
            var rate = header.get('rate');
            if (rate.isDefined()) {
                init.rate = rate.numberValue();
            }
            var body = header.get('body');
            if (body.isDefined()) {
                init.body = body;
            }
            var type = header.get('type');
            if (type.isDefined()) {
                init.type = type.stringValue();
            }
            return init;
        }
        return undefined;
    };
    return DownlinkInitForm;
}(Form));
Downlink.InitForm = new DownlinkInitForm();

var EventDownlinkModel = (function (_super) {
    __extends(EventDownlinkModel, _super);
    function EventDownlinkModel(context, hostUri, nodeUri, laneUri, prio, rate, body) {
        return _super.call(this, context, hostUri, nodeUri, laneUri, prio, rate, body) || this;
    }
    EventDownlinkModel.prototype.type = function () {
        return 'event';
    };
    return EventDownlinkModel;
}(DownlinkModel));
var EventDownlink = (function (_super) {
    __extends(EventDownlink, _super);
    function EventDownlink(context, owner, init, hostUri, nodeUri, laneUri, prio, rate, body, flags, delegate) {
        if (flags === void 0) { flags = 1; }
        if (delegate === void 0) { delegate = {}; }
        return _super.call(this, context, owner, init, hostUri, nodeUri, laneUri, prio, rate, body, flags, delegate) || this;
    }
    EventDownlink.prototype.copy = function (context, owner, hostUri, nodeUri, laneUri, prio, rate, body, flags, delegate) {
        return new EventDownlink(context, owner, undefined, hostUri, nodeUri, laneUri, prio, rate, body, flags, delegate);
    };
    EventDownlink.prototype.type = function () {
        return 'event';
    };
    EventDownlink.prototype.open = function () {
        var laneUri = this._laneUri;
        if (laneUri.isEmpty()) {
            throw new Error('no lane');
        }
        var nodeUri = this._nodeUri;
        if (nodeUri.isEmpty()) {
            throw new Error('no node');
        }
        var hostUri = this._hostUri;
        if (hostUri.isEmpty()) {
            hostUri = nodeUri.base();
            nodeUri = Uri.unresolve(hostUri, nodeUri);
        }
        var model = this._context.getDownlink(hostUri, nodeUri, laneUri);
        if (model) {
            if (!(model instanceof EventDownlinkModel)) {
                throw new Error('downlink type mismatch');
            }
            model.addDownlink(this);
        }
        else {
            model = new EventDownlinkModel(this._context, hostUri, nodeUri, laneUri, this._prio, this._rate, this._body);
            model.addDownlink(this);
            this._context.openDownlink(model);
        }
        this._model = model;
        if (this._owner) {
            this._owner.addDownlink(this);
        }
        return this;
    };
    return EventDownlink;
}(Downlink));

var ListDownlinkModel = (function (_super) {
    __extends(ListDownlinkModel, _super);
    function ListDownlinkModel(context, hostUri, nodeUri, laneUri, prio, rate, body, state) {
        if (state === void 0) { state = new STree(); }
        var _this = _super.call(this, context, hostUri, nodeUri, laneUri, prio, rate, body) || this;
        _this._state = state;
        return _this;
    }
    ListDownlinkModel.prototype.type = function () {
        return 'list';
    };
    ListDownlinkModel.prototype.isEmpty = function () {
        return this._state.isEmpty();
    };
    Object.defineProperty(ListDownlinkModel.prototype, "length", {
        get: function () {
            return this._state.length;
        },
        enumerable: true,
        configurable: true
    });
    ListDownlinkModel.prototype.get = function (index, id) {
        return this._state.get(index, id) || Value.Absent;
    };
    ListDownlinkModel.prototype.getEntry = function (index, id) {
        return this._state.getEntry(index, id);
    };
    ListDownlinkModel.prototype.set = function (index, newValue, id) {
        if (id !== undefined) {
            index = this._state.lookup(id, index);
            if (index < 0) {
                throw new RangeError('' + id);
            }
        }
        if (index < 0 || index >= this._state.length) {
            throw new RangeError('' + index);
        }
        newValue = this.listWillUpdate(index, newValue);
        var oldEntry = this._state.getEntry(index);
        this._state.set(index, newValue);
        this.listDidUpdate(index, newValue, oldEntry[1]);
        var header = Record.empty(2).slot('id', oldEntry[0]).slot('index', index);
        this.command(Attr.of('update', header).concat(newValue));
        return this;
    };
    ListDownlinkModel.prototype.insert = function (index, newValue, id) {
        if (index < 0 || index > this._state.length) {
            throw new RangeError('' + index);
        }
        newValue = this.listWillInsert(index, newValue);
        this._state.insert(index, newValue, id);
        var newEntry = this._state.getEntry(index);
        this.listDidInsert(index, newValue);
        var header = Record.empty(2).slot('id', newEntry[0]).slot('index', index);
        this.command(Attr.of('insert', header).concat(newValue));
        return this;
    };
    ListDownlinkModel.prototype.remove = function (index, id) {
        if (id !== undefined) {
            index = this._state.lookup(id, index);
            if (index < 0) {
                throw new RangeError('' + id);
            }
        }
        if (index < 0 || index > this._state.length) {
            throw new RangeError('' + index);
        }
        this.listWillRemove(index);
        var oldEntry = this._state.getEntry(index);
        this._state.remove(index);
        this.listDidRemove(index, oldEntry[1]);
        var header = Record.empty(2).slot('id', oldEntry[0]).slot('index', index);
        this.command(Record.empty(1).attr('remove', header));
        return this;
    };
    ListDownlinkModel.prototype.push = function () {
        var newValues = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            newValues[_i] = arguments[_i];
        }
        for (var i = 0; i < newValues.length; i += 1) {
            var index = this._state.length + i;
            var newValue = this.listWillInsert(index, newValues[i]);
            this._state.insert(index, newValue);
            var newEntry = this._state.getEntry(index);
            this.listDidInsert(index, newValue);
            var header = Record.empty(2).slot('id', newEntry[0]).slot('index', index);
            this.command(Attr.of('insert', header).concat(newValue));
        }
        return this._state.length;
    };
    ListDownlinkModel.prototype.pop = function () {
        var index = this._state.length - 1;
        if (index >= 0) {
            this.listWillRemove(index);
            var oldEntry = this._state.getEntry(index);
            this._state.remove(index);
            this.listDidRemove(index, oldEntry[1]);
            var header = Record.empty(2).slot('id', oldEntry[0]).slot('index', index);
            this.command(Record.empty(1).attr('remove', header));
            return oldEntry[1];
        }
        else {
            return Value.Absent;
        }
    };
    ListDownlinkModel.prototype.unshift = function () {
        var newValues = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            newValues[_i] = arguments[_i];
        }
        for (var i = newValues.length - 1; i >= 0; i -= 1) {
            var newValue = this.listWillInsert(0, newValues[i]);
            this._state.insert(0, newValue);
            var newEntry = this._state.getEntry(0);
            this.listDidInsert(0, newValue);
            var header = Record.empty(2).slot('id', newEntry[0]).slot('index', 0);
            this.command(Attr.of('insert', header).concat(newValue));
        }
        return this._state.length;
    };
    ListDownlinkModel.prototype.shift = function () {
        if (this._state.length > 0) {
            this.listWillRemove(0);
            var oldEntry = this._state.getEntry(0);
            this._state.remove(0);
            this.listDidRemove(0, oldEntry[1]);
            var header = Record.empty(2).slot('id', oldEntry[0]).slot('index', 0);
            this.command(Record.empty(1).attr('remove', header));
            return oldEntry[1];
        }
        else {
            return Value.Absent;
        }
    };
    ListDownlinkModel.prototype.move = function (fromIndex, toIndex, id) {
        if (id !== undefined) {
            fromIndex = this._state.lookup(id, fromIndex);
            if (fromIndex < 0) {
                throw new RangeError('' + id);
            }
        }
        if (fromIndex < 0 || fromIndex >= this._state.length) {
            throw new RangeError('' + fromIndex);
        }
        if (toIndex < 0 || toIndex >= this._state.length) {
            throw new RangeError('' + toIndex);
        }
        if (fromIndex !== toIndex) {
            var entry = this._state.getEntry(fromIndex);
            this.listWillMove(fromIndex, toIndex, entry[1]);
            this._state.remove(fromIndex).insert(toIndex, entry[1], entry[0]);
            this.listDidMove(fromIndex, toIndex, entry[1]);
            var header = Record.empty(2).slot('id', entry[0]).slot('from', fromIndex).slot('to', toIndex);
            this.command(Record.empty(1).attr('move', header));
        }
        return this;
    };
    ListDownlinkModel.prototype.splice = function (start, deleteCount) {
        var newValues = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            newValues[_i - 2] = arguments[_i];
        }
        if (start < 0) {
            start = this._state.length + start;
        }
        start = Math.min(Math.max(0, start), this._state.length);
        if (deleteCount === undefined) {
            deleteCount = this._state.length - start;
        }
        var deleted = [];
        for (var i = start, n = start + deleteCount; i < n; i += 1) {
            this.listWillRemove(start);
            var oldEntry = this._state.getEntry(start);
            deleted.push(oldEntry[1]);
            this._state.remove(start);
            this.listDidRemove(start, oldEntry[1]);
            var header = Record.empty(2).slot('id', oldEntry[0]).slot('index', start);
            this.command(Record.empty(1).attr('remove', header));
        }
        for (var i = 0; i < newValues.length; i += 1) {
            var index = start + i;
            var newValue = this.listWillInsert(index, newValues[i]);
            this._state.insert(index, newValue);
            var newEntry = this._state.getEntry(index);
            this.listDidInsert(index, newValue);
            var header = Record.empty(2).slot('id', newEntry[0]).slot('index', index);
            this.command(Attr.of('insert', header).concat(newValue));
        }
        return deleted;
    };
    ListDownlinkModel.prototype.clear = function () {
        this.listWillClear();
        this._state.clear();
        this.listDidClear();
        this.command(Record.empty(1).attr('clear'));
    };
    ListDownlinkModel.prototype.forEach = function (callback, thisArg) {
        return this._state.forEach(function (value, index, tree, id) {
            return callback.call(thisArg, value, index, this, id);
        }, this);
    };
    ListDownlinkModel.prototype.values = function () {
        return this._state.values();
    };
    ListDownlinkModel.prototype.keys = function () {
        return this._state.keys();
    };
    ListDownlinkModel.prototype.entries = function () {
        return this._state.entries();
    };
    ListDownlinkModel.prototype.snapshot = function () {
        return this._state.clone();
    };
    ListDownlinkModel.prototype.setState = function (state) {
        this._state = state;
    };
    ListDownlinkModel.prototype.onEventMessage = function (message, host) {
        _super.prototype.onEventMessage.call(this, message, host);
        var event = message.body();
        var tag = event.tag;
        if (tag === 'update') {
            var header = event.head().toValue();
            var index = this._state.lookup(header.get('id'), header.get('index').numberValue());
            if (index >= 0) {
                this.onUpdateEvent(index, event.body(), header.get('id'));
            }
            else {
                this.onInsertEvent(header.get('index').numberValue(0), event.body(), header.get('id'));
            }
        }
        else if (tag === 'insert') {
            var header = event.head().toValue();
            var index = this._state.lookup(header.get('id'), header.get('index').numberValue());
            if (index < 0) {
                this.onInsertEvent(header.get('index').numberValue(0), event.body(), header.get('id'));
            }
            else {
                this.onUpdateEvent(index, event.body(), header.get('id'));
            }
        }
        else if (tag === 'move') {
            var header = event.head().toValue();
            var index = this._state.lookup(header.get('id'), header.get('from').numberValue());
            if (index >= 0) {
                this.onMoveEvent(index, header.get('to').numberValue(0), header.get('id'));
            }
        }
        else if (tag === 'remove') {
            var header = event.head().toValue();
            var index = this._state.lookup(header.get('id'), header.get('index').numberValue());
            if (index >= 0) {
                this.onRemoveEvent(index, header.get('id'));
            }
        }
        else if (tag === 'drop') {
            var header = event.head();
            this.onDropEvent(header.numberValue(0));
        }
        else if (tag === 'take') {
            var header = event.head();
            this.onTakeEvent(header.numberValue(0));
        }
        else if (tag === 'clear') {
            this.onClearEvent();
        }
    };
    ListDownlinkModel.prototype.onUpdateEvent = function (index, newValue, id) {
        newValue = this.listWillUpdate(index, newValue);
        var oldValue = this._state.get(index) || Value.Absent;
        this._state.set(index, newValue);
        this.listDidUpdate(index, newValue, oldValue);
    };
    ListDownlinkModel.prototype.onInsertEvent = function (index, newValue, id) {
        newValue = this.listWillInsert(index, newValue);
        this._state.insert(index, newValue, id);
        this.listDidInsert(index, newValue);
    };
    ListDownlinkModel.prototype.onMoveEvent = function (fromIndex, toIndex, id) {
        toIndex = Math.min(Math.max(0, toIndex), this._state.length);
        if (fromIndex !== toIndex) {
            var value = this._state.get(fromIndex) || Value.Absent;
            this.listWillMove(fromIndex, toIndex, value);
            this._state.remove(fromIndex).insert(toIndex, value, id);
            this.listDidMove(fromIndex, toIndex, value);
        }
    };
    ListDownlinkModel.prototype.onRemoveEvent = function (index, id) {
        this.listWillRemove(index);
        var oldValue = this._state.get(index) || Value.Absent;
        this._state.remove(index);
        this.listDidRemove(index, oldValue);
    };
    ListDownlinkModel.prototype.onDropEvent = function (lower) {
        this.listWillDrop(lower);
        this._state.drop(lower);
        this.listDidDrop(lower);
    };
    ListDownlinkModel.prototype.onTakeEvent = function (upper) {
        this.listWillTake(upper);
        this._state.take(upper);
        this.listDidTake(upper);
    };
    ListDownlinkModel.prototype.onClearEvent = function () {
        this.listWillClear();
        this._state.clear();
        this.listDidClear();
    };
    ListDownlinkModel.prototype.listWillInsert = function (index, newValue) {
        for (var i = 0; i < this._views.length; i += 1) {
            newValue = this._views[i].listWillInsert(index, newValue);
        }
        return newValue;
    };
    ListDownlinkModel.prototype.listDidInsert = function (index, newValue) {
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].listDidInsert(index, newValue);
        }
    };
    ListDownlinkModel.prototype.listWillUpdate = function (index, newValue) {
        for (var i = 0; i < this._views.length; i += 1) {
            newValue = this._views[i].listWillUpdate(index, newValue);
        }
        return newValue;
    };
    ListDownlinkModel.prototype.listDidUpdate = function (index, newValue, oldValue) {
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].listDidUpdate(index, newValue, oldValue);
        }
    };
    ListDownlinkModel.prototype.listWillMove = function (fromIndex, toIndex, value) {
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].listWillMove(fromIndex, toIndex, value);
        }
    };
    ListDownlinkModel.prototype.listDidMove = function (fromIndex, toIndex, value) {
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].listDidMove(fromIndex, toIndex, value);
        }
    };
    ListDownlinkModel.prototype.listWillRemove = function (index) {
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].listWillRemove(index);
        }
    };
    ListDownlinkModel.prototype.listDidRemove = function (index, oldValue) {
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].listDidRemove(index, oldValue);
        }
    };
    ListDownlinkModel.prototype.listWillDrop = function (lower) {
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].listWillDrop(lower);
        }
    };
    ListDownlinkModel.prototype.listDidDrop = function (lower) {
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].listDidDrop(lower);
        }
    };
    ListDownlinkModel.prototype.listWillTake = function (upper) {
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].listWillTake(upper);
        }
    };
    ListDownlinkModel.prototype.listDidTake = function (upper) {
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].listDidTake(upper);
        }
    };
    ListDownlinkModel.prototype.listWillClear = function () {
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].listWillClear();
        }
    };
    ListDownlinkModel.prototype.listDidClear = function () {
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].listDidClear();
        }
    };
    return ListDownlinkModel;
}(DownlinkModel));
var ListDownlink = (function (_super) {
    __extends(ListDownlink, _super);
    function ListDownlink(context, owner, init, hostUri, nodeUri, laneUri, prio, rate, body, flags, delegate, valueForm, state0) {
        if (flags === void 0) { flags = 3; }
        if (delegate === void 0) { delegate = {}; }
        var _this = _super.call(this, context, owner, init, hostUri, nodeUri, laneUri, prio, rate, body, flags, delegate) || this;
        if (init) {
            delegate.willInsert = init.willInsert || delegate.willInsert;
            delegate.didInsert = init.didInsert || delegate.didInsert;
            delegate.willUpdate = init.willUpdate || delegate.willUpdate;
            delegate.didUpdate = init.didUpdate || delegate.didUpdate;
            delegate.willMove = init.willMove || delegate.willMove;
            delegate.didMove = init.didMove || delegate.didMove;
            delegate.willRemove = init.willRemove || delegate.willRemove;
            delegate.didRemove = init.didRemove || delegate.didRemove;
            delegate.willDrop = init.willDrop || delegate.willDrop;
            delegate.didDrop = init.didDrop || delegate.didDrop;
            delegate.willTake = init.willTake || delegate.willTake;
            delegate.didTake = init.didTake || delegate.didTake;
            delegate.willClear = init.willClear || delegate.willClear;
            delegate.didClear = init.didClear || delegate.didClear;
            valueForm = init.valueForm ? init.valueForm : valueForm;
        }
        _this._valueForm = valueForm || Form.Value;
        _this._state0 = state0;
        return _this;
    }
    ListDownlink.prototype.copy = function (context, owner, hostUri, nodeUri, laneUri, prio, rate, body, flags, delegate, valueForm, state0) {
        if (arguments.length === 10) {
            valueForm = this._valueForm;
            state0 = this._state0;
        }
        return new ListDownlink(context, owner, undefined, hostUri, nodeUri, laneUri, prio, rate, body, flags, delegate, valueForm, state0);
    };
    ListDownlink.prototype.type = function () {
        return 'list';
    };
    ListDownlink.prototype.valueForm = function (valueForm) {
        if (valueForm === undefined) {
            return this._valueForm;
        }
        else {
            return this.copy(this._context, this._owner, this._hostUri, this._nodeUri, this._laneUri, this._prio, this._rate, this._body, this._flags, this.delegate, valueForm, this._state0);
        }
    };
    ListDownlink.prototype.isEmpty = function () {
        return this._model.isEmpty();
    };
    Object.defineProperty(ListDownlink.prototype, "length", {
        get: function () {
            return this._model.length;
        },
        enumerable: true,
        configurable: true
    });
    ListDownlink.prototype.get = function (index, id) {
        var value = this._model.get(index, id);
        return value.coerce(this._valueForm);
    };
    ListDownlink.prototype.getEntry = function (index, id) {
        var entry = this._model.getEntry(index, id);
        if (entry) {
            return [entry[0].coerce(this._valueForm), entry[1]];
        }
        return undefined;
    };
    ListDownlink.prototype.set = function (index, newObject, id) {
        var newValue = this._valueForm.mold(newObject);
        this._model.set(index, newValue, id);
        return this;
    };
    ListDownlink.prototype.insert = function (index, newObject, id) {
        var newValue = this._valueForm.mold(newObject);
        this._model.insert(index, newValue, id);
        return this;
    };
    ListDownlink.prototype.remove = function (index, id) {
        this._model.remove(index, id);
        return this;
    };
    ListDownlink.prototype.push = function () {
        var newObjects = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            newObjects[_i] = arguments[_i];
        }
        var newValues = new Array(newObjects.length);
        for (var i = 0; i < newObjects.length; i += 1) {
            newValues[i] = this._valueForm.mold(newObjects[i]);
        }
        return this._model.push.apply(this._model, newValues);
    };
    ListDownlink.prototype.pop = function () {
        var value = this._model.pop();
        return value.coerce(this._valueForm);
    };
    ListDownlink.prototype.unshift = function () {
        var newObjects = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            newObjects[_i] = arguments[_i];
        }
        var newValues = new Array(newObjects.length);
        for (var i = 0; i < newObjects.length; i += 1) {
            newValues[i] = this._valueForm.mold(newObjects[i]);
        }
        return this._model.unshift.apply(this._model, newValues);
    };
    ListDownlink.prototype.shift = function () {
        var value = this._model.shift();
        return value.coerce(this._valueForm);
    };
    ListDownlink.prototype.move = function (fromIndex, toIndex, id) {
        this._model.move(fromIndex, toIndex, id);
        return this;
    };
    ListDownlink.prototype.splice = function (start, deleteCount) {
        var newObjects = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            newObjects[_i - 2] = arguments[_i];
        }
        var newValues = new Array(newObjects.length);
        for (var i = 0; i < newObjects.length; i += 1) {
            newValues[i] = this._valueForm.mold(newObjects[i]);
        }
        var oldValues = (_a = this._model).splice.apply(_a, [start, deleteCount].concat(newValues));
        var oldObjects = new Array(oldValues.length);
        for (var i = 0; i < oldValues.length; i += 1) {
            oldObjects[i] = oldValues[i].coerce(this._valueForm);
        }
        return oldObjects;
        var _a;
    };
    ListDownlink.prototype.clear = function () {
        this._model.clear();
    };
    ListDownlink.prototype.forEach = function (callback, thisArg) {
        if (this._valueForm === Form.Value) {
            return this._model._state.forEach(callback, thisArg);
        }
        else {
            return this._model._state.forEach(function (value, index, tree, id) {
                var object = value.coerce(this._valueForm);
                return callback.call(thisArg, object, index, this, id);
            }, this);
        }
    };
    ListDownlink.prototype.values = function () {
        var cursor = this._model.values();
        if (this._valueForm === Form.Value) {
            return cursor;
        }
        else {
            return new FormCursor(cursor, this._valueForm);
        }
    };
    ListDownlink.prototype.keys = function () {
        return this._model.keys();
    };
    ListDownlink.prototype.entries = function () {
        var cursor = this._model.entries();
        if (this._valueForm === Form.Value) {
            return cursor;
        }
        else {
            return new FormPairCursor(cursor, Form.Value, this._valueForm);
        }
    };
    ListDownlink.prototype.snapshot = function () {
        return this._model.snapshot();
    };
    ListDownlink.prototype.setState = function (state) {
        this._model.setState(state);
    };
    ListDownlink.prototype.willInsert = function (willInsert) {
        if (willInsert === undefined) {
            return this.delegate.willInsert || null;
        }
        else {
            this.delegate.willInsert = willInsert || undefined;
            return this;
        }
    };
    ListDownlink.prototype.didInsert = function (didInsert) {
        if (didInsert === undefined) {
            return this.delegate.didInsert || null;
        }
        else {
            this.delegate.didInsert = didInsert || undefined;
            return this;
        }
    };
    ListDownlink.prototype.willUpdate = function (willUpdate) {
        if (willUpdate === undefined) {
            return this.delegate.willUpdate || null;
        }
        else {
            this.delegate.willUpdate = willUpdate || undefined;
            return this;
        }
    };
    ListDownlink.prototype.didUpdate = function (didUpdate) {
        if (didUpdate === undefined) {
            return this.delegate.didUpdate || null;
        }
        else {
            this.delegate.didUpdate = didUpdate || undefined;
            return this;
        }
    };
    ListDownlink.prototype.willMove = function (willMove) {
        if (willMove === undefined) {
            return this.delegate.willMove || null;
        }
        else {
            this.delegate.willMove = willMove || undefined;
            return this;
        }
    };
    ListDownlink.prototype.didMove = function (didMove) {
        if (didMove === undefined) {
            return this.delegate.didMove || null;
        }
        else {
            this.delegate.didMove = didMove || undefined;
            return this;
        }
    };
    ListDownlink.prototype.willRemove = function (willRemove) {
        if (willRemove === undefined) {
            return this.delegate.willRemove || null;
        }
        else {
            this.delegate.willRemove = willRemove || undefined;
            return this;
        }
    };
    ListDownlink.prototype.didRemove = function (didRemove) {
        if (didRemove === undefined) {
            return this.delegate.didRemove || null;
        }
        else {
            this.delegate.didRemove = didRemove || undefined;
            return this;
        }
    };
    ListDownlink.prototype.willDrop = function (willDrop) {
        if (willDrop === undefined) {
            return this.delegate.willDrop || null;
        }
        else {
            this.delegate.willDrop = willDrop || undefined;
            return this;
        }
    };
    ListDownlink.prototype.didDrop = function (didDrop) {
        if (didDrop === undefined) {
            return this.delegate.didDrop || null;
        }
        else {
            this.delegate.didDrop = didDrop || undefined;
            return this;
        }
    };
    ListDownlink.prototype.willTake = function (willTake) {
        if (willTake === undefined) {
            return this.delegate.willTake || null;
        }
        else {
            this.delegate.willTake = willTake || undefined;
            return this;
        }
    };
    ListDownlink.prototype.didTake = function (didTake) {
        if (didTake === undefined) {
            return this.delegate.didTake || null;
        }
        else {
            this.delegate.didTake = didTake || undefined;
            return this;
        }
    };
    ListDownlink.prototype.willClear = function (willClear) {
        if (willClear === undefined) {
            return this.delegate.willClear || null;
        }
        else {
            this.delegate.willClear = willClear || undefined;
            return this;
        }
    };
    ListDownlink.prototype.didClear = function (didClear) {
        if (didClear === undefined) {
            return this.delegate.didClear || null;
        }
        else {
            this.delegate.didClear = didClear || undefined;
            return this;
        }
    };
    ListDownlink.prototype.listWillInsert = function (index, newValue) {
        if (this.delegate.willInsert) {
            var newObject = newValue.coerce(this._valueForm);
            newObject = this.delegate.willInsert(index, newObject, this);
            if (newObject !== undefined) {
                newValue = this._valueForm.mold(newObject);
            }
        }
        return newValue;
    };
    ListDownlink.prototype.listDidInsert = function (index, newValue) {
        if (this.delegate.didInsert) {
            var newObject = newValue.coerce(this._valueForm);
            this.delegate.didInsert(index, newObject, this);
        }
    };
    ListDownlink.prototype.listWillUpdate = function (index, newValue) {
        if (this.delegate.willUpdate) {
            var newObject = newValue.coerce(this._valueForm);
            newObject = this.delegate.willUpdate(index, newObject, this);
            if (newObject !== undefined) {
                newValue = this._valueForm.mold(newObject);
            }
        }
        return newValue;
    };
    ListDownlink.prototype.listDidUpdate = function (index, newValue, oldValue) {
        if (this.delegate.didUpdate) {
            var newObject = newValue.coerce(this._valueForm);
            var oldObject = oldValue.coerce(this._valueForm);
            this.delegate.didUpdate(index, newObject, oldObject, this);
        }
    };
    ListDownlink.prototype.listWillMove = function (fromIndex, toIndex, value) {
        if (this.delegate.willMove) {
            var object = value.coerce(this._valueForm);
            this.delegate.willMove(fromIndex, toIndex, object, this);
        }
    };
    ListDownlink.prototype.listDidMove = function (fromIndex, toIndex, value) {
        if (this.delegate.didMove) {
            var object = value.coerce(this._valueForm);
            this.delegate.didMove(fromIndex, toIndex, object, this);
        }
    };
    ListDownlink.prototype.listWillRemove = function (index) {
        if (this.delegate.willRemove) {
            this.delegate.willRemove(index, this);
        }
    };
    ListDownlink.prototype.listDidRemove = function (index, oldValue) {
        if (this.delegate.didRemove) {
            var oldObject = oldValue.coerce(this._valueForm);
            this.delegate.didRemove(index, oldObject, this);
        }
    };
    ListDownlink.prototype.listWillDrop = function (lower) {
        if (this.delegate.willDrop) {
            this.delegate.willDrop(lower, this);
        }
    };
    ListDownlink.prototype.listDidDrop = function (lower) {
        if (this.delegate.didDrop) {
            this.delegate.didDrop(lower, this);
        }
    };
    ListDownlink.prototype.listWillTake = function (upper) {
        if (this.delegate.willTake) {
            this.delegate.willTake(upper, this);
        }
    };
    ListDownlink.prototype.listDidTake = function (upper) {
        if (this.delegate.didTake) {
            this.delegate.didTake(upper, this);
        }
    };
    ListDownlink.prototype.listWillClear = function () {
        if (this.delegate.willClear) {
            this.delegate.willClear(this);
        }
    };
    ListDownlink.prototype.listDidClear = function () {
        if (this.delegate.didClear) {
            this.delegate.didClear(this);
        }
    };
    ListDownlink.prototype.initialState = function (state0) {
        if (state0 === undefined) {
            return this._state0 || null;
        }
        else {
            return this.copy(this._context, this._owner, this._hostUri, this._nodeUri, this._laneUri, this._prio, this._rate, this._body, this._flags, this.delegate, this._valueForm, state0 || undefined);
        }
    };
    ListDownlink.prototype.didAliasModel = function () {
        this.onLinkedResponse();
        this._model._state.forEach(function (value, index) {
            this.listDidInsert(index, value);
        }, this);
        this.onSyncedResponse();
    };
    ListDownlink.prototype.open = function () {
        var laneUri = this._laneUri;
        if (laneUri.isEmpty()) {
            throw new Error('no lane');
        }
        var nodeUri = this._nodeUri;
        if (nodeUri.isEmpty()) {
            throw new Error('no node');
        }
        var hostUri = this._hostUri;
        if (hostUri.isEmpty()) {
            hostUri = nodeUri.base();
            nodeUri = Uri.unresolve(hostUri, nodeUri);
        }
        var model = this._context.getDownlink(hostUri, nodeUri, laneUri);
        if (model) {
            if (!(model instanceof ListDownlinkModel)) {
                throw new Error('downlink type mismatch');
            }
            model.addDownlink(this);
            this._model = model;
            this.didAliasModel();
        }
        else {
            model = new ListDownlinkModel(this._context, hostUri, nodeUri, laneUri, this._prio, this._rate, this._body, this._state0);
            model.addDownlink(this);
            this._context.openDownlink(model);
            this._model = model;
        }
        if (this._owner) {
            this._owner.addDownlink(this);
        }
        return this;
    };
    return ListDownlink;
}(Downlink));
var ListDownlinkRecord = (function (_super) {
    __extends(ListDownlinkRecord, _super);
    function ListDownlinkRecord(downlink) {
        var _this = _super.call(this) || this;
        _this._downlink = downlink;
        return _this;
    }
    Object.defineProperty(ListDownlinkRecord.prototype, "downlink", {
        get: function () {
            return this._downlink;
        },
        enumerable: true,
        configurable: true
    });
    ListDownlinkRecord.prototype.isEmpty = function () {
        return this._downlink.isEmpty();
    };
    ListDownlinkRecord.prototype.isArray = function () {
        return true;
    };
    ListDownlinkRecord.prototype.isObject = function () {
        return this._downlink.isEmpty();
    };
    Object.defineProperty(ListDownlinkRecord.prototype, "length", {
        get: function () {
            return this._downlink.length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ListDownlinkRecord.prototype, "size", {
        get: function () {
            return this._downlink.length;
        },
        enumerable: true,
        configurable: true
    });
    ListDownlinkRecord.prototype.has = function (key) {
        return false;
    };
    ListDownlinkRecord.prototype.get = function (key) {
        return Value.Absent;
    };
    ListDownlinkRecord.prototype.getAttr = function (key) {
        return Value.Absent;
    };
    ListDownlinkRecord.prototype.getItem = function (index) {
        if (index instanceof Num) {
            index = index.value;
        }
        var n = this._downlink.length;
        if (index < 0) {
            index = n + index;
        }
        index = Math.min(Math.max(0, index), n - 1);
        if (index >= 0) {
            return this._downlink.get(index);
        }
        return Item.Absent;
    };
    ListDownlinkRecord.prototype.set = function (key, newValue) {
        throw new Error('unsupported');
    };
    ListDownlinkRecord.prototype.setAttr = function (key, newValue) {
        throw new Error('unsupported');
    };
    ListDownlinkRecord.prototype.setItem = function (index, newItem) {
        if (index instanceof Num) {
            index = index.value;
        }
        var n = this._downlink.length;
        if (index < 0) {
            index = n + index;
        }
        index = Math.min(Math.max(0, index), n - 1);
        if (index >= 0) {
            this._downlink.set(index, Value.fromAny(newItem));
        }
        return this;
    };
    ListDownlinkRecord.prototype.push = function () {
        var newItems = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            newItems[_i] = arguments[_i];
        }
        return this._downlink.push.apply(this._downlink, arguments);
    };
    ListDownlinkRecord.prototype.splice = function (start, deleteCount) {
        var newItems = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            newItems[_i - 2] = arguments[_i];
        }
        return this._downlink.splice.apply(this._downlink, arguments);
    };
    ListDownlinkRecord.prototype.delete = function (key) {
        return Item.Absent;
    };
    ListDownlinkRecord.prototype.clear = function () {
        this._downlink.clear();
    };
    ListDownlinkRecord.prototype.forEach = function (callback, thisArg) {
        return this._downlink.forEach(function (value, index) {
            return callback.call(thisArg, value, index);
        });
    };
    return ListDownlinkRecord;
}(Record));

var MapDownlinkModel = (function (_super) {
    __extends(MapDownlinkModel, _super);
    function MapDownlinkModel(context, hostUri, nodeUri, laneUri, prio, rate, body, state) {
        if (state === void 0) { state = new BTree(); }
        var _this = _super.call(this, context, hostUri, nodeUri, laneUri, prio, rate, body) || this;
        _this._state = state;
        return _this;
    }
    MapDownlinkModel.prototype.type = function () {
        return 'map';
    };
    Object.defineProperty(MapDownlinkModel.prototype, "size", {
        get: function () {
            return this._state.size;
        },
        enumerable: true,
        configurable: true
    });
    MapDownlinkModel.prototype.isEmpty = function () {
        return this._state.isEmpty();
    };
    MapDownlinkModel.prototype.has = function (key) {
        return this._state.has(key);
    };
    MapDownlinkModel.prototype.get = function (key) {
        return this._state.get(key) || Value.Absent;
    };
    MapDownlinkModel.prototype.getEntry = function (index) {
        return this._state.getEntry(index);
    };
    MapDownlinkModel.prototype.set = function (key, newValue) {
        newValue = this.mapWillUpdate(key, newValue);
        var oldValue = this._state.get(key) || Value.Absent;
        this._state.set(key, newValue);
        this.mapDidUpdate(key, newValue, oldValue);
        var header = Record.empty(1).slot('key', key);
        this.command(Attr.of('update', header).concat(newValue));
        return this;
    };
    MapDownlinkModel.prototype.delete = function (key) {
        if (this._state.has(key)) {
            this.mapWillRemove(key);
            var oldValue = this._state.get(key) || Value.Absent;
            this._state.delete(key);
            this.mapDidRemove(key, oldValue);
            var header = Record.empty(1).slot('key', key);
            this.command(Record.empty(1).attr('remove', header));
            return true;
        }
        else {
            return false;
        }
    };
    MapDownlinkModel.prototype.drop = function (lower) {
        this.mapWillDrop(lower);
        this._state.drop(lower);
        this.mapDidDrop(lower);
        this.command(Record.empty(1).attr('drop', lower));
        return this;
    };
    MapDownlinkModel.prototype.take = function (upper) {
        this.mapWillTake(upper);
        this._state.take(upper);
        this.mapDidTake(upper);
        this.command(Record.empty(1).attr('take', upper));
        return this;
    };
    MapDownlinkModel.prototype.clear = function () {
        this.mapWillClear();
        this._state.clear();
        this.mapDidClear();
        this.command(Record.empty(1).attr('clear'));
    };
    MapDownlinkModel.prototype.forEach = function (callback, thisArg) {
        return this._state.forEach(function (key, value) {
            return callback.call(thisArg, key, value, this);
        }, this);
    };
    MapDownlinkModel.prototype.keys = function () {
        return this._state.keys();
    };
    MapDownlinkModel.prototype.values = function () {
        return this._state.values();
    };
    MapDownlinkModel.prototype.entries = function () {
        return this._state.entries();
    };
    MapDownlinkModel.prototype.snapshot = function () {
        return this._state.clone();
    };
    MapDownlinkModel.prototype.setState = function (state) {
        this._state = state;
    };
    MapDownlinkModel.prototype.onEventMessage = function (message, host) {
        _super.prototype.onEventMessage.call(this, message, host);
        var event = message.body();
        var tag = event.tag;
        if (tag === 'update') {
            var header = event.head().toValue();
            this.onUpdateEvent(header.get('key'), event.body());
        }
        else if (tag === 'remove') {
            var header = event.head().toValue();
            this.onRemoveEvent(header.get('key'));
        }
        else if (tag === 'drop') {
            var header = event.head().toValue();
            this.onDropEvent(header.numberValue(0));
        }
        else if (tag === 'take') {
            var header = event.head().toValue();
            this.onTakeEvent(header.numberValue(0));
        }
        else if (tag === 'clear') {
            this.onClearEvent();
        }
    };
    MapDownlinkModel.prototype.onUpdateEvent = function (key, newValue) {
        newValue = this.mapWillUpdate(key, newValue);
        var oldValue = this._state.get(key) || Value.Absent;
        this._state.set(key, newValue);
        this.mapDidUpdate(key, newValue, oldValue);
    };
    MapDownlinkModel.prototype.onRemoveEvent = function (key) {
        this.mapWillRemove(key);
        var oldValue = this._state.get(key) || Value.Absent;
        this._state.delete(key);
        this.mapDidRemove(key, oldValue);
    };
    MapDownlinkModel.prototype.onDropEvent = function (lower) {
        this.mapWillDrop(lower);
        this._state.drop(lower);
        this.mapDidDrop(lower);
    };
    MapDownlinkModel.prototype.onTakeEvent = function (upper) {
        this.mapWillTake(upper);
        this._state.take(upper);
        this.mapDidTake(upper);
    };
    MapDownlinkModel.prototype.onClearEvent = function () {
        this.mapWillClear();
        this._state.clear();
        this.mapDidClear();
    };
    MapDownlinkModel.prototype.mapWillUpdate = function (key, newValue) {
        for (var i = 0; i < this._views.length; i += 1) {
            newValue = this._views[i].mapWillUpdate(key, newValue);
        }
        return newValue;
    };
    MapDownlinkModel.prototype.mapDidUpdate = function (key, newValue, oldValue) {
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].mapDidUpdate(key, newValue, oldValue);
        }
    };
    MapDownlinkModel.prototype.mapWillRemove = function (key) {
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].mapWillRemove(key);
        }
    };
    MapDownlinkModel.prototype.mapDidRemove = function (key, oldValue) {
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].mapDidRemove(key, oldValue);
        }
    };
    MapDownlinkModel.prototype.mapWillDrop = function (lower) {
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].mapWillDrop(lower);
        }
    };
    MapDownlinkModel.prototype.mapDidDrop = function (lower) {
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].mapDidDrop(lower);
        }
    };
    MapDownlinkModel.prototype.mapWillTake = function (upper) {
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].mapWillTake(upper);
        }
    };
    MapDownlinkModel.prototype.mapDidTake = function (upper) {
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].mapDidTake(upper);
        }
    };
    MapDownlinkModel.prototype.mapWillClear = function () {
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].mapWillClear();
        }
    };
    MapDownlinkModel.prototype.mapDidClear = function () {
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].mapDidClear();
        }
    };
    return MapDownlinkModel;
}(DownlinkModel));
var MapDownlink = (function (_super) {
    __extends(MapDownlink, _super);
    function MapDownlink(context, owner, init, hostUri, nodeUri, laneUri, prio, rate, body, flags, delegate, keyForm, valueForm, state0) {
        if (flags === void 0) { flags = 3; }
        if (delegate === void 0) { delegate = {}; }
        var _this = _super.call(this, context, owner, init, hostUri, nodeUri, laneUri, prio, rate, body, flags, delegate) || this;
        if (init) {
            delegate.willUpdate = init.willUpdate || delegate.willUpdate;
            delegate.didUpdate = init.didUpdate || delegate.didUpdate;
            delegate.willRemove = init.willRemove || delegate.willRemove;
            delegate.didRemove = init.didRemove || delegate.didRemove;
            delegate.willDrop = init.willDrop || delegate.willDrop;
            delegate.didDrop = init.didDrop || delegate.didDrop;
            delegate.willTake = init.willTake || delegate.willTake;
            delegate.didTake = init.didTake || delegate.didTake;
            delegate.willClear = init.willClear || delegate.willClear;
            delegate.didClear = init.didClear || delegate.didClear;
            keyForm = init.keyForm ? init.keyForm : keyForm;
            valueForm = init.valueForm ? init.valueForm : valueForm;
        }
        _this._keyForm = keyForm || Form.Value;
        _this._valueForm = valueForm || Form.Value;
        _this._state0 = state0;
        return _this;
    }
    MapDownlink.prototype.copy = function (context, owner, hostUri, nodeUri, laneUri, prio, rate, body, flags, delegate, keyForm, valueForm, state0) {
        if (arguments.length === 10) {
            state0 = this._state0;
            keyForm = this._keyForm;
            valueForm = this._valueForm;
        }
        return new MapDownlink(context, owner, undefined, hostUri, nodeUri, laneUri, prio, rate, body, flags, delegate, keyForm, valueForm, state0);
    };
    MapDownlink.prototype.type = function () {
        return 'map';
    };
    MapDownlink.prototype.keyForm = function (keyForm) {
        if (keyForm === undefined) {
            return this._keyForm;
        }
        else {
            return this.copy(this._context, this._owner, this._hostUri, this._nodeUri, this._laneUri, this._prio, this._rate, this._body, this._flags, this.delegate, keyForm, this._valueForm, this._state0);
        }
    };
    MapDownlink.prototype.valueForm = function (valueForm) {
        if (valueForm === undefined) {
            return this._valueForm;
        }
        else {
            return this.copy(this._context, this._owner, this._hostUri, this._nodeUri, this._laneUri, this._prio, this._rate, this._body, this._flags, this.delegate, this._keyForm, valueForm, this._state0);
        }
    };
    Object.defineProperty(MapDownlink.prototype, "size", {
        get: function () {
            return this._model.size;
        },
        enumerable: true,
        configurable: true
    });
    MapDownlink.prototype.isEmpty = function () {
        return this._model.isEmpty();
    };
    MapDownlink.prototype.has = function (key) {
        var keyObject = this._keyForm.mold(key);
        return this._model.has(keyObject);
    };
    MapDownlink.prototype.get = function (key) {
        var keyObject = this._keyForm.mold(key);
        var value = this._model.get(keyObject);
        return value.coerce(this._valueForm);
    };
    MapDownlink.prototype.getEntry = function (index) {
        var entry = this._model.getEntry(index);
        if (entry) {
            return [entry[0].coerce(this._keyForm), entry[1].coerce(this._valueForm)];
        }
        return undefined;
    };
    MapDownlink.prototype.set = function (key, newValue) {
        var keyObject = this._keyForm.mold(key);
        var newObject = this._valueForm.mold(newValue);
        this._model.set(keyObject, newObject);
        return this;
    };
    MapDownlink.prototype.delete = function (key) {
        var keyObject = this._keyForm.mold(key);
        return this._model.delete(keyObject);
    };
    MapDownlink.prototype.drop = function (lower) {
        this._model.drop(lower);
        return this;
    };
    MapDownlink.prototype.take = function (upper) {
        this._model.take(upper);
        return this;
    };
    MapDownlink.prototype.clear = function () {
        this._model.clear();
    };
    MapDownlink.prototype.forEach = function (callback, thisArg) {
        if (this._keyForm === Form.Value && this._valueForm === Form.Value) {
            return this._model._state.forEach(callback, thisArg);
        }
        else {
            return this._model._state.forEach(function (key, value) {
                var keyObject = key.coerce(this._keyForm);
                var object = value.coerce(this._valueForm);
                return callback.call(thisArg, keyObject, object, this);
            }, this);
        }
    };
    MapDownlink.prototype.keys = function () {
        var cursor = this._model.keys();
        if (this._keyForm === Form.Value) {
            return cursor;
        }
        else {
            return new FormCursor(cursor, this._keyForm);
        }
    };
    MapDownlink.prototype.values = function () {
        var cursor = this._model.values();
        if (this._valueForm === Form.Value) {
            return cursor;
        }
        else {
            return new FormCursor(cursor, this._valueForm);
        }
    };
    MapDownlink.prototype.entries = function () {
        var cursor = this._model.entries();
        if (this._keyForm === Form.Value && this._valueForm === Form.Value) {
            return cursor;
        }
        else {
            return new FormPairCursor(cursor, this._keyForm, this._valueForm);
        }
    };
    MapDownlink.prototype.snapshot = function () {
        return this._model.snapshot();
    };
    MapDownlink.prototype.setState = function (state) {
        this._model.setState(state);
    };
    MapDownlink.prototype.willUpdate = function (willUpdate) {
        if (willUpdate === undefined) {
            return this.delegate.willUpdate || null;
        }
        else {
            this.delegate.willUpdate = willUpdate || undefined;
            return this;
        }
    };
    MapDownlink.prototype.didUpdate = function (didUpdate) {
        if (didUpdate === undefined) {
            return this.delegate.didUpdate || null;
        }
        else {
            this.delegate.didUpdate = didUpdate || undefined;
            return this;
        }
    };
    MapDownlink.prototype.willRemove = function (willRemove) {
        if (willRemove === undefined) {
            return this.delegate.willRemove || null;
        }
        else {
            this.delegate.willRemove = willRemove || undefined;
            return this;
        }
    };
    MapDownlink.prototype.didRemove = function (didRemove) {
        if (didRemove === undefined) {
            return this.delegate.didRemove || null;
        }
        else {
            this.delegate.didRemove = didRemove || undefined;
            return this;
        }
    };
    MapDownlink.prototype.willDrop = function (willDrop) {
        if (willDrop === undefined) {
            return this.delegate.willDrop || null;
        }
        else {
            this.delegate.willDrop = willDrop || undefined;
            return this;
        }
    };
    MapDownlink.prototype.didDrop = function (didDrop) {
        if (didDrop === undefined) {
            return this.delegate.didDrop || null;
        }
        else {
            this.delegate.didDrop = didDrop || undefined;
            return this;
        }
    };
    MapDownlink.prototype.willTake = function (willTake) {
        if (willTake === undefined) {
            return this.delegate.willTake || null;
        }
        else {
            this.delegate.willTake = willTake || undefined;
            return this;
        }
    };
    MapDownlink.prototype.didTake = function (didTake) {
        if (didTake === undefined) {
            return this.delegate.didTake || null;
        }
        else {
            this.delegate.didTake = didTake || undefined;
            return this;
        }
    };
    MapDownlink.prototype.willClear = function (willClear) {
        if (willClear === undefined) {
            return this.delegate.willClear || null;
        }
        else {
            this.delegate.willClear = willClear || undefined;
            return this;
        }
    };
    MapDownlink.prototype.didClear = function (didClear) {
        if (didClear === undefined) {
            return this.delegate.didClear || null;
        }
        else {
            this.delegate.didClear = didClear || undefined;
            return this;
        }
    };
    MapDownlink.prototype.mapWillUpdate = function (key, newValue) {
        if (this.delegate.willUpdate) {
            var keyObject = key.coerce(this._keyForm);
            var newObject = newValue.coerce(this._valueForm);
            newObject = this.delegate.willUpdate(keyObject, newObject, this);
            if (newObject !== undefined) {
                newValue = this._valueForm.mold(newObject);
            }
        }
        return newValue;
    };
    MapDownlink.prototype.mapDidUpdate = function (key, newValue, oldValue) {
        if (this.delegate.didUpdate) {
            var keyObject = key.coerce(this._keyForm);
            var newObject = newValue.coerce(this._valueForm);
            var oldObject = oldValue.coerce(this._valueForm);
            this.delegate.didUpdate(keyObject, newObject, oldObject, this);
        }
    };
    MapDownlink.prototype.mapWillRemove = function (key) {
        if (this.delegate.willRemove) {
            var keyObject = key.coerce(this._keyForm);
            this.delegate.willRemove(keyObject, this);
        }
    };
    MapDownlink.prototype.mapDidRemove = function (key, oldValue) {
        if (this.delegate.didRemove) {
            var keyObject = key.coerce(this._keyForm);
            var oldObject = oldValue.coerce(this._valueForm);
            this.delegate.didRemove(keyObject, oldObject, this);
        }
    };
    MapDownlink.prototype.mapWillDrop = function (lower) {
        if (this.delegate.willDrop) {
            this.delegate.willDrop(lower, this);
        }
    };
    MapDownlink.prototype.mapDidDrop = function (lower) {
        if (this.delegate.didDrop) {
            this.delegate.didDrop(lower, this);
        }
    };
    MapDownlink.prototype.mapWillTake = function (upper) {
        if (this.delegate.willTake) {
            this.delegate.willTake(upper, this);
        }
    };
    MapDownlink.prototype.mapDidTake = function (upper) {
        if (this.delegate.didTake) {
            this.delegate.didTake(upper, this);
        }
    };
    MapDownlink.prototype.mapWillClear = function () {
        if (this.delegate.willClear) {
            this.delegate.willClear(this);
        }
    };
    MapDownlink.prototype.mapDidClear = function () {
        if (this.delegate.didClear) {
            this.delegate.didClear(this);
        }
    };
    MapDownlink.prototype.initialState = function (state0) {
        if (state0 === undefined) {
            return this._state0 || null;
        }
        else {
            return this.copy(this._context, this._owner, this._hostUri, this._nodeUri, this._laneUri, this._prio, this._rate, this._body, this._flags, this.delegate, this._keyForm, this._valueForm, state0 || undefined);
        }
    };
    MapDownlink.prototype.didAliasModel = function () {
        this.onLinkedResponse();
        this._model._state.forEach(function (value, key) {
            this.mapDidUpdate(key, value, undefined);
        }, this);
        this.onSyncedResponse();
    };
    MapDownlink.prototype.open = function () {
        var laneUri = this._laneUri;
        if (laneUri.isEmpty()) {
            throw new Error('no lane');
        }
        var nodeUri = this._nodeUri;
        if (nodeUri.isEmpty()) {
            throw new Error('no node');
        }
        var hostUri = this._hostUri;
        if (hostUri.isEmpty()) {
            hostUri = nodeUri.base();
            nodeUri = Uri.unresolve(hostUri, nodeUri);
        }
        var model = this._context.getDownlink(hostUri, nodeUri, laneUri);
        if (model) {
            if (!(model instanceof MapDownlinkModel)) {
                throw new Error('downlink type mismatch');
            }
            model.addDownlink(this);
            this._model = model;
            this.didAliasModel();
        }
        else {
            model = new MapDownlinkModel(this._context, hostUri, nodeUri, laneUri, this._prio, this._rate, this._body, this._state0);
            model.addDownlink(this);
            this._context.openDownlink(model);
            this._model = model;
        }
        if (this._owner) {
            this._owner.addDownlink(this);
        }
        return this;
    };
    return MapDownlink;
}(Downlink));
var MapDownlinkRecord = (function (_super) {
    __extends(MapDownlinkRecord, _super);
    function MapDownlinkRecord(downlink) {
        var _this = _super.call(this) || this;
        _this._downlink = downlink;
        return _this;
    }
    Object.defineProperty(MapDownlinkRecord.prototype, "downlink", {
        get: function () {
            return this._downlink;
        },
        enumerable: true,
        configurable: true
    });
    MapDownlinkRecord.prototype.isEmpty = function () {
        return this._downlink.isEmpty();
    };
    MapDownlinkRecord.prototype.isArray = function () {
        return this._downlink.isEmpty();
    };
    MapDownlinkRecord.prototype.isObject = function () {
        return true;
    };
    Object.defineProperty(MapDownlinkRecord.prototype, "length", {
        get: function () {
            return this._downlink.size;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MapDownlinkRecord.prototype, "size", {
        get: function () {
            return this._downlink.size;
        },
        enumerable: true,
        configurable: true
    });
    MapDownlinkRecord.prototype.has = function (key) {
        return this._downlink.has(key);
    };
    MapDownlinkRecord.prototype.get = function (key) {
        return this._downlink.get(key);
    };
    MapDownlinkRecord.prototype.getAttr = function (key) {
        return Value.Absent;
    };
    MapDownlinkRecord.prototype.getItem = function (index) {
        if (index instanceof Num) {
            index = index.value;
        }
        var n = this._downlink.size;
        if (index < 0) {
            index = n + index;
        }
        index = Math.min(Math.max(0, index), n - 1);
        if (index >= 0) {
            var entry = this._downlink.getEntry(index);
            return Slot.of(entry[0], entry[1]);
        }
        return Item.Absent;
    };
    MapDownlinkRecord.prototype.set = function (key, newValue) {
        this._downlink.set(key, newValue);
        return this;
    };
    MapDownlinkRecord.prototype.setAttr = function (key, newValue) {
        throw new Error('unsupported');
    };
    MapDownlinkRecord.prototype.setItem = function (index, newItem) {
        throw new Error('unsupported');
    };
    MapDownlinkRecord.prototype.push = function () {
        var newItems = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            newItems[_i] = arguments[_i];
        }
        throw new Error('unsupported');
    };
    MapDownlinkRecord.prototype.splice = function (start, deleteCount) {
        var newItems = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            newItems[_i - 2] = arguments[_i];
        }
        throw new Error('unsupported');
    };
    MapDownlinkRecord.prototype.delete = function (key) {
        key = Value.fromAny(key);
        var oldValue = this._downlink.get(key);
        if (this._downlink.delete(key)) {
            return Slot.of(key, oldValue);
        }
        return Item.Absent;
    };
    MapDownlinkRecord.prototype.clear = function () {
        this._downlink.clear();
    };
    MapDownlinkRecord.prototype.forEach = function (callback, thisArg) {
        var index = 0;
        return this._downlink.forEach(function (key, value) {
            var result = callback.call(thisArg, Slot.of(key, value), index);
            index += 1;
            return result;
        });
    };
    return MapDownlinkRecord;
}(Record));

var ValueDownlinkModel = (function (_super) {
    __extends(ValueDownlinkModel, _super);
    function ValueDownlinkModel(context, hostUri, nodeUri, laneUri, prio, rate, body, state) {
        if (state === void 0) { state = Value.Absent; }
        var _this = _super.call(this, context, hostUri, nodeUri, laneUri, prio, rate, body) || this;
        _this._state = state;
        return _this;
    }
    ValueDownlinkModel.prototype.type = function () {
        return 'value';
    };
    ValueDownlinkModel.prototype.get = function () {
        return this._state;
    };
    ValueDownlinkModel.prototype.set = function (newValue) {
        newValue = this.valueWillSet(newValue);
        var oldValue = this._state;
        this.setState(newValue);
        this.valueDidSet(newValue, oldValue);
        this.command(newValue);
    };
    ValueDownlinkModel.prototype.setState = function (state) {
        this._state = state;
    };
    ValueDownlinkModel.prototype.onEventMessage = function (message, host) {
        _super.prototype.onEventMessage.call(this, message, host);
        this.onSetEvent(message.body());
    };
    ValueDownlinkModel.prototype.onSetEvent = function (newValue) {
        newValue = this.valueWillSet(newValue);
        var oldValue = this._state;
        this.setState(newValue);
        this.valueDidSet(newValue, oldValue);
    };
    ValueDownlinkModel.prototype.valueWillSet = function (newValue) {
        for (var i = 0; i < this._views.length; i += 1) {
            newValue = this._views[i].valueWillSet(newValue);
        }
        return newValue;
    };
    ValueDownlinkModel.prototype.valueDidSet = function (newValue, oldValue) {
        for (var i = 0; i < this._views.length; i += 1) {
            this._views[i].valueDidSet(newValue, oldValue);
        }
    };
    return ValueDownlinkModel;
}(DownlinkModel));
var ValueDownlink = (function (_super) {
    __extends(ValueDownlink, _super);
    function ValueDownlink(context, owner, init, hostUri, nodeUri, laneUri, prio, rate, body, flags, delegate, valueForm, state0) {
        if (flags === void 0) { flags = 3; }
        if (delegate === void 0) { delegate = {}; }
        if (state0 === void 0) { state0 = Value.Absent; }
        var _this = _super.call(this, context, owner, init, hostUri, nodeUri, laneUri, prio, rate, body, flags, delegate) || this;
        if (init) {
            delegate.willSet = init.willSet || delegate.willSet;
            delegate.didSet = init.didSet || delegate.didSet;
            valueForm = init.valueForm ? init.valueForm : valueForm;
        }
        _this._valueForm = valueForm || Form.Value;
        _this._state0 = state0;
        return _this;
    }
    ValueDownlink.prototype.copy = function (context, owner, hostUri, nodeUri, laneUri, prio, rate, body, flags, delegate, valueForm, state0) {
        if (arguments.length === 10) {
            state0 = this._state0;
            valueForm = this._valueForm;
        }
        return new ValueDownlink(context, owner, undefined, hostUri, nodeUri, laneUri, prio, rate, body, flags, delegate, valueForm, state0);
    };
    ValueDownlink.prototype.type = function () {
        return 'value';
    };
    ValueDownlink.prototype.valueForm = function (valueForm) {
        if (valueForm === undefined) {
            return this._valueForm;
        }
        else {
            return this.copy(this._context, this._owner, this._hostUri, this._nodeUri, this._laneUri, this._prio, this._rate, this._body, this._flags, this.delegate, valueForm, this._state0);
        }
    };
    ValueDownlink.prototype.get = function () {
        return this._model.get();
    };
    ValueDownlink.prototype.set = function (newObject) {
        var newValue = this._valueForm.mold(newObject);
        this._model.set(newValue);
    };
    ValueDownlink.prototype.setState = function (state) {
        this._model.setState(state);
    };
    ValueDownlink.prototype.willSet = function (willSet) {
        if (willSet === undefined) {
            return this.delegate.willSet || null;
        }
        else {
            this.delegate.willSet = willSet || undefined;
            return this;
        }
    };
    ValueDownlink.prototype.didSet = function (didSet) {
        if (didSet === undefined) {
            return this.delegate.didSet || null;
        }
        else {
            this.delegate.didSet = didSet || undefined;
            return this;
        }
    };
    ValueDownlink.prototype.valueWillSet = function (newValue) {
        if (this.delegate.willSet) {
            var newObject = newValue.coerce(this._valueForm);
            newObject = this.delegate.willSet(newObject, this);
            if (newObject !== undefined) {
                newValue = this._valueForm.mold(newObject);
            }
        }
        return newValue;
    };
    ValueDownlink.prototype.valueDidSet = function (newValue, oldValue) {
        if (this.delegate.didSet) {
            var newObject = newValue.coerce(this._valueForm);
            var oldObject = oldValue.coerce(this._valueForm);
            this.delegate.didSet(newObject, oldObject, this);
        }
    };
    ValueDownlink.prototype.initialState = function (state0) {
        if (state0 === undefined) {
            return this._state0;
        }
        else {
            return this.copy(this._context, this._owner, this._hostUri, this._nodeUri, this._laneUri, this._prio, this._rate, this._body, this._flags, this.delegate, this._valueForm, state0);
        }
    };
    ValueDownlink.prototype.didAliasModel = function () {
        this.onLinkedResponse();
        this.valueDidSet(this.get(), Value.Absent);
        this.onSyncedResponse();
    };
    ValueDownlink.prototype.open = function () {
        var laneUri = this._laneUri;
        if (laneUri.isEmpty()) {
            throw new Error('no lane');
        }
        var nodeUri = this._nodeUri;
        if (nodeUri.isEmpty()) {
            throw new Error('no node');
        }
        var hostUri = this._hostUri;
        if (hostUri.isEmpty()) {
            hostUri = nodeUri.base();
            nodeUri = Uri.unresolve(hostUri, nodeUri);
        }
        var model = this._context.getDownlink(hostUri, nodeUri, laneUri);
        if (model) {
            if (!(model instanceof ValueDownlinkModel)) {
                throw new Error('downlink type mismatch');
            }
            model.addDownlink(this);
            this._model = model;
            this.didAliasModel();
        }
        else {
            model = new ValueDownlinkModel(this._context, hostUri, nodeUri, laneUri, this._prio, this._rate, this._body, this._state0);
            model.addDownlink(this);
            this._context.openDownlink(model);
            this._model = model;
        }
        if (this._owner) {
            this._owner.addDownlink(this);
        }
        return this;
    };
    return ValueDownlink;
}(Downlink));
var ValueDownlinkRecord = (function (_super) {
    __extends(ValueDownlinkRecord, _super);
    function ValueDownlinkRecord(downlink) {
        var _this = _super.call(this) || this;
        _this._downlink = downlink;
        return _this;
    }
    Object.defineProperty(ValueDownlinkRecord.prototype, "downlink", {
        get: function () {
            return this._downlink;
        },
        enumerable: true,
        configurable: true
    });
    ValueDownlinkRecord.prototype.isEmpty = function () {
        var value = this._downlink.get();
        if (value instanceof Record) {
            return value.isEmpty();
        }
        else if (value.isDefined()) {
            return false;
        }
        else {
            return true;
        }
    };
    ValueDownlinkRecord.prototype.isArray = function () {
        var value = this._downlink.get();
        if (value instanceof Record) {
            return value.isArray();
        }
        else if (value.isDefined()) {
            return value instanceof Value;
        }
        else {
            return true;
        }
    };
    ValueDownlinkRecord.prototype.isObject = function () {
        var value = this._downlink.get();
        if (value instanceof Record) {
            return value.isObject();
        }
        else if (value.isDefined()) {
            return value instanceof Field;
        }
        else {
            return true;
        }
    };
    Object.defineProperty(ValueDownlinkRecord.prototype, "length", {
        get: function () {
            var value = this._downlink.get();
            if (value instanceof Record) {
                return value.length;
            }
            else if (value.isDefined()) {
                return 1;
            }
            else {
                return 0;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ValueDownlinkRecord.prototype, "size", {
        get: function () {
            var value = this._downlink.get();
            if (value instanceof Record) {
                return value.size;
            }
            else if (value.isDefined()) {
                return 1;
            }
            else {
                return 0;
            }
        },
        enumerable: true,
        configurable: true
    });
    ValueDownlinkRecord.prototype.has = function (key) {
        var value = this._downlink.get();
        if (value instanceof Record) {
            return value.has(key);
        }
        else {
            return false;
        }
    };
    ValueDownlinkRecord.prototype.get = function (key) {
        var value = this._downlink.get();
        if (value instanceof Record) {
            return value.get(key);
        }
        else {
            return Value.Absent;
        }
    };
    ValueDownlinkRecord.prototype.getAttr = function (key) {
        var value = this._downlink.get();
        if (value instanceof Record) {
            return value.getAttr(key);
        }
        else {
            return Value.Absent;
        }
    };
    ValueDownlinkRecord.prototype.getItem = function (index) {
        var value = this._downlink.get();
        if (value instanceof Record) {
            return value.getItem(index);
        }
        else {
            return value;
        }
    };
    ValueDownlinkRecord.prototype.set = function (key, newValue) {
        var value = this._downlink.get();
        if (value instanceof Record) {
            value.set(key, newValue);
        }
        else {
            throw new Error('unsupported');
        }
        return this;
    };
    ValueDownlinkRecord.prototype.setAttr = function (key, newValue) {
        var value = this._downlink.get();
        if (value instanceof Record) {
            value.setAttr(key, newValue);
        }
        else {
            throw new Error('unsupported');
        }
        return this;
    };
    ValueDownlinkRecord.prototype.setItem = function (index, newItem) {
        var value = this._downlink.get();
        if (value instanceof Record) {
            value.setItem(index, newItem);
        }
        else {
            this._downlink.set(Value.fromAny(newItem));
        }
        return this;
    };
    ValueDownlinkRecord.prototype.push = function () {
        var newItems = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            newItems[_i] = arguments[_i];
        }
        var value = this._downlink.get();
        if (value instanceof Record) {
            return value.push.apply(value, arguments);
        }
        else {
            throw new Error('unsupported');
        }
    };
    ValueDownlinkRecord.prototype.splice = function (start, deleteCount) {
        var newItems = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            newItems[_i - 2] = arguments[_i];
        }
        var value = this._downlink.get();
        if (value instanceof Record) {
            return value.splice.apply(value, arguments);
        }
        else {
            throw new Error('unsupported');
        }
    };
    ValueDownlinkRecord.prototype.delete = function (key) {
        var value = this._downlink.get();
        if (value instanceof Record) {
            return value.delete(key);
        }
        else {
            return Value.Absent;
        }
    };
    ValueDownlinkRecord.prototype.clear = function () {
        var value = this._downlink.get();
        if (value instanceof Record) {
            value.clear();
        }
        else {
            throw new Error('unsupported');
        }
    };
    ValueDownlinkRecord.prototype.forEach = function (callback, thisArg) {
        var value = this._downlink.get();
        return value.forEach(callback, thisArg);
    };
    return ValueDownlinkRecord;
}(Record));

var BaseRef = (function () {
    function BaseRef(context) {
        this._context = context;
        this._remote = undefined;
        this._downlinks = [];
        this.delegate = {};
    }
    BaseRef.prototype.isConnected = function () {
        return this._remote ? this._remote.isConnected() : false;
    };
    BaseRef.prototype.isAuthenticated = function () {
        return this._remote ? this._remote.isAuthenticated() : false;
    };
    Object.defineProperty(BaseRef.prototype, "session", {
        get: function () {
            return this._remote ? this._remote.session : Value.Absent;
        },
        enumerable: true,
        configurable: true
    });
    BaseRef.prototype.authenticate = function (credentials) {
        this._context.authenticate(this.hostUri(), credentials);
    };
    BaseRef.prototype.addDownlink = function (downlink) {
        if (this._downlinks.length === 0) {
            this.open();
        }
        this._downlinks.push(downlink);
    };
    BaseRef.prototype.removeDownlink = function (downlink) {
        var i = this._downlinks.indexOf(downlink);
        if (i >= 0) {
            this._downlinks.splice(i, 1);
            if (this._downlinks.length === 0) {
                this.close();
            }
        }
    };
    BaseRef.prototype.open = function () {
        this._context.openRef(this);
    };
    BaseRef.prototype.close = function () {
        this._context.closeRef(this);
    };
    BaseRef.prototype.closeUp = function () {
        var downlinks = this._downlinks;
        this._downlinks = [];
        for (var i = 0, n = downlinks.length; i < n; i += 1) {
            downlinks[i].close();
        }
    };
    BaseRef.prototype.didConnect = function (didConnect) {
        if (didConnect === undefined) {
            return this.delegate.didConnect || null;
        }
        else {
            this.delegate.didConnect = didConnect || undefined;
            return this;
        }
    };
    BaseRef.prototype.didAuthenticate = function (didAuthenticate) {
        if (didAuthenticate === undefined) {
            return this.delegate.didAuthenticate || null;
        }
        else {
            this.delegate.didAuthenticate = didAuthenticate || undefined;
            return this;
        }
    };
    BaseRef.prototype.didDeauthenticate = function (didDeauthenticate) {
        if (didDeauthenticate === undefined) {
            return this.delegate.didDeauthenticate || null;
        }
        else {
            this.delegate.didDeauthenticate = didDeauthenticate || undefined;
            return this;
        }
    };
    BaseRef.prototype.didDisconnect = function (didDisconnect) {
        if (didDisconnect === undefined) {
            return this.delegate.didDisconnect || null;
        }
        else {
            this.delegate.didDisconnect = didDisconnect || undefined;
            return this;
        }
    };
    BaseRef.prototype.didFail = function (didFail) {
        if (didFail === undefined) {
            return this.delegate.didFail || null;
        }
        else {
            this.delegate.didFail = didFail || undefined;
            return this;
        }
    };
    BaseRef.prototype.hostDidConnect = function (host) {
        this._remote = host;
        if (this.delegate.didConnect) {
            this.delegate.didConnect(host, this);
        }
    };
    BaseRef.prototype.hostDidAuthenticate = function (body, host) {
        if (this.delegate.didAuthenticate) {
            this.delegate.didAuthenticate(body, host, this);
        }
    };
    BaseRef.prototype.hostDidDeauthenticate = function (body, host) {
        if (this.delegate.didDeauthenticate) {
            this.delegate.didDeauthenticate(body, host, this);
        }
    };
    BaseRef.prototype.hostDidDisconnect = function (host) {
        this._remote = undefined;
        if (this.delegate.didDisconnect) {
            this.delegate.didDisconnect(host, this);
        }
    };
    BaseRef.prototype.hostDidFail = function (error, host) {
        if (this.delegate.didFail) {
            this.delegate.didFail(error, host, this);
        }
    };
    return BaseRef;
}());
var HostRef = (function (_super) {
    __extends(HostRef, _super);
    function HostRef(context, hostUri) {
        var _this = _super.call(this, context) || this;
        _this._hostUri = hostUri;
        return _this;
    }
    HostRef.prototype.hostUri = function () {
        return this._hostUri;
    };
    HostRef.prototype.nodeRef = function (nodeUri) {
        nodeUri = Uri.fromAny(nodeUri);
        return new NodeRef(this._context, this._hostUri, nodeUri);
    };
    HostRef.prototype.laneRef = function (nodeUri, laneUri) {
        nodeUri = Uri.fromAny(nodeUri);
        laneUri = Uri.fromAny(laneUri);
        return new LaneRef(this._context, this._hostUri, nodeUri, laneUri);
    };
    HostRef.prototype.downlink = function (init) {
        return new EventDownlink(this._context, this, init, this._hostUri);
    };
    HostRef.prototype.downlinkList = function (init) {
        return new ListDownlink(this._context, this, init, this._hostUri);
    };
    HostRef.prototype.downlinkMap = function (init) {
        return new MapDownlink(this._context, this, init, this._hostUri);
    };
    HostRef.prototype.downlinkValue = function (init) {
        return new ValueDownlink(this._context, this, init, this._hostUri);
    };
    HostRef.prototype.command = function (nodeUri, laneUri, body) {
        this._context.command(this._hostUri, nodeUri, laneUri, body);
    };
    return HostRef;
}(BaseRef));
var NodeRef = (function (_super) {
    __extends(NodeRef, _super);
    function NodeRef(context, hostUri, nodeUri) {
        var _this = _super.call(this, context) || this;
        _this._hostUri = hostUri;
        _this._nodeUri = nodeUri;
        return _this;
    }
    NodeRef.prototype.hostUri = function () {
        return this._hostUri;
    };
    NodeRef.prototype.nodeUri = function () {
        return this._nodeUri;
    };
    NodeRef.prototype.laneRef = function (laneUri) {
        laneUri = Uri.fromAny(laneUri);
        return new LaneRef(this._context, this._hostUri, this._nodeUri, laneUri);
    };
    NodeRef.prototype.downlink = function (init) {
        return new EventDownlink(this._context, this, init, this._hostUri, this._nodeUri);
    };
    NodeRef.prototype.downlinkList = function (init) {
        return new ListDownlink(this._context, this, init, this._hostUri, this._nodeUri);
    };
    NodeRef.prototype.downlinkMap = function (init) {
        return new MapDownlink(this._context, this, init, this._hostUri, this._nodeUri);
    };
    NodeRef.prototype.downlinkValue = function (init) {
        return new ValueDownlink(this._context, this, init, this._hostUri, this._nodeUri);
    };
    NodeRef.prototype.command = function (laneUri, body) {
        this._context.command(this._hostUri, this._nodeUri, laneUri, body);
    };
    return NodeRef;
}(BaseRef));
var LaneRef = (function (_super) {
    __extends(LaneRef, _super);
    function LaneRef(context, hostUri, nodeUri, laneUri) {
        var _this = _super.call(this, context) || this;
        _this._hostUri = hostUri;
        _this._nodeUri = nodeUri;
        _this._laneUri = laneUri;
        return _this;
    }
    LaneRef.prototype.hostUri = function () {
        return this._hostUri;
    };
    LaneRef.prototype.nodeUri = function () {
        return this._nodeUri;
    };
    LaneRef.prototype.laneUri = function () {
        return this._laneUri;
    };
    LaneRef.prototype.downlink = function (init) {
        return new EventDownlink(this._context, this, init, this._hostUri, this._nodeUri, this._laneUri);
    };
    LaneRef.prototype.downlinkList = function (init) {
        return new ListDownlink(this._context, this, init, this._hostUri, this._nodeUri, this._laneUri);
    };
    LaneRef.prototype.downlinkMap = function (init) {
        return new MapDownlink(this._context, this, init, this._hostUri, this._nodeUri, this._laneUri);
    };
    LaneRef.prototype.downlinkValue = function (init) {
        return new ValueDownlink(this._context, this, init, this._hostUri, this._nodeUri, this._laneUri);
    };
    LaneRef.prototype.command = function (body) {
        this._context.command(this._hostUri, this._nodeUri, this._laneUri, body);
    };
    return LaneRef;
}(BaseRef));

var DownlinkScope = (function (_super) {
    __extends(DownlinkScope, _super);
    function DownlinkScope(record) {
        var _this = _super.call(this, record) || this;
        _this._downlinks = [];
        return _this;
    }
    DownlinkScope.prototype.addDownlink = function (downlink) {
        this._downlinks.push(downlink);
    };
    DownlinkScope.prototype.removeDownlink = function (downlink) {
        var i = this._downlinks.indexOf(downlink);
        if (i >= 0) {
            this._downlinks.splice(i, 1);
        }
    };
    DownlinkScope.prototype.initDownlink = function (init, stack) {
        return init;
    };
    DownlinkScope.prototype.downlink = function (init, stack) {
        if (stack === void 0) { stack = this.stack(); }
        return new EventDownlink(this.downlinkContext, this, this.initDownlink(init, stack));
    };
    DownlinkScope.prototype.downlinkList = function (init, stack) {
        if (stack === void 0) { stack = this.stack(); }
        return new ListDownlink(this.downlinkContext, this, this.initDownlink(init, stack));
    };
    DownlinkScope.prototype.downlinkMap = function (init, stack) {
        if (stack === void 0) { stack = this.stack(); }
        return new MapDownlink(this.downlinkContext, this, this.initDownlink(init, stack));
    };
    DownlinkScope.prototype.downlinkValue = function (init, stack) {
        if (stack === void 0) { stack = this.stack(); }
        return new ValueDownlink(this.downlinkContext, this, this.initDownlink(init, stack));
    };
    DownlinkScope.prototype.importDownlink = function (value, stack) {
        var linkDef;
        var init;
        if (isDownlinkImport(value)) {
            var downlinkImport = value;
            var downlink = downlinkImport.downlink;
            linkDef = value.declaration;
            init = this.initDownlink(Downlink.InitForm.cast(linkDef.evaluate(stack).toValue()), stack);
            if (init) {
                if (downlink.hostUri().equals(init.hostUri)
                    && downlink.nodeUri().equals(init.nodeUri)
                    && downlink.laneUri().equals(init.laneUri)) {
                    return downlinkImport;
                }
                else {
                    downlink.close();
                }
            }
            else {
                downlink.close();
                return downlinkImport.declaration;
            }
        }
        else {
            linkDef = value;
            init = Downlink.InitForm.cast(linkDef.evaluate(stack).toValue());
        }
        if (init) {
            try {
                if (init.type === 'list') {
                    return new ListDownlinkImport(this, this.downlinkList(init).open(), linkDef);
                }
                else if (init.type === 'map') {
                    return new MapDownlinkImport(this, this.downlinkMap(init).open(), linkDef);
                }
                else if (init.type === 'value') {
                    return new ValueDownlinkImport(this, this.downlinkValue(init).open(), linkDef);
                }
            }
            catch (e) {
            }
        }
        return value;
    };
    DownlinkScope.prototype.materializeValue = function (value, stack) {
        if (value.tag === 'link') {
            var downlinkImport = this.importDownlink(value, stack);
            if (isDownlinkImport(downlinkImport)) {
                return downlinkImport;
            }
        }
        return value;
    };
    DownlinkScope.prototype.materializeItem = function (item, stack) {
        if (item instanceof Field) {
            var oldValue = item.value;
            var newValue = this.materializeValue(oldValue, stack);
            if (oldValue !== newValue) {
                return item.withValue(newValue);
            }
        }
        else if (item instanceof Value) {
            var oldValue = item;
            var newValue = this.materializeValue(oldValue, stack);
            if (oldValue !== newValue) {
                return newValue;
            }
        }
        return item;
    };
    DownlinkScope.prototype.materializeScope = function (stack) {
        if (stack === void 0) { stack = this.stack(); }
        var record = this._record;
        var n = record.length;
        var i = 0;
        while (i < n) {
            var oldItem = record.getItem(i);
            var newItem = this.materializeItem(oldItem, stack);
            if (newItem.isDefined()) {
                if (oldItem !== newItem) {
                    record.setItem(i, newItem);
                }
                i += 1;
            }
            else {
                record.splice(i, 1);
            }
        }
    };
    DownlinkScope.prototype.close = function () {
        var downlinks = this._downlinks;
        this._downlinks = [];
        for (var i = 0, n = downlinks.length; i < n; i += 1) {
            downlinks[i].close();
        }
    };
    return DownlinkScope;
}(RecordScope));
function isDownlinkImport(value) {
    return !!(value instanceof Record && value.declaration);
}
var ListDownlinkImport = (function (_super) {
    __extends(ListDownlinkImport, _super);
    function ListDownlinkImport(scope, downlink, declaration) {
        var _this = _super.call(this, downlink) || this;
        _this._scope = scope;
        _this._declaration = declaration.commit();
        _this.downlink.delegate = _this;
        return _this;
    }
    Object.defineProperty(ListDownlinkImport.prototype, "declaration", {
        get: function () {
            return this._declaration;
        },
        enumerable: true,
        configurable: true
    });
    ListDownlinkImport.prototype.didInsert = function (index, newValue) {
        this._scope.didChange(newValue, Value.Absent, index);
    };
    ListDownlinkImport.prototype.didUpdate = function (index, newValue, oldValue) {
        this._scope.didChange(newValue, oldValue, index);
    };
    ListDownlinkImport.prototype.didMove = function (fromIndex, toIndex, value) {
        this._scope.didChange(value, value, toIndex);
    };
    ListDownlinkImport.prototype.didRemove = function (index, oldValue) {
        this._scope.didChange(Value.Absent, oldValue, index);
    };
    ListDownlinkImport.prototype.didDrop = function (lower) {
        this._scope.didChange();
    };
    ListDownlinkImport.prototype.didTake = function (upper) {
        this._scope.didChange();
    };
    ListDownlinkImport.prototype.didClear = function () {
        this._scope.didChange();
    };
    return ListDownlinkImport;
}(ListDownlinkRecord));
var MapDownlinkImport = (function (_super) {
    __extends(MapDownlinkImport, _super);
    function MapDownlinkImport(scope, downlink, declaration) {
        var _this = _super.call(this, downlink) || this;
        _this._scope = scope;
        _this._declaration = declaration.commit();
        _this.downlink.delegate = _this;
        return _this;
    }
    Object.defineProperty(MapDownlinkImport.prototype, "declaration", {
        get: function () {
            return this._declaration;
        },
        enumerable: true,
        configurable: true
    });
    MapDownlinkImport.prototype.didUpdate = function (key, newValue, oldValue) {
        this._scope.didChange(Slot.of(key, newValue), Slot.of(key, oldValue));
    };
    MapDownlinkImport.prototype.didRemove = function (key, oldValue) {
        this._scope.didChange(Item.Absent, Slot.of(key, oldValue));
    };
    MapDownlinkImport.prototype.didDrop = function (lower) {
        this._scope.didChange();
    };
    MapDownlinkImport.prototype.didTake = function (upper) {
        this._scope.didChange();
    };
    MapDownlinkImport.prototype.didClear = function () {
        this._scope.didChange();
    };
    return MapDownlinkImport;
}(MapDownlinkRecord));
var ValueDownlinkImport = (function (_super) {
    __extends(ValueDownlinkImport, _super);
    function ValueDownlinkImport(scope, downlink, declaration) {
        var _this = _super.call(this, downlink) || this;
        _this._scope = scope;
        _this._declaration = declaration.commit();
        _this.downlink.delegate = _this;
        return _this;
    }
    Object.defineProperty(ValueDownlinkImport.prototype, "declaration", {
        get: function () {
            return this._declaration;
        },
        enumerable: true,
        configurable: true
    });
    ValueDownlinkImport.prototype.didSet = function (newValue, oldValue) {
        this._scope.didChange(newValue, oldValue);
    };
    return ValueDownlinkImport;
}(ValueDownlinkRecord));

var WebSocketHost = (function (_super) {
    __extends(WebSocketHost, _super);
    function WebSocketHost(context, hostUri, options) {
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, context, hostUri, options) || this;
        _this.onWebSocketOpen = _this.onWebSocketOpen.bind(_this);
        _this.onWebSocketMessage = _this.onWebSocketMessage.bind(_this);
        _this.onWebSocketClose = _this.onWebSocketClose.bind(_this);
        _this.onWebSocketError = _this.onWebSocketError.bind(_this);
        return _this;
    }
    Object.defineProperty(WebSocketHost.prototype, "WebSocket", {
        get: function () {
            return this._options.WebSocket
                || typeof WebSocket !== 'undefined' && WebSocket
                || typeof require === 'function' && require('ws')
                || undefined;
        },
        enumerable: true,
        configurable: true
    });
    WebSocketHost.prototype.isConnected = function () {
        return this._socket ? this._socket.readyState === this._socket.OPEN : false;
    };
    WebSocketHost.prototype.open = function () {
        this.clearReconnect();
        if (!this._socket) {
            var WebSocket_1 = this.WebSocket;
            if (!WebSocket_1) {
                throw new Error('undefined WebSocket');
            }
            var hostUri = this._hostUri;
            if (hostUri.scheme().name === 'swim') {
                hostUri = hostUri.scheme('ws');
            }
            else if (hostUri.scheme().name === 'swims') {
                hostUri = hostUri.scheme('wss');
            }
            if (this._options.protocols) {
                this._socket = new WebSocket_1(hostUri.toUri(), this._options.protocols);
            }
            else {
                this._socket = new WebSocket_1(hostUri.toUri());
            }
            this._socket.onopen = this.onWebSocketOpen;
            this._socket.onmessage = this.onWebSocketMessage;
            this._socket.onclose = this.onWebSocketClose;
            this._socket.onerror = this.onWebSocketError;
        }
    };
    WebSocketHost.prototype.close = function () {
        this.clearReconnect();
        this.clearIdle();
        if (this._socket) {
            this._socket.close();
            if (!this._context.isOnline()) {
                this.onWebSocketClose();
            }
        }
        else {
            _super.prototype.close.call(this);
        }
    };
    WebSocketHost.prototype.push = function (envelope) {
        if (this.isConnected()) {
            this.clearIdle();
            var text = envelope.toRecon();
            this._socket.send(text);
            this.watchIdle();
        }
        else if (envelope instanceof CommandMessage) {
            if (this._sendBuffer.length < this.sendBufferSize) {
                this._sendBuffer.push(envelope);
            }
            else {
                throw new Error('send buffer overflow');
            }
            this.open();
        }
    };
    WebSocketHost.prototype.onWebSocketOpen = function () {
        if (this.isConnected()) {
            var credentials = this.credentials;
            if (credentials.isDefined()) {
                var request = new AuthRequest(credentials);
                this.push(request);
            }
            this.onConnect();
            var envelope = void 0;
            while ((envelope = this._sendBuffer.shift()) && this.isConnected()) {
                this.push(envelope);
            }
            this.watchIdle();
        }
        else {
            this.close();
        }
    };
    WebSocketHost.prototype.onWebSocketMessage = function (message) {
        var data = message.data;
        if (typeof data === 'string') {
            var envelope = Envelope.parseRecon(data);
            if (envelope) {
                this.onEnvelope(envelope);
            }
            else {
                this.onUnknownEnvelope(data);
            }
        }
    };
    WebSocketHost.prototype.onWebSocketClose = function () {
        if (this._socket) {
            this._socket.onopen = undefined;
            this._socket.onmessage = undefined;
            this._socket.onclose = undefined;
            this._socket.onerror = undefined;
            this._socket = undefined;
        }
        this.onDisconnect();
        this.clearIdle();
        if (!this.isIdle()) {
            if (this._context.isOnline()) {
                this.reconnect();
            }
        }
        else {
            this.close();
        }
    };
    WebSocketHost.prototype.onWebSocketError = function () {
        this.onError();
        if (this._socket) {
            this._socket.close();
        }
    };
    return WebSocketHost;
}(RemoteHost));

var Client = (function () {
    function Client(options) {
        if (options === void 0) { options = {}; }
        this._options = options;
        this._hosts = new BTree();
        this._downlinks = new BTree();
        this._downlinkCount = 0;
        this._refs = [];
        this._online = true;
        this.delegate = {};
        this.onOnline = this.onOnline.bind(this);
        this.onOffline = this.onOffline.bind(this);
        this.watchOnline(!!options.keepOnline);
    }
    Client.prototype.isOnline = function (online) {
        if (online === undefined) {
            return this._online;
        }
        else {
            if (this._online !== online) {
                this._online = online;
                this._hosts.forEach(function (hostUri, host) {
                    if (online) {
                        host.open();
                    }
                    else {
                        host.close();
                    }
                }, this);
            }
            return this;
        }
    };
    Client.prototype.keepOnline = function (keepOnline) {
        if (keepOnline === undefined) {
            return !!this._options.keepOnline;
        }
        else {
            if (this._options.keepOnline !== keepOnline) {
                this._options.keepOnline = keepOnline;
                this.watchOnline(keepOnline);
            }
            return this;
        }
    };
    Client.prototype.watchOnline = function (keepOnline) {
        if (typeof window === 'object') {
            if (keepOnline) {
                window.addEventListener('online', this.onOnline);
                window.addEventListener('offline', this.onOffline);
            }
            else {
                window.removeEventListener('online', this.onOnline);
                window.removeEventListener('offline', this.onOffline);
            }
        }
    };
    Client.prototype.onOnline = function (event) {
        this.isOnline(true);
    };
    Client.prototype.onOffline = function (event) {
        this.isOnline(false);
    };
    Client.prototype.getHost = function (hostUri) {
        hostUri = Uri.fromAny(hostUri);
        return this._hosts.get(hostUri);
    };
    Client.prototype.openHost = function (hostUri) {
        hostUri = Uri.fromAny(hostUri);
        var host = this._hosts.get(hostUri);
        if (!host) {
            host = new WebSocketHost(this, hostUri, this._options);
            this._hosts.set(hostUri, host);
        }
        return host;
    };
    Client.prototype.closeHost = function (host) {
        if (this._hosts.get(host._hostUri)) {
            this._hosts.delete(host._hostUri);
            host.closeUp();
        }
    };
    Client.prototype.getDownlink = function (hostUri, nodeUri, laneUri) {
        var hostDownlinks = this._downlinks.get(hostUri);
        if (hostDownlinks) {
            var nodeDownlinks = hostDownlinks.get(nodeUri);
            if (nodeDownlinks) {
                return nodeDownlinks.get(laneUri);
            }
        }
        return undefined;
    };
    Client.prototype.openDownlink = function (downlink) {
        var hostUri = downlink.hostUri();
        var nodeUri = downlink.nodeUri();
        var laneUri = downlink.laneUri();
        var hostDownlinks = this._downlinks.get(hostUri);
        if (!hostDownlinks) {
            hostDownlinks = new BTree();
            this._downlinks.set(hostUri, hostDownlinks);
        }
        var nodeDownlinks = hostDownlinks.get(nodeUri);
        if (!nodeDownlinks) {
            nodeDownlinks = new BTree();
            hostDownlinks.set(nodeUri, nodeDownlinks);
        }
        if (nodeDownlinks.has(laneUri)) {
            throw new Error('duplicate downlink');
        }
        nodeDownlinks.set(laneUri, downlink);
        this._downlinkCount += 1;
        var host = this.openHost(hostUri);
        host.openDownlink(downlink);
    };
    Client.prototype.unlinkDownlink = function (downlink) {
        var hostUri = downlink.hostUri();
        var host = this.getHost(hostUri);
        if (host) {
            host.unlinkDownlink(downlink);
        }
    };
    Client.prototype.closeDownlink = function (downlink) {
        var hostUri = downlink.hostUri();
        var nodeUri = downlink.nodeUri();
        var laneUri = downlink.laneUri();
        var hostDownlinks = this._downlinks.get(hostUri);
        if (hostDownlinks) {
            var nodeDownlinks = hostDownlinks.get(nodeUri);
            if (nodeDownlinks) {
                if (nodeDownlinks.get(laneUri)) {
                    this._downlinkCount -= 1;
                    nodeDownlinks.delete(laneUri);
                    if (nodeDownlinks.isEmpty()) {
                        hostDownlinks.delete(nodeUri);
                        if (hostDownlinks.isEmpty()) {
                            this._downlinks.delete(hostUri);
                        }
                    }
                    var host = this.getHost(hostUri);
                    if (host) {
                        host.closeDownlink(downlink);
                    }
                }
            }
        }
    };
    Client.prototype.downlink = function (init) {
        return new EventDownlink(this, undefined, init);
    };
    Client.prototype.downlinkList = function (init) {
        return new ListDownlink(this, undefined, init);
    };
    Client.prototype.downlinkMap = function (init) {
        return new MapDownlink(this, undefined, init);
    };
    Client.prototype.downlinkValue = function (init) {
        return new ValueDownlink(this, undefined, init);
    };
    Client.prototype.openRef = function (ref) {
        this._refs.push(ref);
    };
    Client.prototype.closeRef = function (ref) {
        var index = this._refs.indexOf(ref);
        if (index >= 0) {
            this._refs.splice(index, 1);
            ref.closeUp();
        }
    };
    Client.prototype.hostRef = function (hostUri) {
        hostUri = Uri.fromAny(hostUri);
        return new HostRef(this, hostUri);
    };
    Client.prototype.nodeRef = function (hostUri, nodeUri) {
        hostUri = Uri.fromAny(hostUri);
        if (nodeUri === undefined) {
            nodeUri = hostUri;
            hostUri = nodeUri.base();
            nodeUri = hostUri.unresolve(nodeUri);
        }
        else {
            nodeUri = Uri.fromAny(nodeUri);
        }
        return new NodeRef(this, hostUri, nodeUri);
    };
    Client.prototype.laneRef = function (hostUri, nodeUri, laneUri) {
        hostUri = Uri.fromAny(hostUri);
        nodeUri = Uri.fromAny(nodeUri);
        if (laneUri === undefined) {
            laneUri = nodeUri;
            nodeUri = hostUri;
            hostUri = nodeUri.base();
            nodeUri = hostUri.unresolve(nodeUri);
        }
        else {
            laneUri = Uri.fromAny(laneUri);
        }
        return new LaneRef(this, hostUri, nodeUri, laneUri);
    };
    Client.prototype.authenticate = function (hostUri, credentials) {
        hostUri = Uri.fromAny(hostUri);
        credentials = Value.fromAny(credentials);
        var host = this.openHost(hostUri);
        host.authenticate(credentials);
    };
    Client.prototype.command = function (hostUri, nodeUri, laneUri, body) {
        hostUri = Uri.fromAny(hostUri);
        nodeUri = Uri.fromAny(nodeUri);
        if (arguments.length === 3) {
            body = laneUri;
            laneUri = nodeUri;
            nodeUri = hostUri;
            hostUri = nodeUri.base();
            nodeUri = hostUri.unresolve(nodeUri);
        }
        else {
            laneUri = Uri.fromAny(laneUri);
        }
        body = Value.fromAny(body);
        var host = this.openHost(hostUri);
        host.command(nodeUri, laneUri, body);
    };
    Client.prototype.close = function () {
        var refs = this._refs;
        this._refs = [];
        for (var i = 0; i < refs.length; i += 1) {
            refs[i].closeUp();
        }
        var downlinks = this._downlinks.clone();
        this._downlinks.clear();
        this._downlinkCount = 0;
        downlinks.forEach(function (hostUri, hostDownlinks) {
            hostDownlinks.forEach(function (nodeUri, nodeDownlinks) {
                nodeDownlinks.forEach(function (laneUri, downlink) {
                    downlink.closeUp();
                    var host = this.getHost(hostUri);
                    if (host) {
                        host.closeDownlink(downlink);
                    }
                }, this);
            }, this);
        }, this);
        var hosts = this._hosts.clone();
        this._hosts.clear();
        hosts.forEach(function (hostUri, host) {
            host.closeUp();
        }, this);
    };
    Client.prototype.didConnect = function (didConnect) {
        if (didConnect === undefined) {
            return this.delegate.didConnect || null;
        }
        else {
            this.delegate.didConnect = didConnect || undefined;
            return this;
        }
    };
    Client.prototype.didAuthenticate = function (didAuthenticate) {
        if (didAuthenticate === undefined) {
            return this.delegate.didAuthenticate || null;
        }
        else {
            this.delegate.didAuthenticate = didAuthenticate || undefined;
            return this;
        }
    };
    Client.prototype.didDeauthenticate = function (didDeauthenticate) {
        if (didDeauthenticate === undefined) {
            return this.delegate.didDeauthenticate || null;
        }
        else {
            this.delegate.didDeauthenticate = didDeauthenticate || undefined;
            return this;
        }
    };
    Client.prototype.didDisconnect = function (didDisconnect) {
        if (didDisconnect === undefined) {
            return this.delegate.didDisconnect || null;
        }
        else {
            this.delegate.didDisconnect = didDisconnect || undefined;
            return this;
        }
    };
    Client.prototype.didFail = function (didFail) {
        if (didFail === undefined) {
            return this.delegate.didFail || null;
        }
        else {
            this.delegate.didFail = didFail || undefined;
            return this;
        }
    };
    Client.prototype.hostDidConnect = function (host) {
        if (this.delegate.didConnect) {
            this.delegate.didConnect(host, this);
        }
        for (var i = 0; i < this._refs.length; i += 1) {
            var ref = this._refs[i];
            if (ref.hostUri().equals(host._hostUri)) {
                ref.hostDidConnect(host);
            }
        }
    };
    Client.prototype.hostDidAuthenticate = function (body, host) {
        if (this.delegate.didAuthenticate) {
            this.delegate.didAuthenticate(body, host, this);
        }
        for (var i = 0; i < this._refs.length; i += 1) {
            var ref = this._refs[i];
            if (ref.hostUri().equals(host._hostUri)) {
                ref.hostDidAuthenticate(body, host);
            }
        }
    };
    Client.prototype.hostDidDeauthenticate = function (body, host) {
        if (this.delegate.didDeauthenticate) {
            this.delegate.didDeauthenticate(body, host, this);
        }
        for (var i = 0; i < this._refs.length; i += 1) {
            var ref = this._refs[i];
            if (ref.hostUri().equals(host._hostUri)) {
                ref.hostDidDeauthenticate(body, host);
            }
        }
    };
    Client.prototype.hostDidDisconnect = function (host) {
        if (this.delegate.didDisconnect) {
            this.delegate.didDisconnect(host, this);
        }
        for (var i = 0; i < this._refs.length; i += 1) {
            var ref = this._refs[i];
            if (ref.hostUri().equals(host._hostUri)) {
                ref.hostDidDisconnect(host);
            }
        }
    };
    Client.prototype.hostDidFail = function (error, host) {
        if (this.delegate.didFail) {
            this.delegate.didFail(error, host, this);
        }
        for (var i = 0; i < this._refs.length; i += 1) {
            var ref = this._refs[i];
            if (ref.hostUri().equals(host._hostUri)) {
                ref.hostDidFail(error, host);
            }
        }
    };
    return Client;
}());

var client = new Client();
var isOnline = client.isOnline.bind(client);
var keepOnline = client.keepOnline.bind(client);
var downlink = client.downlink.bind(client);
var downlinkList = client.downlinkList.bind(client);
var downlinkMap = client.downlinkMap.bind(client);
var downlinkValue = client.downlinkValue.bind(client);
var hostRef = client.hostRef.bind(client);
var nodeRef = client.nodeRef.bind(client);
var laneRef = client.laneRef.bind(client);
var authenticate = client.authenticate.bind(client);
var command = client.command.bind(client);

var Ease = {
    linear: function (t) {
        return t;
    },
    quadIn: function (t) {
        return t * t;
    },
    quadOut: function (t) {
        return t * (2 - t);
    },
    quadInOut: function (t) {
        t *= 2;
        if (t <= 1) {
            t = t * t;
        }
        else {
            t -= 1;
            t = t * (2 - t);
            t += 1;
        }
        t /= 2;
        return t;
    },
    cubicIn: function (t) {
        return t * t * t;
    },
    cubicOut: function (t) {
        t -= 1;
        t = t * t * t;
        t += 1;
        return t;
    },
    cubicInOut: function (t) {
        t *= 2;
        if (t <= 1) {
            t = t * t * t;
        }
        else {
            t -= 2;
            t = t * t * t;
            t += 2;
        }
        t /= 2;
        return t;
    },
    quartIn: function (t) {
        return t * t * t * t;
    },
    quartOut: function (t) {
        t -= 1;
        return 1 - t * t * t * t;
    },
    quartInOut: function (t) {
        var t1 = t - 1;
        return t < 0.5 ? 8 * t * t * t * t : 1 - 8 * t1 * t1 * t1 * t1;
    },
    expoIn: function (t) {
        if (t === 0) {
            return 0;
        }
        return Math.pow(2, 10 * (t - 1));
    },
    expoOut: function (t) {
        if (t === 1) {
            return 1;
        }
        return (-Math.pow(2, -10 * t) + 1);
    },
    expoInOut: function (t) {
        if (t === 1 || t === 0) {
            return t;
        }
        t *= 2;
        if (t < 1) {
            return 0.5 * Math.pow(2, 10 * (t - 1));
        }
        return 0.5 * (-Math.pow(2, -10 * (t - 1)) + 2);
    },
    circIn: function (t) {
        return -1 * (Math.sqrt(1 - (t / 1) * t) - 1);
    },
    circOut: function (t) {
        t -= 1;
        return Math.sqrt(1 - t * t);
    },
    circInOut: function (t) {
        t *= 2;
        if (t < 1) {
            return -0.5 * (Math.sqrt(1 - t * t) - 1);
        }
        var st = t - 2;
        return 0.5 * (Math.sqrt(1 - st * st) + 1);
    },
    backIn: function (t) {
        var m = 1.70158;
        return t * t * ((m + 1) * t - m);
    },
    backOut: function (t) {
        var m = 1.70158;
        var st = (t / 1) - 1;
        return (st * st * ((m + 1) * m + m)) + 1;
    },
    backInOut: function (t) {
        var m = 1.70158;
        var s = m * 1.525;
        if ((t *= 2) < 1) {
            return 0.5 * t * t * (((s + 1) * t) - s);
        }
        var st = t - 2;
        return 0.5 * (st * st * ((s + 1) * st + s) + 2);
    },
    elasticIn: function (t) {
        if (t === 0 || t === 1) {
            return t;
        }
        var m = 0.7;
        var st = (t / 1) - 1;
        var s = (1 - m) / 2 * Math.PI * Math.asin(1);
        return -(Math.pow(2, 10 * st) * Math.sin((st - s) * 2 * Math.PI / (1 - m)));
    },
    elasticOut: function (t) {
        if (t === 0 || t === 1) {
            return t;
        }
        var m = 0.7;
        var s = (1 - m) / (2 * Math.PI) * Math.asin(1);
        t *= 2;
        return (Math.pow(2, -10 * t) * Math.sin((t - s) * 2 * Math.PI / (1 - m))) + 1;
    },
    elasticInOut: function (t) {
        if (t === 0 || t === 1) {
            return t;
        }
        var m = 0.65;
        var s = (1 - m) / (2 * Math.PI) * Math.asin(1);
        var st = t * 2;
        var st1 = st - 1;
        if (st < 1) {
            return -0.5 * (Math.pow(2, 10 * st1) * Math.sin((st1 - s) * 2 * Math.PI / (1 - m)));
        }
        return (Math.pow(2, -10 * st1) * Math.sin((st1 - s) * 2 * Math.PI / (1 - m)) * 0.5) + 1;
    },
    bounceIn: function (t) {
        var p = 7.5625;
        if ((t = 1 - t) < 1 / 2.75) {
            return 1 - (p * t * t);
        }
        else if (t < 2 / 2.75) {
            return 1 - (p * (t -= 1.5 / 2.75) * t + 0.75);
        }
        else if (t < 2.5 / 2.75) {
            return 1 - (p * (t -= 2.25 / 2.75) * t + 0.9375);
        }
        return 1 - (p * (t -= 2.625 / 2.75) * t + 0.984375);
    },
    bounceOut: function (t) {
        var p = 7.5625;
        if (t < 1 / 2.75) {
            return p * t * t;
        }
        else if (t < 2 / 2.75) {
            return p * (t -= 1.5 / 2.75) * t + 0.75;
        }
        else if (t < 2.5 / 2.75) {
            return p * (t -= 2.25 / 2.75) * t + 0.9375;
        }
        return p * (t -= 2.625 / 2.75) * t + 0.984375;
    },
    bounceInOut: function (t) {
        var invert = t < 0.5;
        t = invert ? 1 - (t * 2) : (t * 2) - 1;
        var p = 7.5625;
        if (t < 1 / 2.75) {
            t = p * t * t;
        }
        else if (t < 2 / 2.75) {
            t = p * (t -= 1.5 / 2.75) * t + 0.75;
        }
        else if (t < 2.5 / 2.75) {
            t = p * (t -= 2.25 / 2.75) * t + 0.9375;
        }
        else {
            t = p * (t -= 2.625 / 2.75) * t + 0.984375;
        }
        return invert ? (1 - t) * 0.5 : t * 0.5 + 0.5;
    },
    Form: undefined,
    form: function (unit) {
        if (unit !== undefined) {
            return new EaseForm(Ease.fromAny(unit));
        }
        else {
            return Ease.Form;
        }
    },
    fromAny: function (value) {
        if (typeof value === 'function') {
            return value;
        }
        else if (typeof value === 'string') {
            switch (value) {
                case 'linear': return Ease.linear;
                case 'quad-in': return Ease.quadIn;
                case 'quad-out': return Ease.quadOut;
                case 'quad-in-out': return Ease.quadInOut;
                case 'cubic-in': return Ease.cubicIn;
                case 'cubic-out': return Ease.cubicOut;
                case 'cubic-in-out': return Ease.cubicInOut;
                case 'quart-in': return Ease.quartIn;
                case 'quart-out': return Ease.quartOut;
                case 'quart-in-out': return Ease.quartInOut;
                case 'expo-in': return Ease.expoIn;
                case 'expo-out': return Ease.expoOut;
                case 'expo-in-out': return Ease.expoInOut;
                case 'circ-in': return Ease.circIn;
                case 'circ-out': return Ease.circOut;
                case 'circ-in-out': return Ease.circInOut;
                case 'back-in': return Ease.backIn;
                case 'back-out': return Ease.backOut;
                case 'back-in-out': return Ease.backInOut;
                case 'elastic-in': return Ease.elasticIn;
                case 'elastic-out': return Ease.elasticOut;
                case 'elastic-in-out': return Ease.elasticInOut;
                case 'bounce-in': return Ease.bounceIn;
                case 'bounce-out': return Ease.bounceOut;
                case 'bounce-in-out': return Ease.bounceInOut;
            }
        }
        throw new Error(value);
    },
};
Ease.linear.type = 'linear';
Ease.quadIn.type = 'quad-in';
Ease.quadOut.type = 'quad-out';
Ease.quadInOut.type = 'quad-in-out';
Ease.cubicIn.type = 'cubic-in';
Ease.cubicOut.type = 'cubic-out';
Ease.cubicInOut.type = 'cubic-in-out';
Ease.quartIn.type = 'quart-in';
Ease.quartOut.type = 'quart-out';
Ease.quartInOut.type = 'quart-in-out';
Ease.expoIn.type = 'expo-in';
Ease.expoOut.type = 'expo-out';
Ease.expoInOut.type = 'expo-in-out';
Ease.circIn.type = 'circ-in';
Ease.circOut.type = 'circ-out';
Ease.circInOut.type = 'circ-in-out';
Ease.backIn.type = 'back-in';
Ease.backOut.type = 'back-out';
Ease.backInOut.type = 'back-in-out';
Ease.elasticIn.type = 'elastic-in';
Ease.elasticOut.type = 'elastic-out';
Ease.elasticInOut.type = 'elastic-in-out';
Ease.bounceIn.type = 'bounce-in';
Ease.bounceOut.type = 'bounce-out';
Ease.bounceInOut.type = 'bounce-in-out';
var EaseForm = (function (_super) {
    __extends(EaseForm, _super);
    function EaseForm(unit) {
        if (unit === void 0) { unit = Ease.linear; }
        var _this = _super.call(this) || this;
        _this.unit = unit;
        return _this;
    }
    EaseForm.prototype.mold = function (ease) {
        ease = Ease.fromAny(ease);
        return Text$1.valueOf(ease.type);
    };
    EaseForm.prototype.cast = function (value) {
        var str = value.stringValue();
        if (str !== undefined) {
            try {
                return Ease.fromAny(str);
            }
            catch (e) {
            }
        }
        return undefined;
    };
    return EaseForm;
}(Form));
Ease.Form = new EaseForm();

var DateTimeLocale = (function () {
    function DateTimeLocale(periods, weekdays, shortWeekdays, months, shortMonths) {
        if (periods === void 0) { periods = DateTimeLocale.Periods; }
        if (weekdays === void 0) { weekdays = DateTimeLocale.Weekdays; }
        if (shortWeekdays === void 0) { shortWeekdays = DateTimeLocale.ShortWeekdays; }
        if (months === void 0) { months = DateTimeLocale.Months; }
        if (shortMonths === void 0) { shortMonths = DateTimeLocale.ShortMonths; }
        this.periods = periods;
        this.weekdays = weekdays;
        this.shortWeekdays = shortWeekdays;
        this.months = months;
        this.shortMonths = shortMonths;
    }
    DateTimeLocale.Periods = [
        'AM',
        'PM',
    ];
    DateTimeLocale.Weekdays = [
        'Sunday',
        'Monday',
        'Tuesday',
        'Wednesday',
        'Thursday',
        'Friday',
        'Saturday',
    ];
    DateTimeLocale.ShortWeekdays = [
        'Sun',
        'Mon',
        'Tue',
        'Wed',
        'Thu',
        'Fri',
        'Sat',
    ];
    DateTimeLocale.Months = [
        'January',
        'February',
        'March',
        'April',
        'May',
        'June',
        'July',
        'August',
        'September',
        'October',
        'November',
        'December',
    ];
    DateTimeLocale.ShortMonths = [
        'Jan',
        'Feb',
        'Mar',
        'Apr',
        'May',
        'Jun',
        'Jul',
        'Aug',
        'Sep',
        'Oct',
        'Nov',
        'Dec',
    ];
    DateTimeLocale.Default = new DateTimeLocale();
    return DateTimeLocale;
}());

var TimeZone = (function () {
    function TimeZone(offset) {
        this._offset = offset;
    }
    Object.defineProperty(TimeZone.prototype, "name", {
        get: function () {
            if (this._offset === 0) {
                return 'UTC';
            }
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimeZone.prototype, "offset", {
        get: function () {
            return this._offset;
        },
        enumerable: true,
        configurable: true
    });
    TimeZone.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof TimeZone) {
            return this._offset === that._offset;
        }
        return false;
    };
    TimeZone.prototype.hashCode = function () {
        return this._offset;
    };
    TimeZone.forName = function (name) {
        if (name === 'UTC') {
            return TimeZone.UTC;
        }
        throw new Error('unknown time zone: ' + name);
    };
    TimeZone.forOffset = function (offset) {
        if (offset === 0) {
            return TimeZone.UTC;
        }
        else {
            return new TimeZone(offset);
        }
    };
    TimeZone.fromAny = function (zone) {
        if (zone instanceof TimeZone) {
            return zone;
        }
        else if (typeof zone === 'string') {
            return TimeZone.forName(zone);
        }
        else if (typeof zone === 'number') {
            return TimeZone.forOffset(zone);
        }
        throw new TypeError('' + zone);
    };
    TimeZone.UTC = new TimeZone(0);
    TimeZone.Form = undefined;
    TimeZone.Local = TimeZone.forOffset(-new Date().getTimezoneOffset());
    return TimeZone;
}());
var TimeZoneForm = (function (_super) {
    __extends(TimeZoneForm, _super);
    function TimeZoneForm(unit) {
        if (unit === void 0) { unit = TimeZone.UTC; }
        var _this = _super.call(this) || this;
        _this.unit = unit;
        return _this;
    }
    TimeZoneForm.prototype.mold = function (zone) {
        zone = TimeZone.fromAny(zone);
        return Num.valueOf(zone._offset);
    };
    TimeZoneForm.prototype.cast = function (value) {
        var offset = value.numberValue();
        if (offset !== undefined) {
            return TimeZone.forOffset(offset);
        }
        var name = value.stringValue();
        if (name !== undefined) {
            return TimeZone.forName(name);
        }
        return undefined;
    };
    return TimeZoneForm;
}(Form));
TimeZone.Form = new TimeZoneForm();

var DateTimeFormat = (function () {
    function DateTimeFormat() {
    }
    DateTimeFormat.prototype.format = function (date) {
        date = DateTime.fromAny(date);
        var output = new StringOutput();
        this.writeDate(date, output);
        return output.bind();
    };
    DateTimeFormat.prototype.parse = function (input) {
        if (typeof input === 'string') {
            input = new StringInput(input);
        }
        while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
            input.step();
        }
        var output = this.parseDate(input);
        if (output.isDone()) {
            while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                input.step();
            }
            if (!input.isEmpty()) {
                output = Iteratee.unexpected(input);
            }
        }
        return output.bind();
    };
    DateTimeFormat.prototype.parseDate = function (input, date) {
        var dateParser = this.parseDateTime(input, date);
        if (dateParser.isDone()) {
            return Iteratee.done(DateTime.fromAny(dateParser.bind()));
        }
        else if (dateParser.isError()) {
            return dateParser.asError();
        }
        else {
            return new DateTimeParser(dateParser);
        }
    };
    DateTimeFormat.formats = function (locale) {
        if (locale === void 0) { locale = DateTimeLocale.Default; }
        var formats;
        if (locale === DateTimeLocale.Default) {
            formats = DateTimeFormat.Formats;
        }
        if (!formats) {
            formats = {
                Y: DateTimeFormat.YearFormat,
                m: DateTimeFormat.MonthNumberFormat,
                B: new MonthFormat(locale),
                b: new ShortMonthFormat(locale),
                d: DateTimeFormat.DayOfMonthFormat,
                A: new WeekdayFormat(locale),
                a: new ShortWeekdayFormat(locale),
                H: DateTimeFormat.Hour24Format,
                I: DateTimeFormat.Hour12Format,
                p: new PeriodFormat(locale),
                M: DateTimeFormat.MinuteFormat,
                S: DateTimeFormat.SecondFormat,
                L: DateTimeFormat.MillisecondFormat,
            };
        }
        return formats;
    };
    DateTimeFormat.pattern = function (pattern, formats) {
        if (!formats || formats instanceof DateTimeLocale) {
            formats = DateTimeFormat.formats(formats);
        }
        return new PatternFormat(pattern, formats);
    };
    DateTimeFormat.iso8601 = function (formats) {
        if (!formats || formats instanceof DateTimeLocale) {
            formats = DateTimeFormat.formats(formats);
        }
        if (formats === DateTimeFormat.Formats && DateTimeFormat.Iso8601) {
            return DateTimeFormat.Iso8601;
        }
        else {
            return new PatternFormat('%Y-%m-%dT%H:%M:%S.%LZ', formats);
        }
    };
    DateTimeFormat.YearFormat = undefined;
    DateTimeFormat.MonthNumberFormat = undefined;
    DateTimeFormat.DayOfMonthFormat = undefined;
    DateTimeFormat.Hour24Format = undefined;
    DateTimeFormat.Hour12Format = undefined;
    DateTimeFormat.MinuteFormat = undefined;
    DateTimeFormat.SecondFormat = undefined;
    DateTimeFormat.MillisecondFormat = undefined;
    DateTimeFormat.Formats = undefined;
    DateTimeFormat.Iso8601 = undefined;
    return DateTimeFormat;
}());
function writeDateNumber2(value, output) {
    var c1 = 48 + value % 10;
    value /= 10;
    var c0 = 48 + value % 10;
    output.push(c0, c1);
}
function writeDateNumber3(value, output) {
    var c2 = 48 + value % 10;
    value /= 10;
    var c1 = 48 + value % 10;
    value /= 10;
    var c0 = 48 + value % 10;
    output.push(c0, c1, c2);
}
function writeDateNumber4(value, output) {
    var c3 = 48 + value % 10;
    value /= 10;
    var c2 = 48 + value % 10;
    value /= 10;
    var c1 = 48 + value % 10;
    value /= 10;
    var c0 = 48 + value % 10;
    output.push(c0, c1, c2, c3);
}
function parseDateNumber(factory, desc, minDigits, maxDigits, input, date, value, step) {
    if (value === void 0) { value = 0; }
    if (step === void 0) { step = 0; }
    var c = 0;
    while (step < maxDigits) {
        if (!input.isEmpty()) {
            c = input.head();
            if (Iteratee.isDigit(c)) {
                input.step();
                value = 10 * value + Iteratee.decodeDigit(c);
                step += 1;
                continue;
            }
            else {
                return Iteratee.expected(desc, input);
            }
        }
        else if (input.isDone()) {
            return Iteratee.unexpected(input);
        }
        break;
    }
    if ((!input.isEmpty() || input.isDone()) && step >= minDigits) {
        return factory.bind(value, date);
    }
    return factory.cont(date, value, step);
}
function parseDateString(factory, locale, input, date, output) {
    if (output === void 0) { output = new StringOutput(); }
    var c = 0;
    do {
        if (!input.isEmpty() && (c = input.head(), Recon.isIdentStartChar(c))) {
            input.step();
            output.push(c);
            continue;
        }
        else if (!input.isEmpty() || input.isDone()) {
            return factory.bind(locale, output.bind(), date);
        }
        break;
    } while (true);
    return factory.cont(locale, date, output);
}
var YearFormat = (function (_super) {
    __extends(YearFormat, _super);
    function YearFormat() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    YearFormat.prototype.writeDate = function (date, output) {
        writeDateNumber4(date.year(), output);
    };
    YearFormat.prototype.parseDateTime = function (input, date) {
        return YearParser.parse(input, date);
    };
    return YearFormat;
}(DateTimeFormat));
DateTimeFormat.YearFormat = new YearFormat();
var YearParser = (function (_super) {
    __extends(YearParser, _super);
    function YearParser(date, year, step) {
        var _this = _super.call(this) || this;
        _this.date = date;
        _this.year = year;
        _this.step = step;
        return _this;
    }
    YearParser.prototype.feed = function (input) {
        return YearParser.parse(input, this.date, this.year, this.step);
    };
    YearParser.parse = function (input, date, year, step) {
        return parseDateNumber(YearParser, 'full year', 4, 4, input, date, year, step);
    };
    YearParser.bind = function (year, date) {
        if (date === void 0) { date = {}; }
        date.year = year;
        return Iteratee.done(date);
    };
    YearParser.cont = function (date, year, step) {
        return new YearParser(date, year, step);
    };
    return YearParser;
}(Iteratee));
var MonthNumberFormat = (function (_super) {
    __extends(MonthNumberFormat, _super);
    function MonthNumberFormat() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MonthNumberFormat.prototype.writeDate = function (date, output) {
        writeDateNumber2(date.month() + 1, output);
    };
    MonthNumberFormat.prototype.parseDateTime = function (input, date) {
        return MonthNumberParser.parse(input, date);
    };
    return MonthNumberFormat;
}(DateTimeFormat));
DateTimeFormat.MonthNumberFormat = new MonthNumberFormat();
var MonthNumberParser = (function (_super) {
    __extends(MonthNumberParser, _super);
    function MonthNumberParser(date, month, step) {
        var _this = _super.call(this) || this;
        _this.date = date;
        _this.month = month;
        _this.step = step;
        return _this;
    }
    MonthNumberParser.prototype.feed = function (input) {
        return MonthNumberParser.parse(input, this.date, this.month, this.step);
    };
    MonthNumberParser.parse = function (input, date, month, step) {
        return parseDateNumber(MonthNumberParser, 'month number', 2, 2, input, date, month, step);
    };
    MonthNumberParser.bind = function (month, date) {
        if (date === void 0) { date = {}; }
        date.month = month - 1;
        return Iteratee.done(date);
    };
    MonthNumberParser.cont = function (date, month, step) {
        return new MonthNumberParser(date, month, step);
    };
    return MonthNumberParser;
}(Iteratee));
var MonthFormat = (function (_super) {
    __extends(MonthFormat, _super);
    function MonthFormat(locale) {
        var _this = _super.call(this) || this;
        _this.locale = locale;
        return _this;
    }
    MonthFormat.prototype.writeDate = function (date, output) {
        output.push(this.locale.months[date.month()]);
    };
    MonthFormat.prototype.parseDateTime = function (input, date) {
        return MonthParser.parse(input, this.locale, date);
    };
    return MonthFormat;
}(DateTimeFormat));
var MonthParser = (function (_super) {
    __extends(MonthParser, _super);
    function MonthParser(locale, date, output) {
        var _this = _super.call(this) || this;
        _this.locale = locale;
        _this.date = date;
        _this.output = output;
        return _this;
    }
    MonthParser.prototype.feed = function (input) {
        return MonthParser.parse(input, this.locale, this.date, this.output);
    };
    MonthParser.parse = function (input, locale, date, output) {
        return parseDateString(MonthParser, locale, input, date, output);
    };
    MonthParser.bind = function (locale, value, date) {
        if (date === void 0) { date = {}; }
        var month = locale.months.indexOf(value);
        if (month >= 0) {
            date.month = month;
            return Iteratee.done(date);
        }
        else {
            return Iteratee.error('expected month, but found ' + value);
        }
    };
    MonthParser.cont = function (locale, date, output) {
        return new MonthParser(locale, date, output);
    };
    return MonthParser;
}(Iteratee));
var ShortMonthFormat = (function (_super) {
    __extends(ShortMonthFormat, _super);
    function ShortMonthFormat(locale) {
        var _this = _super.call(this) || this;
        _this.locale = locale;
        return _this;
    }
    ShortMonthFormat.prototype.writeDate = function (date, output) {
        output.push(this.locale.shortMonths[date.month()]);
    };
    ShortMonthFormat.prototype.parseDateTime = function (input, date) {
        return ShortMonthParser.parse(input, this.locale, date);
    };
    return ShortMonthFormat;
}(DateTimeFormat));
var ShortMonthParser = (function (_super) {
    __extends(ShortMonthParser, _super);
    function ShortMonthParser(locale, date, output) {
        var _this = _super.call(this) || this;
        _this.locale = locale;
        _this.date = date;
        _this.output = output;
        return _this;
    }
    ShortMonthParser.prototype.feed = function (input) {
        return ShortMonthParser.parse(input, this.locale, this.date, this.output);
    };
    ShortMonthParser.parse = function (input, locale, date, output) {
        return parseDateString(ShortMonthParser, locale, input, date, output);
    };
    ShortMonthParser.bind = function (locale, value, date) {
        if (date === void 0) { date = {}; }
        var month = locale.shortMonths.indexOf(value);
        if (month >= 0) {
            date.month = month;
            return Iteratee.done(date);
        }
        else {
            return Iteratee.error('expected short month, but found ' + value);
        }
    };
    ShortMonthParser.cont = function (locale, date, output) {
        return new ShortMonthParser(locale, date, output);
    };
    return ShortMonthParser;
}(Iteratee));
var DayOfMonthFormat = (function (_super) {
    __extends(DayOfMonthFormat, _super);
    function DayOfMonthFormat() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DayOfMonthFormat.prototype.writeDate = function (date, output) {
        writeDateNumber2(date.day(), output);
    };
    DayOfMonthFormat.prototype.parseDateTime = function (input, date) {
        return DayOfMonthParser.parse(input, date);
    };
    return DayOfMonthFormat;
}(DateTimeFormat));
DateTimeFormat.DayOfMonthFormat = new DayOfMonthFormat();
var DayOfMonthParser = (function (_super) {
    __extends(DayOfMonthParser, _super);
    function DayOfMonthParser(date, day, step) {
        var _this = _super.call(this) || this;
        _this.date = date;
        _this.day = day;
        _this.step = step;
        return _this;
    }
    DayOfMonthParser.prototype.feed = function (input) {
        return DayOfMonthParser.parse(input, this.date, this.day, this.step);
    };
    DayOfMonthParser.parse = function (input, date, day, step) {
        return parseDateNumber(DayOfMonthParser, 'day of month', 2, 2, input, date, day, step);
    };
    DayOfMonthParser.bind = function (day, date) {
        if (date === void 0) { date = {}; }
        date.day = day;
        return Iteratee.done(date);
    };
    DayOfMonthParser.cont = function (date, month, step) {
        return new DayOfMonthParser(date, month, step);
    };
    return DayOfMonthParser;
}(Iteratee));
var WeekdayFormat = (function (_super) {
    __extends(WeekdayFormat, _super);
    function WeekdayFormat(locale) {
        var _this = _super.call(this) || this;
        _this.locale = locale;
        return _this;
    }
    WeekdayFormat.prototype.writeDate = function (date, output) {
        output.push(this.locale.weekdays[date.weekday()]);
    };
    WeekdayFormat.prototype.parseDateTime = function (input, date) {
        return WeekdayParser.parse(input, this.locale, date);
    };
    return WeekdayFormat;
}(DateTimeFormat));
var WeekdayParser = (function (_super) {
    __extends(WeekdayParser, _super);
    function WeekdayParser(locale, date, output) {
        var _this = _super.call(this) || this;
        _this.locale = locale;
        _this.date = date;
        _this.output = output;
        return _this;
    }
    WeekdayParser.prototype.feed = function (input) {
        return WeekdayParser.parse(input, this.locale, this.date, this.output);
    };
    WeekdayParser.parse = function (input, locale, date, output) {
        return parseDateString(WeekdayParser, locale, input, date, output);
    };
    WeekdayParser.bind = function (locale, value, date) {
        if (date === void 0) { date = {}; }
        var day = locale.weekdays.indexOf(value);
        if (day >= 0) {
            return Iteratee.done(date);
        }
        else {
            return Iteratee.error('expected weekday, but found ' + value);
        }
    };
    WeekdayParser.cont = function (locale, date, output) {
        return new WeekdayParser(locale, date, output);
    };
    return WeekdayParser;
}(Iteratee));
var ShortWeekdayFormat = (function (_super) {
    __extends(ShortWeekdayFormat, _super);
    function ShortWeekdayFormat(locale) {
        var _this = _super.call(this) || this;
        _this.locale = locale;
        return _this;
    }
    ShortWeekdayFormat.prototype.writeDate = function (date, output) {
        output.push(this.locale.shortWeekdays[date.weekday()]);
    };
    ShortWeekdayFormat.prototype.parseDateTime = function (input, date) {
        return ShortWeekdayParser.parse(input, this.locale, date);
    };
    return ShortWeekdayFormat;
}(DateTimeFormat));
var ShortWeekdayParser = (function (_super) {
    __extends(ShortWeekdayParser, _super);
    function ShortWeekdayParser(locale, date, output) {
        var _this = _super.call(this) || this;
        _this.locale = locale;
        _this.date = date;
        _this.output = output;
        return _this;
    }
    ShortWeekdayParser.prototype.feed = function (input) {
        return ShortWeekdayParser.parse(input, this.locale, this.date, this.output);
    };
    ShortWeekdayParser.parse = function (input, locale, date, output) {
        return parseDateString(ShortWeekdayParser, locale, input, date, output);
    };
    ShortWeekdayParser.bind = function (locale, value, date) {
        if (date === void 0) { date = {}; }
        var day = locale.shortWeekdays.indexOf(value);
        if (day >= 0) {
            return Iteratee.done(date);
        }
        else {
            return Iteratee.error('expected short weekday, but found ' + value);
        }
    };
    ShortWeekdayParser.cont = function (locale, date, output) {
        return new ShortWeekdayParser(locale, date, output);
    };
    return ShortWeekdayParser;
}(Iteratee));
var Hour24Format = (function (_super) {
    __extends(Hour24Format, _super);
    function Hour24Format() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Hour24Format.prototype.writeDate = function (date, output) {
        writeDateNumber2(date.hour(), output);
    };
    Hour24Format.prototype.parseDateTime = function (input, date) {
        return Hour24Parser.parse(input, date);
    };
    return Hour24Format;
}(DateTimeFormat));
DateTimeFormat.Hour24Format = new Hour24Format();
var Hour24Parser = (function (_super) {
    __extends(Hour24Parser, _super);
    function Hour24Parser(date, hour, step) {
        var _this = _super.call(this) || this;
        _this.date = date;
        _this.hour = hour;
        _this.step = step;
        return _this;
    }
    Hour24Parser.prototype.feed = function (input) {
        return Hour24Parser.parse(input, this.date, this.hour, this.step);
    };
    Hour24Parser.parse = function (input, date, hour, step) {
        return parseDateNumber(Hour24Parser, 'hour (24)', 2, 2, input, date, hour, step);
    };
    Hour24Parser.bind = function (hour, date) {
        if (date === void 0) { date = {}; }
        date.hour = hour;
        return Iteratee.done(date);
    };
    Hour24Parser.cont = function (date, hour, step) {
        return new Hour24Parser(date, hour, step);
    };
    return Hour24Parser;
}(Iteratee));
var Hour12Format = (function (_super) {
    __extends(Hour12Format, _super);
    function Hour12Format() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Hour12Format.prototype.writeDate = function (date, output) {
        writeDateNumber2(date.hour() % 12 || 12, output);
    };
    Hour12Format.prototype.parseDateTime = function (input, date) {
        return Hour12Parser.parse(input, date);
    };
    return Hour12Format;
}(DateTimeFormat));
DateTimeFormat.Hour12Format = new Hour12Format();
var Hour12Parser = (function (_super) {
    __extends(Hour12Parser, _super);
    function Hour12Parser(date, hour, step) {
        var _this = _super.call(this) || this;
        _this.date = date;
        _this.hour = hour;
        _this.step = step;
        return _this;
    }
    Hour12Parser.prototype.feed = function (input) {
        return Hour12Parser.parse(input, this.date, this.hour, this.step);
    };
    Hour12Parser.parse = function (input, date, hour, step) {
        return parseDateNumber(Hour12Parser, 'hour (12)', 2, 2, input, date, hour, step);
    };
    Hour12Parser.bind = function (hour, date) {
        if (date === void 0) { date = {}; }
        date.hour = (date.hour || 0) + hour;
        return Iteratee.done(date);
    };
    Hour12Parser.cont = function (date, hour, step) {
        return new Hour12Parser(date, hour, step);
    };
    return Hour12Parser;
}(Iteratee));
var PeriodFormat = (function (_super) {
    __extends(PeriodFormat, _super);
    function PeriodFormat(locale) {
        var _this = _super.call(this) || this;
        _this.locale = locale;
        return _this;
    }
    PeriodFormat.prototype.writeDate = function (date, output) {
        output.push(this.locale.periods[+(date.hour() >= 12)]);
    };
    PeriodFormat.prototype.parseDateTime = function (input, date) {
        return PeriodParser.parse(input, this.locale, date);
    };
    return PeriodFormat;
}(DateTimeFormat));
var PeriodParser = (function (_super) {
    __extends(PeriodParser, _super);
    function PeriodParser(locale, date, output) {
        var _this = _super.call(this) || this;
        _this.locale = locale;
        _this.date = date;
        _this.output = output;
        return _this;
    }
    PeriodParser.prototype.feed = function (input) {
        return PeriodParser.parse(input, this.locale, this.date, this.output);
    };
    PeriodParser.parse = function (input, locale, date, output) {
        return parseDateString(PeriodParser, locale, input, date, output);
    };
    PeriodParser.bind = function (locale, value, date) {
        if (date === void 0) { date = {}; }
        var period = locale.months.indexOf(value);
        if (period >= 0) {
            date.hour = (date.hour || 0) + 12 * period;
            return Iteratee.done(date);
        }
        else {
            return Iteratee.error('expected hour period, but found ' + value);
        }
    };
    PeriodParser.cont = function (locale, date, output) {
        return new PeriodParser(locale, date, output);
    };
    return PeriodParser;
}(Iteratee));
var MinuteFormat = (function (_super) {
    __extends(MinuteFormat, _super);
    function MinuteFormat() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MinuteFormat.prototype.writeDate = function (date, output) {
        writeDateNumber2(date.minute(), output);
    };
    MinuteFormat.prototype.parseDateTime = function (input, date) {
        return MinuteParser.parse(input, date);
    };
    return MinuteFormat;
}(DateTimeFormat));
DateTimeFormat.MinuteFormat = new MinuteFormat();
var MinuteParser = (function (_super) {
    __extends(MinuteParser, _super);
    function MinuteParser(date, minute, step) {
        var _this = _super.call(this) || this;
        _this.date = date;
        _this.minute = minute;
        _this.step = step;
        return _this;
    }
    MinuteParser.prototype.feed = function (input) {
        return MinuteParser.parse(input, this.date, this.minute, this.step);
    };
    MinuteParser.parse = function (input, date, minute, step) {
        return parseDateNumber(MinuteParser, 'minute', 2, 2, input, date, minute, step);
    };
    MinuteParser.bind = function (minute, date) {
        if (date === void 0) { date = {}; }
        date.minute = minute;
        return Iteratee.done(date);
    };
    MinuteParser.cont = function (date, minute, step) {
        return new MinuteParser(date, minute, step);
    };
    return MinuteParser;
}(Iteratee));
var SecondFormat = (function (_super) {
    __extends(SecondFormat, _super);
    function SecondFormat() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SecondFormat.prototype.writeDate = function (date, output) {
        writeDateNumber2(date.second(), output);
    };
    SecondFormat.prototype.parseDateTime = function (input, date) {
        return SecondParser.parse(input, date);
    };
    return SecondFormat;
}(DateTimeFormat));
DateTimeFormat.SecondFormat = new SecondFormat();
var SecondParser = (function (_super) {
    __extends(SecondParser, _super);
    function SecondParser(date, second, step) {
        var _this = _super.call(this) || this;
        _this.date = date;
        _this.second = second;
        _this.step = step;
        return _this;
    }
    SecondParser.prototype.feed = function (input) {
        return SecondParser.parse(input, this.date, this.second, this.step);
    };
    SecondParser.parse = function (input, date, second, step) {
        return parseDateNumber(SecondParser, 'second', 2, 2, input, date, second, step);
    };
    SecondParser.bind = function (second, date) {
        if (date === void 0) { date = {}; }
        date.second = second;
        return Iteratee.done(date);
    };
    SecondParser.cont = function (date, second, step) {
        return new SecondParser(date, second, step);
    };
    return SecondParser;
}(Iteratee));
var MillisecondFormat = (function (_super) {
    __extends(MillisecondFormat, _super);
    function MillisecondFormat() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MillisecondFormat.prototype.writeDate = function (date, output) {
        writeDateNumber3(date.millisecond(), output);
    };
    MillisecondFormat.prototype.parseDateTime = function (input, date) {
        return MillisecondParser.parse(input, date);
    };
    return MillisecondFormat;
}(DateTimeFormat));
DateTimeFormat.MillisecondFormat = new MillisecondFormat();
var MillisecondParser = (function (_super) {
    __extends(MillisecondParser, _super);
    function MillisecondParser(date, millisecond, step) {
        var _this = _super.call(this) || this;
        _this.date = date;
        _this.millisecond = millisecond;
        _this.step = step;
        return _this;
    }
    MillisecondParser.prototype.feed = function (input) {
        return MillisecondParser.parse(input, this.date, this.millisecond, this.step);
    };
    MillisecondParser.parse = function (input, date, millisecond, step) {
        return parseDateNumber(MillisecondParser, 'millisecond', 1, 3, input, date, millisecond, step);
    };
    MillisecondParser.bind = function (millisecond, date) {
        if (date === void 0) { date = {}; }
        date.millisecond = millisecond;
        return Iteratee.done(date);
    };
    MillisecondParser.cont = function (date, millisecond, step) {
        return new MillisecondParser(date, millisecond, step);
    };
    return MillisecondParser;
}(Iteratee));
var PatternFormat = (function (_super) {
    __extends(PatternFormat, _super);
    function PatternFormat(pattern, formats) {
        var _this = _super.call(this) || this;
        _this.pattern = pattern;
        _this.formats = formats;
        return _this;
    }
    PatternFormat.prototype.writeDate = function (date, output) {
        var pattern = this.pattern;
        var formats = this.formats;
        var i = 0;
        var j = 0;
        var n = pattern.length;
        while (j < n) {
            if (pattern.charCodeAt(j) === 37) {
                if (i !== j) {
                    output.push(pattern.slice(i, j));
                }
                var s = pattern.charAt(j + 1);
                var f = formats[s];
                if (f) {
                    f.writeDate(date, output);
                }
                j += 2;
                i = j;
            }
            else {
                j += 1;
            }
        }
        if (i !== j) {
            output.push(pattern.slice(i, j));
        }
    };
    PatternFormat.prototype.parseDateTime = function (input, date) {
        return PatternFormatParser.parse(input, this.pattern, this.formats, date);
    };
    return PatternFormat;
}(DateTimeFormat));
var PatternFormatParser = (function (_super) {
    __extends(PatternFormatParser, _super);
    function PatternFormatParser(pattern, formats, date, dateParser, step) {
        var _this = _super.call(this) || this;
        _this.pattern = pattern;
        _this.formats = formats;
        _this.date = date;
        _this.dateParser = dateParser;
        _this.step = step;
        return _this;
    }
    PatternFormatParser.prototype.feed = function (input) {
        return PatternFormatParser.parse(input, this.pattern, this.formats, this.date, this.dateParser, this.step);
    };
    PatternFormatParser.parse = function (input, pattern, formats, date, dateParser, step) {
        if (step === void 0) { step = 0; }
        var c = 0;
        var n = pattern.length;
        while (step < n) {
            var p = pattern.charCodeAt(step);
            if (p === 37) {
                if (!dateParser) {
                    var s = pattern.charAt(step + 1);
                    var format = formats[s];
                    if (format) {
                        dateParser = format.parseDateTime(input, date);
                    }
                    else {
                        return Iteratee.error('unknown format specifier: ' + s);
                    }
                }
                while (dateParser.isCont() && (!input.isEmpty() || input.isDone())) {
                    dateParser = dateParser.feed(input);
                }
                if (dateParser.isDone()) {
                    date = dateParser.bind();
                    dateParser = undefined;
                    step += 2;
                    continue;
                }
                else if (dateParser.isError()) {
                    return dateParser.asError();
                }
            }
            else {
                if (!input.isEmpty()) {
                    c = input.head();
                    if (c === p) {
                        input.step();
                        step += 1;
                        continue;
                    }
                    else {
                        return Iteratee.expected(p, input);
                    }
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            break;
        }
        if (step === n) {
            date = date || {};
            return Iteratee.done(date);
        }
        return new PatternFormatParser(pattern, formats, date, dateParser, step);
    };
    return PatternFormatParser;
}(Iteratee));
var DateTimeParser = (function (_super) {
    __extends(DateTimeParser, _super);
    function DateTimeParser(dateParser) {
        var _this = _super.call(this) || this;
        _this.dateParser = dateParser;
        return _this;
    }
    DateTimeParser.prototype.feed = function (input) {
        return DateTimeParser.parse(input, this.dateParser);
    };
    DateTimeParser.parse = function (input, dateParser) {
        while (dateParser.isCont() && (!input.isEmpty() || input.isDone())) {
            dateParser = dateParser.feed(input);
        }
        if (dateParser.isDone()) {
            return Iteratee.done(DateTime.fromAny(dateParser.bind()));
        }
        else if (dateParser.isError()) {
            return dateParser.asError();
        }
        return new DateTimeParser(dateParser);
    };
    return DateTimeParser;
}(Iteratee));
DateTimeFormat.Formats = DateTimeFormat.formats();
DateTimeFormat.Iso8601 = DateTimeFormat.iso8601();

var DateTime = (function () {
    function DateTime(time, zone) {
        if (zone === void 0) { zone = TimeZone.UTC; }
        this._time = time;
        this._zone = zone;
    }
    DateTime.prototype.time = function (time) {
        if (time === undefined) {
            return this._time;
        }
        else {
            return new DateTime(time, this._zone);
        }
    };
    DateTime.prototype.zone = function (zone) {
        if (zone === undefined) {
            return this._zone;
        }
        else {
            return new DateTime(this._time, zone);
        }
    };
    DateTime.prototype.year = function (year, month, day, hour, minute, second, millisecond) {
        var date = this.toUTCLocalDate();
        if (year === undefined) {
            return date.getUTCFullYear();
        }
        else {
            date.setUTCFullYear(year);
            if (month !== undefined) {
                date.setUTCMonth(month);
            }
            if (day !== undefined) {
                date.setUTCDate(day);
            }
            if (hour !== undefined) {
                date.setUTCHours(hour);
            }
            if (minute !== undefined) {
                date.setUTCMinutes(minute);
            }
            if (second !== undefined) {
                date.setUTCSeconds(second);
            }
            if (millisecond !== undefined) {
                date.setUTCMilliseconds(millisecond);
            }
            return DateTime.fromUTCLocalDate(date, this._zone);
        }
    };
    DateTime.prototype.month = function (month, day, hour, minute, second, millisecond) {
        var date = this.toUTCLocalDate();
        if (month === undefined) {
            return date.getUTCMonth();
        }
        else {
            date.setUTCMonth(month);
            if (day !== undefined) {
                date.setUTCDate(day);
            }
            if (hour !== undefined) {
                date.setUTCHours(hour);
            }
            if (minute !== undefined) {
                date.setUTCMinutes(minute);
            }
            if (second !== undefined) {
                date.setUTCSeconds(second);
            }
            if (millisecond !== undefined) {
                date.setUTCMilliseconds(millisecond);
            }
            return DateTime.fromUTCLocalDate(date, this._zone);
        }
    };
    DateTime.prototype.day = function (day, hour, minute, second, millisecond) {
        var date = this.toUTCLocalDate();
        if (day === undefined) {
            return date.getUTCDate();
        }
        else {
            date.setUTCDate(day);
            if (hour !== undefined) {
                date.setUTCHours(hour);
            }
            if (minute !== undefined) {
                date.setUTCMinutes(minute);
            }
            if (second !== undefined) {
                date.setUTCSeconds(second);
            }
            if (millisecond !== undefined) {
                date.setUTCMilliseconds(millisecond);
            }
            return DateTime.fromUTCLocalDate(date, this._zone);
        }
    };
    DateTime.prototype.hour = function (hour, minute, second, millisecond) {
        var date = this.toUTCLocalDate();
        if (hour === undefined) {
            return date.getUTCHours();
        }
        else {
            date.setUTCHours(hour);
            if (minute !== undefined) {
                date.setUTCMinutes(minute);
            }
            if (second !== undefined) {
                date.setUTCSeconds(second);
            }
            if (millisecond !== undefined) {
                date.setUTCMilliseconds(millisecond);
            }
            return DateTime.fromUTCLocalDate(date, this._zone);
        }
    };
    DateTime.prototype.minute = function (minute, second, millisecond) {
        var date = this.toUTCLocalDate();
        if (minute === undefined) {
            return date.getUTCMinutes();
        }
        else {
            date.setUTCMinutes(minute);
            if (second !== undefined) {
                date.setUTCSeconds(second);
            }
            if (millisecond !== undefined) {
                date.setUTCMilliseconds(millisecond);
            }
            return DateTime.fromUTCLocalDate(date, this._zone);
        }
    };
    DateTime.prototype.second = function (second, millisecond) {
        var date = this.toUTCLocalDate();
        if (second === undefined) {
            return date.getUTCSeconds();
        }
        else {
            date.setUTCSeconds(second);
            if (millisecond !== undefined) {
                date.setUTCMilliseconds(millisecond);
            }
            return DateTime.fromUTCLocalDate(date, this._zone);
        }
    };
    DateTime.prototype.millisecond = function (millisecond) {
        var date = this.toUTCLocalDate();
        if (millisecond === undefined) {
            return date.getUTCMilliseconds();
        }
        else {
            date.setUTCMilliseconds(millisecond);
            return DateTime.fromUTCLocalDate(date, this._zone);
        }
    };
    DateTime.prototype.weekday = function () {
        return this.toUTCLocalDate().getDay();
    };
    DateTime.prototype.toUTCLocalDate = function () {
        return new Date(this._time + 60000 * this._zone._offset);
    };
    DateTime.prototype.toDate = function () {
        return new Date(this._time);
    };
    DateTime.prototype.valueOf = function () {
        return this._time;
    };
    DateTime.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof DateTime) {
            return this._time === that._time && this._zone.equals(that._zone);
        }
        return false;
    };
    DateTime.prototype.compare = function (that) {
        var x = this._time;
        var y = +that;
        return x < y ? -1 : x > y ? 1 : x === y ? 0 : NaN;
    };
    DateTime.prototype.hashCode = function () {
        return Murmur3.mash(Murmur3.mix(Murmur3.mix(0x97A4F483, this._time), this._zone.hashCode()));
    };
    DateTime.prototype.toString = function () {
        return DateTimeFormat.Iso8601.format(this);
    };
    DateTime.fromUTCLocalDate = function (date, zone) {
        return new DateTime(date.getTime() - 60000 * zone._offset, zone);
    };
    DateTime.current = function (zone) {
        zone = zone !== undefined ? TimeZone.fromAny(zone) : TimeZone.Local;
        return new DateTime(Date.now(), zone);
    };
    DateTime.time = function (date) {
        if (date instanceof DateTime) {
            return date._time;
        }
        else if (date instanceof Date) {
            return date.getTime();
        }
        else if (typeof date === 'number') {
            return date;
        }
        else if (typeof date === 'string') {
            return DateTime.parse(date).time();
        }
        else if (date && typeof date === 'object') {
            DateTime.fromObject(date).time();
        }
        throw new TypeError('' + date);
    };
    DateTime.fromAny = function (date, zone) {
        if (date instanceof DateTime) {
            return date;
        }
        else if (date instanceof Date) {
            zone = zone !== undefined ? TimeZone.fromAny(zone) : TimeZone.UTC;
            return new DateTime(date.getTime(), zone);
        }
        else if (typeof date === 'number') {
            zone = zone !== undefined ? TimeZone.fromAny(zone) : TimeZone.UTC;
            return new DateTime(date, zone);
        }
        else if (typeof date === 'string') {
            return DateTime.parse(date, zone);
        }
        else if (date && typeof date === 'object') {
            return DateTime.fromObject(date, zone);
        }
        throw new TypeError('' + date);
    };
    DateTime.fromObject = function (init, zone) {
        var time = Date.UTC(init.year || 1970, init.month || 0, init.day, init.hour, init.minute, init.second, init.millisecond);
        if (init.zone !== undefined) {
            zone = TimeZone.fromAny(init.zone);
        }
        if (zone !== undefined) {
            zone = TimeZone.fromAny(zone);
            time += 60000 * zone._offset;
        }
        else {
            zone = TimeZone.UTC;
        }
        return new DateTime(time, zone);
    };
    DateTime.fromValue = function (value) {
        var positional;
        var header = value.header('date');
        if (header.isDefined()) {
            value = header;
            positional = true;
        }
        else {
            positional = false;
        }
        var init = {};
        value.forEach(function (item, index) {
            var key = item.key.stringValue();
            if (key !== undefined) {
                if (key === 'year') {
                    init.year = item.toValue().numberValue(init.year);
                }
                else if (key === 'month') {
                    init.month = item.toValue().numberValue(init.month);
                }
                else if (key === 'day') {
                    init.day = item.toValue().numberValue(init.day);
                }
                else if (key === 'hour') {
                    init.hour = item.toValue().numberValue(init.hour);
                }
                else if (key === 'minute') {
                    init.minute = item.toValue().numberValue(init.minute);
                }
                else if (key === 'second') {
                    init.second = item.toValue().numberValue(init.second);
                }
                else if (key === 'millisecond') {
                    init.millisecond = item.toValue().numberValue(init.millisecond);
                }
                else if (key === 'zone') {
                    init.zone = item.toValue().cast(TimeZone.Form, init.zone);
                }
            }
            else if (item instanceof Value && positional) {
                if (index === 0) {
                    init.year = item.numberValue(init.year);
                }
                else if (index === 1) {
                    init.month = item.numberValue(init.month);
                }
                else if (index === 2) {
                    init.day = item.numberValue(init.day);
                }
                else if (index === 3) {
                    init.hour = item.numberValue(init.hour);
                }
                else if (index === 4) {
                    init.minute = item.numberValue(init.minute);
                }
                else if (index === 5) {
                    init.second = item.numberValue(init.second);
                }
                else if (index === 6) {
                    init.millisecond = item.numberValue(init.millisecond);
                }
                else if (index === 7) {
                    init.zone = item.cast(TimeZone.Form, init.zone);
                }
            }
        });
        if (DateTime.isInit(init)) {
            return DateTime.fromObject(init);
        }
        return undefined;
    };
    DateTime.parse = function (date, zone) {
        return DateTimeFormat.Iso8601.parse(date);
    };
    DateTime.isInit = function (value) {
        if (value && typeof value === 'object') {
            var init = value;
            return init.year !== undefined || init.month !== undefined || init.day !== undefined
                || init.hour !== undefined || init.minute !== undefined || init.second !== undefined
                || init.millisecond !== undefined;
        }
        return false;
    };
    DateTime.Form = undefined;
    return DateTime;
}());
var DateTimeForm = (function (_super) {
    __extends(DateTimeForm, _super);
    function DateTimeForm(unit) {
        if (unit === void 0) { unit = new DateTime(0); }
        var _this = _super.call(this) || this;
        _this.unit = unit;
        return _this;
    }
    DateTimeForm.prototype.mold = function (date) {
        date = DateTime.fromAny(date);
        return Text$1.valueOf(DateTimeFormat.Iso8601.format(date));
    };
    DateTimeForm.prototype.cast = function (value) {
        var date;
        try {
            date = DateTime.fromValue(value);
            if (!date) {
                var millis = value.numberValue();
                if (millis !== undefined) {
                    date = new DateTime(millis);
                }
                else {
                    var str = value.stringValue();
                    if (str !== undefined) {
                        date = DateTime.parse(str);
                    }
                }
            }
        }
        catch (e) {
        }
        return date;
    };
    return DateTimeForm;
}(Form));
DateTime.Form = new DateTimeForm();

var SECOND = 1000;
var MINUTE = 60 * SECOND;
var HOUR = 60 * MINUTE;
var TimeInterval = (function () {
    function TimeInterval() {
    }
    TimeInterval.prototype.next = function (d, k) {
        return this.floor(this.offset(d, k));
    };
    TimeInterval.prototype.ceil = function (d) {
        if (d instanceof DateTime) {
            d = d.time(d.time() - 1);
        }
        else {
            d = DateTime.time(d) - 1;
        }
        return this.next(this.floor(d), 1);
    };
    TimeInterval.prototype.round = function (d) {
        d = DateTime.fromAny(d);
        var d0 = this.floor(d);
        var d1 = this.ceil(d);
        return d.time() - d0.time() < d1.time() - d.time() ? d0 : d1;
    };
    TimeInterval.prototype.range = function (d0, d1, step) {
        d0 = this.ceil(d0);
        d1 = DateTime.time(d1);
        var ds = [];
        step = typeof step === 'number' ? Math.floor(step) : 1;
        if (step > 0) {
            while (d0.time() < d1) {
                ds.push(d0);
                d0 = this.next(d0, step);
            }
        }
        return ds;
    };
    TimeInterval.prototype.filter = function (predicate) {
        return new FilterTimeInterval(this, predicate);
    };
    TimeInterval.years = function (d0, d1, step) {
        if (d0 === undefined) {
            return TimeInterval.Years;
        }
        else if (d1 === undefined) {
            return TimeInterval.Years.every(d0);
        }
        else {
            return TimeInterval.Years.range(d0, d1, step);
        }
    };
    TimeInterval.months = function (d0, d1, step) {
        if (d0 === undefined) {
            return TimeInterval.Months;
        }
        else if (d1 === undefined) {
            return TimeInterval.Months.every(d0);
        }
        else {
            return TimeInterval.Months.range(d0, d1, step);
        }
    };
    TimeInterval.weeks = function (d0, d1, step) {
        if (d0 === undefined) {
            return TimeInterval.Weeks;
        }
        else {
            return TimeInterval.Weeks.range(d0, d1, step);
        }
    };
    TimeInterval.days = function (d0, d1, step) {
        if (d0 === undefined) {
            return TimeInterval.Days;
        }
        else if (d1 === undefined) {
            return TimeInterval.Days.every(d0);
        }
        else {
            return TimeInterval.Days.range(d0, d1, step);
        }
    };
    TimeInterval.hours = function (d0, d1, step) {
        if (d0 === undefined) {
            return TimeInterval.Hours;
        }
        else if (d1 === undefined) {
            return TimeInterval.Hours.every(d0);
        }
        else {
            return TimeInterval.Hours.range(d0, d1, step);
        }
    };
    TimeInterval.minutes = function (d0, d1, step) {
        if (d0 === undefined) {
            return TimeInterval.Minutes;
        }
        else if (d1 === undefined) {
            return TimeInterval.Minutes.every(d0);
        }
        else {
            return TimeInterval.Minutes.range(d0, d1, step);
        }
    };
    TimeInterval.seconds = function (d0, d1, step) {
        if (d0 === undefined) {
            return TimeInterval.Seconds;
        }
        else if (d1 === undefined) {
            return TimeInterval.Seconds.every(d0);
        }
        else {
            return TimeInterval.Seconds.range(d0, d1, step);
        }
    };
    TimeInterval.milliseconds = function (d0, d1, step) {
        if (d0 === undefined) {
            return TimeInterval.Milliseconds;
        }
        else if (d1 === undefined) {
            return TimeInterval.Milliseconds.every(d0);
        }
        else {
            return TimeInterval.Milliseconds.range(d0, d1, step);
        }
    };
    TimeInterval.Years = undefined;
    TimeInterval.Months = undefined;
    TimeInterval.Weeks = undefined;
    TimeInterval.Days = undefined;
    TimeInterval.Hours = undefined;
    TimeInterval.Minutes = undefined;
    TimeInterval.Seconds = undefined;
    TimeInterval.Milliseconds = undefined;
    return TimeInterval;
}());
var FilterTimeInterval = (function (_super) {
    __extends(FilterTimeInterval, _super);
    function FilterTimeInterval(unit, predicate) {
        var _this = _super.call(this) || this;
        _this.unit = unit;
        _this.predicate = predicate;
        return _this;
    }
    FilterTimeInterval.prototype.offset = function (d, k) {
        d = DateTime.fromAny(d);
        k = Math.max(1, typeof k === 'number' ? Math.floor(k) : 1);
        while (k < 0) {
            do {
                d = this.unit.offset(d, -1);
            } while (!this.predicate(d));
            k += 1;
        }
        while (k > 0) {
            do {
                d = this.unit.offset(d, 1);
            } while (!this.predicate(d));
            k -= 1;
        }
        return d;
    };
    FilterTimeInterval.prototype.floor = function (d) {
        d = DateTime.fromAny(d);
        while (d = this.unit.floor(d), !this.predicate(d)) {
            d = d.time(d.time() - 1);
        }
        return d;
    };
    return FilterTimeInterval;
}(TimeInterval));
var UnitTimeInterval = (function (_super) {
    __extends(UnitTimeInterval, _super);
    function UnitTimeInterval() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return UnitTimeInterval;
}(TimeInterval));
var YearInterval = (function (_super) {
    __extends(YearInterval, _super);
    function YearInterval() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    YearInterval.prototype.offset = function (d, k) {
        d = DateTime.fromAny(d);
        k = Math.max(1, typeof k === 'number' ? Math.floor(k) : 1);
        d = d.year(d.year() + k);
        return d;
    };
    YearInterval.prototype.next = function (d, k) {
        d = DateTime.fromAny(d);
        k = Math.max(1, typeof k === 'number' ? Math.floor(k) : 1);
        return d.year(d.year() + k).month(0, 1).hour(0, 0, 0, 0);
    };
    YearInterval.prototype.floor = function (d) {
        d = DateTime.fromAny(d);
        return d.month(0, 1).hour(0, 0, 0, 0);
    };
    YearInterval.prototype.ceil = function (d) {
        d = DateTime.fromAny(d);
        d = d.time(d.time() - 1);
        d = d.month(0, 1).hour(0, 0, 0, 0);
        d = d.year(d.year() + 1);
        return d.month(0, 1).hour(0, 0, 0, 0);
    };
    YearInterval.prototype.every = function (k) {
        if (k === 1) {
            return this;
        }
        else if (isFinite(k) && k >= 1) {
            return new YearsInterval(k);
        }
        else {
            throw new Error('' + k);
        }
    };
    return YearInterval;
}(UnitTimeInterval));
TimeInterval.Years = new YearInterval();
var YearsInterval = (function (_super) {
    __extends(YearsInterval, _super);
    function YearsInterval(stride) {
        var _this = _super.call(this) || this;
        _this.stride = stride || 1;
        return _this;
    }
    YearsInterval.prototype.offset = function (d, k) {
        d = DateTime.fromAny(d);
        k = Math.max(1, typeof k === 'number' ? Math.floor(k) : 1);
        return d.year(d.year() + k * this.stride);
    };
    YearsInterval.prototype.next = function (d, k) {
        d = DateTime.fromAny(d);
        k = Math.max(1, typeof k === 'number' ? Math.floor(k) : 1);
        d = d.year(Math.floor((d.year() + k * this.stride) / this.stride) * this.stride);
        return d.month(0, 1).hour(0, 0, 0, 0);
    };
    YearsInterval.prototype.floor = function (d) {
        d = DateTime.fromAny(d);
        d = d.year(Math.floor(d.year() / this.stride) * this.stride);
        return d.month(0, 1).hour(0, 0, 0, 0);
    };
    YearsInterval.prototype.ceil = function (d) {
        d = DateTime.fromAny(d);
        d = d.time(d.time() - 1);
        d = d.year(Math.floor(d.year() / this.stride) * this.stride);
        d = d.month(0, 1).hour(0, 0, 0, 0);
        d = d.year(Math.floor((d.year() + this.stride) / this.stride) * this.stride);
        return d.month(0, 1).hour(0, 0, 0, 0);
    };
    return YearsInterval;
}(TimeInterval));
var MonthInterval = (function (_super) {
    __extends(MonthInterval, _super);
    function MonthInterval() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MonthInterval.prototype.offset = function (d, k) {
        d = DateTime.fromAny(d);
        k = Math.max(1, typeof k === 'number' ? Math.floor(k) : 1);
        return d.month(d.month() + k);
    };
    MonthInterval.prototype.next = function (d, k) {
        d = DateTime.fromAny(d);
        k = Math.max(1, typeof k === 'number' ? Math.floor(k) : 1);
        d = d.month(d.month() + k);
        return d.day(1).hour(0, 0, 0, 0);
    };
    MonthInterval.prototype.floor = function (d) {
        d = DateTime.fromAny(d);
        return d.day(1).hour(0, 0, 0, 0);
    };
    MonthInterval.prototype.ceil = function (d) {
        d = DateTime.fromAny(d);
        d = d.time(d.time() - 1);
        d = d.day(1).hour(0, 0, 0, 0);
        d = d.month(d.month() + 1);
        return d.day(1).hour(0, 0, 0, 0);
    };
    MonthInterval.prototype.every = function (k) {
        if (k === 1) {
            return this;
        }
        else if (isFinite(k) && k >= 1) {
            return new FilterTimeInterval(this, MonthInterval.modulo.bind(null, k));
        }
        else {
            throw new Error('' + k);
        }
    };
    MonthInterval.modulo = function (k, d) {
        return d.month() % k === 0;
    };
    return MonthInterval;
}(UnitTimeInterval));
TimeInterval.Months = new MonthInterval();
var WeekInterval = (function (_super) {
    __extends(WeekInterval, _super);
    function WeekInterval(day) {
        if (day === void 0) { day = 0; }
        var _this = _super.call(this) || this;
        _this.day = day;
        return _this;
    }
    WeekInterval.prototype.offset = function (d, k) {
        d = DateTime.fromAny(d);
        k = Math.max(1, typeof k === 'number' ? Math.floor(k) : 1);
        return d.day(d.day() + 7 * k);
    };
    WeekInterval.prototype.next = function (d, k) {
        d = DateTime.fromAny(d);
        k = Math.max(1, typeof k === 'number' ? Math.floor(k) : 1);
        d = d.day(d.day() + 7 * k);
        d = d.day(d.day() - (d.weekday() + 7 - this.day) % 7);
        return d.hour(0, 0, 0, 0);
    };
    WeekInterval.prototype.floor = function (d) {
        d = DateTime.fromAny(d);
        d = d.day(d.day() - (d.weekday() + 7 - this.day) % 7);
        return d.hour(0, 0, 0, 0);
    };
    WeekInterval.prototype.ceil = function (d) {
        d = DateTime.fromAny(d);
        d = d.time(d.time() - 1);
        d = d.day(d.day() - (d.weekday() + 7 - this.day) % 7);
        d = d.hour(0, 0, 0, 0);
        d = d.day(d.day() + 7);
        d = d.day(d.day() - (d.weekday() + 7 - this.day) % 7);
        return d.hour(0, 0, 0, 0);
    };
    return WeekInterval;
}(TimeInterval));
TimeInterval.Weeks = new WeekInterval();
var DayInterval = (function (_super) {
    __extends(DayInterval, _super);
    function DayInterval() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DayInterval.prototype.offset = function (d, k) {
        d = DateTime.fromAny(d);
        k = Math.max(1, typeof k === 'number' ? Math.floor(k) : 1);
        return d.day(d.day() + k);
    };
    DayInterval.prototype.next = function (d, k) {
        d = DateTime.fromAny(d);
        k = Math.max(1, typeof k === 'number' ? Math.floor(k) : 1);
        d = d.day(d.day() + k);
        return d.hour(0, 0, 0, 0);
    };
    DayInterval.prototype.floor = function (d) {
        d = DateTime.fromAny(d);
        return d.hour(0, 0, 0, 0);
    };
    DayInterval.prototype.ceil = function (d) {
        d = DateTime.fromAny(d);
        d = d.time(d.time() - 1);
        d = d.hour(0, 0, 0, 0);
        d = d.day(d.day() + 1);
        return d.hour(0, 0, 0, 0);
    };
    DayInterval.prototype.every = function (k) {
        if (k === 1) {
            return this;
        }
        else if (isFinite(k) && k >= 1) {
            return new FilterTimeInterval(this, DayInterval.modulo.bind(null, k));
        }
        else {
            throw new Error('' + k);
        }
    };
    DayInterval.modulo = function (k, d) {
        return d.day() % k === 0;
    };
    return DayInterval;
}(UnitTimeInterval));
TimeInterval.Days = new DayInterval();
var HourInterval = (function (_super) {
    __extends(HourInterval, _super);
    function HourInterval() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HourInterval.prototype.offset = function (d, k) {
        d = DateTime.fromAny(d);
        k = Math.max(1, typeof k === 'number' ? Math.floor(k) : 1);
        return d.time(d.time() + k * HOUR);
    };
    HourInterval.prototype.next = function (d, k) {
        d = DateTime.fromAny(d);
        k = Math.max(1, typeof k === 'number' ? Math.floor(k) : 1);
        d = d.time(d.time() + k * HOUR);
        var dtz = d.zone().offset * MINUTE % HOUR;
        if (dtz < 0) {
            dtz += HOUR;
        }
        return d.time(Math.floor((d.time() - dtz) / HOUR) * HOUR + dtz);
    };
    HourInterval.prototype.floor = function (d) {
        d = DateTime.fromAny(d);
        var dtz = d.zone().offset * MINUTE % HOUR;
        if (dtz < 0) {
            dtz += HOUR;
        }
        return d.time(Math.floor((d.time() - dtz) / HOUR) * HOUR + dtz);
    };
    HourInterval.prototype.ceil = function (d) {
        d = DateTime.fromAny(d);
        d = d.time(d.time() - 1);
        var dtz = d.zone().offset * MINUTE % HOUR;
        if (dtz < 0) {
            dtz += HOUR;
        }
        d = d.time((Math.floor((d.time() - dtz) / HOUR) * HOUR + dtz) + HOUR);
        dtz = d.zone().offset * MINUTE % HOUR;
        if (dtz < 0) {
            dtz += HOUR;
        }
        return d.time(Math.floor((d.time() - dtz) / HOUR) * HOUR + dtz);
    };
    HourInterval.prototype.every = function (k) {
        if (k === 1) {
            return this;
        }
        else if (isFinite(k) && k >= 1) {
            return new FilterTimeInterval(this, HourInterval.modulo.bind(null, k));
        }
        else {
            throw new Error('' + k);
        }
    };
    HourInterval.modulo = function (k, d) {
        return d.hour() % k === 0;
    };
    return HourInterval;
}(UnitTimeInterval));
TimeInterval.Hours = new HourInterval();
var MinuteInterval = (function (_super) {
    __extends(MinuteInterval, _super);
    function MinuteInterval() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MinuteInterval.prototype.offset = function (d, k) {
        d = DateTime.fromAny(d);
        k = Math.max(1, typeof k === 'number' ? Math.floor(k) : 1);
        return d.time(d.time() + k * MINUTE);
    };
    MinuteInterval.prototype.next = function (d, k) {
        d = DateTime.fromAny(d);
        k = Math.max(1, typeof k === 'number' ? Math.floor(k) : 1);
        return d.time(Math.floor((d.time() + k * MINUTE) / MINUTE) * MINUTE);
    };
    MinuteInterval.prototype.floor = function (d) {
        d = DateTime.fromAny(d);
        return d.time(Math.floor(d.time() / MINUTE) * MINUTE);
    };
    MinuteInterval.prototype.ceil = function (d) {
        d = DateTime.fromAny(d);
        return d.time(Math.floor(((Math.floor((d.time() - 1) / MINUTE) * MINUTE) + MINUTE) / MINUTE) * MINUTE);
    };
    MinuteInterval.prototype.every = function (k) {
        if (k === 1) {
            return this;
        }
        else if (isFinite(k) && k >= 1) {
            return new FilterTimeInterval(this, MinuteInterval.modulo.bind(null, k));
        }
        else {
            throw new Error('' + k);
        }
    };
    MinuteInterval.modulo = function (k, d) {
        return d.minute() % k === 0;
    };
    return MinuteInterval;
}(UnitTimeInterval));
TimeInterval.Minutes = new MinuteInterval();
var SecondInterval = (function (_super) {
    __extends(SecondInterval, _super);
    function SecondInterval() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SecondInterval.prototype.offset = function (d, k) {
        d = DateTime.fromAny(d);
        k = Math.max(1, typeof k === 'number' ? Math.floor(k) : 1);
        return d.time(d.time() + k * SECOND);
    };
    SecondInterval.prototype.next = function (d, k) {
        d = DateTime.fromAny(d);
        k = Math.max(1, typeof k === 'number' ? Math.floor(k) : 1);
        return d.time(Math.floor((d.time() + k * SECOND) / SECOND) * SECOND);
    };
    SecondInterval.prototype.floor = function (d) {
        d = DateTime.fromAny(d);
        return d.time(Math.floor(d.time() / SECOND) * SECOND);
    };
    SecondInterval.prototype.ceil = function (d) {
        d = DateTime.fromAny(d);
        return d.time(Math.floor(((Math.floor((d.time() - 1) / SECOND) * SECOND) + SECOND) / SECOND) * SECOND);
    };
    SecondInterval.prototype.every = function (k) {
        if (k === 1) {
            return this;
        }
        else if (isFinite(k) && k >= 1) {
            return new FilterTimeInterval(this, SecondInterval.modulo.bind(null, k));
        }
        else {
            throw new Error('' + k);
        }
    };
    SecondInterval.modulo = function (k, d) {
        return d.second() % k === 0;
    };
    return SecondInterval;
}(UnitTimeInterval));
TimeInterval.Seconds = new SecondInterval();
var MillisecondInterval = (function (_super) {
    __extends(MillisecondInterval, _super);
    function MillisecondInterval() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MillisecondInterval.prototype.offset = function (d, k) {
        d = DateTime.fromAny(d);
        k = Math.max(1, typeof k === 'number' ? Math.floor(k) : 1);
        return d.time(d.time() + k);
    };
    MillisecondInterval.prototype.next = function (d, k) {
        d = DateTime.fromAny(d);
        k = Math.max(1, typeof k === 'number' ? Math.floor(k) : 1);
        return d.time(d.time() + k);
    };
    MillisecondInterval.prototype.floor = function (d) {
        return DateTime.fromAny(d);
    };
    MillisecondInterval.prototype.ceil = function (d) {
        return DateTime.fromAny(d);
    };
    MillisecondInterval.prototype.every = function (k) {
        if (k === 1) {
            return this;
        }
        else if (isFinite(k) && k >= 1) {
            return new MillisecondsInterval(k);
        }
        else {
            throw new Error('' + k);
        }
    };
    return MillisecondInterval;
}(UnitTimeInterval));
TimeInterval.Milliseconds = new MillisecondInterval();
var MillisecondsInterval = (function (_super) {
    __extends(MillisecondsInterval, _super);
    function MillisecondsInterval(stride) {
        var _this = _super.call(this) || this;
        _this.stride = stride || 1;
        return _this;
    }
    MillisecondsInterval.prototype.offset = function (d, k) {
        d = DateTime.fromAny(d);
        k = Math.max(1, typeof k === 'number' ? Math.floor(k) : 1);
        return d.time(d.time() + k * this.stride);
    };
    MillisecondsInterval.prototype.next = function (d, k) {
        d = DateTime.fromAny(d);
        k = Math.max(1, typeof k === 'number' ? Math.floor(k) : 1);
        var stride = this.stride;
        return d.time(Math.floor((d.time() + k * stride) / stride) * stride);
    };
    MillisecondsInterval.prototype.floor = function (d) {
        d = DateTime.fromAny(d);
        var stride = this.stride;
        return d.time(Math.floor(d.time() / stride) * stride);
    };
    MillisecondsInterval.prototype.ceil = function (d) {
        d = DateTime.fromAny(d);
        var stride = this.stride;
        return d.time(Math.floor(((Math.floor((d.time() - 1) / stride) * stride) + stride) / stride) * stride);
    };
    return MillisecondsInterval;
}(TimeInterval));

var PI = Math.PI;
var TAU = 2 * PI;
var Angle = (function () {
    function Angle() {
    }
    Angle.prototype.isDefined = function () {
        return this.value !== 0;
    };
    Angle.prototype.plus = function (that, units) {
        if (units === void 0) { units = this.units; }
        return Angle.fromAny(this.toValue(units) + Angle.fromAny(that).toValue(units), units);
    };
    Angle.prototype.neg = function (units) {
        if (units === void 0) { units = this.units; }
        return Angle.fromAny(-this.toValue(units), units);
    };
    Angle.prototype.minus = function (that, units) {
        if (units === void 0) { units = this.units; }
        return Angle.fromAny(this.toValue(units) - Angle.fromAny(that).toValue(units), units);
    };
    Angle.prototype.times = function (scalar, units) {
        if (units === void 0) { units = this.units; }
        return Angle.fromAny(this.toValue(units) * scalar, units);
    };
    Angle.prototype.divide = function (scalar, units) {
        if (units === void 0) { units = this.units; }
        return Angle.fromAny(this.toValue(units) / scalar, units);
    };
    Angle.prototype.norm = function (total, units) {
        if (units === void 0) { units = this.units; }
        return Angle.fromAny(this.toValue(units) / Angle.fromAny(total).toValue(units), units);
    };
    Angle.prototype.deg = function () {
        return new DegAngle(this.degValue());
    };
    Angle.prototype.grad = function () {
        return new GradAngle(this.gradValue());
    };
    Angle.prototype.rad = function () {
        return new RadAngle(this.radValue());
    };
    Angle.prototype.turn = function () {
        return new TurnAngle(this.turnValue());
    };
    Angle.prototype.toValue = function (units) {
        switch (units) {
            case 'deg': return this.degValue();
            case 'grad': return this.gradValue();
            case 'rad': return this.radValue();
            case 'turn': return this.turnValue();
            default: throw new TypeError(units);
        }
    };
    Angle.prototype.to = function (units) {
        switch (units) {
            case 'deg': return this.deg();
            case 'grad': return this.grad();
            case 'rad': return this.rad();
            case 'turn': return this.turn();
            default: throw new TypeError(units);
        }
    };
    Angle.prototype.equals = function (that) {
        if (that instanceof Angle) {
            return this.value === that.value && this.units === that.units;
        }
        return false;
    };
    Angle.prototype.toString = function () {
        return this.value + this.units;
    };
    Angle.form = function (units) {
        if (units !== undefined) {
            return new AngleForm(units);
        }
        else {
            return Angle.Form;
        }
    };
    Angle.zero = function (units) {
        units = units || 'rad';
        switch (units) {
            case 'deg': return new DegAngle(0);
            case 'grad': return new GradAngle(0);
            case 'rad': return new RadAngle(0);
            case 'turn': return new TurnAngle(0);
            default: throw new TypeError(units);
        }
    };
    Angle.deg = function (value) {
        return new DegAngle(value);
    };
    Angle.grad = function (value) {
        return new GradAngle(value);
    };
    Angle.rad = function (value) {
        return new RadAngle(value);
    };
    Angle.turn = function (value) {
        return new TurnAngle(value);
    };
    Angle.fromAny = function (value, units) {
        if (value instanceof Angle) {
            return value;
        }
        else if (typeof value === 'number') {
            if (typeof units === 'string') {
                switch (units) {
                    case 'deg': return new DegAngle(value);
                    case 'grad': return new GradAngle(value);
                    case '':
                    case 'rad': return new RadAngle(value);
                    case 'turn': return new TurnAngle(value);
                    default: throw new Error(units);
                }
            }
            else {
                return new RadAngle(value);
            }
        }
        else if (typeof value === 'string') {
            return Angle.parse(value);
        }
        else {
            throw new Error();
        }
    };
    Angle.fromValue = function (value) {
        if (value.length === 2) {
            var num = value.getItem(0).numberValue();
            var units = value.getItem(1);
            if (num !== undefined && isFinite(num) && units instanceof Attr && units.value === Value.Extant) {
                switch (units.key.value) {
                    case 'deg': return new DegAngle(num);
                    case 'grad': return new GradAngle(num);
                    case 'rad': return new RadAngle(num);
                    case 'turn': return new TurnAngle(num);
                    default:
                }
            }
        }
        return undefined;
    };
    Angle.parse = function (str, defaultUnits) {
        var input = new StringInput(str);
        while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
            input.step();
        }
        var output = AngleParser.parse(input, defaultUnits);
        if (output.isDone()) {
            while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                input.step();
            }
            if (!input.isEmpty()) {
                output = Iteratee.unexpected(input);
            }
        }
        return output.bind();
    };
    Angle.Form = undefined;
    return Angle;
}());
var DegAngle = (function (_super) {
    __extends(DegAngle, _super);
    function DegAngle(value) {
        var _this = _super.call(this) || this;
        _this.value = value;
        return _this;
    }
    Object.defineProperty(DegAngle.prototype, "units", {
        get: function () {
            return 'deg';
        },
        enumerable: true,
        configurable: true
    });
    DegAngle.prototype.degValue = function () {
        return this.value;
    };
    DegAngle.prototype.gradValue = function () {
        return this.value * 10 / 9;
    };
    DegAngle.prototype.radValue = function () {
        return this.value * PI / 180;
    };
    DegAngle.prototype.turnValue = function () {
        return this.value / 360;
    };
    DegAngle.prototype.deg = function () {
        return this;
    };
    return DegAngle;
}(Angle));
var GradAngle = (function (_super) {
    __extends(GradAngle, _super);
    function GradAngle(value) {
        var _this = _super.call(this) || this;
        _this.value = value;
        return _this;
    }
    Object.defineProperty(GradAngle.prototype, "units", {
        get: function () {
            return 'grad';
        },
        enumerable: true,
        configurable: true
    });
    GradAngle.prototype.degValue = function () {
        return this.value * 0.9;
    };
    GradAngle.prototype.gradValue = function () {
        return this.value;
    };
    GradAngle.prototype.radValue = function () {
        return this.value * PI / 200;
    };
    GradAngle.prototype.turnValue = function () {
        return this.value / 400;
    };
    GradAngle.prototype.grad = function () {
        return this;
    };
    return GradAngle;
}(Angle));
var RadAngle = (function (_super) {
    __extends(RadAngle, _super);
    function RadAngle(value) {
        var _this = _super.call(this) || this;
        _this.value = value;
        return _this;
    }
    Object.defineProperty(RadAngle.prototype, "units", {
        get: function () {
            return 'rad';
        },
        enumerable: true,
        configurable: true
    });
    RadAngle.prototype.degValue = function () {
        return this.value * 180 / PI;
    };
    RadAngle.prototype.gradValue = function () {
        return this.value * 200 / PI;
    };
    RadAngle.prototype.radValue = function () {
        return this.value;
    };
    RadAngle.prototype.turnValue = function () {
        return this.value / TAU;
    };
    RadAngle.prototype.rad = function () {
        return this;
    };
    return RadAngle;
}(Angle));
var TurnAngle = (function (_super) {
    __extends(TurnAngle, _super);
    function TurnAngle(value) {
        var _this = _super.call(this) || this;
        _this.value = value;
        return _this;
    }
    Object.defineProperty(TurnAngle.prototype, "units", {
        get: function () {
            return 'turn';
        },
        enumerable: true,
        configurable: true
    });
    TurnAngle.prototype.degValue = function () {
        return this.value * 360;
    };
    TurnAngle.prototype.gradValue = function () {
        return this.value * 400;
    };
    TurnAngle.prototype.radValue = function () {
        return this.value * TAU;
    };
    TurnAngle.prototype.turnValue = function () {
        return this.value;
    };
    TurnAngle.prototype.turn = function () {
        return this;
    };
    return TurnAngle;
}(Angle));
var AngleParser = (function (_super) {
    __extends(AngleParser, _super);
    function AngleParser(defaultUnits, valueParser, unitsOutput, step) {
        var _this = _super.call(this) || this;
        _this.defaultUnits = defaultUnits;
        _this.valueParser = valueParser;
        _this.unitsOutput = unitsOutput;
        _this.step = step;
        return _this;
    }
    AngleParser.prototype.feed = function (input) {
        return AngleParser.parse(input, this.defaultUnits, this.valueParser, this.unitsOutput, this.step);
    };
    AngleParser.parse = function (input, defaultUnits, valueParser, unitsOutput, step) {
        if (defaultUnits === void 0) { defaultUnits = ''; }
        if (step === void 0) { step = 1; }
        var c = 0;
        if (step === 1) {
            if (!valueParser) {
                valueParser = Recon.Factory.parseDecimal(input);
            }
            while (valueParser.isCont() && (!input.isEmpty() || input.isDone())) {
                valueParser = valueParser.feed(input);
            }
            if (valueParser.isDone()) {
                step = 2;
            }
            else if (valueParser.isError()) {
                return valueParser.asError();
            }
        }
        if (step === 2) {
            unitsOutput = unitsOutput || new StringOutput();
            while (!input.isEmpty() && (c = input.head(), Iteratee.isAlpha(c))) {
                input.step();
                unitsOutput.push(c);
            }
            if (!input.isEmpty() || input.isDone()) {
                var value = valueParser.bind().numberValue();
                var units = unitsOutput.bind() || defaultUnits;
                switch (units) {
                    case 'deg': return Iteratee.done(new DegAngle(value));
                    case 'grad': return Iteratee.done(new GradAngle(value));
                    case '':
                    case 'rad': return Iteratee.done(new RadAngle(value));
                    case 'turn': return Iteratee.done(new TurnAngle(value));
                    default: return Iteratee.error(units);
                }
            }
        }
        return new AngleParser(defaultUnits, valueParser, unitsOutput, step);
    };
    return AngleParser;
}(Iteratee));
var AngleForm = (function (_super) {
    __extends(AngleForm, _super);
    function AngleForm(units) {
        var _this = _super.call(this) || this;
        _this.units = units;
        return _this;
    }
    Object.defineProperty(AngleForm.prototype, "unit", {
        get: function () {
            return Angle.zero(this.units);
        },
        enumerable: true,
        configurable: true
    });
    AngleForm.prototype.mold = function (angle) {
        angle = Angle.fromAny(angle);
        return Text$1.valueOf(angle.toString());
    };
    AngleForm.prototype.cast = function (value) {
        var angle;
        try {
            angle = Angle.fromValue(value);
            if (!angle) {
                var str = value.stringValue();
                if (str !== undefined) {
                    angle = Angle.parse(str);
                }
            }
        }
        catch (e) {
        }
        return angle;
    };
    return AngleForm;
}(Form));
Angle.Form = new AngleForm();

function widthUnit(node) {
    while (node) {
        if (node instanceof HTMLElement && node.offsetParent instanceof HTMLElement) {
            return node.offsetParent.offsetWidth;
        }
        node = node.parentNode || undefined;
    }
    return 0;
}
function emUnit(node) {
    while (node) {
        if (node instanceof Element) {
            var fontSize = getComputedStyle(node).fontSize;
            if (fontSize !== null) {
                return parseFloat(fontSize);
            }
        }
        node = node.parentNode || undefined;
    }
    return 0;
}
function remUnit() {
    var fontSize = getComputedStyle(document.documentElement).fontSize;
    if (fontSize !== null) {
        return parseFloat(fontSize);
    }
    return 0;
}
var Length = (function () {
    function Length() {
    }
    Length.prototype.isDefined = function () {
        return this.value !== 0;
    };
    Object.defineProperty(Length.prototype, "unitValue", {
        get: function () {
            return 0;
        },
        enumerable: true,
        configurable: true
    });
    Length.prototype.emValue = function () {
        return this.pxValue() / emUnit(this.node);
    };
    Length.prototype.remValue = function () {
        return this.pxValue() / remUnit();
    };
    Length.prototype.pctValue = function () {
        return this.px().value / this.unitValue;
    };
    Length.prototype.px = function () {
        return new PxLength(this.pxValue(), this.node);
    };
    Length.prototype.em = function () {
        return new EmLength(this.emValue(), this.node);
    };
    Length.prototype.rem = function () {
        return new RemLength(this.remValue(), this.node);
    };
    Length.prototype.pct = function () {
        return new PctLength(this.pctValue(), this.node);
    };
    Length.prototype.toValue = function (units) {
        switch (units) {
            case 'px': return this.pxValue();
            case 'em': return this.emValue();
            case 'rem': return this.remValue();
            case '%': return this.pctValue();
            default: throw new TypeError(units);
        }
    };
    Length.prototype.to = function (units) {
        switch (units) {
            case 'px': return this.px();
            case 'em': return this.em();
            case 'rem': return this.rem();
            case '%': return this.pct();
            default: throw new TypeError(units);
        }
    };
    Length.prototype.equals = function (that) {
        if (that instanceof Length) {
            return this.value === that.value && this.units === that.units && this.node === that.node;
        }
        return false;
    };
    Length.prototype.toString = function () {
        return this.value + this.units;
    };
    Length.form = function (node) {
        if (node) {
            return new LengthForm(node);
        }
        else {
            return Length.Form;
        }
    };
    Length.zero = function (node) {
        return new PxLength(0, node);
    };
    Length.px = function (value, node) {
        return new PxLength(value, node);
    };
    Length.em = function (value, node) {
        return new EmLength(value, node);
    };
    Length.rem = function (value, node) {
        return new RemLength(value, node);
    };
    Length.pct = function (value, node) {
        return new PctLength(value, node);
    };
    Length.unitless = function (value, node) {
        return new UnitlessLength(value, node);
    };
    Length.fromAny = function (value, units, node) {
        if (value instanceof Length) {
            return value;
        }
        else if (typeof value === 'number') {
            if (typeof units === 'string') {
                switch (units) {
                    case 'px': return new PxLength(value, node);
                    case 'em': return new EmLength(value, node);
                    case 'rem': return new RemLength(value, node);
                    case '%': return new PctLength(value, node);
                    case '': return new UnitlessLength(value, node);
                    default: throw new Error(units);
                }
            }
            else {
                if (units !== undefined) {
                    node = units;
                }
                return new PxLength(value, node);
            }
        }
        else if (typeof value === 'string' && typeof units !== 'string') {
            return Length.parse(value, units);
        }
        else {
            throw new Error();
        }
    };
    Length.fromValue = function (value, node) {
        if (value.length === 2) {
            var num = value.getItem(0).numberValue();
            var units = value.getItem(1);
            if (num !== undefined && isFinite(num) && units instanceof Attr && units.value === Value.Extant) {
                switch (units.key.value) {
                    case 'px': return new PxLength(num, node);
                    case 'em': return new EmLength(num, node);
                    case 'rem': return new RemLength(num, node);
                    case 'pct': return new PctLength(num, node);
                    default:
                }
            }
        }
        return undefined;
    };
    Length.parse = function (str, node) {
        var input = new StringInput(str);
        while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
            input.step();
        }
        var output = LengthParser.parse(input, node);
        if (output.isDone()) {
            while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                input.step();
            }
            if (!input.isEmpty()) {
                output = Iteratee.unexpected(input);
            }
        }
        return output.bind();
    };
    Length.widthUnit = function () {
        return widthUnit(this.node);
    };
    Length.emUnit = function () {
        return emUnit(this.node);
    };
    Length.Form = undefined;
    return Length;
}());
var PxLength = (function (_super) {
    __extends(PxLength, _super);
    function PxLength(value, node) {
        var _this = _super.call(this) || this;
        _this.value = value;
        _this.node = node;
        return _this;
    }
    Object.defineProperty(PxLength.prototype, "units", {
        get: function () {
            return 'px';
        },
        enumerable: true,
        configurable: true
    });
    PxLength.prototype.pxValue = function () {
        return this.value;
    };
    PxLength.prototype.px = function () {
        return this;
    };
    return PxLength;
}(Length));
var EmLength = (function (_super) {
    __extends(EmLength, _super);
    function EmLength(value, node) {
        var _this = _super.call(this) || this;
        _this.value = value;
        _this.node = node;
        return _this;
    }
    Object.defineProperty(EmLength.prototype, "units", {
        get: function () {
            return 'em';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EmLength.prototype, "unitValue", {
        get: function () {
            return emUnit(this.node);
        },
        enumerable: true,
        configurable: true
    });
    EmLength.prototype.pxValue = function () {
        return this.unitValue * this.value;
    };
    EmLength.prototype.em = function () {
        return this;
    };
    return EmLength;
}(Length));
var RemLength = (function (_super) {
    __extends(RemLength, _super);
    function RemLength(value, node) {
        var _this = _super.call(this) || this;
        _this.value = value;
        _this.node = node;
        return _this;
    }
    Object.defineProperty(RemLength.prototype, "units", {
        get: function () {
            return 'rem';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RemLength.prototype, "unitValue", {
        get: function () {
            return remUnit();
        },
        enumerable: true,
        configurable: true
    });
    RemLength.prototype.pxValue = function () {
        return this.unitValue * this.value;
    };
    RemLength.prototype.rem = function () {
        return this;
    };
    return RemLength;
}(Length));
var PctLength = (function (_super) {
    __extends(PctLength, _super);
    function PctLength(value, node) {
        var _this = _super.call(this) || this;
        _this.value = value;
        _this.node = node;
        return _this;
    }
    Object.defineProperty(PctLength.prototype, "units", {
        get: function () {
            return '%';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PctLength.prototype, "unitValue", {
        get: function () {
            return widthUnit(this.node);
        },
        enumerable: true,
        configurable: true
    });
    PctLength.prototype.pxValue = function (unitValue) {
        if (unitValue === void 0) { unitValue = this.unitValue; }
        return unitValue * this.value / 100;
    };
    PctLength.prototype.pct = function () {
        return this;
    };
    return PctLength;
}(Length));
var UnitlessLength = (function (_super) {
    __extends(UnitlessLength, _super);
    function UnitlessLength(value, node) {
        var _this = _super.call(this) || this;
        _this.value = value;
        _this.node = node;
        return _this;
    }
    Object.defineProperty(UnitlessLength.prototype, "units", {
        get: function () {
            return '';
        },
        enumerable: true,
        configurable: true
    });
    UnitlessLength.prototype.pxValue = function () {
        return this.value;
    };
    return UnitlessLength;
}(Length));
var LengthParser = (function (_super) {
    __extends(LengthParser, _super);
    function LengthParser(node, valueParser, unitsOutput, step) {
        var _this = _super.call(this) || this;
        _this.node = node;
        _this.valueParser = valueParser;
        _this.unitsOutput = unitsOutput;
        _this.step = step;
        return _this;
    }
    LengthParser.prototype.feed = function (input) {
        return LengthParser.parse(input, this.node, this.valueParser, this.unitsOutput, this.step);
    };
    LengthParser.parse = function (input, node, valueParser, unitsOutput, step) {
        if (step === void 0) { step = 1; }
        var c = 0;
        if (step === 1) {
            if (!valueParser) {
                valueParser = Recon.Factory.parseDecimal(input);
            }
            while ((!input.isEmpty() || input.isDone()) && valueParser.isCont()) {
                valueParser = valueParser.feed(input);
            }
            if (valueParser.isDone()) {
                step = 2;
            }
            else if (valueParser.isError()) {
                return valueParser.asError();
            }
        }
        if (step === 2) {
            unitsOutput = unitsOutput || new StringOutput();
            while (!input.isEmpty() && (c = input.head(), Iteratee.isAlpha(c) || c === 37)) {
                input.step();
                unitsOutput.push(c);
            }
            if (!input.isEmpty() || input.isDone()) {
                var value = valueParser.bind().numberValue();
                var units = unitsOutput.bind();
                switch (units) {
                    case 'px': return Iteratee.done(new PxLength(value, node));
                    case 'em': return Iteratee.done(new EmLength(value, node));
                    case 'rem': return Iteratee.done(new RemLength(value, node));
                    case '%': return Iteratee.done(new PctLength(value, node));
                    case '': return Iteratee.done(new UnitlessLength(value, node));
                    default: return Iteratee.error(units);
                }
            }
        }
        return new LengthParser(node, valueParser, unitsOutput, step);
    };
    return LengthParser;
}(Iteratee));
var LengthForm = (function (_super) {
    __extends(LengthForm, _super);
    function LengthForm(node) {
        var _this = _super.call(this) || this;
        _this.node = node;
        return _this;
    }
    Object.defineProperty(LengthForm.prototype, "unit", {
        get: function () {
            return Length.zero(this.node);
        },
        enumerable: true,
        configurable: true
    });
    LengthForm.prototype.mold = function (length) {
        length = Length.fromAny(length);
        return Text$1.valueOf(length.toString());
    };
    LengthForm.prototype.cast = function (value) {
        var length;
        try {
            length = Length.fromValue(value);
            if (!length) {
                var str = value.stringValue();
                if (str !== undefined) {
                    length = Length.parse(str);
                }
            }
        }
        catch (e) {
        }
        return length;
    };
    return LengthForm;
}(Form));
Length.Form = new LengthForm();

var DARKER = 0.7;
var BRIGHTER = 1 / DARKER;
var Color = (function () {
    function Color() {
    }
    Color.prototype.contrast = function (k) {
        return this.lightness() < 0.67 ? this.brighter(k) : this.darker(k);
    };
    Color.form = function (unit) {
        if (unit !== undefined) {
            return new ColorForm(Color.fromAny(unit));
        }
        else {
            return Color.Form;
        }
    };
    Color.transparent = function (alpha) {
        return Rgb.transparent(alpha);
    };
    Color.black = function () {
        return Rgb.black();
    };
    Color.white = function () {
        return Rgb.white();
    };
    Color.rgb = function (r, g, b, a) {
        if (arguments.length === 1) {
            return Color.fromAny(r).rgb();
        }
        else {
            return new Rgb(r, g, b, a);
        }
    };
    Color.hsl = function (h, s, l, a) {
        if (arguments.length === 1) {
            return Color.fromAny(h).hsl();
        }
        else {
            h = typeof h === 'number' ? h : Angle.fromAny(h).degValue();
            return new Hsl(h, s, l, a);
        }
    };
    Color.fromAny = function (value) {
        if (value instanceof Color) {
            return value;
        }
        else if (typeof value === 'string') {
            return Color.parse(value);
        }
        else if (value && typeof value === 'object') {
            var rgb = value;
            if (rgb.r !== undefined && rgb.g !== undefined && rgb.b !== undefined) {
                return new Rgb(rgb.r, rgb.g, rgb.b, rgb.a);
            }
            var hsl = value;
            if (hsl.h !== undefined && hsl.s !== undefined && hsl.l !== undefined) {
                var h = typeof hsl.h === 'number' ? hsl.h : Angle.fromAny(hsl.h).degValue();
                return new Hsl(h, hsl.s, hsl.l, hsl.a);
            }
        }
        throw new TypeError('' + value);
    };
    Color.fromValue = function (value) {
        var color;
        color = Rgb.fromValue(value);
        if (!color) {
            color = Hsl.fromValue(value);
        }
        return color;
    };
    Color.parse = function (str) {
        var input = new StringInput(str);
        while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
            input.step();
        }
        var output = ColorParser.parse(input);
        if (output.isDone()) {
            while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                input.step();
            }
            if (!input.isEmpty()) {
                output = Iteratee.unexpected(input);
            }
        }
        return output.bind();
    };
    Color.isInit = function (value) {
        return Rgb.isInit(value) || Hsl.isInit(value);
    };
    Color.Form = undefined;
    return Color;
}());
var Rgb = (function (_super) {
    __extends(Rgb, _super);
    function Rgb(r, g, b, a) {
        if (a === void 0) { a = 1; }
        var _this = _super.call(this) || this;
        _this.r = r;
        _this.g = g;
        _this.b = b;
        _this.a = a;
        return _this;
    }
    Rgb.prototype.isDefined = function () {
        return this.r !== 0 || this.g !== 0 || this.b !== 0 || this.a !== 1;
    };
    Rgb.prototype.alpha = function (a) {
        if (a === undefined) {
            return this.a;
        }
        else {
            return new Rgb(this.r, this.g, this.b, a);
        }
    };
    Rgb.prototype.lightness = function () {
        var r = this.r / 255;
        var g = this.g / 255;
        var b = this.b / 255;
        var min = Math.min(r, g, b);
        var max = Math.max(r, g, b);
        return (max + min) / 2;
    };
    Rgb.prototype.brighter = function (k) {
        k = k === undefined ? BRIGHTER : Math.pow(BRIGHTER, k);
        return new Rgb(this.r * k, this.g * k, this.b * k, this.a);
    };
    Rgb.prototype.darker = function (k) {
        k = k === undefined ? DARKER : Math.pow(DARKER, k);
        return new Rgb(this.r * k, this.g * k, this.b * k, this.a);
    };
    Rgb.prototype.rgb = function () {
        return this;
    };
    Rgb.prototype.hsl = function () {
        var r = this.r / 255;
        var g = this.g / 255;
        var b = this.b / 255;
        var min = Math.min(r, g, b);
        var max = Math.max(r, g, b);
        var h = NaN;
        var s = max - min;
        var l = (max + min) / 2;
        if (s) {
            if (r === max) {
                h = (g - b) / s + +(g < b) * 6;
            }
            else if (g === max) {
                h = (b - r) / s + 2;
            }
            else {
                h = (r - g) / s + 4;
            }
            s /= l < 0.5 ? max + min : 2 - (max + min);
            h *= 60;
        }
        else {
            s = l > 0 && l < 1 ? 0 : h;
        }
        return new Hsl(h, s, l, this.a);
    };
    Rgb.prototype.equals = function (other) {
        if (other instanceof Rgb) {
            return this.r === other.r && this.g === other.g && this.b === other.b && this.a === other.a;
        }
        return false;
    };
    Rgb.prototype.toHexString = function () {
        var r = Math.min(Math.max(0, Math.round(this.r || 0)), 255);
        var g = Math.min(Math.max(0, Math.round(this.g || 0)), 255);
        var b = Math.min(Math.max(0, Math.round(this.b || 0)), 255);
        var s = '#';
        s += Rgb.Base16Alphabet.charAt(r >>> 4 & 0xF);
        s += Rgb.Base16Alphabet.charAt(r & 0xF);
        s += Rgb.Base16Alphabet.charAt(g >>> 4 & 0xF);
        s += Rgb.Base16Alphabet.charAt(g & 0xF);
        s += Rgb.Base16Alphabet.charAt(b >>> 4 & 0xF);
        s += Rgb.Base16Alphabet.charAt(b & 0xF);
        return s;
    };
    Rgb.prototype.toString = function () {
        var a = this.a;
        a = isNaN(a) ? 1 : Math.max(0, Math.min(this.a, 1));
        if (a === 1) {
            return this.toHexString();
        }
        else {
            var s = 'rgba';
            s += '(';
            s += Math.max(0, Math.min(Math.round(this.r) || 0, 255));
            s += ',';
            s += Math.max(0, Math.min(Math.round(this.g) || 0, 255));
            s += ',';
            s += Math.max(0, Math.min(Math.round(this.b) || 0, 255));
            if (a !== 1) {
                s += ',';
                s += a;
            }
            s += ')';
            return s;
        }
    };
    Rgb.transparent = function (alpha) {
        if (alpha === void 0) { alpha = 0; }
        return new Rgb(0, 0, 0, alpha);
    };
    Rgb.black = function () {
        return new Rgb(0, 0, 0, 1);
    };
    Rgb.white = function () {
        return new Rgb(255, 255, 255, 1);
    };
    Rgb.fromValue = function (value) {
        var tag = value.tag;
        var positional;
        if (tag === 'rgb' || tag === 'rgba') {
            value = value.header(tag);
            positional = true;
        }
        else {
            positional = false;
        }
        var r;
        var g;
        var b;
        var a;
        value.forEach(function (item, index) {
            var key = item.key.stringValue();
            if (key !== undefined) {
                if (key === 'r') {
                    r = item.toValue().numberValue(r);
                }
                else if (key === 'g') {
                    g = item.toValue().numberValue(g);
                }
                else if (key === 'b') {
                    b = item.toValue().numberValue(b);
                }
                else if (key === 'a') {
                    a = item.toValue().numberValue(a);
                }
            }
            else if (item instanceof Value && positional) {
                if (index === 0) {
                    r = item.numberValue(r);
                }
                else if (index === 1) {
                    g = item.numberValue(g);
                }
                else if (index === 2) {
                    b = item.numberValue(b);
                }
                else if (index === 3) {
                    a = item.numberValue(a);
                }
            }
        });
        if (r !== undefined && g !== undefined && b !== undefined) {
            return Color.rgb(r, g, b, a);
        }
        return undefined;
    };
    Rgb.parse = function (str) {
        return Color.parse(str).rgb();
    };
    Rgb.isInit = function (value) {
        if (value && typeof value === 'object') {
            var init = value;
            return init.r !== undefined && init.g !== undefined && init.b !== undefined;
        }
        return false;
    };
    Rgb.Base16Alphabet = '0123456789abcdef';
    return Rgb;
}(Color));
var Hsl = (function (_super) {
    __extends(Hsl, _super);
    function Hsl(h, s, l, a) {
        if (a === void 0) { a = 1; }
        var _this = _super.call(this) || this;
        _this.h = h;
        _this.s = s;
        _this.l = l;
        _this.a = a;
        return _this;
    }
    Hsl.prototype.isDefined = function () {
        return this.h !== 0 || this.s !== 0 || this.l !== 0 || this.a !== 1;
    };
    Hsl.prototype.alpha = function (a) {
        if (a === undefined) {
            return this.a;
        }
        else {
            return new Hsl(this.h, this.s, this.l, a);
        }
    };
    Hsl.prototype.lightness = function () {
        return this.l;
    };
    Hsl.prototype.brighter = function (k) {
        k = k === undefined ? BRIGHTER : Math.pow(BRIGHTER, k);
        return new Hsl(this.h, this.s, this.l * k, this.a);
    };
    Hsl.prototype.darker = function (k) {
        k = k === undefined ? DARKER : Math.pow(DARKER, k);
        return new Hsl(this.h, this.s, this.l * k, this.a);
    };
    Hsl.toRgb = function (h, m1, m2) {
        return 255 * (h < 60 ? m1 + (m2 - m1) * h / 60 :
            h < 180 ? m2 :
                h < 240 ? m1 + (m2 - m1) * (240 - h) / 60 :
                    m1);
    };
    Hsl.prototype.rgb = function () {
        var h = this.h % 360 + +(this.h < 0) * 360;
        var s = isNaN(h) || isNaN(this.s) ? 0 : this.s;
        var l = this.l;
        var m2 = l + (l < 0.5 ? l : 1 - l) * s;
        var m1 = 2 * l - m2;
        return new Rgb(Hsl.toRgb(h >= 240 ? h - 240 : h + 120, m1, m2), Hsl.toRgb(h, m1, m2), Hsl.toRgb(h < 120 ? h + 240 : h - 120, m1, m2), this.a);
    };
    Hsl.prototype.hsl = function () {
        return this;
    };
    Hsl.prototype.equals = function (other) {
        if (other instanceof Hsl) {
            return this.h === other.h && this.s === other.s && this.l === other.l && this.a === other.a;
        }
        return false;
    };
    Hsl.prototype.toHexString = function () {
        return this.rgb().toHexString();
    };
    Hsl.prototype.toString = function () {
        var a = this.a;
        a = isNaN(a) ? 1 : Math.max(0, Math.min(this.a, 1));
        var s = a === 1 ? 'hsl' : 'hsla';
        s += '(';
        s += Math.max(0, Math.min(Math.round(this.h) || 0, 360));
        s += ',';
        s += Math.max(0, Math.min(100 * Math.round(this.s) || 0, 100)) + '%';
        s += ',';
        s += Math.max(0, Math.min(100 * Math.round(this.l) || 0, 100)) + '%';
        if (a !== 1) {
            s += ',';
            s += a;
        }
        s += ')';
        return s;
    };
    Hsl.transparent = function (alpha) {
        if (alpha === void 0) { alpha = 0; }
        return new Hsl(0, 0, 0, alpha);
    };
    Hsl.black = function () {
        return new Hsl(0, 0, 0, 1);
    };
    Hsl.white = function () {
        return new Hsl(0, 1, 1, 1);
    };
    Hsl.fromValue = function (value) {
        var tag = value.tag;
        var positional;
        if (tag === 'hsl' || tag === 'hsla') {
            value = value.header(tag);
            positional = true;
        }
        else {
            positional = false;
        }
        var h;
        var s;
        var l;
        var a;
        value.forEach(function (item, index) {
            var key = item.key.stringValue();
            if (key !== undefined) {
                if (key === 'h') {
                    h = item.toValue().cast(Angle.Form, h);
                }
                else if (key === 's') {
                    s = item.toValue().numberValue(s);
                }
                else if (key === 'l') {
                    l = item.toValue().numberValue(l);
                }
                else if (key === 'a') {
                    a = item.toValue().numberValue(a);
                }
            }
            else if (item instanceof Value && positional) {
                if (index === 0) {
                    h = item.cast(Angle.Form, h);
                }
                else if (index === 1) {
                    s = item.numberValue(s);
                }
                else if (index === 2) {
                    l = item.numberValue(l);
                }
                else if (index === 3) {
                    a = item.numberValue(a);
                }
            }
        });
        if (h !== undefined && s !== undefined && l !== undefined) {
            return Color.hsl(h, s, l, a);
        }
        return undefined;
    };
    Hsl.parse = function (str) {
        return Color.parse(str).hsl();
    };
    Hsl.isInit = function (value) {
        if (value && typeof value === 'object') {
            var init = value;
            return init.h !== undefined && init.s !== undefined && init.l !== undefined;
        }
        return false;
    };
    return Hsl;
}(Color));
var ColorChannel = (function () {
    function ColorChannel(value, units) {
        if (units === void 0) { units = ''; }
        this.value = value;
        this.units = units;
    }
    ColorChannel.prototype.scale = function (k) {
        if (this.units === '%') {
            return this.value * k / 100;
        }
        else {
            return this.value;
        }
    };
    return ColorChannel;
}());
var ColorChannelParser = (function (_super) {
    __extends(ColorChannelParser, _super);
    function ColorChannelParser(valueParser, step) {
        var _this = _super.call(this) || this;
        _this.valueParser = valueParser;
        _this.step = step;
        return _this;
    }
    ColorChannelParser.prototype.feed = function (input) {
        return ColorChannelParser.parse(input, this.valueParser, this.step);
    };
    ColorChannelParser.parse = function (input, valueParser, step) {
        if (step === void 0) { step = 1; }
        if (step === 1) {
            if (!valueParser) {
                valueParser = Recon.Factory.parseNumber(input);
            }
            while (valueParser.isCont() && (!input.isEmpty() || input.isDone())) {
                valueParser = valueParser.feed(input);
            }
            if (valueParser.isDone()) {
                step = 2;
            }
            else if (valueParser.isError()) {
                return valueParser.asError();
            }
        }
        if (step === 2) {
            if (!input.isEmpty() && input.head() === 37) {
                input.step();
                return Iteratee.done(new ColorChannel(valueParser.bind().numberValue(), '%'));
            }
            else if (!input.isEmpty() || input.isDone()) {
                return Iteratee.done(new ColorChannel(valueParser.bind().numberValue()));
            }
        }
        return new ColorChannelParser(valueParser, step);
    };
    return ColorChannelParser;
}(Iteratee));
function parseColorFunction(input, identParser, xParser, yParser, zParser, aParser, step) {
    if (step === void 0) { step = 1; }
    var c = 0;
    if (step === 1) {
        if (!identParser) {
            identParser = Recon.Factory.parseIdent(input);
        }
        while (identParser.isCont() && (!input.isEmpty() || input.isDone())) {
            identParser = identParser.feed(input);
        }
        if (identParser.isDone()) {
            step = 2;
        }
        else if (identParser.isError()) {
            return identParser.asError();
        }
    }
    if (step === 2) {
        if (!input.isEmpty() && input.head() === 40) {
            input.step();
            step = 3;
        }
        else if (!input.isEmpty() || input.isDone()) {
            return Iteratee.expected('(', input);
        }
    }
    if (step === 3) {
        if (!xParser) {
            while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                input.step();
            }
            if (!input.isEmpty()) {
                xParser = this.parseX(input);
            }
        }
        if (xParser) {
            while (xParser.isCont() && (!input.isEmpty() || input.isDone())) {
                xParser = xParser.feed(input);
            }
            if (xParser.isDone()) {
                step = 4;
            }
            else if (xParser.isError()) {
                return xParser.asError();
            }
        }
        else if (input.isDone()) {
            return Iteratee.unexpected(input);
        }
    }
    if (step === 4) {
        while (!input.isEmpty() && (c = input.head(), Iteratee.isSpace(c))) {
            input.step();
        }
        if (!input.isEmpty()) {
            if (c === 44) {
                input.step();
            }
            step = 5;
        }
        else if (input.isDone()) {
            return Iteratee.unexpected(input);
        }
    }
    if (step === 5) {
        if (!yParser) {
            while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                input.step();
            }
            if (!input.isEmpty()) {
                yParser = this.parseY(input);
            }
        }
        if (yParser) {
            while (yParser.isCont() && (!input.isEmpty() || input.isDone())) {
                yParser = yParser.feed(input);
            }
            if (yParser.isDone()) {
                step = 6;
            }
            else if (yParser.isError()) {
                return yParser.asError();
            }
        }
        else if (input.isDone()) {
            return Iteratee.unexpected(input);
        }
    }
    if (step === 6) {
        while (!input.isEmpty() && (c = input.head(), Iteratee.isSpace(c))) {
            input.step();
        }
        if (!input.isEmpty()) {
            if (c === 44) {
                input.step();
            }
            step = 7;
        }
        else if (input.isDone()) {
            return Iteratee.unexpected(input);
        }
    }
    if (step === 7) {
        if (!zParser) {
            while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                input.step();
            }
            if (!input.isEmpty()) {
                zParser = this.parseZ(input);
            }
        }
        if (zParser) {
            while (zParser.isCont() && (!input.isEmpty() || input.isDone())) {
                zParser = zParser.feed(input);
            }
            if (zParser.isDone()) {
                step = 8;
            }
            else if (zParser.isError()) {
                return zParser.asError();
            }
        }
        else if (input.isDone()) {
            return Iteratee.unexpected(input);
        }
    }
    if (step === 8) {
        while (!input.isEmpty() && (c = input.head(), Iteratee.isSpace(c))) {
            input.step();
        }
        if (!input.isEmpty()) {
            if (c === 41) {
                input.step();
                try {
                    return Iteratee.done(this.decode(identParser.bind().stringValue(), xParser.bind(), yParser.bind(), zParser.bind()));
                }
                catch (cause) {
                    return Iteratee.error(cause);
                }
            }
            else if (c === 44) {
                input.step();
            }
            step = 9;
        }
        else if (input.isDone()) {
            return Iteratee.unexpected(input);
        }
    }
    if (step === 9) {
        if (!aParser) {
            while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                input.step();
            }
            if (!input.isEmpty()) {
                aParser = this.parseA(input);
            }
        }
        if (aParser) {
            while (aParser.isCont() && (!input.isEmpty() || input.isDone())) {
                aParser = aParser.feed(input);
            }
            if (aParser.isDone()) {
                step = 10;
            }
            else if (aParser.isError()) {
                return aParser.asError();
            }
        }
        else if (input.isDone()) {
            return Iteratee.unexpected(input);
        }
    }
    if (step === 10) {
        while (!input.isEmpty() && (c = input.head(), Iteratee.isSpace(c))) {
            input.step();
        }
        if (!input.isEmpty() && c === 41) {
            input.step();
            try {
                return Iteratee.done(this.decode(identParser.bind().stringValue(), xParser.bind(), yParser.bind(), zParser.bind(), aParser.bind()));
            }
            catch (cause) {
                return Iteratee.error(cause);
            }
        }
        else if (!input.isEmpty() || input.isDone()) {
            return Iteratee.expected(')', input);
        }
    }
    return this.cont(identParser, xParser, yParser, zParser, aParser, step);
}
var RgbHexParser = (function (_super) {
    __extends(RgbHexParser, _super);
    function RgbHexParser(value, step) {
        var _this = _super.call(this) || this;
        _this.value = value;
        _this.step = step;
        return _this;
    }
    RgbHexParser.prototype.feed = function (input) {
        return RgbHexParser.parse(input, this.value, this.step);
    };
    RgbHexParser.parse = function (input, value, step) {
        if (value === void 0) { value = 0; }
        if (step === void 0) { step = 1; }
        var c = 0;
        if (step === 1) {
            if (!input.isEmpty() && input.head() === 35) {
                input.step();
                step = 2;
            }
            else if (!input.isEmpty() || input.isDone()) {
                return Iteratee.expected('#', input);
            }
        }
        if (step >= 2) {
            while (step <= 9 && !input.isEmpty()) {
                c = input.head();
                if (Iteratee.isHexChar(c)) {
                    input.step();
                    value = (value << 4) | Iteratee.decodeHexChar(c);
                    step += 1;
                }
                else {
                    break;
                }
            }
            if (!input.isEmpty() || input.isDone()) {
                if (step === 5) {
                    return Iteratee.done(new Rgb(value >> 8 & 0x0f | value >> 4 & 0xf0, value >> 4 & 0x0f | value & 0xf0, value << 4 & 0xf0 | value & 0x0f));
                }
                else if (step === 6) {
                    return Iteratee.done(new Rgb(value >> 12 & 0x0f | value >> 8 & 0xf0, value >> 8 & 0x0f | value >> 4 & 0xf0, value >> 4 & 0x0f | value & 0xf0, (value << 4 & 0xf0 | value & 0x0f) / 255));
                }
                else if (step === 8) {
                    return Iteratee.done(new Rgb(value >> 16 & 0xff, value >> 8 & 0xff, value & 0xff));
                }
                else if (step === 10) {
                    return Iteratee.done(new Rgb(value >> 24 & 0xff, value >> 16 & 0xff, value >> 8 & 0xff, (value & 0xff) / 255));
                }
                else {
                    return Iteratee.unexpected(input);
                }
            }
        }
        return new RgbHexParser(value, step);
    };
    return RgbHexParser;
}(Iteratee));
var RgbFunctionParser = (function (_super) {
    __extends(RgbFunctionParser, _super);
    function RgbFunctionParser(identParser, rParser, gParser, bParser, aParser, step) {
        var _this = _super.call(this) || this;
        _this.identParser = identParser;
        _this.rParser = rParser;
        _this.gParser = gParser;
        _this.bParser = bParser;
        _this.aParser = aParser;
        _this.step = step;
        return _this;
    }
    RgbFunctionParser.prototype.feed = function (input) {
        return RgbFunctionParser.parse(input, this.identParser, this.rParser, this.gParser, this.bParser, this.aParser, this.step);
    };
    RgbFunctionParser.parse = function (input, identParser, rParser, gParser, bParser, aParser, step) {
        return parseColorFunction.call(RgbFunctionParser, input, identParser, rParser, gParser, bParser, aParser, step);
    };
    RgbFunctionParser.parseRest = function (input, identParser) {
        return RgbFunctionParser.parse(input, identParser, undefined, undefined, undefined, undefined, 2);
    };
    RgbFunctionParser.decode = function (ident, r, g, b, a) {
        if (ident === 'rgb' || ident === 'rgba') {
            return new Rgb(r.scale(255), g.scale(255), b.scale(255), a && a.scale(1));
        }
        else {
            throw new Error(ident);
        }
    };
    RgbFunctionParser.parseX = function (input) {
        return ColorChannelParser.parse(input);
    };
    RgbFunctionParser.parseY = function (input) {
        return ColorChannelParser.parse(input);
    };
    RgbFunctionParser.parseZ = function (input) {
        return ColorChannelParser.parse(input);
    };
    RgbFunctionParser.parseA = function (input) {
        return ColorChannelParser.parse(input);
    };
    RgbFunctionParser.cont = function (identParser, rParser, gParser, bParser, aParser, step) {
        return new RgbFunctionParser(identParser, rParser, gParser, bParser, aParser, step);
    };
    return RgbFunctionParser;
}(Iteratee));
var HslFunctionParser = (function (_super) {
    __extends(HslFunctionParser, _super);
    function HslFunctionParser(identParser, hParser, sParser, lParser, aParser, step) {
        var _this = _super.call(this) || this;
        _this.identParser = identParser;
        _this.hParser = hParser;
        _this.sParser = sParser;
        _this.lParser = lParser;
        _this.aParser = aParser;
        _this.step = step;
        return _this;
    }
    HslFunctionParser.prototype.feed = function (input) {
        return HslFunctionParser.parse(input, this.identParser, this.hParser, this.sParser, this.lParser, this.aParser, this.step);
    };
    HslFunctionParser.parse = function (input, identParser, hParser, sParser, lParser, aParser, step) {
        return parseColorFunction.call(HslFunctionParser, input, identParser, hParser, sParser, lParser, aParser, step);
    };
    HslFunctionParser.parseRest = function (input, identParser) {
        return HslFunctionParser.parse(input, identParser, undefined, undefined, undefined, undefined, 2);
    };
    HslFunctionParser.decode = function (ident, h, s, l, a) {
        if (ident === 'hsl' || ident === 'hsla') {
            return new Hsl(h.deg().value, s.scale(1), l.scale(1), a && a.scale(1));
        }
        else {
            throw new Error(ident);
        }
    };
    HslFunctionParser.parseX = function (input) {
        return AngleParser.parse(input, 'deg');
    };
    HslFunctionParser.parseY = function (input) {
        return ColorChannelParser.parse(input);
    };
    HslFunctionParser.parseZ = function (input) {
        return ColorChannelParser.parse(input);
    };
    HslFunctionParser.parseA = function (input) {
        return ColorChannelParser.parse(input);
    };
    HslFunctionParser.cont = function (identParser, hParser, sParser, lParser, aParser, step) {
        return new HslFunctionParser(identParser, hParser, sParser, lParser, aParser, step);
    };
    return HslFunctionParser;
}(Iteratee));
var ColorParser = (function (_super) {
    __extends(ColorParser, _super);
    function ColorParser(identParser, step) {
        var _this = _super.call(this) || this;
        _this.identParser = identParser;
        _this.step = step;
        return _this;
    }
    ColorParser.prototype.feed = function (input) {
        return ColorParser.parse(input, this.identParser, this.step);
    };
    ColorParser.parse = function (input, identParser, step) {
        if (step === void 0) { step = 1; }
        if (step === 1) {
            if (!input.isEmpty()) {
                if (input.head() === 35) {
                    return RgbHexParser.parse(input);
                }
                else {
                    step = 2;
                }
            }
            else if (input.isDone()) {
                return Iteratee.unexpected(input);
            }
        }
        if (step === 2) {
            if (!identParser) {
                identParser = Recon.Factory.parseIdent(input);
            }
            while (identParser.isCont() && (!input.isEmpty() || input.isDone())) {
                identParser = identParser.feed(input);
            }
            if (identParser.isDone()) {
                var ident = identParser.bind().stringValue();
                switch (ident) {
                    case 'rgb':
                    case 'rgba': return RgbFunctionParser.parseRest(input, identParser);
                    case 'hsl':
                    case 'hsla': return HslFunctionParser.parseRest(input, identParser);
                    case 'transparent': return Iteratee.done(Color.transparent());
                    case 'black': return Iteratee.done(Color.black());
                    case 'white': return Iteratee.done(Color.white());
                    default: return Iteratee.error(ident);
                }
            }
            else if (identParser.isError()) {
                return identParser.asError();
            }
        }
        return new ColorParser(identParser, step);
    };
    return ColorParser;
}(Iteratee));
var ColorForm = (function (_super) {
    __extends(ColorForm, _super);
    function ColorForm(unit) {
        if (unit === void 0) { unit = Color.transparent(); }
        var _this = _super.call(this) || this;
        _this.unit = unit;
        return _this;
    }
    ColorForm.prototype.mold = function (color) {
        color = Color.fromAny(color);
        return Text$1.valueOf(color.toString());
    };
    ColorForm.prototype.cast = function (value) {
        var color;
        try {
            color = Color.fromValue(value);
            if (!color) {
                var str = value.stringValue();
                if (str !== undefined) {
                    color = Color.parse(str);
                }
            }
        }
        catch (e) {
        }
        return color;
    };
    return ColorForm;
}(Form));
Color.Form = new ColorForm();

var Transform = (function () {
    function Transform() {
    }
    Transform.prototype.transform = function (that) {
        if (that instanceof IdentityTransform) {
            return this;
        }
        else {
            return new TransformList([this, that]);
        }
    };
    Transform.prototype.translate = function (x, y) {
        return this.transform(Transform.translate(x, y));
    };
    Transform.prototype.translateX = function (x) {
        return this.transform(Transform.translateX(x));
    };
    Transform.prototype.translateY = function (y) {
        return this.transform(Transform.translateY(y));
    };
    Transform.prototype.scale = function (x, y) {
        return this.transform(Transform.scale(x, y));
    };
    Transform.prototype.scaleX = function (x) {
        return this.transform(Transform.scaleX(x));
    };
    Transform.prototype.scaleY = function (y) {
        return this.transform(Transform.scaleY(y));
    };
    Transform.prototype.rotate = function (a) {
        return this.transform(Transform.rotate(a));
    };
    Transform.prototype.skew = function (x, y) {
        return this.transform(Transform.skew(x, y));
    };
    Transform.prototype.skewX = function (x) {
        return this.transform(Transform.skewX(x));
    };
    Transform.prototype.skewY = function (y) {
        return this.transform(Transform.skewY(y));
    };
    Transform.prototype.toAttributeString = function () {
        return this.toString();
    };
    Transform.from = function (unit) {
        if (unit !== undefined) {
            return new TransformForm(Transform.fromAny(unit));
        }
        else {
            return Transform.Form;
        }
    };
    Transform.translate = function (x, y) {
        return new TranslateTransform(x, y);
    };
    Transform.translateX = function (x) {
        return new TranslateTransform(x, 0);
    };
    Transform.translateY = function (y) {
        return new TranslateTransform(0, y);
    };
    Transform.scale = function (x, y) {
        return new ScaleTransform(x, y);
    };
    Transform.scaleX = function (x) {
        return new ScaleTransform(x, 1);
    };
    Transform.scaleY = function (y) {
        return new ScaleTransform(1, y);
    };
    Transform.rotate = function (a) {
        return new RotateTransform(a);
    };
    Transform.skew = function (x, y) {
        return new SkewTransform(x, y);
    };
    Transform.skewX = function (x) {
        return new SkewTransform(x, 1);
    };
    Transform.skewY = function (y) {
        return new SkewTransform(1, y);
    };
    Transform.matrix = function (x0, y0, x1, y1, tx, ty) {
        return new MatrixTransform(x0, y0, x1, y1, tx, ty);
    };
    Transform.fromAny = function (value) {
        if (value instanceof Transform) {
            return value;
        }
        else if (typeof value === 'string') {
            return Transform.parse(value);
        }
        throw new Error(value);
    };
    Transform.fromValue = function (value) {
        var tag = value.tag;
        if (tag === 'identity') {
            return IdentityTransform.fromValue(value);
        }
        else if (tag === 'translate') {
            return TranslateTransform.fromValue(value);
        }
        else if (tag === 'scale') {
            return ScaleTransform.fromValue(value);
        }
        else if (tag === 'rotate') {
            return RotateTransform.fromValue(value);
        }
        else if (tag === 'skew') {
            return SkewTransform.fromValue(value);
        }
        else if (tag === 'matrix') {
            return MatrixTransform.fromValue(value);
        }
        else {
            return TransformList.fromValue(value);
        }
    };
    Transform.parse = function (str) {
        var input = new StringInput(str);
        while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
            input.step();
        }
        var output = TransformListParser.parse(input);
        if (output.isDone()) {
            while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                input.step();
            }
            if (!input.isEmpty()) {
                output = Iteratee.unexpected(input);
            }
        }
        return output.bind();
    };
    Transform.Identity = undefined;
    Transform.Form = undefined;
    return Transform;
}());
var IdentityTransform = (function (_super) {
    __extends(IdentityTransform, _super);
    function IdentityTransform() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    IdentityTransform.prototype.transform = function (that) {
        return that;
    };
    IdentityTransform.prototype.toMatrix = function () {
        return new MatrixTransform(1, 0, 0, 1, 0, 0);
    };
    IdentityTransform.prototype.toValue = function () {
        return Record.of(Attr.of('identity'));
    };
    IdentityTransform.prototype.conformsTo = function (that) {
        return that instanceof IdentityTransform;
    };
    IdentityTransform.prototype.equals = function (that) {
        return that instanceof IdentityTransform;
    };
    IdentityTransform.prototype.toString = function () {
        return 'none';
    };
    IdentityTransform.fromValue = function (value) {
        if (value.tag === 'identity') {
            return Transform.Identity;
        }
        return undefined;
    };
    return IdentityTransform;
}(Transform));
Transform.Identity = new IdentityTransform();
var TranslateTransform = (function (_super) {
    __extends(TranslateTransform, _super);
    function TranslateTransform(x, y) {
        var _this = _super.call(this) || this;
        _this.x = Length.fromAny(x);
        _this.y = Length.fromAny(y);
        return _this;
    }
    TranslateTransform.prototype.toMatrix = function () {
        return new MatrixTransform(1, 0, 0, 1, this.x.px().value, this.y.px().value);
    };
    TranslateTransform.prototype.toValue = function () {
        return Record.of(Attr.of('translate', Record.of(Slot.of('x', this.x.toString()), Slot.of('y', this.y.toString()))));
    };
    TranslateTransform.prototype.conformsTo = function (that) {
        return that instanceof TranslateTransform;
    };
    TranslateTransform.prototype.equals = function (that) {
        if (that instanceof TranslateTransform) {
            return this.x.equals(that.x) && this.y.equals(that.y);
        }
        return false;
    };
    TranslateTransform.prototype.toString = function () {
        if (this.x.value && !this.y.value) {
            return 'translate(' + this.x + ',0)';
        }
        else if (!this.x.value && this.y.value) {
            return 'translate(0,' + this.y + ')';
        }
        else {
            return 'translate(' + this.x + ',' + this.y + ')';
        }
    };
    TranslateTransform.prototype.toAttributeString = function () {
        if (this.x.value && !this.y.value) {
            return 'translate(' + this.x.px().value + ',0)';
        }
        else if (!this.x.value && this.y.value) {
            return 'translate(0,' + this.y.px().value + ')';
        }
        else {
            return 'translate(' + this.x.px().value + ',' + this.y.px().value + ')';
        }
    };
    TranslateTransform.fromAny = function (value) {
        if (value instanceof TranslateTransform) {
            return value;
        }
        else if (typeof value === 'string') {
            return TranslateTransform.parse(value);
        }
        throw new Error(value);
    };
    TranslateTransform.fromValue = function (value) {
        var header = value.header('translate');
        if (header.isDefined()) {
            var x_1 = Length.zero();
            var y_1 = Length.zero();
            header.forEach(function (item, index) {
                var key = item.key.stringValue();
                if (key !== undefined) {
                    if (key === 'x') {
                        x_1 = item.toValue().cast(Length.Form, x_1);
                    }
                    else if (key === 'y') {
                        y_1 = item.toValue().cast(Length.Form, y_1);
                    }
                }
                else if (item instanceof Value) {
                    if (index === 0) {
                        x_1 = item.cast(Length.Form, x_1);
                    }
                    else if (index === 1) {
                        y_1 = item.cast(Length.Form, y_1);
                    }
                }
            }, this);
            return new TranslateTransform(x_1, y_1);
        }
        return undefined;
    };
    TranslateTransform.parse = function (str) {
        var input = new StringInput(str);
        while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
            input.step();
        }
        var output = TranslateTransformParser.parse(input);
        if (output.isDone()) {
            while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                input.step();
            }
            if (!input.isEmpty()) {
                output = Iteratee.unexpected(input);
            }
        }
        return output.bind();
    };
    return TranslateTransform;
}(Transform));
var ScaleTransform = (function (_super) {
    __extends(ScaleTransform, _super);
    function ScaleTransform(x, y) {
        var _this = _super.call(this) || this;
        _this.x = +x;
        _this.y = +y;
        return _this;
    }
    ScaleTransform.prototype.toMatrix = function () {
        return new MatrixTransform(this.x, 0, 0, this.y, 0, 0);
    };
    ScaleTransform.prototype.toValue = function () {
        return Record.of(Attr.of('scale', Record.of(Slot.of('x', this.x), Slot.of('y', this.y))));
    };
    ScaleTransform.prototype.conformsTo = function (that) {
        return that instanceof ScaleTransform;
    };
    ScaleTransform.prototype.equals = function (that) {
        if (that instanceof ScaleTransform) {
            return this.x === that.x && this.y === that.y;
        }
        return false;
    };
    ScaleTransform.prototype.toString = function () {
        if (this.x && !this.y) {
            return 'scaleX(' + this.x + ')';
        }
        else if (!this.x && this.y) {
            return 'scaleY(' + this.y + ')';
        }
        else {
            return 'scale(' + this.x + ',' + this.y + ')';
        }
    };
    ScaleTransform.fromAny = function (value) {
        if (value instanceof ScaleTransform) {
            return value;
        }
        else if (typeof value === 'string') {
            return ScaleTransform.parse(value);
        }
        throw new Error(value);
    };
    ScaleTransform.fromValue = function (value) {
        var header = value.header('scale');
        if (header.isDefined()) {
            var x_2 = 0;
            var y_2 = 0;
            header.forEach(function (item, index) {
                var key = item.key.stringValue();
                if (key !== undefined) {
                    if (key === 'x') {
                        x_2 = item.toValue().numberValue(x_2);
                    }
                    else if (key === 'y') {
                        y_2 = item.toValue().numberValue(y_2);
                    }
                }
                else if (item instanceof Value) {
                    if (index === 0) {
                        x_2 = item.numberValue(x_2);
                    }
                    else if (index === 1) {
                        y_2 = item.numberValue(y_2);
                    }
                }
            }, this);
            return new ScaleTransform(x_2, y_2);
        }
        return undefined;
    };
    ScaleTransform.parse = function (str) {
        var input = new StringInput(str);
        while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
            input.step();
        }
        var output = ScaleTransformParser.parse(input);
        if (output.isDone()) {
            while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                input.step();
            }
            if (!input.isEmpty()) {
                output = Iteratee.unexpected(input);
            }
        }
        return output.bind();
    };
    return ScaleTransform;
}(Transform));
var RotateTransform = (function (_super) {
    __extends(RotateTransform, _super);
    function RotateTransform(a) {
        var _this = _super.call(this) || this;
        _this.a = Angle.fromAny(a);
        return _this;
    }
    RotateTransform.prototype.toMatrix = function () {
        var a = this.a.rad().value;
        return new MatrixTransform(Math.cos(a), Math.sin(a), -Math.sin(a), Math.cos(a), 0, 0);
    };
    RotateTransform.prototype.toValue = function () {
        return Record.of(Attr.of('rotate', this.a.toString()));
    };
    RotateTransform.prototype.conformsTo = function (that) {
        return that instanceof RotateTransform;
    };
    RotateTransform.prototype.equals = function (that) {
        if (that instanceof RotateTransform) {
            return this.a.equals(that.a);
        }
        return false;
    };
    RotateTransform.prototype.toString = function () {
        return 'rotate(' + this.a + ')';
    };
    RotateTransform.fromAny = function (value) {
        if (value instanceof RotateTransform) {
            return value;
        }
        else if (typeof value === 'string') {
            return RotateTransform.parse(value);
        }
        throw new Error(value);
    };
    RotateTransform.fromValue = function (value) {
        var header = value.header('rotate');
        if (header.isDefined()) {
            var a_1 = Angle.zero();
            header.forEach(function (item, index) {
                var key = item.key.stringValue();
                if (key === 'a') {
                    a_1 = item.toValue().cast(Angle.Form, a_1);
                }
                else if (item instanceof Value && index === 0) {
                    a_1 = item.cast(Angle.Form, a_1);
                }
            }, this);
            return new RotateTransform(a_1);
        }
        return undefined;
    };
    RotateTransform.parse = function (str) {
        var input = new StringInput(str);
        while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
            input.step();
        }
        var output = RotateTransformParser.parse(input);
        if (output.isDone()) {
            while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                input.step();
            }
            if (!input.isEmpty()) {
                output = Iteratee.unexpected(input);
            }
        }
        return output.bind();
    };
    return RotateTransform;
}(Transform));
var SkewTransform = (function (_super) {
    __extends(SkewTransform, _super);
    function SkewTransform(x, y) {
        var _this = _super.call(this) || this;
        _this.x = Angle.fromAny(x);
        _this.y = Angle.fromAny(y);
        return _this;
    }
    SkewTransform.prototype.toMatrix = function () {
        var x = this.x.rad().value;
        var y = this.y.rad().value;
        return new MatrixTransform(1, Math.tan(y), Math.tan(x), 1, 0, 0);
    };
    SkewTransform.prototype.toValue = function () {
        return Record.of(Attr.of('skew', Record.of(Slot.of('x', this.x.toString()), Slot.of('y', this.y.toString()))));
    };
    SkewTransform.prototype.conformsTo = function (that) {
        return that instanceof SkewTransform;
    };
    SkewTransform.prototype.equals = function (that) {
        if (that instanceof SkewTransform) {
            return this.x.equals(that.x) && this.y.equals(that.y);
        }
        return false;
    };
    SkewTransform.prototype.toString = function () {
        if (this.x.value && !this.y.value) {
            return 'skewX(' + this.x + ')';
        }
        else if (!this.x.value && this.y.value) {
            return 'skewY(' + this.y + ')';
        }
        else {
            return 'skew(' + this.x + ',' + this.y + ')';
        }
    };
    SkewTransform.fromAny = function (value) {
        if (value instanceof SkewTransform) {
            return value;
        }
        else if (typeof value === 'string') {
            return SkewTransform.parse(value);
        }
        throw new Error(value);
    };
    SkewTransform.fromValue = function (value) {
        var header = value.header('skew');
        if (header.isDefined()) {
            var x_3 = Angle.zero();
            var y_3 = Angle.zero();
            header.forEach(function (item, index) {
                var key = item.key.stringValue();
                if (key !== undefined) {
                    if (key === 'x') {
                        x_3 = item.toValue().cast(Angle.Form, x_3);
                    }
                    else if (key === 'y') {
                        y_3 = item.toValue().cast(Angle.Form, y_3);
                    }
                }
                else if (item instanceof Value) {
                    if (index === 0) {
                        x_3 = item.cast(Angle.Form, x_3);
                    }
                    else if (index === 1) {
                        y_3 = item.cast(Angle.Form, y_3);
                    }
                }
            }, this);
            return new SkewTransform(x_3, y_3);
        }
        return undefined;
    };
    SkewTransform.parse = function (str) {
        var input = new StringInput(str);
        while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
            input.step();
        }
        var output = SkewTransformParser.parse(input);
        if (output.isDone()) {
            while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                input.step();
            }
            if (!input.isEmpty()) {
                output = Iteratee.unexpected(input);
            }
        }
        return output.bind();
    };
    return SkewTransform;
}(Transform));
var MatrixTransform = (function (_super) {
    __extends(MatrixTransform, _super);
    function MatrixTransform(x0, y0, x1, y1, tx, ty) {
        if (x0 === void 0) { x0 = 1; }
        if (y0 === void 0) { y0 = 0; }
        if (x1 === void 0) { x1 = 0; }
        if (y1 === void 0) { y1 = 1; }
        if (tx === void 0) { tx = 0; }
        if (ty === void 0) { ty = 0; }
        var _this = _super.call(this) || this;
        _this.x0 = +x0;
        _this.y0 = +y0;
        _this.x1 = +x1;
        _this.y1 = +y1;
        _this.tx = +tx;
        _this.ty = +ty;
        return _this;
    }
    MatrixTransform.prototype.multiply = function (that) {
        var x0 = this.x0 * that.x0 + this.x1 * that.y0;
        var y0 = this.y0 * that.x0 + this.y1 * that.y0;
        var x1 = this.x0 * that.x1 + this.x1 * that.y1;
        var y1 = this.y0 * that.x1 + this.y1 * that.y1;
        var tx = this.x0 * that.tx + this.x1 * that.ty;
        var ty = this.y0 * that.tx + this.y1 * that.ty;
        return new MatrixTransform(x0, y0, x1, y1, tx, ty);
    };
    MatrixTransform.prototype.transform = function (that) {
        return this.multiply(that.toMatrix());
    };
    MatrixTransform.prototype.toMatrix = function () {
        return this;
    };
    MatrixTransform.prototype.toValue = function () {
        return Record.of(Attr.of('matrix', Record.of(this.x0, this.y0, this.x1, this.y1, this.tx, this.ty)));
    };
    MatrixTransform.prototype.conformsTo = function (that) {
        return that instanceof MatrixTransform;
    };
    MatrixTransform.prototype.equals = function (that) {
        if (that instanceof MatrixTransform) {
            return this.x0 === that.x0 && this.y0 === that.y0 &&
                this.x1 === that.x1 && this.y1 === that.y1 &&
                this.tx === that.tx && this.ty === that.ty;
        }
        return false;
    };
    MatrixTransform.prototype.toString = function () {
        return 'matrix(' + this.x0 + ',' + this.y0 + ',' + this.x1 + ',' + this.y1 + ',' + this.tx + ',' + this.ty + ')';
    };
    MatrixTransform.fromAny = function (value) {
        if (value instanceof MatrixTransform) {
            return value;
        }
        else if (typeof value === 'string') {
            return MatrixTransform.parse(value);
        }
        throw new Error(value);
    };
    MatrixTransform.fromValue = function (value) {
        var header = value.header('matrix');
        if (header.isDefined()) {
            var x0_1 = 0;
            var y0_1 = 0;
            var x1_1 = 0;
            var y1_1 = 0;
            var tx_1 = 0;
            var ty_1 = 0;
            header.forEach(function (item, index) {
                var key = item.key.stringValue();
                if (key !== undefined) {
                    if (key === 'x0') {
                        x0_1 = item.toValue().numberValue(x0_1);
                    }
                    else if (key === 'y0') {
                        y0_1 = item.toValue().numberValue(y0_1);
                    }
                    else if (key === 'x1') {
                        x1_1 = item.toValue().numberValue(x1_1);
                    }
                    else if (key === 'y1') {
                        y1_1 = item.toValue().numberValue(y1_1);
                    }
                    else if (key === 'tx') {
                        tx_1 = item.toValue().numberValue(tx_1);
                    }
                    else if (key === 'ty') {
                        ty_1 = item.toValue().numberValue(ty_1);
                    }
                }
                else if (item instanceof Value) {
                    switch (index) {
                        case 0:
                            x0_1 = item.numberValue(x0_1);
                            break;
                        case 1:
                            y0_1 = item.numberValue(y0_1);
                            break;
                        case 2:
                            x1_1 = item.numberValue(x1_1);
                            break;
                        case 3:
                            y1_1 = item.numberValue(y1_1);
                            break;
                        case 4:
                            tx_1 = item.numberValue(tx_1);
                            break;
                        case 5:
                            ty_1 = item.numberValue(ty_1);
                            break;
                        default:
                    }
                }
            }, this);
            return new MatrixTransform(x0_1, y0_1, x1_1, y1_1, tx_1, ty_1);
        }
        return undefined;
    };
    MatrixTransform.parse = function (str) {
        var input = new StringInput(str);
        while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
            input.step();
        }
        var output = MatrixTransformParser.parse(input);
        if (output.isDone()) {
            while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                input.step();
            }
            if (!input.isEmpty()) {
                output = Iteratee.unexpected(input);
            }
        }
        return output.bind();
    };
    MatrixTransform.Identity = new MatrixTransform();
    return MatrixTransform;
}(Transform));
var TransformList = (function (_super) {
    __extends(TransformList, _super);
    function TransformList(transforms) {
        var _this = _super.call(this) || this;
        _this.transforms = [];
        for (var i = 0; i < transforms.length; i += 1) {
            var transform = transforms[i];
            if (transform instanceof TransformList) {
                (_a = _this.transforms).push.apply(_a, transform.transforms);
            }
            else if (transform && !(transform instanceof IdentityTransform)) {
                _this.transforms.push(transform);
            }
        }
        return _this;
        var _a;
    }
    TransformList.prototype.toMatrix = function () {
        var matrix = MatrixTransform.Identity;
        for (var i = 0; i < this.transforms.length; i += 1) {
            matrix = matrix.multiply(this.transforms[i].toMatrix());
        }
        return matrix;
    };
    TransformList.prototype.toValue = function () {
        var n = this.transforms.length;
        var record = Record.empty(n);
        for (var i = 0; i < n; i += 1) {
            record.push(this.transforms[i].toValue());
        }
        return record;
    };
    TransformList.prototype.conformsTo = function (that) {
        if (that instanceof TransformList) {
            var n = this.transforms.length;
            if (n === that.transforms.length) {
                for (var i = 0; i < n; i += 1) {
                    if (!this.transforms[i].conformsTo(that.transforms[i])) {
                        return false;
                    }
                }
                return true;
            }
        }
        return false;
    };
    TransformList.prototype.equals = function (that) {
        if (that instanceof TransformList) {
            var n = this.transforms.length;
            if (n === that.transforms.length) {
                for (var i = 0; i < n; i += 1) {
                    if (!this.transforms[i].equals(that.transforms[i])) {
                        return false;
                    }
                }
                return true;
            }
        }
        return false;
    };
    TransformList.prototype.toString = function () {
        var s = '';
        for (var i = 0; i < this.transforms.length; i += 1) {
            if (i > 0) {
                s += ' ';
            }
            s += this.transforms[i].toString();
        }
        return s;
    };
    TransformList.prototype.toAttributeString = function () {
        var s = '';
        for (var i = 0; i < this.transforms.length; i += 1) {
            if (i > 0) {
                s += ' ';
            }
            s += this.transforms[i].toAttributeString();
        }
        return s;
    };
    TransformList.fromAny = function (value) {
        if (value instanceof TransformList) {
            return value;
        }
        else if (typeof value === 'string') {
            return TransformList.parse(value);
        }
        throw new Error(value);
    };
    TransformList.fromValue = function (value) {
        var transforms = [];
        value.forEach(function (item) {
            var transform = Transform.fromValue(item.toValue());
            if (transform) {
                transforms.push(transform);
            }
        }, this);
        if (transforms.length) {
            return new TransformList(transforms);
        }
        return undefined;
    };
    TransformList.parse = function (str) {
        var transform = Transform.parse(str);
        if (transform instanceof TransformList) {
            return transform;
        }
        else {
            return new TransformList([transform]);
        }
    };
    return TransformList;
}(Transform));
var TranslateTransformParser = (function (_super) {
    __extends(TranslateTransformParser, _super);
    function TranslateTransformParser(identParser, xParser, yParser, step) {
        var _this = _super.call(this) || this;
        _this.identParser = identParser;
        _this.xParser = xParser;
        _this.yParser = yParser;
        _this.step = step;
        return _this;
    }
    TranslateTransformParser.prototype.feed = function (input) {
        return TranslateTransformParser.parse(input, this.identParser, this.xParser, this.yParser, this.step);
    };
    TranslateTransformParser.parse = function (input, identParser, xParser, yParser, step) {
        if (step === void 0) { step = 1; }
        var c = 0;
        if (step === 1) {
            if (!identParser) {
                identParser = Recon.Factory.parseIdent(input);
            }
            while (identParser.isCont() && (!input.isEmpty() || input.isDone())) {
                identParser = identParser.feed(input);
            }
            if (identParser.isDone()) {
                step = 2;
            }
            else if (identParser.isError()) {
                return identParser.asError();
            }
        }
        if (step === 2) {
            if (!input.isEmpty() && input.head() === 40) {
                input.step();
                step = 3;
            }
            else if (!input.isEmpty() || input.isDone()) {
                return Iteratee.expected('(', input);
            }
        }
        if (step === 3) {
            if (!xParser) {
                while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                    input.step();
                }
                if (!input.isEmpty()) {
                    xParser = LengthParser.parse(input);
                }
            }
            while (xParser.isCont() && (!input.isEmpty() || input.isDone())) {
                xParser = xParser.feed(input);
            }
            if (xParser.isDone()) {
                step = 4;
            }
            else if (xParser.isError()) {
                return xParser.asError();
            }
        }
        if (step === 4) {
            while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                input.step();
            }
            if (!input.isEmpty()) {
                c = input.head();
                if (c === 41) {
                    input.step();
                    var ident = identParser.bind().stringValue();
                    if (ident === 'translateX') {
                        return Iteratee.done(Transform.translateX(xParser.bind()));
                    }
                    else if (ident === 'translateY') {
                        return Iteratee.done(Transform.translateY(xParser.bind()));
                    }
                    else {
                        return Iteratee.error(ident);
                    }
                }
                else if (c === 44) {
                    input.step();
                    step = 5;
                }
                else {
                    return Iteratee.expected(',', input);
                }
            }
            else if (input.isDone()) {
                return Iteratee.unexpected(input);
            }
        }
        if (step === 5) {
            if (!yParser) {
                while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                    input.step();
                }
                if (!input.isEmpty()) {
                    yParser = LengthParser.parse(input);
                }
            }
            while (yParser.isCont() && (!input.isEmpty() || input.isDone())) {
                yParser = yParser.feed(input);
            }
            if (yParser.isDone()) {
                step = 6;
            }
            else if (yParser.isError()) {
                return yParser.asError();
            }
        }
        if (step === 6) {
            while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                input.step();
            }
            if (!input.isEmpty() && input.head() === 41) {
                input.step();
                var ident = identParser.bind().stringValue();
                if (ident === 'translate') {
                    return Iteratee.done(Transform.translate(xParser.bind(), yParser.bind()));
                }
                else {
                    return Iteratee.error(ident);
                }
            }
            else if (!input.isEmpty() || input.isDone()) {
                return Iteratee.expected(')', input);
            }
        }
        return new TranslateTransformParser(identParser, xParser, yParser, step);
    };
    TranslateTransformParser.parseRest = function (input, identParser) {
        return TranslateTransformParser.parse(input, identParser, undefined, undefined, 2);
    };
    return TranslateTransformParser;
}(Iteratee));
var ScaleTransformParser = (function (_super) {
    __extends(ScaleTransformParser, _super);
    function ScaleTransformParser(identParser, xParser, yParser, step) {
        var _this = _super.call(this) || this;
        _this.identParser = identParser;
        _this.xParser = xParser;
        _this.yParser = yParser;
        _this.step = step;
        return _this;
    }
    ScaleTransformParser.prototype.feed = function (input) {
        return ScaleTransformParser.parse(input, this.identParser, this.xParser, this.yParser, this.step);
    };
    ScaleTransformParser.parse = function (input, identParser, xParser, yParser, step) {
        if (step === void 0) { step = 1; }
        var c = 0;
        if (step === 1) {
            if (!identParser) {
                identParser = Recon.Factory.parseIdent(input);
            }
            while (identParser.isCont() && (!input.isEmpty() || input.isDone())) {
                identParser = identParser.feed(input);
            }
            if (identParser.isDone()) {
                step = 2;
            }
            else if (identParser.isError()) {
                return identParser.asError();
            }
        }
        if (step === 2) {
            if (!input.isEmpty() && input.head() === 40) {
                input.step();
                step = 3;
            }
            else if (!input.isEmpty() || input.isDone()) {
                return Iteratee.expected('(', input);
            }
        }
        if (step === 3) {
            if (!xParser) {
                while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                    input.step();
                }
                if (!input.isEmpty()) {
                    xParser = Recon.Factory.parseNumber(input);
                }
            }
            while (xParser.isCont() && (!input.isEmpty() || input.isDone())) {
                xParser = xParser.feed(input);
            }
            if (xParser.isDone()) {
                step = 4;
            }
            else if (xParser.isError()) {
                return xParser.asError();
            }
        }
        if (step === 4) {
            while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                input.step();
            }
            if (!input.isEmpty()) {
                c = input.head();
                if (c === 41) {
                    input.step();
                    var ident = identParser.bind().stringValue();
                    if (ident === 'scaleX') {
                        return Iteratee.done(Transform.scaleX(xParser.bind().numberValue()));
                    }
                    else if (ident === 'scaleY') {
                        return Iteratee.done(Transform.scaleY(xParser.bind().numberValue()));
                    }
                    else {
                        return Iteratee.error(ident);
                    }
                }
                else if (c === 44) {
                    input.step();
                    step = 5;
                }
                else {
                    return Iteratee.expected(',', input);
                }
            }
            else if (input.isDone()) {
                return Iteratee.unexpected(input);
            }
        }
        if (step === 5) {
            if (!yParser) {
                while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                    input.step();
                }
                if (!input.isEmpty()) {
                    yParser = Recon.Factory.parseNumber(input);
                }
            }
            while (yParser.isCont() && (!input.isEmpty() || input.isDone())) {
                yParser = yParser.feed(input);
            }
            if (yParser.isDone()) {
                step = 6;
            }
            else if (yParser.isError()) {
                return yParser.asError();
            }
        }
        if (step === 6) {
            while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                input.step();
            }
            if (!input.isEmpty() && input.head() === 41) {
                input.step();
                var ident = identParser.bind().stringValue();
                if (ident === 'scale') {
                    var x = xParser.bind().numberValue();
                    var y = yParser.bind().numberValue();
                    return Iteratee.done(Transform.scale(x, y));
                }
                else {
                    return Iteratee.error(ident);
                }
            }
            else if (!input.isEmpty() || input.isDone()) {
                return Iteratee.expected(')', input);
            }
        }
        return new ScaleTransformParser(identParser, xParser, yParser, step);
    };
    ScaleTransformParser.parseRest = function (input, identParser) {
        return ScaleTransformParser.parse(input, identParser, undefined, undefined, 2);
    };
    return ScaleTransformParser;
}(Iteratee));
var RotateTransformParser = (function (_super) {
    __extends(RotateTransformParser, _super);
    function RotateTransformParser(identParser, aParser, step) {
        var _this = _super.call(this) || this;
        _this.identParser = identParser;
        _this.aParser = aParser;
        _this.step = step;
        return _this;
    }
    RotateTransformParser.prototype.feed = function (input) {
        return RotateTransformParser.parse(input, this.identParser, this.aParser, this.step);
    };
    RotateTransformParser.parse = function (input, identParser, aParser, step) {
        if (step === void 0) { step = 1; }
        if (step === 1) {
            if (!identParser) {
                identParser = Recon.Factory.parseIdent(input);
            }
            while (identParser.isCont() && (!input.isEmpty() || input.isDone())) {
                identParser = identParser.feed(input);
            }
            if (identParser.isDone()) {
                step = 2;
            }
            else if (identParser.isError()) {
                return identParser.asError();
            }
        }
        if (step === 2) {
            if (!input.isEmpty() && input.head() === 40) {
                input.step();
                step = 3;
            }
            else if (!input.isEmpty() || input.isDone()) {
                return Iteratee.expected('(', input);
            }
        }
        if (step === 3) {
            if (!aParser) {
                while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                    input.step();
                }
                if (!input.isEmpty()) {
                    aParser = AngleParser.parse(input);
                }
            }
            while (aParser.isCont() && (!input.isEmpty() || input.isDone())) {
                aParser = aParser.feed(input);
            }
            if (aParser.isDone()) {
                step = 4;
            }
            else if (aParser.isError()) {
                return aParser.asError();
            }
        }
        if (step === 4) {
            while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                input.step();
            }
            if (!input.isEmpty() && input.head() === 41) {
                input.step();
                var ident = identParser.bind().stringValue();
                if (ident === 'rotate') {
                    return Iteratee.done(Transform.rotate(aParser.bind()));
                }
                else {
                    return Iteratee.error(ident);
                }
            }
            else if (!input.isEmpty() || input.isDone()) {
                return Iteratee.expected(')', input);
            }
        }
        return new RotateTransformParser(identParser, aParser, step);
    };
    RotateTransformParser.parseRest = function (input, identParser) {
        return RotateTransformParser.parse(input, identParser, undefined, 2);
    };
    return RotateTransformParser;
}(Iteratee));
var SkewTransformParser = (function (_super) {
    __extends(SkewTransformParser, _super);
    function SkewTransformParser(identParser, xParser, yParser, step) {
        var _this = _super.call(this) || this;
        _this.identParser = identParser;
        _this.xParser = xParser;
        _this.yParser = yParser;
        _this.step = step;
        return _this;
    }
    SkewTransformParser.prototype.feed = function (input) {
        return SkewTransformParser.parse(input, this.identParser, this.xParser, this.yParser, this.step);
    };
    SkewTransformParser.parse = function (input, identParser, xParser, yParser, step) {
        if (step === void 0) { step = 1; }
        var c = 0;
        if (step === 1) {
            if (!identParser) {
                identParser = Recon.Factory.parseIdent(input);
            }
            while (identParser.isCont() && (!input.isEmpty() || input.isDone())) {
                identParser = identParser.feed(input);
            }
            if (identParser.isDone()) {
                step = 2;
            }
            else if (identParser.isError()) {
                return identParser.asError();
            }
        }
        if (step === 2) {
            if (!input.isEmpty() && input.head() === 40) {
                input.step();
                step = 3;
            }
            else if (!input.isEmpty() || input.isDone()) {
                return Iteratee.expected('(', input);
            }
        }
        if (step === 3) {
            if (!xParser) {
                while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                    input.step();
                }
                if (!input.isEmpty()) {
                    xParser = AngleParser.parse(input);
                }
            }
            while (xParser.isCont() && (!input.isEmpty() || input.isDone())) {
                xParser = xParser.feed(input);
            }
            if (xParser.isDone()) {
                step = 4;
            }
            else if (xParser.isError()) {
                return xParser.asError();
            }
        }
        if (step === 4) {
            while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                input.step();
            }
            if (!input.isEmpty()) {
                c = input.head();
                if (c === 41) {
                    input.step();
                    var ident = identParser.bind().stringValue();
                    if (ident === 'skewX') {
                        return Iteratee.done(Transform.skewX(xParser.bind()));
                    }
                    else if (ident === 'skewY') {
                        return Iteratee.done(Transform.skewY(xParser.bind()));
                    }
                    else {
                        return Iteratee.error(ident);
                    }
                }
                else if (c === 44) {
                    input.step();
                    step = 5;
                }
                else {
                    return Iteratee.expected(',', input);
                }
            }
            else if (input.isDone()) {
                return Iteratee.unexpected(input);
            }
        }
        if (step === 5) {
            if (!yParser) {
                while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                    input.step();
                }
                if (!input.isEmpty()) {
                    yParser = AngleParser.parse(input);
                }
            }
            while (yParser.isCont() && (!input.isEmpty() || input.isDone())) {
                yParser = yParser.feed(input);
            }
            if (yParser.isDone()) {
                step = 6;
            }
            else if (yParser.isError()) {
                return yParser.asError();
            }
        }
        if (step === 6) {
            while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                input.step();
            }
            if (!input.isEmpty() && input.head() === 41) {
                input.step();
                var ident = identParser.bind().stringValue();
                if (ident === 'skew') {
                    return Iteratee.done(Transform.skew(xParser.bind(), yParser.bind()));
                }
                else {
                    return Iteratee.error(ident);
                }
            }
            else if (!input.isEmpty() || input.isDone()) {
                return Iteratee.expected(')', input);
            }
        }
        return new SkewTransformParser(identParser, xParser, yParser, step);
    };
    SkewTransformParser.parseRest = function (input, identParser) {
        return SkewTransformParser.parse(input, identParser, undefined, undefined, 2);
    };
    return SkewTransformParser;
}(Iteratee));
var MatrixTransformParser = (function (_super) {
    __extends(MatrixTransformParser, _super);
    function MatrixTransformParser(identParser, entryParser, entries, step) {
        var _this = _super.call(this) || this;
        _this.identParser = identParser;
        _this.entryParser = entryParser;
        _this.entries = entries;
        _this.step = step;
        return _this;
    }
    MatrixTransformParser.prototype.feed = function (input) {
        return MatrixTransformParser.parse(input, this.identParser, this.entryParser, this.entries, this.step);
    };
    MatrixTransformParser.parse = function (input, identParser, entryParser, entries, step) {
        if (entries === void 0) { entries = []; }
        if (step === void 0) { step = 1; }
        var c = 0;
        if (step === 1) {
            if (!identParser) {
                identParser = Recon.Factory.parseIdent(input);
            }
            while (identParser.isCont() && (!input.isEmpty() || input.isDone())) {
                identParser = identParser.feed(input);
            }
            if (identParser.isDone()) {
                step = 2;
            }
            else if (identParser.isError()) {
                return identParser.asError();
            }
        }
        if (step === 2) {
            if (!input.isEmpty() && input.head() === 40) {
                input.step();
                step = 3;
            }
            else if (!input.isEmpty() || input.isDone()) {
                return Iteratee.expected('(', input);
            }
        }
        while (true) {
            if (step === 3) {
                if (!entryParser) {
                    while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                        input.step();
                    }
                    if (!input.isEmpty()) {
                        entryParser = Recon.Factory.parseNumber(input);
                    }
                }
                while (entryParser.isCont() && (!input.isEmpty() || input.isDone())) {
                    entryParser = entryParser.feed(input);
                }
                if (entryParser.isDone()) {
                    entries.push(entryParser.bind().numberValue());
                    entryParser = undefined;
                    step = 4;
                }
                else if (entryParser.isError()) {
                    return entryParser.asError();
                }
            }
            if (step === 4) {
                while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                    input.step();
                }
                if (!input.isEmpty()) {
                    c = input.head();
                    if (c === 41) {
                        input.step();
                        var ident = identParser.bind().stringValue();
                        if (ident === 'matrix') {
                            return Iteratee.done(Transform.matrix.apply(Transform, entries));
                        }
                        else {
                            return Iteratee.error(ident);
                        }
                    }
                    else if (entries.length >= 6) {
                        return Iteratee.expected(')', input);
                    }
                    else if (c === 44) {
                        input.step();
                        step = 3;
                        continue;
                    }
                    else {
                        return Iteratee.expected(',', input);
                    }
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            break;
        }
        return new MatrixTransformParser(identParser, entryParser, entries, step);
    };
    MatrixTransformParser.parseRest = function (input, identParser) {
        return MatrixTransformParser.parse(input, identParser, undefined, undefined, 2);
    };
    return MatrixTransformParser;
}(Iteratee));
var TransformParser = (function (_super) {
    __extends(TransformParser, _super);
    function TransformParser(identParser) {
        var _this = _super.call(this) || this;
        _this.identParser = identParser;
        return _this;
    }
    TransformParser.prototype.feed = function (input) {
        return TransformParser.parse(input, this.identParser);
    };
    TransformParser.parse = function (input, identParser) {
        if (!identParser) {
            identParser = Recon.Factory.parseIdent(input);
        }
        while (identParser.isCont() && (!input.isEmpty() || input.isDone())) {
            identParser = identParser.feed(input);
        }
        if (identParser.isDone()) {
            var ident = identParser.bind().stringValue();
            switch (ident) {
                case 'translateX':
                case 'translateY':
                case 'translate': return TranslateTransformParser.parseRest(input, identParser);
                case 'scaleX':
                case 'scaleY':
                case 'scale': return ScaleTransformParser.parseRest(input, identParser);
                case 'rotate': return RotateTransformParser.parseRest(input, identParser);
                case 'skewX':
                case 'skewY':
                case 'skew': return SkewTransformParser.parseRest(input, identParser);
                case 'matrix': return MatrixTransformParser.parseRest(input, identParser);
                case 'none': return Iteratee.done(Transform.Identity);
                default: return Iteratee.error(ident);
            }
        }
        else if (identParser.isError()) {
            return identParser.asError();
        }
        return new TransformParser(identParser);
    };
    return TransformParser;
}(Iteratee));
var TransformListParser = (function (_super) {
    __extends(TransformListParser, _super);
    function TransformListParser(transformParser, transform) {
        var _this = _super.call(this) || this;
        _this.transformParser = transformParser;
        _this.transform = transform;
        return _this;
    }
    TransformListParser.prototype.feed = function (input) {
        return TransformListParser.parse(input, this.transformParser, this.transform);
    };
    TransformListParser.parse = function (input, transformParser, transform) {
        if (transform === void 0) { transform = Transform.Identity; }
        while (true) {
            if (!transformParser) {
                while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                    input.step();
                }
                if (!input.isEmpty()) {
                    transformParser = TransformParser.parse(input);
                }
            }
            while (transformParser.isCont() && (!input.isEmpty() || input.isDone())) {
                transformParser = transformParser.feed(input);
            }
            if (transformParser.isDone()) {
                transform = transform.transform(transformParser.bind());
                continue;
            }
            else if (transformParser.isError()) {
                return transformParser.asError();
            }
            break;
        }
        return new TransformListParser(transformParser);
    };
    return TransformListParser;
}(Iteratee));
var TransformForm = (function (_super) {
    __extends(TransformForm, _super);
    function TransformForm(unit) {
        if (unit === void 0) { unit = Transform.Identity; }
        var _this = _super.call(this) || this;
        _this.unit = unit;
        return _this;
    }
    TransformForm.prototype.mold = function (transform) {
        transform = Transform.fromAny(transform);
        return transform.toValue();
    };
    TransformForm.prototype.cast = function (value) {
        try {
            if (value instanceof Record) {
                return Transform.fromValue(value);
            }
            else {
                var str = value.stringValue();
                if (str !== undefined) {
                    return Transform.parse(str);
                }
            }
        }
        catch (e) {
        }
        return undefined;
    };
    return TransformForm;
}(Form));

var Scale = (function () {
    function Scale() {
    }
    Scale.of = function (x0, x1, y0, y1) {
        if (x0 === 'time') {
            y1 = y0;
            y0 = x1;
            var now = DateTime.current();
            x1 = now;
            x0 = now.time(now.time() - 86400000);
        }
        else if (x0 === 'linear') {
            y1 = y0;
            y0 = x1;
            x1 = 1;
            x0 = 0;
        }
        if (x0 instanceof DateTime || x0 instanceof Date || x1 instanceof DateTime || x1 instanceof Date) {
            if (y0 instanceof Interpolator) {
                return new TimeScale(x0, x1, y0);
            }
            else {
                return new TimeScale(x0, x1, Interpolator.interpolate(y0, y1));
            }
        }
        else if (typeof x0 === 'number' && typeof x1 === 'number') {
            if (y0 instanceof Interpolator) {
                return new LinearScale(x0, x1, y0);
            }
            else {
                return new LinearScale(x0, x1, Interpolator.interpolate(y0, y1));
            }
        }
        throw new TypeError('' + arguments);
    };
    Scale.linear = function (x0, x1, y0, y1) {
        if (Array.isArray(x0)) {
            if (x1 instanceof Interpolator) {
                return new LinearScale(x0[0], x0[1], x1);
            }
            else {
                x1 = x1;
                return new LinearScale(x0[0], x0[1], Interpolator.interpolate(x1[0], x1[1]));
            }
        }
        else {
            x0 = x0;
            x1 = x1;
            if (y0 instanceof Interpolator) {
                return new LinearScale(x0, x1, y0);
            }
            else {
                y0 = y0;
                y1 = y1;
                return new LinearScale(x0, x1, Interpolator.interpolate(y0, y1));
            }
        }
    };
    Scale.time = function (t0, t1, y0, y1) {
        if (Array.isArray(t0)) {
            if (t1 instanceof Interpolator) {
                return new TimeScale(t0[0], t0[1], t1);
            }
            else {
                t1 = t1;
                return new TimeScale(t0[0], t0[1], Interpolator.interpolate(t1[0], t1[1]));
            }
        }
        else {
            t0 = t0;
            t1 = t1;
            if (y0 instanceof Interpolator) {
                return new TimeScale(t0, t1, y0);
            }
            else {
                y0 = y0;
                y1 = y1;
                return new TimeScale(t0, t1, Interpolator.interpolate(y0, y1));
            }
        }
    };
    Scale.Form = undefined;
    return Scale;
}());
var ContinuousScale = (function (_super) {
    __extends(ContinuousScale, _super);
    function ContinuousScale() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ContinuousScale.Form = undefined;
    return ContinuousScale;
}(Scale));
var LinearScale = (function (_super) {
    __extends(LinearScale, _super);
    function LinearScale(x0, x1, fx) {
        var _this = _super.call(this) || this;
        _this.x0 = x0;
        _this.dx = x1 - _this.x0;
        _this.fx = fx;
        return _this;
    }
    LinearScale.prototype.norm = function (x) {
        return this.dx ? (x - this.x0) / this.dx : this.dx;
    };
    LinearScale.prototype.scale = function (x) {
        var u = this.norm(x);
        return this.fx.map(u);
    };
    LinearScale.prototype.unscale = function (y) {
        return this.x0 + this.dx * this.fx.unmap(y);
    };
    LinearScale.prototype.clampScale = function (x) {
        var u = Math.min(Math.max(0, this.norm(x)), 1);
        return this.fx.map(u);
    };
    LinearScale.prototype.domain = function (x0, x1) {
        if (x0 === undefined) {
            return [this.x0, this.x0 + this.dx];
        }
        else if (x1 === undefined) {
            x0 = x0;
            return new LinearScale(x0[0], x0[1], this.fx);
        }
        else {
            return new LinearScale(x0, x1, this.fx);
        }
    };
    LinearScale.prototype.range = function (y0, y1) {
        if (y0 === undefined) {
            return this.fx.range();
        }
        else if (y1 === undefined) {
            return new LinearScale(this.x0, this.x0 + this.dx, this.fx.range(y0));
        }
        else {
            return new LinearScale(this.x0, this.x0 + this.dx, this.fx.range(y0, y1));
        }
    };
    LinearScale.prototype.interpolate = function (fx) {
        if (fx === undefined) {
            return this.fx;
        }
        else {
            fx = Interpolator.fromAny(fx);
            return new LinearScale(this.x0, this.x0 + this.dx, fx);
        }
    };
    LinearScale.prototype.clampDomain = function (xMin, xMax, zMin, zMax) {
        var x0 = this.x0;
        var x1 = this.x0 + this.dx;
        if (xMin !== undefined) {
            if (x0 < x1 && x0 < xMin) {
                x0 = xMin;
            }
            else if (x1 < x0 && x1 < xMin) {
                x1 = xMin;
            }
        }
        if (xMax !== undefined) {
            if (x0 < x1 && x1 > xMax) {
                x1 = xMax;
            }
            else if (x1 < x0 && x0 > xMax) {
                x1 = xMax;
            }
        }
        var y0 = +this.scale(x0);
        var y1 = +this.scale(x1);
        var dy = y1 - y0;
        var z = Math.abs(dy / (x1 - x0));
        if (zMin !== undefined && z < 1 / zMin) {
            var dx = dy * zMin;
            var xSum = x0 + x1;
            x0 = (xSum - dx) / 2;
            x1 = (xSum + dx) / 2;
        }
        else if (zMax !== undefined && z > 1 / zMax) {
            var dx = dy * zMax;
            var xSum = x0 + x1;
            x0 = (xSum - dx) / 2;
            x1 = (xSum + dx) / 2;
        }
        if (x0 !== this.x0 || x1 - x0 !== this.dx) {
            return new LinearScale(x0, x1, this.fx);
        }
        else {
            return this;
        }
    };
    LinearScale.prototype.solveDomain = function (x1, y1, x2, y2) {
        var range = this.fx.range();
        var y0 = +range[0];
        var y3 = +range[1];
        var m;
        if (x2 === undefined || y2 === undefined || x1 === x2 || y1 === y2) {
            m = (y3 - y0) / this.dx;
        }
        else {
            m = (+y2 - +y1) / (x2 - x1);
        }
        var b = +y1 - m * x1;
        var x0 = (y0 - b) / m;
        var x3 = (y3 - b) / m;
        return new LinearScale(x0, x3, this.fx);
    };
    LinearScale.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof LinearScale) {
            return this.x0 === that.x0 && this.dx === that.dx && this.fx.equals(that.fx);
        }
        return false;
    };
    return LinearScale;
}(ContinuousScale));
var TimeScale = (function (_super) {
    __extends(TimeScale, _super);
    function TimeScale(d0, d1, ft, zone) {
        var _this = _super.call(this) || this;
        d0 = DateTime.fromAny(d0);
        d1 = DateTime.fromAny(d1);
        _this.t0 = d0.time();
        _this.dt = d1.time() - _this.t0;
        _this.zone = zone || d0.zone();
        _this.ft = ft;
        return _this;
    }
    TimeScale.prototype.norm = function (d) {
        d = DateTime.time(d);
        return this.dt ? (d - this.t0) / this.dt : this.dt;
    };
    TimeScale.prototype.scale = function (d) {
        var u = this.norm(d);
        return this.ft.map(u);
    };
    TimeScale.prototype.unscale = function (y) {
        return new DateTime(this.t0 + this.dt * this.ft.unmap(y));
    };
    TimeScale.prototype.clampScale = function (d) {
        var u = Math.min(Math.max(0, this.norm(d)), 1);
        return this.ft.map(u);
    };
    TimeScale.prototype.domain = function (t0, t1) {
        if (t0 === undefined) {
            return [new DateTime(this.t0, this.zone), new DateTime(this.t0 + this.dt, this.zone)];
        }
        else if (t1 === undefined) {
            t0 = t0;
            return new TimeScale(t0[0], t0[1], this.ft, this.zone);
        }
        else {
            return new TimeScale(t0, t1, this.ft, this.zone);
        }
    };
    TimeScale.prototype.range = function (y0, y1) {
        if (y0 === undefined) {
            return this.ft.range();
        }
        else if (y1 === undefined) {
            return new TimeScale(this.t0, this.t0 + this.dt, this.ft.range(y0), this.zone);
        }
        else {
            return new TimeScale(this.t0, this.t0 + this.dt, this.ft.range(y0, y1), this.zone);
        }
    };
    TimeScale.prototype.interpolate = function (ft) {
        if (ft === undefined) {
            return this.ft;
        }
        else {
            ft = Interpolator.fromAny(ft);
            return new TimeScale(this.t0, this.t0 + this.dt, ft, this.zone);
        }
    };
    TimeScale.prototype.clampDomain = function (tMin, tMax, zMin, zMax) {
        var t0 = this.t0;
        var t1 = this.t0 + this.dt;
        if (tMin !== undefined) {
            if (t0 < t1 && t0 < +tMin) {
                t0 = +tMin;
            }
            else if (t1 < t0 && t1 < +tMin) {
                t1 = +tMin;
            }
        }
        if (tMax !== undefined) {
            if (t0 < t1 && t1 > +tMax) {
                t1 = +tMax;
            }
            else if (t1 < t0 && t0 > +tMax) {
                t1 = +tMax;
            }
        }
        var y0 = +this.scale(t0);
        var y1 = +this.scale(t1);
        var dy = y1 - y0;
        var z = Math.abs(dy / (t1 - t0));
        if (zMin !== undefined && z < 1 / zMin) {
            var dt = dy * zMin;
            var tSum = t0 + t1;
            t0 = (tSum - dt) / 2;
            t1 = (tSum + dt) / 2;
        }
        else if (zMax !== undefined && z > 1 / zMax) {
            var dt = dy * zMax;
            var tSum = t0 + t1;
            t0 = (tSum - dt) / 2;
            t1 = (tSum + dt) / 2;
        }
        if (t0 !== this.t0 || t1 - t0 !== this.dt) {
            return new TimeScale(t0, t1, this.ft, this.zone);
        }
        else {
            return this;
        }
    };
    TimeScale.prototype.solveDomain = function (t1, y1, t2, y2) {
        var range = this.ft.range();
        var y0 = +range[0];
        var y3 = +range[1];
        var m;
        if (t2 === undefined || y2 === undefined || t1 === t2 || y1 === y2) {
            m = (y3 - y0) / this.dt;
        }
        else {
            m = (+y2 - +y1) / (+t2 - +t1);
        }
        var b = +y1 - m * +t1;
        var t0 = (y0 - b) / m;
        var t3 = (y3 - b) / m;
        return new TimeScale(t0, t3, this.ft, this.zone);
    };
    TimeScale.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof TimeScale) {
            return this.t0 === that.t0 && this.dt === that.dt && this.ft.equals(that.ft);
        }
        return false;
    };
    return TimeScale;
}(ContinuousScale));
var ScaleForm = (function (_super) {
    __extends(ScaleForm, _super);
    function ScaleForm(domainForm, interpolatorForm, unit) {
        var _this = _super.call(this) || this;
        _this.domainForm = domainForm;
        _this.interpolatorForm = interpolatorForm;
        _this.unit = unit;
        return _this;
    }
    ScaleForm.prototype.mold = function (scale) {
        if (scale instanceof ContinuousScale) {
            var domain = scale.domain();
            var x0 = this.domainForm.mold(domain[0]);
            var x1 = this.domainForm.mold(domain[1]);
            var header = Record.of(x0, x1);
            var record = Record.of(Attr.of('scale', header));
            var f = this.interpolatorForm.mold(scale.interpolate());
            if (f.isDefined()) {
                record = record.concat(f);
            }
            return record;
        }
        return Value.Absent;
    };
    ScaleForm.prototype.cast = function (value) {
        var header = value.header('scale');
        if (header.length >= 2) {
            var x0_1;
            var x1_1;
            header.forEach(function (item, index) {
                if (item instanceof Value) {
                    if (index === 0) {
                        x0_1 = item.cast(this.domainForm, x0_1);
                    }
                    else if (index === 1) {
                        x1_1 = item.cast(this.domainForm, x1_1);
                    }
                }
            }, this);
            var f = this.interpolatorForm.cast(value.body());
            if (x0_1 !== undefined && x1_1 !== undefined && f) {
                return Scale.of(x0_1, x1_1, f);
            }
        }
        return undefined;
    };
    return ScaleForm;
}(Form));

var Interpolator = (function () {
    function Interpolator() {
    }
    Interpolator.form = function (form, unit) {
        return new InterpolatorForm(form, unit);
    };
    Interpolator.step = function (y0, y1) {
        return new StepInterpolator(y0, y1);
    };
    Interpolator.number = function (y0, y1) {
        return new NumberInterpolator(y0, y1);
    };
    Interpolator.date = function (d0, d1) {
        return new DateInterpolator(d0, d1);
    };
    Interpolator.angle = function (a0, a1) {
        return new AngleInterpolator(a0, a1);
    };
    Interpolator.len = function (l0, l1) {
        return new LengthInterpolator(l0, l1);
    };
    Interpolator.color = function (c0, c1) {
        if (c0 === undefined && c1 === undefined) {
            return new ColorInterpolator();
        }
        if (c0 !== undefined) {
            c0 = Color.fromAny(c0);
        }
        if (c1 !== undefined) {
            c1 = Color.fromAny(c1);
        }
        if (!c0 && !c1) {
            c1 = c0 = Color.transparent();
        }
        else if (!c1) {
            c1 = c0;
        }
        else if (!c0) {
            c0 = c1;
        }
        if (c0 instanceof Hsl && c1 instanceof Hsl) {
            return new HslInterpolator(c0, c1);
        }
        else {
            return new RgbInterpolator(c0.rgb(), c1.rgb());
        }
    };
    Interpolator.rgb = function (c0, c1) {
        return new RgbInterpolator(c0, c1);
    };
    Interpolator.hsl = function (c0, c1) {
        return new HslInterpolator(c0, c1);
    };
    Interpolator.transform = function (f0, f1) {
        if (f0 === undefined && f1 === undefined) {
            return new TransformInterpolator();
        }
        if (f0 !== undefined) {
            f0 = Transform.fromAny(f0);
        }
        if (f1 !== undefined) {
            f1 = Transform.fromAny(f1);
        }
        if (!f0 && !f1) {
            f1 = f0 = Transform.Identity;
        }
        else if (!f1) {
            f1 = f0;
        }
        else if (!f0) {
            f0 = f1;
        }
        if (f0 instanceof TranslateTransform && f1 instanceof TranslateTransform) {
            return new TranslateTransformInterpolator(f0, f1);
        }
        else if (f0 instanceof ScaleTransform && f1 instanceof ScaleTransform) {
            return new ScaleTransformInterpolator(f0, f1);
        }
        else if (f0 instanceof RotateTransform && f1 instanceof RotateTransform) {
            return new RotateTransformInterpolator(f0, f1);
        }
        else if (f0 instanceof SkewTransform && f1 instanceof SkewTransform) {
            return new SkewTransformInterpolator(f0, f1);
        }
        else if (f0 instanceof TransformList && f1 instanceof TransformList) {
            if (f0.conformsTo(f1)) {
                return new TransformListInterpolator(f0, f1);
            }
        }
        return new MatrixTransformInterpolator(f0.toMatrix(), f1.toMatrix());
    };
    Interpolator.scale = function (s0, s1) {
        if (s0 === undefined && s1 === undefined) {
            return new ScaleInterpolator();
        }
        if (!s1) {
            s1 = s0;
        }
        else if (!s0) {
            s0 = s1;
        }
        if (s0 instanceof LinearScale && s1 instanceof LinearScale) {
            return new LinearScaleInterpolator(s0, s1);
        }
        else if (s0 instanceof TimeScale && s1 instanceof TimeScale) {
            return new TimeScaleInterpolator(s0, s1);
        }
        else {
            throw new TypeError(s0 + ', ' + s1);
        }
    };
    Interpolator.array = function (a0, a1) {
        return new ArrayInterpolator(a0, a1);
    };
    Interpolator.interpolate = function (a, b) {
        if (a instanceof Interpolator && b instanceof Interpolator) {
            return new InterpolatorInterpolator(a, b);
        }
        else if (a instanceof DateTime || a instanceof Date
            || b instanceof DateTime || b instanceof Date) {
            return new DateInterpolator(a, b);
        }
        else if (a instanceof Angle || b instanceof Angle) {
            return new AngleInterpolator(a, b);
        }
        else if (a instanceof Length || b instanceof Length) {
            return new LengthInterpolator(a, b);
        }
        else if (a instanceof Color || b instanceof Color) {
            return Interpolator.color(a, b);
        }
        else if (a instanceof Transform || b instanceof Transform) {
            return Interpolator.transform(a, b);
        }
        else if (a instanceof ContinuousScale || b instanceof ContinuousScale) {
            return Interpolator.scale(a, b);
        }
        else if (a instanceof Item || b instanceof Item) {
            return Interpolator.recon(a, b);
        }
        else if (typeof a === 'number' || typeof b === 'number') {
            return new NumberInterpolator(a, b);
        }
        else if (Array.isArray(a) || Array.isArray(b)) {
            return new ArrayInterpolator(a, b);
        }
        else {
            return new StepInterpolator(a, b);
        }
    };
    Interpolator.fromAny = function (value) {
        if (value instanceof Interpolator) {
            return value;
        }
        else if (typeof value === 'string') {
            switch (value) {
                case 'step': return Interpolator.step();
                case 'number': return Interpolator.number();
                case 'angle': return Interpolator.angle();
                case 'length': return Interpolator.len();
                case 'color': return Interpolator.color();
                case 'rgb': return Interpolator.rgb();
                case 'hsl': return Interpolator.hsl();
                case 'transform': return Interpolator.transform();
                case 'translate': return Interpolator.transform();
                case 'scale': return Interpolator.transform();
                case 'rotate': return Interpolator.transform();
                case 'skew': return Interpolator.transform();
                case 'matrix': return Interpolator.transform();
                case 'transform-list': return Interpolator.transform();
                case 'scale': return Interpolator.scale();
                case 'array': return Interpolator.array();
            }
        }
        throw new Error(value);
    };
    Interpolator.Form = undefined;
    Interpolator.recon = undefined;
    return Interpolator;
}());
var StepInterpolator = (function (_super) {
    __extends(StepInterpolator, _super);
    function StepInterpolator(y0, y1) {
        var _this = _super.call(this) || this;
        if (y1 === undefined) {
            y1 = y0;
        }
        else if (y0 === undefined) {
            y0 = y1;
        }
        _this.y0 = y0;
        _this.y1 = y1;
        return _this;
    }
    StepInterpolator.prototype.map = function (u) {
        var v = u < 1 ? this.y0 : this.y1;
        if (v === undefined) {
            throw new TypeError();
        }
        return v;
    };
    StepInterpolator.prototype.unmap = function (y) {
        return y === this.y1 ? 1 : 0;
    };
    StepInterpolator.prototype.range = function (y0, y1) {
        if (y0 === undefined) {
            if (this.y0 === undefined || this.y1 === undefined) {
                throw new TypeError();
            }
            return [this.y0, this.y1];
        }
        else if (y1 === undefined) {
            y0 = y0;
            return new StepInterpolator(y0[0], y0[1]);
        }
        else {
            return new StepInterpolator(y0, y1);
        }
    };
    StepInterpolator.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof StepInterpolator) {
            return this.y0 === that.y0 && this.y1 === that.y1;
        }
        return false;
    };
    return StepInterpolator;
}(Interpolator));
var NumberInterpolator = (function (_super) {
    __extends(NumberInterpolator, _super);
    function NumberInterpolator(y0, y1) {
        var _this = _super.call(this) || this;
        if (y0 === undefined && y1 === undefined) {
            y1 = y0 = 0;
        }
        else if (y1 === undefined) {
            y1 = y0;
        }
        else if (y0 === undefined) {
            y0 = y1;
        }
        _this.y0 = +y0;
        _this.dy = +y1 - _this.y0;
        return _this;
    }
    NumberInterpolator.prototype.map = function (u) {
        return this.y0 + this.dy * u;
    };
    NumberInterpolator.prototype.unmap = function (y) {
        return this.dy ? (y - this.y0) / this.dy : this.dy;
    };
    NumberInterpolator.prototype.range = function (y0, y1) {
        if (y0 === undefined) {
            return [this.y0, this.y0 + this.dy];
        }
        else if (y1 === undefined) {
            y0 = y0;
            return new NumberInterpolator(y0[0], y0[1]);
        }
        else {
            return new NumberInterpolator(y0, y1);
        }
    };
    NumberInterpolator.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof NumberInterpolator) {
            return this.y0 === that.y0 && this.dy === that.dy;
        }
        return false;
    };
    return NumberInterpolator;
}(Interpolator));
var DateInterpolator = (function (_super) {
    __extends(DateInterpolator, _super);
    function DateInterpolator(d0, d1, zone) {
        var _this = _super.call(this) || this;
        if (d0 === undefined && d1 === undefined) {
            d1 = d0 = 0;
        }
        else if (d1 === undefined) {
            d1 = d0;
        }
        else if (d0 === undefined) {
            d0 = d1;
        }
        d0 = DateTime.fromAny(d0);
        d1 = DateTime.fromAny(d1);
        _this.t0 = d0.time();
        _this.dt = d1.time() - _this.t0;
        _this.zone = zone || d0.zone();
        return _this;
    }
    DateInterpolator.prototype.map = function (u) {
        return new DateTime(this.t0 + this.dt * u, this.zone);
    };
    DateInterpolator.prototype.unmap = function (d) {
        d = DateTime.time(d);
        return this.dt ? (d - this.t0) / this.dt : this.dt;
    };
    DateInterpolator.prototype.range = function (t0, t1) {
        if (t0 === undefined) {
            return [new DateTime(this.t0, this.zone), new DateTime(this.t0 + this.dt, this.zone)];
        }
        else if (t1 === undefined) {
            t0 = t0;
            return new DateInterpolator(t0[0], t0[1], this.zone);
        }
        else {
            return new DateInterpolator(t0, t1, this.zone);
        }
    };
    DateInterpolator.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof DateInterpolator) {
            return this.t0 === that.t0 && this.dt === that.dt;
        }
        return false;
    };
    return DateInterpolator;
}(Interpolator));
var AngleInterpolator = (function (_super) {
    __extends(AngleInterpolator, _super);
    function AngleInterpolator(a0, a1) {
        var _this = _super.call(this) || this;
        if (a0 !== undefined) {
            a0 = Angle.fromAny(a0);
        }
        if (a1 !== undefined) {
            a1 = Angle.fromAny(a1);
        }
        if (!a0 && !a1) {
            a1 = a0 = Angle.zero();
        }
        else if (!a1) {
            a1 = a0;
        }
        else if (!a0) {
            a0 = a1;
        }
        else {
            a0 = a0.to(a1.units);
        }
        _this.v0 = a0.value;
        _this.dv = a1.value - _this.v0;
        _this.units = a1.units;
        return _this;
    }
    AngleInterpolator.prototype.map = function (u) {
        return Angle.fromAny(this.v0 + this.dv * u, this.units);
    };
    AngleInterpolator.prototype.unmap = function (a) {
        var v = Angle.fromAny(a).to(this.units).value;
        return this.dv ? (v - this.v0) / this.dv : this.dv;
    };
    AngleInterpolator.prototype.range = function (a0, a1) {
        if (a0 === undefined) {
            return [Angle.fromAny(this.v0, this.units), Angle.fromAny(this.v0 + this.dv, this.units)];
        }
        else if (a1 === undefined) {
            a0 = a0;
            return new AngleInterpolator(a0[0], a0[1]);
        }
        else {
            return new AngleInterpolator(a0, a1);
        }
    };
    AngleInterpolator.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof AngleInterpolator) {
            return this.v0 === that.v0 && this.dv === that.dv && this.units === that.units;
        }
        return false;
    };
    return AngleInterpolator;
}(Interpolator));
var LengthInterpolator = (function (_super) {
    __extends(LengthInterpolator, _super);
    function LengthInterpolator(l0, l1) {
        var _this = _super.call(this) || this;
        if (l0 !== undefined) {
            l0 = Length.fromAny(l0);
        }
        if (l1 !== undefined) {
            l1 = Length.fromAny(l1);
        }
        if (!l1 && !l1) {
            l1 = l0 = Length.zero();
        }
        else if (!l1) {
            l1 = l0;
        }
        else if (!l0) {
            l0 = l1;
        }
        else {
            l0 = l0.to(l1.units);
        }
        _this.v0 = l0.value;
        _this.dv = l1.value - _this.v0;
        _this.units = l1.units;
        return _this;
    }
    LengthInterpolator.prototype.map = function (u) {
        return Length.fromAny(this.v0 + this.dv * u, this.units);
    };
    LengthInterpolator.prototype.unmap = function (l) {
        var v = Length.fromAny(l).to(this.units).value;
        return this.dv ? (v - this.v0) / this.dv : this.dv;
    };
    LengthInterpolator.prototype.range = function (v0, v1) {
        if (v0 === undefined) {
            return [Length.fromAny(this.v0, this.units), Length.fromAny(this.v0 + this.dv, this.units)];
        }
        else if (v1 === undefined) {
            v0 = v0;
            return new LengthInterpolator(v0[0], v0[1]);
        }
        else {
            return new LengthInterpolator(v0, v1);
        }
    };
    LengthInterpolator.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof LengthInterpolator) {
            return this.v0 === that.v0 && this.dv === that.dv && this.units === that.units;
        }
        return false;
    };
    return LengthInterpolator;
}(Interpolator));
var ColorInterpolator = (function (_super) {
    __extends(ColorInterpolator, _super);
    function ColorInterpolator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ColorInterpolator.prototype.map = function (u) {
        return Color.transparent();
    };
    ColorInterpolator.prototype.unmap = function (c) {
        return 0;
    };
    ColorInterpolator.prototype.range = function (c0, c1) {
        if (c0 === undefined) {
            return [this.map(0), this.map(1)];
        }
        else if (c1 === undefined) {
            c0 = c0;
            return Interpolator.color(c0[0], c0[1]);
        }
        else {
            return Interpolator.color(c0, c1);
        }
    };
    ColorInterpolator.prototype.equals = function (that) {
        return this === that;
    };
    return ColorInterpolator;
}(Interpolator));
var RgbInterpolator = (function (_super) {
    __extends(RgbInterpolator, _super);
    function RgbInterpolator(c0, c1) {
        var _this = _super.call(this) || this;
        if (c0 !== undefined) {
            c0 = Color.rgb(c0);
        }
        if (c1 !== undefined) {
            c1 = Color.rgb(c1);
        }
        if (!c0 && !c1) {
            c1 = c0 = Rgb.transparent();
        }
        else if (!c1) {
            c1 = c0;
        }
        else if (!c0) {
            c0 = c1;
        }
        _this.r0 = c0.r;
        _this.dr = c1.r - _this.r0;
        _this.g0 = c0.g;
        _this.dg = c1.g - _this.g0;
        _this.b0 = c0.b;
        _this.db = c1.b - _this.b0;
        _this.a0 = c0.a;
        _this.da = c1.a - _this.a0;
        return _this;
    }
    RgbInterpolator.prototype.map = function (u) {
        var r = this.r0 + this.dr * u;
        var g = this.g0 + this.dg * u;
        var b = this.b0 + this.db * u;
        var a = this.a0 + this.da * u;
        return new Rgb(r, g, b, a);
    };
    RgbInterpolator.prototype.unmap = function (c) {
        c = Color.rgb(c);
        var cr = c.r - this.r0;
        var cg = c.g - this.g0;
        var cb = c.b - this.b0;
        var ca = c.a - this.a0;
        var dp = cr * this.dr + cg * this.dg + cb * this.db + ca * this.da;
        var lc = Math.sqrt(cr * cr + cg * cg + cb * cb + ca * ca);
        return lc ? dp / lc : lc;
    };
    RgbInterpolator.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof RgbInterpolator) {
            return this.r0 === that.r0 && this.dr === that.dr &&
                this.g0 === that.g0 && this.dg === that.dg &&
                this.b0 === that.b0 && this.db === that.db &&
                this.a0 === that.a0 && this.da === that.da;
        }
        return false;
    };
    return RgbInterpolator;
}(ColorInterpolator));
var HslInterpolator = (function (_super) {
    __extends(HslInterpolator, _super);
    function HslInterpolator(c0, c1) {
        var _this = _super.call(this) || this;
        if (c0 !== undefined) {
            c0 = Color.hsl(c0);
        }
        if (c1 !== undefined) {
            c1 = Color.hsl(c1);
        }
        if (!c0 && !c1) {
            c1 = c0 = Hsl.transparent();
        }
        else if (!c1) {
            c1 = c0;
        }
        else if (!c0) {
            c0 = c1;
        }
        _this.h0 = c0.h;
        _this.dh = c1.h - _this.h0;
        _this.s0 = c0.s;
        _this.ds = c1.s - _this.s0;
        _this.l0 = c0.l;
        _this.dl = c1.l - _this.l0;
        _this.a0 = c0.a;
        _this.da = c1.a - _this.a0;
        return _this;
    }
    HslInterpolator.prototype.map = function (u) {
        var h = this.h0 + this.dh * u;
        var s = this.s0 + this.ds * u;
        var l = this.l0 + this.dl * u;
        var a = this.a0 + this.da * u;
        return new Hsl(h, s, l, a);
    };
    HslInterpolator.prototype.unmap = function (c) {
        c = Color.hsl(c);
        var ch = c.h - this.h0;
        var cs = c.s - this.s0;
        var cl = c.l - this.l0;
        var ca = c.a - this.a0;
        var dp = ch * this.dh + cs * this.ds + cl * this.dl + ca * this.da;
        var lc = Math.sqrt(ch * ch + cs * cs + cl * cl + ca * ca);
        return lc ? dp / lc : lc;
    };
    HslInterpolator.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof HslInterpolator) {
            return this.h0 === that.h0 && this.dh === that.dh &&
                this.s0 === that.s0 && this.ds === that.ds &&
                this.l0 === that.l0 && this.dl === that.dl &&
                this.a0 === that.a0 && this.da === that.da;
        }
        return false;
    };
    return HslInterpolator;
}(ColorInterpolator));
var TransformInterpolator = (function (_super) {
    __extends(TransformInterpolator, _super);
    function TransformInterpolator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TransformInterpolator.prototype.map = function (u) {
        return Transform.Identity;
    };
    TransformInterpolator.prototype.unmap = function (f) {
        return 0;
    };
    TransformInterpolator.prototype.range = function (f0, f1) {
        if (f0 === undefined) {
            return [this.map(0), this.map(1)];
        }
        else if (f1 === undefined) {
            f0 = f0;
            return Interpolator.transform(f0[0], f0[1]);
        }
        else {
            return Interpolator.transform(f0, f1);
        }
    };
    TransformInterpolator.prototype.equals = function (that) {
        return this === that;
    };
    return TransformInterpolator;
}(Interpolator));
var TranslateTransformInterpolator = (function (_super) {
    __extends(TranslateTransformInterpolator, _super);
    function TranslateTransformInterpolator(f0, f1) {
        var _this = _super.call(this) || this;
        var x0;
        var y0;
        if (f0 !== undefined) {
            f0 = TranslateTransform.fromAny(f0);
            x0 = f0.x;
            y0 = f0.y;
        }
        else {
            x0 = undefined;
            y0 = undefined;
        }
        var x1;
        var y1;
        if (f1 !== undefined) {
            f1 = TranslateTransform.fromAny(f1);
            x1 = f1.x;
            y1 = f1.y;
        }
        else {
            x1 = undefined;
            y1 = undefined;
        }
        if (!x0 && !x1) {
            x1 = x0 = Length.zero();
        }
        else if (!x1) {
            x1 = x0;
        }
        else if (!x0) {
            x0 = x1;
        }
        else {
            x0 = x0.to(x1.units);
        }
        if (!y0 && !y1) {
            y1 = y0 = Length.zero();
        }
        else if (!y1) {
            y1 = y0;
        }
        else if (!y0) {
            y0 = y1;
        }
        else {
            y0 = y0.to(y1.units);
        }
        _this.x0 = x0.value;
        _this.dx = x1.value - _this.x0;
        _this.xUnits = x1.units;
        _this.y0 = y0.value;
        _this.dy = y1.value - _this.y0;
        _this.yUnits = y1.units;
        return _this;
    }
    TranslateTransformInterpolator.prototype.map = function (u) {
        var x = Length.fromAny(this.x0 + this.dx * u, this.xUnits);
        var y = Length.fromAny(this.y0 + this.dy * u, this.yUnits);
        return new TranslateTransform(x, y);
    };
    TranslateTransformInterpolator.prototype.unmap = function (f) {
        f = TranslateTransform.fromAny(f);
        var units = f.x.units;
        var x0 = Length.fromAny(this.x0, this.xUnits).to(units).value;
        var y0 = Length.fromAny(this.y0, this.yUnits).to(units).value;
        var dx = Length.fromAny(this.dx, this.xUnits).to(units).value;
        var dy = Length.fromAny(this.dy, this.yUnits).to(units).value;
        var fx = f.x.to(units).value - x0;
        var fy = f.y.to(units).value - y0;
        var dp = fx * dx + fy * dy;
        var lf = Math.sqrt(fx * fx + fy * fy);
        return lf ? dp / lf : lf;
    };
    TranslateTransformInterpolator.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof TranslateTransformInterpolator) {
            return this.x0 === that.x0 && this.dx === that.dx && this.xUnits === that.xUnits &&
                this.y0 === that.y0 && this.dy === that.dy && this.yUnits === that.yUnits;
        }
        return false;
    };
    return TranslateTransformInterpolator;
}(TransformInterpolator));
var ScaleTransformInterpolator = (function (_super) {
    __extends(ScaleTransformInterpolator, _super);
    function ScaleTransformInterpolator(f0, f1) {
        var _this = _super.call(this) || this;
        var x0;
        var y0;
        if (f0 !== undefined) {
            f0 = ScaleTransform.fromAny(f0);
            x0 = f0.x;
            y0 = f0.y;
        }
        else {
            x0 = undefined;
            y0 = undefined;
        }
        var x1;
        var y1;
        if (f1 !== undefined) {
            f1 = ScaleTransform.fromAny(f1);
            x1 = f1.x;
            y1 = f1.y;
        }
        else {
            x1 = undefined;
            y1 = undefined;
        }
        if (x0 === undefined && !x1) {
            x1 = x0 = 1;
        }
        else if (x1 === undefined) {
            x1 = x0;
        }
        else if (x0 === undefined) {
            x0 = x1;
        }
        if (y0 === undefined && y1 === undefined) {
            y1 = y0 = 1;
        }
        else if (y1 === undefined) {
            y1 = y0;
        }
        else if (y0 === undefined) {
            y0 = y1;
        }
        _this.x0 = x0;
        _this.dx = x1 - _this.x0;
        _this.y0 = y0;
        _this.dy = y1 - _this.y0;
        return _this;
    }
    ScaleTransformInterpolator.prototype.map = function (u) {
        var x = this.x0 + this.dx * u;
        var y = this.y0 + this.dy * u;
        return new ScaleTransform(x, y);
    };
    ScaleTransformInterpolator.prototype.unmap = function (f) {
        f = ScaleTransform.fromAny(f);
        var fx = f.x - this.x0;
        var fy = f.y - this.y0;
        var dp = fx * this.dx + fy * this.dy;
        var lf = Math.sqrt(fx * fx + fy * fy);
        return lf ? dp / lf : lf;
    };
    ScaleTransformInterpolator.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof ScaleTransformInterpolator) {
            return this.x0 === that.x0 && this.dx === that.dx &&
                this.y0 === that.y0 && this.dy === that.dy;
        }
        return false;
    };
    return ScaleTransformInterpolator;
}(TransformInterpolator));
var RotateTransformInterpolator = (function (_super) {
    __extends(RotateTransformInterpolator, _super);
    function RotateTransformInterpolator(f0, f1) {
        var _this = _super.call(this) || this;
        var a0;
        if (f0 !== undefined) {
            f0 = RotateTransform.fromAny(f0);
            a0 = f0.a;
        }
        else {
            a0 = undefined;
        }
        var a1;
        if (f1 !== undefined) {
            f1 = RotateTransform.fromAny(f1);
            a1 = f1.a;
        }
        else {
            a1 = undefined;
        }
        if (!a0 && !a1) {
            a1 = a0 = Angle.zero();
        }
        else if (!a1) {
            a1 = a0;
        }
        else if (!a0) {
            a0 = a1;
        }
        else {
            a0 = a0.to(a1.units);
        }
        _this.v0 = a0.value;
        _this.dv = a1.value - _this.v0;
        _this.units = a1.units;
        return _this;
    }
    RotateTransformInterpolator.prototype.map = function (u) {
        var a = Angle.fromAny(this.v0 + this.dv * u, this.units);
        return new RotateTransform(a);
    };
    RotateTransformInterpolator.prototype.unmap = function (f) {
        var v = RotateTransform.fromAny(f).a.to(this.units).value;
        return this.dv ? (v - this.v0) / this.dv : this.dv;
    };
    RotateTransformInterpolator.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof RotateTransformInterpolator) {
            return this.v0 === that.v0 && this.dv === that.dv && this.units === that.units;
        }
        return false;
    };
    return RotateTransformInterpolator;
}(TransformInterpolator));
var SkewTransformInterpolator = (function (_super) {
    __extends(SkewTransformInterpolator, _super);
    function SkewTransformInterpolator(f0, f1) {
        var _this = _super.call(this) || this;
        var x0;
        var y0;
        if (f0 !== undefined) {
            f0 = SkewTransform.fromAny(f0);
            x0 = f0.x;
            y0 = f0.y;
        }
        else {
            x0 = undefined;
            y0 = undefined;
        }
        var x1;
        var y1;
        if (f1 !== undefined) {
            f1 = SkewTransform.fromAny(f1);
            x1 = f1.x;
            y1 = f1.y;
        }
        else {
            x1 = undefined;
            y1 = undefined;
        }
        if (!x0 && !x1) {
            x1 = x0 = Angle.zero();
        }
        else if (!x1) {
            x1 = x0;
        }
        else if (!x0) {
            x0 = x1;
        }
        else {
            x0 = x0.to(x1.units);
        }
        if (!y0 && !y1) {
            y1 = y0 = Angle.zero();
        }
        else if (!y1) {
            y1 = y0;
        }
        else if (!y0) {
            y0 = y1;
        }
        else {
            y0 = y0.to(y1.units);
        }
        _this.x0 = x0.value;
        _this.dx = x1.value - _this.x0;
        _this.xUnits = x1.units;
        _this.y0 = y0.value;
        _this.dy = y1.value - _this.y0;
        _this.yUnits = y1.units;
        return _this;
    }
    SkewTransformInterpolator.prototype.map = function (u) {
        var x = Angle.fromAny(this.x0 + this.dx * u, this.xUnits);
        var y = Angle.fromAny(this.y0 + this.dy * u, this.yUnits);
        return new SkewTransform(x, y);
    };
    SkewTransformInterpolator.prototype.unmap = function (f) {
        f = SkewTransform.fromAny(f);
        var units = f.x.units;
        var x0 = Angle.fromAny(this.x0, this.xUnits).to(units).value;
        var y0 = Angle.fromAny(this.y0, this.yUnits).to(units).value;
        var dx = Angle.fromAny(this.dx, this.xUnits).to(units).value;
        var dy = Angle.fromAny(this.dy, this.yUnits).to(units).value;
        var fx = f.x.to(units).value - x0;
        var fy = f.y.to(units).value - y0;
        var dp = fx * dx + fy * dy;
        var lf = Math.sqrt(fx * fx + fy * fy);
        return lf ? dp / lf : lf;
    };
    SkewTransformInterpolator.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof SkewTransformInterpolator) {
            return this.x0 === that.x0 && this.dx === that.dx && this.xUnits === that.xUnits &&
                this.y0 === that.y0 && this.dy === that.dy && this.yUnits === that.yUnits;
        }
        return false;
    };
    return SkewTransformInterpolator;
}(TransformInterpolator));
var MatrixTransformInterpolator = (function (_super) {
    __extends(MatrixTransformInterpolator, _super);
    function MatrixTransformInterpolator(f0, f1) {
        var _this = _super.call(this) || this;
        if (f0 !== undefined) {
            f0 = MatrixTransform.fromAny(f0);
        }
        if (f1 !== undefined) {
            f1 = MatrixTransform.fromAny(f1);
        }
        if (!f0 && !f1) {
            f1 = f0 = new MatrixTransform();
        }
        else if (!f1) {
            f1 = f0;
        }
        else if (!f0) {
            f0 = f1;
        }
        _this.f0 = f0;
        _this.f1 = f1;
        return _this;
    }
    MatrixTransformInterpolator.prototype.map = function (u) {
        return this.f1;
    };
    MatrixTransformInterpolator.prototype.unmap = function (f) {
        return 0;
    };
    MatrixTransformInterpolator.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof MatrixTransformInterpolator) {
            return this.f0.equals(that.f0) && this.f1.equals(that.f1);
        }
        return false;
    };
    return MatrixTransformInterpolator;
}(TransformInterpolator));
var TransformListInterpolator = (function (_super) {
    __extends(TransformListInterpolator, _super);
    function TransformListInterpolator(f0, f1) {
        var _this = _super.call(this) || this;
        if (f0 !== undefined) {
            f0 = TransformList.fromAny(f0);
        }
        if (f1 !== undefined) {
            f1 = TransformList.fromAny(f1);
        }
        if (!f0 && !f1) {
            f1 = f0 = new TransformList([]);
        }
        else if (!f1) {
            f1 = f0;
        }
        else if (!f0) {
            f0 = f1;
        }
        _this.interpolators = [];
        var n = Math.min(f0.transforms.length, f1.transforms.length);
        for (var i = 0; i < n; i += 1) {
            _this.interpolators.push(Interpolator.transform(f0.transforms[i], f1.transforms[i]));
        }
        return _this;
    }
    TransformListInterpolator.prototype.map = function (u) {
        var transforms = [];
        for (var i = 0; i < this.interpolators.length; i += 1) {
            transforms.push(this.interpolators[i].map(u));
        }
        return new TransformList(transforms);
    };
    TransformListInterpolator.prototype.unmap = function (f) {
        return 0;
    };
    TransformListInterpolator.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof TransformListInterpolator) {
            var n = this.interpolators.length;
            if (n === that.interpolators.length) {
                for (var i = 0; i < n; i += 1) {
                    if (!this.interpolators[i].equals(that.interpolators[i])) {
                        return false;
                    }
                }
                return true;
            }
        }
        return false;
    };
    return TransformListInterpolator;
}(TransformInterpolator));
var TransformPathInterpolator = (function (_super) {
    __extends(TransformPathInterpolator, _super);
    function TransformPathInterpolator(d) {
        var _this = _super.call(this) || this;
        if (d instanceof SVGPathElement) {
            _this.path = d;
        }
        else {
            var path = document.createElementNS('http://www.w3.org/2000/svg', 'path');
            path.setAttribute('d', '' + d);
            _this.path = path;
        }
        return _this;
    }
    TransformPathInterpolator.prototype.map = function (u) {
        var point = this.path.getPointAtLength(u * this.path.getTotalLength());
        return Transform.translate(point.x, point.y);
    };
    TransformPathInterpolator.prototype.unmap = function (d) {
        return 0;
    };
    TransformPathInterpolator.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof TransformPathInterpolator) {
            return this.path === that.path;
        }
        return false;
    };
    return TransformPathInterpolator;
}(TransformInterpolator));
var ScaleInterpolator = (function (_super) {
    __extends(ScaleInterpolator, _super);
    function ScaleInterpolator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ScaleInterpolator.prototype.map = function (u) {
        throw new Error();
    };
    ScaleInterpolator.prototype.unmap = function (s) {
        return 0;
    };
    ScaleInterpolator.prototype.range = function (s0, s1) {
        if (s0 === undefined) {
            return [this.map(0), this.map(1)];
        }
        else if (s1 === undefined) {
            s0 = s0;
            return Interpolator.scale(s0[0], s0[1]);
        }
        else {
            return Interpolator.scale(s0, s1);
        }
    };
    ScaleInterpolator.prototype.equals = function (that) {
        return this === that;
    };
    return ScaleInterpolator;
}(Interpolator));
var LinearScaleInterpolator = (function (_super) {
    __extends(LinearScaleInterpolator, _super);
    function LinearScaleInterpolator(s0, s1) {
        var _this = _super.call(this) || this;
        if (!s0 && !s1) {
            throw new Error();
        }
        else if (!s1) {
            s1 = s0;
        }
        else if (!s0) {
            s0 = s1;
        }
        _this.x0 = new NumberInterpolator(s0.x0, s1.x0);
        _this.dx = new NumberInterpolator(s0.dx, s1.dx);
        _this.fx = new InterpolatorInterpolator(s0.fx, s1.fx);
        return _this;
    }
    LinearScaleInterpolator.prototype.map = function (u) {
        var x0 = this.x0.map(u);
        var dx = this.dx.map(u);
        var fx = this.fx.map(u);
        return new LinearScale(x0, x0 + dx, fx);
    };
    LinearScaleInterpolator.prototype.unmap = function (s) {
        return 0;
    };
    LinearScaleInterpolator.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof LinearScaleInterpolator) {
            return this.x0.equals(that.x0) && this.dx.equals(that.dx) && this.fx.equals(that.fx);
        }
        return false;
    };
    return LinearScaleInterpolator;
}(ScaleInterpolator));
var TimeScaleInterpolator = (function (_super) {
    __extends(TimeScaleInterpolator, _super);
    function TimeScaleInterpolator(s0, s1) {
        var _this = _super.call(this) || this;
        if (!s0 && !s1) {
            throw new Error();
        }
        else if (!s1) {
            s1 = s0;
        }
        else if (!s0) {
            s0 = s1;
        }
        _this.t0 = new NumberInterpolator(s0.t0, s1.t0);
        _this.dt = new NumberInterpolator(s0.dt, s1.dt);
        _this.ft = new InterpolatorInterpolator(s0.ft, s1.ft);
        return _this;
    }
    TimeScaleInterpolator.prototype.map = function (u) {
        var t0 = this.t0.map(u);
        var dt = this.dt.map(u);
        var ft = this.ft.map(u);
        return new TimeScale(t0, t0 + dt, ft);
    };
    TimeScaleInterpolator.prototype.unmap = function (s) {
        return 0;
    };
    TimeScaleInterpolator.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof TimeScaleInterpolator) {
            return this.t0.equals(that.t0) && this.dt.equals(that.dt) && this.ft.equals(that.ft);
        }
        return false;
    };
    return TimeScaleInterpolator;
}(ScaleInterpolator));
var ArrayInterpolator = (function (_super) {
    __extends(ArrayInterpolator, _super);
    function ArrayInterpolator(a0, a1) {
        var _this = _super.call(this) || this;
        if (!a0 && !a1) {
            a1 = a0 = [];
        }
        else if (!a1) {
            a1 = a0;
        }
        else if (!a0) {
            a0 = a1;
        }
        _this.interpolators = [];
        var n = Math.min(a0.length, a1.length);
        for (var i = 0; i < n; i += 1) {
            _this.interpolators.push(Interpolator.interpolate(a0[i], a1[i]));
        }
        return _this;
    }
    ArrayInterpolator.prototype.map = function (u) {
        var n = this.interpolators.length;
        var array = new Array(n);
        for (var i = 0; i < this.interpolators.length; i += 1) {
            array[i] = this.interpolators[i].map(u);
        }
        return array;
    };
    ArrayInterpolator.prototype.unmap = function (a) {
        return 0;
    };
    ArrayInterpolator.prototype.range = function (a0, a1) {
        if (a0 === undefined) {
            return [this.map(0), this.map(1)];
        }
        else if (a1 === undefined) {
            a0 = a0;
            return new ArrayInterpolator(a0[0], a0[1]);
        }
        else {
            return new ArrayInterpolator(a0, a1);
        }
    };
    ArrayInterpolator.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof ArrayInterpolator) {
            var n = this.interpolators.length;
            if (n === that.interpolators.length) {
                for (var i = 0; i < n; i += 1) {
                    if (!this.interpolators[i].equals(that.interpolators[i])) {
                        return false;
                    }
                }
                return true;
            }
        }
        return false;
    };
    return ArrayInterpolator;
}(Interpolator));
var InterpolatorInterpolator = (function (_super) {
    __extends(InterpolatorInterpolator, _super);
    function InterpolatorInterpolator(i0, i1) {
        var _this = _super.call(this) || this;
        if (!i0 && !i1) {
            throw new Error();
        }
        else if (!i1) {
            i1 = i0;
        }
        else if (!i0) {
            i0 = i1;
        }
        _this.i0 = i0;
        _this.i1 = i1;
        _this.i00 = _this.i1.range(_this.i0.map(0), _this.i1.map(0));
        _this.i11 = _this.i1.range(_this.i0.map(1), _this.i1.map(1));
        return _this;
    }
    InterpolatorInterpolator.prototype.map = function (u) {
        if (u === 0) {
            return this.i0;
        }
        else if (u === 1) {
            return this.i1;
        }
        else {
            return this.i1.range(this.i00.map(u), this.i11.map(u));
        }
    };
    InterpolatorInterpolator.prototype.unmap = function (i) {
        return 0;
    };
    InterpolatorInterpolator.prototype.range = function (i0, i1) {
        if (i0 === undefined) {
            return [this.i0, this.i1];
        }
        else if (i1 === undefined) {
            i0 = i0;
            return new InterpolatorInterpolator(i0[0], i0[1]);
        }
        else {
            return new InterpolatorInterpolator(i0, i1);
        }
    };
    InterpolatorInterpolator.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof InterpolatorInterpolator) {
            return this.i0.equals(that.i0) && this.i1.equals(that.i1);
        }
        return false;
    };
    return InterpolatorInterpolator;
}(Interpolator));
var InterpolatorForm = (function (_super) {
    __extends(InterpolatorForm, _super);
    function InterpolatorForm(form, unit) {
        var _this = _super.call(this) || this;
        _this.form = form;
        _this.unit = unit;
        return _this;
    }
    InterpolatorForm.prototype.mold = function (interpolator) {
        if (interpolator !== undefined) {
            interpolator = Interpolator.fromAny(interpolator);
            var a = this.form.mold(interpolator.map(0));
            var b = this.form.mold(interpolator.map(1));
            if (a.isDefined() && b.isDefined()) {
                return Record.of(Attr.of('interpolate', Record.of(a, b)));
            }
        }
        return Value.Absent;
    };
    InterpolatorForm.prototype.cast = function (value) {
        var header = value.header('interpolate');
        if (header.length >= 2) {
            var a = this.form.cast(header.getItem(0).toValue());
            var b = this.form.cast(header.getItem(1).toValue());
            if (a !== undefined && b !== undefined) {
                return Interpolator.interpolate(a, b);
            }
        }
        return undefined;
    };
    return InterpolatorForm;
}(Form));

var Transition = (function () {
    function Transition(dt, ft, f, f0, f1, fi) {
        this.dt = dt;
        this.ft = ft ? Ease.fromAny(ft) : undefined;
        this.f = f ? Interpolator.fromAny(f) : undefined;
        this.f0 = f0;
        this.f1 = f1;
        this.fi = fi;
    }
    Transition.prototype.duration = function (dt) {
        if (!arguments.length) {
            return this.dt;
        }
        else {
            return new Transition(dt, this.ft, this.f, this.f0, this.f1, this.fi);
        }
    };
    Transition.prototype.ease = function (ft) {
        if (!arguments.length) {
            return this.ft;
        }
        else {
            return new Transition(this.dt, ft, this.f, this.f0, this.f1, this.fi);
        }
    };
    Transition.prototype.interpolate = function (f) {
        if (!arguments.length) {
            return this.f;
        }
        else {
            return new Transition(this.dt, this.ft, f, this.f0, this.f1, this.fi);
        }
    };
    Transition.prototype.range = function (y0, y1) {
        if (y0 === undefined) {
            return this.f && this.f.range();
        }
        else {
            var f = void 0;
            if (this.f) {
                f = this.f.range(y0, y1);
            }
            else {
                f = Interpolator.interpolate(y0, y1);
            }
            return new Transition(this.dt, this.ft, f, this.f0, this.f1, this.fi);
        }
    };
    Transition.prototype.onStart = function (f0) {
        if (!arguments.length) {
            return this.f0;
        }
        else {
            return new Transition(this.dt, this.ft, this.f, f0, this.f1, this.fi);
        }
    };
    Transition.prototype.onEnd = function (f1) {
        if (!arguments.length) {
            return this.f1;
        }
        else {
            return new Transition(this.dt, this.ft, this.f, this.f0, f1, this.fi);
        }
    };
    Transition.prototype.onInterrupt = function (fi) {
        if (!arguments.length) {
            return this.fi;
        }
        else {
            return new Transition(this.dt, this.ft, this.f, this.f0, this.f1, fi);
        }
    };
    Transition.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof Transition) {
            return this.dt === that.dt && this.ft === that.ft
                && (this.f === undefined ? that.f === undefined : this.f.equals(that.f));
        }
        return false;
    };
    Transition.form = function (interpolatorForm, unit) {
        return new TransitionForm(interpolatorForm, unit);
    };
    Transition.duration = function (dt, ft, f) {
        return new Transition(dt, ft, f);
    };
    Transition.ease = function (ft, f) {
        return new Transition(undefined, ft, f);
    };
    Transition.interpolate = function (f) {
        return new Transition(undefined, undefined, f);
    };
    Transition.range = function (y0, y1) {
        var f;
        if (y1 === undefined) {
            y0 = y0;
            f = Interpolator.interpolate(y0[0], y0[1]);
        }
        else {
            f = Interpolator.interpolate(y0, y1);
        }
        return new Transition(undefined, undefined, f);
    };
    Transition.fromAny = function (trans, value, dt, ft) {
        if (trans instanceof Transition) {
            return trans;
        }
        else if (typeof trans === 'object') {
            return new Transition(trans.duration, trans.ease, trans.interpolate, trans.onStart, trans.onEnd, trans.onInterrupt);
        }
        else if (trans === true) {
            return new Transition(dt, ft, Interpolator.interpolate(value));
        }
        else {
            return undefined;
        }
    };
    Transition.isInit = function (value) {
        if (value && typeof value === 'object') {
            var init = value;
            return init.duration !== undefined || init.ease !== undefined || init.interpolate !== undefined;
        }
        return false;
    };
    Transition.Form = undefined;
    return Transition;
}());
var TransitionForm = (function (_super) {
    __extends(TransitionForm, _super);
    function TransitionForm(interpolatorForm, unit) {
        var _this = _super.call(this) || this;
        _this.interpolatorForm = interpolatorForm;
        _this.unit = unit;
        return _this;
    }
    TransitionForm.prototype.mold = function (transition) {
        if (transition !== undefined) {
            transition = Transition.fromAny(transition);
            var header = Record.empty();
            if (transition.dt !== undefined) {
                header.slot('dt', transition.dt);
            }
            if (transition.ft !== undefined) {
                header.slot('ease', Ease.Form.mold(transition.ft));
            }
            var record = Record.of(Attr.of('transition', header));
            var f = this.interpolatorForm.mold(transition.f);
            if (f.isDefined()) {
                record = record.concat(f);
            }
            return record;
        }
        return Value.Absent;
    };
    TransitionForm.prototype.cast = function (value) {
        var header = value.header('transition');
        if (header.length >= 2) {
            var dt_1;
            var ft_1;
            header.forEach(function (item, index) {
                var key = item.key.stringValue();
                if (key !== undefined) {
                    if (key === 'dt') {
                        dt_1 = item.toValue().numberValue(dt_1);
                    }
                    else if (key === 'ease') {
                        ft_1 = item.toValue().cast(Ease.Form, ft_1);
                    }
                }
                else if (item instanceof Value) {
                    if (index === 0) {
                        dt_1 = item.numberValue(dt_1);
                    }
                    else if (index === 1) {
                        ft_1 = item.cast(Ease.Form, ft_1);
                    }
                }
            }, this);
            var f = this.interpolatorForm.cast(value.body());
            return new Transition(dt_1, ft_1, f);
        }
        return undefined;
    };
    return TransitionForm;
}(Form));

var ResizeObserverPolyfill = (function () {
    function ResizeObserverPolyfill(callback) {
        this.callback = callback;
        this.observationTargets = [];
        this.activeTargets = [];
        this.skippedTargets = [];
        DETECTOR.addObserver(this);
    }
    ResizeObserverPolyfill.prototype.observe = function (target) {
        for (var i = 0; i < this.observationTargets.length; i += 1) {
            if (target === this.observationTargets[i].target) {
                return;
            }
        }
        var observation = new ResizeObservationPolyfill(target);
        this.observationTargets.push(observation);
        DETECTOR.redetect();
    };
    ResizeObserverPolyfill.prototype.unobserve = function (target) {
        for (var i = 0; i < this.observationTargets.length; i += 1) {
            if (target === this.observationTargets[i].target) {
                this.observationTargets.splice(i, 1);
            }
        }
        if (!this.observationTargets.length) {
            DETECTOR.removeObserver(this);
        }
    };
    ResizeObserverPolyfill.prototype.gatherActive = function (depth) {
        this.clearActive();
        this.clearSkipped();
        for (var i = 0; i < this.observationTargets.length; i += 1) {
            var observation = this.observationTargets[i];
            if (observation.isActive()) {
                var targetDepth = calculateDepth(observation.target);
                if (targetDepth > depth) {
                    this.activeTargets.push(observation);
                }
                else {
                    this.skippedTargets.push(observation);
                }
            }
        }
    };
    ResizeObserverPolyfill.prototype.broadcastActive = function (shallowestTargetDepth) {
        if (this.hasActive()) {
            var entries = [];
            for (var i = 0; i < this.activeTargets.length; i += 1) {
                var observation = this.observationTargets[i];
                var entry = new ResizeObserverEntryPolyfill(observation.target);
                entries.push(entry);
                observation.broadcastWidth = entry.contentRect.width;
                observation.broadcastHeight = entry.contentRect.height;
                var targetDepth = calculateDepth(observation.target);
                if (targetDepth < shallowestTargetDepth) {
                    shallowestTargetDepth = targetDepth;
                }
            }
            this.callback(entries, this);
            this.clearActive();
        }
        return shallowestTargetDepth;
    };
    ResizeObserverPolyfill.prototype.hasActive = function () {
        return this.activeTargets.length > 0;
    };
    ResizeObserverPolyfill.prototype.hasSkipped = function () {
        return this.skippedTargets.length > 0;
    };
    ResizeObserverPolyfill.prototype.clearActive = function () {
        this.activeTargets.length = 0;
    };
    ResizeObserverPolyfill.prototype.clearSkipped = function () {
        this.skippedTargets.length = 0;
    };
    ResizeObserverPolyfill.prototype.disconnect = function () {
        this.clearActive();
        this.observationTargets.length = 0;
        DETECTOR.removeObserver(this);
    };
    return ResizeObserverPolyfill;
}());
var ResizeObserver = (typeof window !== 'undefined' && typeof window.ResizeObserver !== 'undefined')
    ? window.ResizeObserver
    : ResizeObserverPolyfill;
var ResizeObserverEntryPolyfill = (function () {
    function ResizeObserverEntryPolyfill(target, contentRect) {
        this.target = target;
        this.contentRect = contentRect || getContentRect(target);
    }
    return ResizeObserverEntryPolyfill;
}());
var ResizeObservationPolyfill = (function () {
    function ResizeObservationPolyfill(target) {
        this.target = target;
        this.broadcastWidth = 0;
        this.broadcastHeight = 0;
    }
    ResizeObservationPolyfill.prototype.isActive = function () {
        var contentRect = getContentRect(this.target);
        return !!contentRect && (Math.round(contentRect.width) !== Math.round(this.broadcastWidth) ||
            Math.round(contentRect.height) !== Math.round(this.broadcastHeight));
    };
    return ResizeObservationPolyfill;
}());
var ResizeDetector = (function () {
    function ResizeDetector() {
        this.resizeObservers = [];
        this.mutationObserver = undefined;
        this.detectAnimationFrame = 0;
        this.connected = false;
        this.onResize = this.onResize.bind(this);
        this.onTransitionEnd = this.onTransitionEnd.bind(this);
        this.onMutation = this.onMutation.bind(this);
        this.onSubtreeModified = undefined;
        this.onDetectAnimationFrame = this.onDetectAnimationFrame.bind(this);
    }
    ResizeDetector.prototype.addObserver = function (observer) {
        if (this.resizeObservers.indexOf(observer) < 0) {
            this.resizeObservers.push(observer);
        }
        this.connect();
    };
    ResizeDetector.prototype.removeObserver = function (observer) {
        var index = this.resizeObservers.indexOf(observer);
        if (index >= 0) {
            this.resizeObservers.splice(index, 1);
        }
        if (!this.resizeObservers.length) {
            this.disconnect();
        }
    };
    ResizeDetector.prototype.gatherActive = function (depth) {
        for (var i = 0; i < this.resizeObservers.length; i += 1) {
            this.resizeObservers[i].gatherActive(depth);
        }
    };
    ResizeDetector.prototype.hasActive = function () {
        for (var i = 0; i < this.resizeObservers.length; i += 1) {
            if (this.resizeObservers[i].hasActive()) {
                return true;
            }
        }
        return false;
    };
    ResizeDetector.prototype.hasSkipped = function () {
        for (var i = 0; i < this.resizeObservers.length; i += 1) {
            if (this.resizeObservers[i].hasSkipped()) {
                return true;
            }
        }
        return false;
    };
    ResizeDetector.prototype.broadcastActive = function () {
        var shallowestTargetDepth = Number.POSITIVE_INFINITY;
        for (var i = 0; i < this.resizeObservers.length; i += 1) {
            shallowestTargetDepth = this.resizeObservers[i].broadcastActive(shallowestTargetDepth);
        }
        return shallowestTargetDepth;
    };
    ResizeDetector.prototype.detect = function () {
        var depth = 0;
        this.gatherActive(depth);
        do {
            depth = this.broadcastActive();
            this.gatherActive(depth);
        } while (this.hasActive());
        if (this.hasSkipped()) {
            window.dispatchEvent(new ErrorEvent('ResizeObserver loop completed with undelivered notifications.'));
        }
    };
    ResizeDetector.prototype.redetect = function () {
        if (!this.detectAnimationFrame) {
            this.detectAnimationFrame = requestAnimationFrame(this.onDetectAnimationFrame);
        }
    };
    ResizeDetector.prototype.onDetectAnimationFrame = function (timestamp) {
        this.detectAnimationFrame = 0;
        this.detect();
    };
    ResizeDetector.prototype.onResize = function (event) {
        this.redetect();
    };
    ResizeDetector.prototype.onTransitionEnd = function (event) {
        var reflow = false;
        for (var i = 0; i < REFLOW_KEYS.length; i += 1) {
            if (event.propertyName.indexOf(REFLOW_KEYS[i]) >= 0) {
                reflow = true;
                break;
            }
        }
        if (reflow) {
            this.redetect();
        }
    };
    ResizeDetector.prototype.onMutation = function (mutations) {
        for (var i = 0; i < mutations.length; i += 1) {
            var mutation = mutations[i];
            if (mutation.type === 'childList') {
                if (mutation.addedNodes && mutation.addedNodes.length > 0) {
                    for (var j = 0; j < mutation.addedNodes.length; j += 1) {
                        this.addShadows(mutation.addedNodes[j]);
                    }
                }
            }
        }
        this.redetect();
    };
    ResizeDetector.prototype.addShadows = function (node) {
        if (node instanceof Element) {
            for (var i = 0; i < node.childNodes.length; i += 1) {
                this.addShadows(node.childNodes[i]);
            }
            if (node.shadowRoot) {
                this.observe(node.shadowRoot);
                this.addShadows(node.shadowRoot);
            }
        }
    };
    ResizeDetector.prototype.observe = function (target) {
        this.mutationObserver.observe(target, {
            attributes: true,
            childList: true,
            characterData: true,
            subtree: true,
        });
    };
    ResizeDetector.prototype.connect = function () {
        if (this.connected) {
            return;
        }
        window.addEventListener('resize', this.onResize);
        document.addEventListener('transitionend', this.onTransitionEnd);
        var isIE11 = typeof navigator !== 'undefined' && (/Trident\/.*rv:11/).test(navigator.userAgent);
        if (typeof MutationObserver !== 'undefined' && !isIE11) {
            this.mutationObserver = new MutationObserver(this.onMutation);
            this.observe(document);
            this.addShadows(document);
        }
        else {
            this.onSubtreeModified = this.onResize;
            document.addEventListener('DOMSubtreeModified', this.onSubtreeModified);
        }
        this.connected = true;
    };
    ResizeDetector.prototype.disconnect = function () {
        if (!this.connected) {
            return;
        }
        window.removeEventListener('resize', this.onResize);
        document.removeEventListener('transitionend', this.onTransitionEnd);
        if (this.mutationObserver) {
            this.mutationObserver.disconnect();
            this.mutationObserver = undefined;
        }
        if (this.onSubtreeModified) {
            document.removeEventListener('DOMSubtreeModified', this.onSubtreeModified);
            this.onSubtreeModified = undefined;
        }
        if (this.detectAnimationFrame) {
            cancelAnimationFrame(this.detectAnimationFrame);
            this.detectAnimationFrame = 0;
        }
        this.connected = false;
    };
    return ResizeDetector;
}());
var REFLOW_KEYS = ['top', 'right', 'bottom', 'left', 'width', 'height', 'size', 'weight'];
var DETECTOR = new ResizeDetector();
function calculateDepth(node) {
    var k = 0;
    while (node.parentNode) {
        node = node.parentNode;
        k += 1;
    }
    return k;
}
function isSVGGraphicsElement(target) {
    return typeof SVGGraphicsElement !== 'undefined' ?
        target instanceof SVGGraphicsElement :
        target instanceof SVGElement && typeof target.getBBox === 'function';
}
function getContentRect(target) {
    if (target instanceof HTMLElement) {
        return getHTMLContentRect(target);
    }
    else if (isSVGGraphicsElement(target)) {
        return getSVGContentRect(target);
    }
    else {
        return createContentRect(0, 0, 0, 0);
    }
}
function getHTMLContentRect(target) {
    if (!target.clientWidth && !target.clientHeight) {
        return createContentRect(0, 0, 0, 0);
    }
    var style = getComputedStyle(target);
    var paddingLeft = toFloat(style.getPropertyValue('padding-left'));
    var paddingTop = toFloat(style.getPropertyValue('padding-top'));
    var xPadding = paddingLeft + toFloat(style.getPropertyValue('padding-right'));
    var yPadding = paddingTop + toFloat(style.getPropertyValue('padding-bottom'));
    var width = toFloat(style.getPropertyValue('width'));
    var height = toFloat(style.getPropertyValue('height'));
    if (style.getPropertyValue('box-sizing') === 'border-box') {
        if (Math.round(width + xPadding) !== target.clientWidth) {
            width -= xPadding + toFloat(style.getPropertyValue('border-left-width')) +
                toFloat(style.getPropertyValue('border-right-width'));
        }
        if (Math.round(height + yPadding) !== target.clientHeight) {
            height -= yPadding + toFloat(style.getPropertyValue('border-top-width')) +
                toFloat(style.getPropertyValue('border-bottom-width'));
        }
    }
    if (target !== document.documentElement) {
        var yScrollbar = Math.round(width + xPadding) - target.clientWidth;
        var xScrollbar = Math.round(height + yPadding) - target.clientHeight;
        if (Math.abs(yScrollbar) !== 1) {
            width -= yScrollbar;
        }
        if (Math.abs(xScrollbar) !== 1) {
            height -= xScrollbar;
        }
    }
    return createContentRect(paddingLeft, paddingTop, width, height);
}
function getSVGContentRect(target) {
    var bbox = target.getBBox();
    return createContentRect(0, 0, bbox.width, bbox.height);
}
function toFloat(value) {
    return parseFloat(value) || 0;
}
function createContentRect(x, y, width, height) {
    return {
        x: x,
        y: y,
        width: width,
        height: height,
        top: y,
        right: x + width,
        bottom: y + height,
        left: x,
    };
}

function toAttributeString(value) {
    if (value && typeof value === 'object' && typeof value.toAttributeString === 'function') {
        return value.toAttributeString();
    }
    else {
        return '' + value;
    }
}
function toStyleString(value) {
    if (value && typeof value === 'object' && typeof value.toStyleString === 'function') {
        return value.toStyleString();
    }
    else {
        return '' + value;
    }
}

var TweenState;
(function (TweenState) {
    TweenState[TweenState["Quiesced"] = 0] = "Quiesced";
    TweenState[TweenState["Diverged"] = 1] = "Diverged";
    TweenState[TweenState["Tracking"] = 2] = "Tracking";
    TweenState[TweenState["Converged"] = 3] = "Converged";
    TweenState[TweenState["Interrupt"] = 4] = "Interrupt";
})(TweenState || (TweenState = {}));
var Animator = (function () {
    function Animator() {
    }
    Animator.DISABLED = 1 << 0;
    Animator.REQUIRES_RESIZE = 1 << 4;
    return Animator;
}());
var FrameAnimator = (function (_super) {
    __extends(FrameAnimator, _super);
    function FrameAnimator() {
        var _this = _super.call(this) || this;
        _this.flags = 0;
        _this.animationFrame = 0;
        _this.onAnimationFrame = _this.onAnimationFrame.bind(_this);
        return _this;
    }
    FrameAnimator.prototype.enabled = function (enabled) {
        if (enabled === undefined) {
            return (this.flags & Animator.DISABLED) === 0;
        }
        else {
            if (enabled && (this.flags & Animator.DISABLED) !== 0) {
                this.flags &= ~Animator.DISABLED;
                this.animate();
            }
            else if (!enabled && (this.flags & Animator.DISABLED) === 0) {
                this.flags |= Animator.DISABLED;
            }
            return this;
        }
    };
    FrameAnimator.prototype.animate = function () {
        if (!this.animationFrame && (this.flags & Animator.DISABLED) === 0) {
            this.animationFrame = requestAnimationFrame(this.onAnimationFrame);
        }
    };
    FrameAnimator.prototype.cancel = function () {
        if (this.animationFrame) {
            cancelAnimationFrame(this.animationFrame);
            this.animationFrame = 0;
        }
    };
    FrameAnimator.prototype.onAnimationFrame = function (timestamp) {
        this.animationFrame = 0;
        this.onFrame(timestamp);
    };
    return FrameAnimator;
}(Animator));
var ChildAnimator = (function (_super) {
    __extends(ChildAnimator, _super);
    function ChildAnimator(parent) {
        var _this = _super.call(this) || this;
        _this.parent = parent;
        return _this;
    }
    ChildAnimator.prototype.animate = function () {
        this.parent.animate();
    };
    return ChildAnimator;
}(Animator));
var TweenAnimator = (function (_super) {
    __extends(TweenAnimator, _super);
    function TweenAnimator(value, transition, flags) {
        if (flags === void 0) { flags = 0; }
        var _this = _super.call(this) || this;
        if (!transition.f) {
            throw new Error('no interpolator');
        }
        _this.dt = transition.dt !== undefined ? transition.dt : 0;
        _this.ft = transition.ft || Ease.linear;
        _this.f = transition.f;
        _this.f0 = transition.f0;
        _this.f1 = transition.f1;
        _this.fi = transition.fi;
        _this.fl = undefined;
        _this.v = value;
        _this.v1 = value;
        _this.t0 = 0;
        _this.flags = flags;
        _this.tweenState = 0;
        return _this;
    }
    TweenAnimator.prototype.enabled = function (enabled) {
        if (enabled === undefined) {
            return (this.flags & Animator.DISABLED) === 0;
        }
        else {
            if (enabled && (this.flags & Animator.DISABLED) !== 0) {
                this.flags &= ~Animator.DISABLED;
                this.animate();
            }
            else if (!enabled && (this.flags & Animator.DISABLED) === 0) {
                this.flags |= Animator.DISABLED;
            }
            return this;
        }
    };
    TweenAnimator.prototype.transition = function (transition) {
        if (!transition) {
            return new Transition(this.dt, this.ft, this.f);
        }
        else {
            if (transition.dt !== undefined) {
                this.dt = transition.dt;
            }
            if (transition.ft) {
                this.ft = transition.ft;
            }
            if (transition.f) {
                this.f = transition.f;
            }
            if (transition.f0 !== undefined) {
                this.f0 = transition.f0;
            }
            if (transition.f1 !== undefined) {
                this.f1 = transition.f1;
            }
            if (transition.fi !== undefined) {
                this.fi = transition.fi;
            }
            return this;
        }
    };
    TweenAnimator.prototype.duration = function (dt) {
        if (dt === undefined) {
            return this.dt;
        }
        else {
            this.dt = Math.max(0, dt);
            return this;
        }
    };
    TweenAnimator.prototype.ease = function (ft) {
        if (!ft) {
            return this.ft;
        }
        else {
            this.ft = Ease.fromAny(ft);
            return this;
        }
    };
    TweenAnimator.prototype.get = function () {
        return this.v;
    };
    TweenAnimator.prototype.set = function (value, transition) {
        var fl = this.fi;
        this.fi = undefined;
        if (transition) {
            this.transition(transition);
        }
        this.f = this.f.range(this.v, value);
        this.fl = fl;
        this.v1 = value;
        this.t0 = 0;
        if (this.tweenState === 2) {
            this.tweenState = 4;
        }
        else {
            this.tweenState = 1;
        }
        if (transition) {
            this.animate();
        }
        else {
            this.onFrame(0);
        }
    };
    TweenAnimator.prototype.onFrame = function (t) {
        if (this.tweenState === 0 || (this.flags & Animator.DISABLED) !== 0) {
            return;
        }
        if (this.tweenState === 4) {
            this.onInterrupt(this.v);
            if (this.fl) {
                this.fl(this.v);
                this.fl = undefined;
            }
            this.tweenState = 1;
        }
        if (this.tweenState === 1) {
            if (!equal(this.v, this.v1)) {
                this.t0 = t;
                this.onStart(this.v);
                if (this.f0) {
                    this.f0(this.v);
                    this.f0 = undefined;
                }
                this.tweenState = 2;
            }
            else {
                this.tween(1);
            }
        }
        if (this.tweenState === 2) {
            var u = this.dt ? Math.min(Math.max(0, (t - this.t0) / this.dt), 1) : 1;
            this.tween(u);
        }
        if (this.tweenState === 3) {
            this.onEnd(this.v);
            if (this.f1) {
                this.f1(this.v);
                this.f1 = undefined;
            }
            this.fi = undefined;
            this.t0 = 0;
            this.tweenState = 0;
        }
        else {
            this.animate();
        }
    };
    TweenAnimator.prototype.map = function (u) {
        return this.f.map(u);
    };
    TweenAnimator.prototype.tween = function (u) {
        u = this.ft(u);
        this.v = this.map(u);
        this.update(this.v);
        if (u === 1) {
            this.tweenState = 3;
        }
    };
    TweenAnimator.prototype.updateTarget = function (target) {
        var view = target.view;
        if (view) {
            if ((this.flags & Animator.REQUIRES_RESIZE) !== 0) {
                view.requireResize();
            }
        }
    };
    TweenAnimator.prototype.onStart = function (value) {
    };
    TweenAnimator.prototype.onEnd = function (value) {
    };
    TweenAnimator.prototype.onInterrupt = function (value) {
    };
    return TweenAnimator;
}(Animator));
var ChildFrameAnimator = (function (_super) {
    __extends(ChildFrameAnimator, _super);
    function ChildFrameAnimator(parent, value, transition, flags) {
        var _this = _super.call(this, value, transition, flags) || this;
        _this.parent = parent;
        return _this;
    }
    ChildFrameAnimator.prototype.animate = function () {
        if ((this.flags & Animator.DISABLED) === 0) {
            this.parent.animate();
        }
    };
    return ChildFrameAnimator;
}(TweenAnimator));
var TweenFrameAnimator = (function (_super) {
    __extends(TweenFrameAnimator, _super);
    function TweenFrameAnimator(value, transition, flags) {
        var _this = _super.call(this, value, transition, flags) || this;
        _this.animationFrame = 0;
        _this.onAnimationFrame = _this.onAnimationFrame.bind(_this);
        return _this;
    }
    TweenFrameAnimator.prototype.animate = function () {
        if (!this.animationFrame && (this.flags & Animator.DISABLED) === 0) {
            this.animationFrame = requestAnimationFrame(this.onAnimationFrame);
        }
    };
    TweenFrameAnimator.prototype.cancel = function () {
        if (this.animationFrame) {
            cancelAnimationFrame(this.animationFrame);
            this.animationFrame = 0;
        }
    };
    TweenFrameAnimator.prototype.onAnimationFrame = function (timestamp) {
        this.animationFrame = 0;
        this.onFrame(timestamp);
    };
    return TweenFrameAnimator;
}(TweenAnimator));
var AttributeAnimator = (function (_super) {
    __extends(AttributeAnimator, _super);
    function AttributeAnimator(target, name, value, transition, flags) {
        var _this = _super.call(this, value, transition, flags) || this;
        _this.target = target;
        _this.name = name;
        return _this;
    }
    AttributeAnimator.prototype.update = function (value) {
        var oldValue = this.target.getAttribute(this.name);
        var newValue = toAttributeString(value);
        if (oldValue !== newValue) {
            this.target.setAttribute(this.name, newValue);
            this.updateTarget(this.target);
        }
    };
    AttributeAnimator.prototype.animate = function () {
        _super.prototype.animate.call(this);
    };
    return AttributeAnimator;
}(TweenFrameAnimator));
var StyleAnimator = (function (_super) {
    __extends(StyleAnimator, _super);
    function StyleAnimator(target, name, value, transition, priority, flags) {
        var _this = _super.call(this, value, transition, flags) || this;
        _this.target = target;
        _this.name = name;
        _this.priority = priority;
        return _this;
    }
    StyleAnimator.prototype.update = function (value) {
        var oldValue = this.target.style.getPropertyValue(this.name);
        var newValue = toStyleString(value);
        if (oldValue !== newValue) {
            this.target.style.setProperty(this.name, newValue, this.priority);
            this.updateTarget(this.target);
        }
    };
    StyleAnimator.prototype.animate = function () {
        _super.prototype.animate.call(this);
    };
    return StyleAnimator;
}(TweenFrameAnimator));
var TextAnimator = (function (_super) {
    __extends(TextAnimator, _super);
    function TextAnimator(target, value, transition, format, flags) {
        var _this = _super.call(this, value, transition, flags) || this;
        _this.target = target;
        _this.format = format;
        return _this;
    }
    TextAnimator.prototype.update = function (value) {
        var text;
        var format = this.format;
        if (typeof format === 'object') {
            format = format.format;
        }
        if (typeof format === 'function') {
            text = format(value);
        }
        else if (value instanceof Item) {
            var stack = void 0;
            if (this.target.view) {
                stack = this.target.view.stack();
            }
            else {
                stack = EvalStack.of(Item.GlobalScope);
            }
            text = value.evaluate(stack).stringValue('');
        }
        else {
            text = '' + value;
        }
        if (this.target instanceof Text) {
            this.target.nodeValue = text;
        }
        else if (this.target instanceof HTMLElement) {
            this.target.innerText = text;
        }
        else {
            this.target.textContent = text;
        }
    };
    TextAnimator.prototype.animate = function () {
        _super.prototype.animate.call(this);
    };
    return TextAnimator;
}(TweenFrameAnimator));

var Popover = (function () {
    function Popover(node) {
        this.node = node;
        this._backgroundColor = Color.white();
        this._borderRadius = Length.zero();
        this._arrowWidth = Length.fromAny(10);
        this._arrowHeight = Length.fromAny(8);
        this._placement = [];
        this._viewportTop = Length.fromAny(-Infinity);
        this._viewportRight = Length.fromAny(-Infinity);
        this._viewportBottom = Length.fromAny(-Infinity);
        this._viewportLeft = Length.fromAny(-Infinity);
        this._sourceLeft = Length.fromAny(NaN);
        this._sourceTop = Length.fromAny(NaN);
        this._sourceWidth = Length.zero();
        this._sourceHeight = Length.zero();
        this.dirty = true;
        this.observers = [];
        this.arrow = document.createElement('div');
        this.arrow.setAttribute('class', 'popover-arrow');
        this.arrow.style.setProperty('display', 'none');
        this.arrow.style.setProperty('position', 'absolute');
        this.arrow.style.setProperty('width', '0');
        this.arrow.style.setProperty('height', '0');
    }
    Popover.prototype.backgroundColor = function (backgroundColor) {
        if (backgroundColor === undefined) {
            return this._backgroundColor;
        }
        else {
            backgroundColor = Color.fromAny(backgroundColor);
            if (!this._backgroundColor.equals(backgroundColor)) {
                this._backgroundColor = backgroundColor;
                this.dirty = true;
            }
            return this;
        }
    };
    Popover.prototype.borderRadius = function (borderRadius) {
        if (borderRadius === undefined) {
            return this._borderRadius;
        }
        else {
            borderRadius = Length.fromAny(borderRadius);
            if (!this._borderRadius.equals(borderRadius)) {
                this._borderRadius = borderRadius;
                this.dirty = true;
            }
            return this;
        }
    };
    Popover.prototype.arrowWidth = function (arrowWidth) {
        if (arrowWidth === undefined) {
            return this._arrowWidth;
        }
        else {
            arrowWidth = Length.fromAny(arrowWidth);
            if (!this._arrowWidth.equals(arrowWidth)) {
                this._arrowWidth = arrowWidth;
                this.dirty = true;
            }
            return this;
        }
    };
    Popover.prototype.arrowHeight = function (arrowHeight) {
        if (arrowHeight === undefined) {
            return this._arrowHeight;
        }
        else {
            arrowHeight = Length.fromAny(arrowHeight);
            if (!this._arrowHeight.equals(arrowHeight)) {
                this._arrowHeight = arrowHeight;
                this.dirty = true;
            }
            return this;
        }
    };
    Popover.prototype.placement = function (placement) {
        if (placement === undefined) {
            return this._placement.slice(0);
        }
        else {
            this._placement = placement.slice(0);
            this.dirty = true;
            return this;
        }
    };
    Popover.prototype.viewportLeft = function (viewportLeft) {
        if (viewportLeft === undefined) {
            return this._viewportLeft;
        }
        else {
            viewportLeft = Length.fromAny(viewportLeft);
            if (!this._viewportLeft.equals(viewportLeft)) {
                this._viewportLeft = viewportLeft;
                this.dirty = true;
            }
            return this;
        }
    };
    Popover.prototype.viewportRight = function (viewportRight) {
        if (viewportRight === undefined) {
            return this._viewportRight;
        }
        else {
            viewportRight = Length.fromAny(viewportRight);
            if (!this._viewportRight.equals(viewportRight)) {
                this._viewportRight = viewportRight;
                this.dirty = true;
            }
            return this;
        }
    };
    Popover.prototype.viewportTop = function (viewportTop) {
        if (viewportTop === undefined) {
            return this._viewportTop;
        }
        else {
            viewportTop = Length.fromAny(viewportTop);
            if (!this._viewportTop.equals(viewportTop)) {
                this._viewportTop = viewportTop;
                this.dirty = true;
            }
            return this;
        }
    };
    Popover.prototype.viewportBottom = function (viewportBottom) {
        if (viewportBottom === undefined) {
            return this._viewportBottom;
        }
        else {
            viewportBottom = Length.fromAny(viewportBottom);
            if (!this._viewportBottom.equals(viewportBottom)) {
                this._viewportBottom = viewportBottom;
                this.dirty = true;
            }
            return this;
        }
    };
    Popover.prototype.sourceLeft = function (sourceLeft) {
        if (sourceLeft === undefined) {
            return this._sourceLeft;
        }
        else {
            sourceLeft = Length.fromAny(sourceLeft);
            if (!this._sourceLeft.equals(sourceLeft)) {
                this._sourceLeft = sourceLeft;
                this.dirty = true;
            }
            return this;
        }
    };
    Popover.prototype.sourceTop = function (sourceTop) {
        if (sourceTop === undefined) {
            return this._sourceTop;
        }
        else {
            sourceTop = Length.fromAny(sourceTop);
            if (!this._sourceTop.equals(sourceTop)) {
                this._sourceTop = sourceTop;
                this.dirty = true;
            }
            return this;
        }
    };
    Popover.prototype.sourceWidth = function (sourceWidth) {
        if (sourceWidth === undefined) {
            return this._sourceWidth;
        }
        else {
            sourceWidth = Length.fromAny(sourceWidth);
            if (!this._sourceWidth.equals(sourceWidth)) {
                this._sourceWidth = sourceWidth;
                this.dirty = true;
            }
            return this;
        }
    };
    Popover.prototype.sourceHeight = function (sourceHeight) {
        if (sourceHeight === undefined) {
            return this._sourceHeight;
        }
        else {
            sourceHeight = Length.fromAny(sourceHeight);
            if (!this._sourceHeight.equals(sourceHeight)) {
                this._sourceHeight = sourceHeight;
                this.dirty = true;
            }
            return this;
        }
    };
    Popover.prototype.place = function () {
        if (!this._placement.length) {
            return;
        }
        this.node.style.setProperty('position', 'absolute');
        var sourceWidth = this._sourceWidth.pxValue();
        var sourceHeight = this._sourceHeight.pxValue();
        var sourceLeft = this._sourceLeft.pxValue();
        var sourceRight = sourceLeft + sourceWidth;
        var sourceTop = this._sourceTop.pxValue();
        var sourceBottom = sourceTop + sourceHeight;
        var sourceX = sourceLeft + sourceWidth / 2;
        var sourceY = sourceTop + sourceHeight / 2;
        var arrowHeight = this._arrowHeight.pxValue();
        var popoverWidth = this.node.offsetWidth;
        var popoverHeight = this.node.offsetHeight;
        var popoverBounds = this.node.getBoundingClientRect();
        var parentLeft = Math.max(0, this._viewportLeft.pxValue());
        var parentRight = document.body.clientWidth - Math.max(0, this._viewportRight.pxValue());
        var parentTop = Math.max(0, this._viewportTop.pxValue());
        var parentBottom = document.body.clientHeight - Math.max(0, this._viewportBottom.pxValue());
        var placementLeft = parentLeft + (this.node.offsetLeft - popoverBounds.left);
        var placementRight = parentRight + (this.node.offsetLeft - popoverBounds.left);
        var placementTop = parentTop + (this.node.offsetTop - popoverBounds.top);
        var placementBottom = parentBottom + (this.node.offsetTop - popoverBounds.top);
        var marginLeft = parentLeft + sourceLeft;
        var marginRight = document.body.clientWidth - (marginLeft + sourceWidth);
        var marginTop = parentTop + sourceTop;
        var marginBottom = document.body.clientHeight - (marginTop + sourceHeight);
        var placement;
        for (var i = 0; i < this._placement.length; i += 1) {
            var p = this._placement[i];
            if (p === 'top' && popoverHeight + arrowHeight <= marginTop) {
                placement = 'top';
                break;
            }
            else if (p === 'bottom' && popoverHeight + arrowHeight <= marginBottom) {
                placement = 'bottom';
                break;
            }
            else if (p === 'left' && popoverWidth + arrowHeight <= marginLeft) {
                placement = 'left';
                break;
            }
            else if (p === 'right' && popoverWidth + arrowHeight <= marginRight) {
                placement = 'right';
                break;
            }
        }
        if (!placement) {
            for (var i = 0; i < this._placement.length; i += 1) {
                var p = this._placement[i];
                if (p === 'over') {
                    placement = 'over';
                    break;
                }
                else if (p === 'top' && marginTop >= marginBottom) {
                    placement = 'top';
                    break;
                }
                else if (p === 'bottom' && marginBottom >= marginTop) {
                    placement = 'bottom';
                    break;
                }
                else if (p === 'left' && marginLeft >= marginRight) {
                    placement = 'left';
                    break;
                }
                else if (p === 'right' && marginRight >= marginLeft) {
                    placement = 'right';
                    break;
                }
            }
        }
        var oldMaxWidth = Length.fromAny(this.node.style.getPropertyValue('max-width') || 0).pxValue();
        var oldMaxHeight = Length.fromAny(this.node.style.getPropertyValue('max-height') || 0).pxValue();
        var maxWidth = oldMaxWidth;
        var maxHeight = oldMaxHeight;
        var left = this.node.offsetLeft;
        var top = this.node.offsetTop;
        if (placement === 'over') {
            left = placementLeft;
            top = placementTop;
            maxWidth = Math.max(0, parentRight - parentLeft);
            maxHeight = Math.max(0, parentBottom - parentTop);
        }
        else if (placement === 'top') {
            if (sourceX - popoverWidth / 2 <= placementLeft) {
                left = placementLeft;
            }
            else if (sourceX + popoverWidth / 2 >= placementRight) {
                left = placementRight - popoverWidth;
            }
            else {
                left = sourceX - popoverWidth / 2;
            }
            top = Math.max(placementTop, sourceTop - (popoverHeight + arrowHeight));
            maxWidth = Math.max(0, parentRight - parentLeft);
            maxHeight = Math.max(0, sourceBottom - placementTop);
        }
        else if (placement === 'bottom') {
            if (sourceX - popoverWidth / 2 <= placementLeft) {
                left = placementLeft;
            }
            else if (sourceX + popoverWidth / 2 >= placementRight) {
                left = placementRight - popoverWidth;
            }
            else {
                left = sourceX - popoverWidth / 2;
            }
            top = Math.max(placementTop, sourceBottom + arrowHeight);
            maxWidth = Math.max(0, parentRight - parentLeft);
            maxHeight = Math.max(0, placementBottom - sourceTop);
        }
        else if (placement === 'left') {
            left = Math.max(placementLeft, sourceLeft - (popoverWidth + arrowHeight));
            if (sourceY - popoverHeight / 2 <= placementTop) {
                top = placementTop;
            }
            else if (sourceY + popoverHeight / 2 >= placementBottom) {
                top = placementBottom - popoverHeight;
            }
            else {
                top = sourceY - popoverHeight / 2;
            }
            maxWidth = Math.max(0, sourceRight - placementLeft);
            maxHeight = Math.max(0, parentBottom - parentTop);
        }
        else if (placement === 'right') {
            left = Math.max(placementLeft, sourceRight + arrowHeight);
            if (sourceY - popoverHeight / 2 <= placementTop) {
                top = placementTop;
            }
            else if (sourceY + popoverHeight / 2 >= placementBottom) {
                top = placementBottom - popoverHeight;
            }
            else {
                top = sourceY - popoverHeight / 2;
            }
            maxWidth = Math.max(0, placementRight - sourceLeft);
            maxHeight = Math.max(0, parentBottom - parentTop);
        }
        if (left !== this.node.offsetLeft || top !== this.node.offsetTop ||
            maxWidth !== oldMaxWidth || maxHeight !== oldMaxHeight) {
            for (var i = 0; i < this.observers.length; i += 1) {
                var observer = this.observers[i];
                if (observer.popoverWillPlace) {
                    observer.popoverWillPlace(placement, this);
                }
            }
            this.node.style.setProperty('left', left + 'px');
            this.node.style.setProperty('top', top + 'px');
            this.node.style.setProperty('max-width', maxWidth + 'px');
            this.node.style.setProperty('max-height', maxHeight + 'px');
            this.dirty = true;
            for (var i = 0; i < this.observers.length; i += 1) {
                var observer = this.observers[i];
                if (observer.popoverDidPlace) {
                    observer.popoverDidPlace(placement, this);
                }
            }
        }
    };
    Popover.prototype.render = function () {
        if (this.dirty) {
            this.dirty = false;
            this.renderPopover();
        }
    };
    Popover.prototype.renderPopover = function () {
        if (!this.arrow.parentNode) {
            this.node.insertBefore(this.arrow, this.node.firstChild);
        }
        var sourceWidth = this._sourceWidth.pxValue();
        var sourceHeight = this._sourceHeight.pxValue();
        var sourceLeft = this._sourceLeft.pxValue();
        var sourceRight = sourceLeft + sourceWidth;
        var sourceTop = this._sourceTop.pxValue();
        var sourceBottom = sourceTop + sourceHeight;
        var sourceX = sourceLeft + sourceWidth / 2;
        var sourceY = sourceTop + sourceHeight / 2;
        var popoverLeft = this.node.offsetLeft;
        var popoverRight = popoverLeft + this.node.offsetWidth;
        var popoverTop = this.node.offsetTop;
        var popoverBottom = popoverTop + this.node.offsetHeight;
        var borderRadius = this._borderRadius.pxValue();
        var arrowWidth = this._arrowWidth.pxValue();
        var arrowHeight = this._arrowHeight.pxValue();
        var arrowXMin = popoverLeft + borderRadius + arrowWidth / 2;
        var arrowXMax = popoverRight - borderRadius - arrowWidth / 2;
        var arrowYMin = popoverTop + borderRadius + arrowWidth / 2;
        var arrowYMax = popoverBottom - borderRadius - arrowWidth / 2;
        this.node.style.setProperty('position', 'absolute');
        this.node.style.setProperty('background-color', this._backgroundColor.toString());
        this.node.style.setProperty('border-radius', this._borderRadius.toString());
        this.arrow.style.removeProperty('top');
        this.arrow.style.removeProperty('right');
        this.arrow.style.removeProperty('bottom');
        this.arrow.style.removeProperty('left');
        this.arrow.style.removeProperty('border-left-width');
        this.arrow.style.removeProperty('border-left-style');
        this.arrow.style.removeProperty('border-left-color');
        this.arrow.style.removeProperty('border-right-width');
        this.arrow.style.removeProperty('border-right-style');
        this.arrow.style.removeProperty('border-right-color');
        this.arrow.style.removeProperty('border-top-width');
        this.arrow.style.removeProperty('border-top-style');
        this.arrow.style.removeProperty('border-top-color');
        this.arrow.style.removeProperty('border-bottom-width');
        this.arrow.style.removeProperty('border-bottom-style');
        this.arrow.style.removeProperty('border-bottom-color');
        if (popoverTop - arrowHeight >= sourceY &&
            arrowXMin <= sourceLeft && arrowXMax >= sourceRight) {
            this.arrow.style.setProperty('display', 'block');
            this.arrow.style.setProperty('top', (-arrowHeight) + 'px');
            this.arrow.style.setProperty('left', (sourceX - popoverLeft - arrowWidth / 2) + 'px');
            this.arrow.style.setProperty('border-left-width', (arrowWidth / 2) + 'px');
            this.arrow.style.setProperty('border-left-style', 'solid');
            this.arrow.style.setProperty('border-left-color', 'transparent');
            this.arrow.style.setProperty('border-right-width', (arrowWidth / 2) + 'px');
            this.arrow.style.setProperty('border-right-style', 'solid');
            this.arrow.style.setProperty('border-right-color', 'transparent');
            this.arrow.style.setProperty('border-bottom-width', arrowHeight + 'px');
            this.arrow.style.setProperty('border-bottom-style', 'solid');
            this.arrow.style.setProperty('border-bottom-color', this._backgroundColor.toString());
        }
        else if (popoverBottom + arrowHeight <= sourceY &&
            arrowXMin <= sourceLeft && arrowXMax >= sourceRight) {
            this.arrow.style.setProperty('display', 'block');
            this.arrow.style.setProperty('bottom', (-arrowHeight) + 'px');
            this.arrow.style.setProperty('left', (sourceX - popoverLeft - arrowWidth / 2) + 'px');
            this.arrow.style.setProperty('border-left-width', (arrowWidth / 2) + 'px');
            this.arrow.style.setProperty('border-left-style', 'solid');
            this.arrow.style.setProperty('border-left-color', 'transparent');
            this.arrow.style.setProperty('border-right-width', (arrowWidth / 2) + 'px');
            this.arrow.style.setProperty('border-right-style', 'solid');
            this.arrow.style.setProperty('border-right-color', 'transparent');
            this.arrow.style.setProperty('border-top-width', arrowHeight + 'px');
            this.arrow.style.setProperty('border-top-style', 'solid');
            this.arrow.style.setProperty('border-top-color', this._backgroundColor.toString());
        }
        else if (popoverLeft - arrowHeight >= sourceX &&
            arrowYMin <= sourceTop && arrowYMax >= sourceBottom) {
            this.arrow.style.setProperty('display', 'block');
            this.arrow.style.setProperty('left', (-arrowHeight) + 'px');
            this.arrow.style.setProperty('top', (sourceY - popoverTop - arrowWidth / 2) + 'px');
            this.arrow.style.setProperty('border-top-width', (arrowWidth / 2) + 'px');
            this.arrow.style.setProperty('border-top-style', 'solid');
            this.arrow.style.setProperty('border-top-color', 'transparent');
            this.arrow.style.setProperty('border-bottom-width', (arrowWidth / 2) + 'px');
            this.arrow.style.setProperty('border-bottom-style', 'solid');
            this.arrow.style.setProperty('border-bottom-color', 'transparent');
            this.arrow.style.setProperty('border-right-width', arrowHeight + 'px');
            this.arrow.style.setProperty('border-right-style', 'solid');
            this.arrow.style.setProperty('border-right-color', this._backgroundColor.toString());
        }
        else if (popoverRight + arrowHeight <= sourceX &&
            arrowYMin <= sourceTop && arrowYMax >= sourceBottom) {
            this.arrow.style.setProperty('display', 'block');
            this.arrow.style.setProperty('right', (-arrowHeight) + 'px');
            this.arrow.style.setProperty('top', (sourceY - popoverTop - arrowWidth / 2) + 'px');
            this.arrow.style.setProperty('border-top-width', (arrowWidth / 2) + 'px');
            this.arrow.style.setProperty('border-top-style', 'solid');
            this.arrow.style.setProperty('border-top-color', 'transparent');
            this.arrow.style.setProperty('border-bottom-width', (arrowWidth / 2) + 'px');
            this.arrow.style.setProperty('border-bottom-style', 'solid');
            this.arrow.style.setProperty('border-bottom-color', 'transparent');
            this.arrow.style.setProperty('border-left-width', arrowHeight + 'px');
            this.arrow.style.setProperty('border-left-style', 'solid');
            this.arrow.style.setProperty('border-left-color', this._backgroundColor.toString());
        }
        else {
            this.arrow.style.setProperty('display', 'none');
        }
    };
    Popover.prototype.addObserver = function (observer) {
        if (this.observers.indexOf(observer) < 0) {
            this.observers.push(observer);
        }
    };
    Popover.prototype.removeObserver = function (observer) {
        var i = this.observers.indexOf(observer);
        if (i >= 0) {
            this.observers.splice(i, 1);
        }
    };
    Popover.prototype.willShow = function () {
        for (var i = 0; i < this.observers.length; i += 1) {
            var observer = this.observers[i];
            if (observer.popoverWillShow) {
                observer.popoverWillShow(this);
            }
        }
    };
    Popover.prototype.didShow = function () {
        for (var i = 0; i < this.observers.length; i += 1) {
            var observer = this.observers[i];
            if (observer.popoverDidShow) {
                observer.popoverDidShow(this);
            }
        }
    };
    Popover.prototype.willHide = function () {
        for (var i = 0; i < this.observers.length; i += 1) {
            var observer = this.observers[i];
            if (observer.popoverWillHide) {
                observer.popoverWillHide(this);
            }
        }
    };
    Popover.prototype.didHide = function () {
        for (var i = 0; i < this.observers.length; i += 1) {
            var observer = this.observers[i];
            if (observer.popoverDidHide) {
                observer.popoverDidHide(this);
            }
        }
    };
    Popover.prototype.sourceWillChange = function (newSource, oldSource) {
        for (var i = 0; i < this.observers.length; i += 1) {
            var observer = this.observers[i];
            if (observer.popoverSourceWillChange) {
                observer.popoverSourceWillChange(newSource, oldSource, this);
            }
        }
    };
    Popover.prototype.sourceDidChange = function (newSource, oldSource) {
        for (var i = 0; i < this.observers.length; i += 1) {
            var observer = this.observers[i];
            if (observer.popoverSourceDidChange) {
                observer.popoverSourceDidChange(newSource, oldSource, this);
            }
        }
    };
    Popover.create = function (tag) {
        if (tag === void 0) { tag = 'div'; }
        var node = document.createElement(tag);
        return new Popover(node);
    };
    return Popover;
}());

var BoxShadow = (function () {
    function BoxShadow(inset, offsetX, offsetY, blurRadius, spreadRadius, color, next) {
        this.inset = inset;
        this.offsetX = offsetX;
        this.offsetY = offsetY;
        this.blurRadius = blurRadius;
        this.spreadRadius = spreadRadius;
        this.color = color;
        this.next = next;
    }
    BoxShadow.prototype.isDefined = function () {
        return this.inset || this.offsetX.isDefined() || this.offsetY.isDefined()
            || this.blurRadius.isDefined() || this.spreadRadius.isDefined()
            || this.color.isDefined() || (this.next ? this.next.isDefined() : false);
    };
    BoxShadow.prototype.and = function (inset, offsetX, offsetY, blurRadius, spreadRadius, color) {
        var next = this.next ? this.next.and.apply(this.next, arguments) : BoxShadow.of.apply(undefined, arguments);
        return new BoxShadow(this.inset, this.offsetX, this.offsetY, this.blurRadius, this.spreadRadius, this.color, next);
    };
    BoxShadow.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof BoxShadow) {
            return this.inset === that.inset && this.offsetX.equals(that.offsetX)
                && this.offsetY.equals(that.offsetY) && this.blurRadius.equals(that.blurRadius)
                && this.spreadRadius.equals(that.spreadRadius) && this.color.equals(that.color)
                && (this.next === null ? that.next === null : this.next.equals(that.next));
        }
        return false;
    };
    BoxShadow.prototype.toString = function () {
        if (this.isDefined()) {
            var s = '';
            var boxShadow = this;
            do {
                if (boxShadow.inset) {
                    s += 'inset';
                    s += ' ';
                }
                s += boxShadow.offsetX.toString();
                s += ' ';
                s += boxShadow.offsetY.toString();
                s += ' ';
                s += boxShadow.blurRadius.toString();
                s += ' ';
                s += boxShadow.spreadRadius.toString();
                s += ' ';
                s += boxShadow.color.toString();
                if (boxShadow.next) {
                    s += ', ';
                    boxShadow = boxShadow.next;
                    continue;
                }
                break;
            } while (true);
            return s;
        }
        else {
            return 'none';
        }
    };
    BoxShadow.form = function (unit) {
        if (unit !== undefined) {
            return new BoxShadowForm(BoxShadow.fromAny(unit));
        }
        else {
            return BoxShadow.Form;
        }
    };
    BoxShadow.of = function (inset, offsetX, offsetY, blurRadius, spreadRadius, color) {
        if (arguments.length === 1) {
            return BoxShadow.fromAny(arguments[0]);
        }
        else if (typeof inset !== 'boolean') {
            if (arguments.length === 3) {
                color = Color.fromAny(arguments[2]);
                spreadRadius = Length.zero();
                blurRadius = Length.zero();
                offsetY = Length.fromAny(arguments[1]);
                offsetX = Length.fromAny(arguments[0]);
            }
            else if (arguments.length === 4) {
                color = Color.fromAny(arguments[3]);
                spreadRadius = Length.zero();
                blurRadius = Length.fromAny(arguments[2]);
                offsetY = Length.fromAny(arguments[1]);
                offsetX = Length.fromAny(arguments[0]);
            }
            else if (arguments.length === 5) {
                color = Color.fromAny(arguments[4]);
                spreadRadius = Length.fromAny(arguments[3]);
                blurRadius = Length.fromAny(arguments[2]);
                offsetY = Length.fromAny(arguments[1]);
                offsetX = Length.fromAny(arguments[0]);
            }
            else {
                throw new TypeError('' + arguments);
            }
            inset = false;
        }
        else {
            if (arguments.length === 4) {
                color = Color.fromAny(arguments[3]);
                spreadRadius = Length.zero();
                blurRadius = Length.zero();
                offsetX = Length.fromAny(arguments[1]);
                offsetY = Length.fromAny(arguments[2]);
            }
            else if (arguments.length === 5) {
                color = Color.fromAny(arguments[4]);
                spreadRadius = Length.zero();
                blurRadius = Length.fromAny(arguments[3]);
                offsetX = Length.fromAny(arguments[1]);
                offsetY = Length.fromAny(arguments[2]);
            }
            else if (arguments.length === 6) {
                color = Color.fromAny(arguments[5]);
                spreadRadius = Length.fromAny(arguments[4]);
                blurRadius = Length.fromAny(arguments[3]);
                offsetY = Length.fromAny(arguments[2]);
                offsetX = Length.fromAny(arguments[1]);
            }
            else {
                throw new TypeError('' + arguments);
            }
        }
        return new BoxShadow(inset, offsetX, offsetY, blurRadius, spreadRadius, color, null);
    };
    BoxShadow.fromAny = function () {
        var values = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            values[_i] = arguments[_i];
        }
        var value;
        if (arguments.length === 0) {
            value = BoxShadow.None;
        }
        else if (arguments.length === 1) {
            value = arguments[0];
        }
        else {
            value = arguments;
        }
        if (value instanceof BoxShadow) {
            return value;
        }
        else if (typeof value === 'string') {
            return BoxShadow.parse(value);
        }
        else if (value && typeof value === 'object' && value.length === undefined) {
            value = value;
            var inset = value.inset || false;
            var offsetX = value.offsetX !== undefined ? Length.fromAny(value.offsetX) : Length.zero();
            var offsetY = value.offsetY !== undefined ? Length.fromAny(value.offsetY) : Length.zero();
            var blurRadius = value.blurRadius !== undefined ? Length.fromAny(value.blurRadius) : Length.zero();
            var spreadRadius = value.spreadRadius !== undefined ? Length.fromAny(value.spreadRadius) : Length.zero();
            var color = value.color !== undefined ? Color.fromAny(value.color) : Color.black();
            return new BoxShadow(inset, offsetX, offsetY, blurRadius, spreadRadius, color, null);
        }
        else if (value && typeof value === 'object' && value.length > 0) {
            value = value;
            var boxShadow = BoxShadow.fromAny(value[0]);
            for (var i = 1; i < value.length; i += 1) {
                boxShadow = boxShadow.and(value[i]);
            }
            return boxShadow;
        }
        throw new TypeError('' + value);
    };
    BoxShadow.fromValue = function (value) {
        var boxShadow;
        value.forEach(function (item, index) {
            var header = item.header('boxShadow');
            if (header) {
                var inset_1;
                var offsetX_1;
                var offsetY_1;
                var blurRadius_1;
                var spreadRadius_1;
                var color_1;
                header.forEach(function (item, index) {
                    var key = item.key.stringValue();
                    if (key !== undefined) {
                        if (key === 'inset') {
                            inset_1 = item.toValue().booleanValue(inset_1);
                        }
                        else if (key === 'offsetX') {
                            offsetX_1 = item.toValue().cast(Length.Form, offsetX_1);
                        }
                        else if (key === 'offsetY') {
                            offsetY_1 = item.toValue().cast(Length.Form, offsetY_1);
                        }
                        else if (key === 'blurRadius') {
                            blurRadius_1 = item.toValue().cast(Length.Form, blurRadius_1);
                        }
                        else if (key === 'spreadRadius') {
                            spreadRadius_1 = item.toValue().cast(Length.Form, spreadRadius_1);
                        }
                        else if (key === 'color') {
                            color_1 = item.toValue().cast(Color.Form, color_1);
                        }
                    }
                    else if (item instanceof Value) {
                        if (index === 0 && item instanceof Text$1 && item.value === 'inset') {
                            inset_1 = true;
                        }
                        else if (index === 0 || index === 1 && inset_1 !== undefined) {
                            offsetX_1 = item.cast(Length.Form, offsetX_1);
                        }
                        else if (index === 1 || index === 2 && inset_1 !== undefined) {
                            offsetY_1 = item.cast(Length.Form, offsetY_1);
                        }
                        else if (index === 2 || index === 3 && inset_1 !== undefined) {
                            blurRadius_1 = item.cast(Length.Form, blurRadius_1);
                            if (blurRadius_1 === undefined) {
                                color_1 = item.cast(Color.Form, color_1);
                            }
                        }
                        else if ((index === 3 || index === 4 && inset_1 === undefined) && color_1 === undefined) {
                            spreadRadius_1 = item.cast(Length.Form, spreadRadius_1);
                            if (spreadRadius_1 === undefined) {
                                color_1 = item.cast(Color.Form, color_1);
                            }
                        }
                        else if ((index === 4 || index === 5 && inset_1 === undefined) && color_1 === undefined) {
                            color_1 = item.cast(Color.Form, color_1);
                        }
                    }
                });
                inset_1 = inset_1 !== undefined ? inset_1 : false;
                offsetX_1 = offsetX_1 !== undefined ? offsetX_1 : Length.zero();
                offsetY_1 = offsetY_1 !== undefined ? offsetY_1 : Length.zero();
                blurRadius_1 = blurRadius_1 !== undefined ? blurRadius_1 : Length.zero();
                spreadRadius_1 = spreadRadius_1 !== undefined ? spreadRadius_1 : Length.zero();
                color_1 = color_1 !== undefined ? color_1 : Color.black();
                var next = new BoxShadow(inset_1 || false, offsetX_1, offsetY_1, blurRadius_1, spreadRadius_1, color_1, null);
                if (boxShadow) {
                    boxShadow = boxShadow.and(next);
                }
                else {
                    boxShadow = next;
                }
            }
        });
        return boxShadow;
    };
    BoxShadow.parse = function (str) {
        var input = new StringInput(str);
        while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
            input.step();
        }
        var output = BoxShadowParser.parse(input);
        if (output.isDone()) {
            while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                input.step();
            }
            if (!input.isEmpty()) {
                output = Iteratee.unexpected(input);
            }
        }
        return output.bind();
    };
    BoxShadow.isInit = function (value) {
        if (value && typeof value === 'object') {
            var init = value;
            return init.offsetX !== undefined && init.offsetY !== undefined && init.color !== undefined;
        }
        return false;
    };
    BoxShadow.None = new BoxShadow(false, Length.zero(), Length.zero(), Length.zero(), Length.zero(), Color.black(), null);
    BoxShadow.Form = undefined;
    return BoxShadow;
}());
var BoxShadowParser = (function (_super) {
    __extends(BoxShadowParser, _super);
    function BoxShadowParser(boxShadow, identParser, offsetXParser, offsetYParser, blurRadiusParser, spreadRadiusParser, colorParser, step) {
        var _this = _super.call(this) || this;
        _this.boxShadow = boxShadow;
        _this.identParser = identParser;
        _this.offsetXParser = offsetXParser;
        _this.offsetYParser = offsetYParser;
        _this.blurRadiusParser = blurRadiusParser;
        _this.spreadRadiusParser = spreadRadiusParser;
        _this.colorParser = colorParser;
        _this.step = step;
        return _this;
    }
    BoxShadowParser.prototype.feed = function (input) {
        return BoxShadowParser.parse(input, this.boxShadow, this.identParser, this.offsetXParser, this.offsetYParser, this.blurRadiusParser, this.spreadRadiusParser, this.colorParser, this.step);
    };
    BoxShadowParser.parse = function (input, boxShadow, identParser, offsetXParser, offsetYParser, blurRadiusParser, spreadRadiusParser, colorParser, step) {
        if (step === void 0) { step = 1; }
        var c = 0;
        do {
            if (step === 1) {
                while (!input.isEmpty() && (c = input.head(), Iteratee.isSpace(c))) {
                    input.step();
                }
                if (!input.isEmpty()) {
                    if (Recon.isIdentStartChar(c)) {
                        step = 2;
                    }
                    else {
                        step = 4;
                    }
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            if (step === 2) {
                if (!identParser) {
                    identParser = Recon.Factory.parseIdent(input);
                }
                while (identParser.isCont() && (!input.isEmpty() || input.isDone())) {
                    identParser = identParser.feed(input);
                }
                if (identParser.isDone()) {
                    var ident = identParser.bind().stringValue();
                    if (ident === 'inset') {
                        step = 3;
                    }
                    else if (ident === 'none' && !boxShadow) {
                        return Iteratee.done(BoxShadow.None);
                    }
                    else {
                        return Iteratee.error('unexpected ' + ident);
                    }
                }
                else if (identParser.isError()) {
                    return identParser.asError();
                }
            }
            if (step === 3) {
                if (!input.isEmpty()) {
                    if (Iteratee.isSpace(input.head())) {
                        input.step();
                        step = 4;
                    }
                    else {
                        return Iteratee.expected('space', input);
                    }
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            if (step === 4) {
                if (!offsetXParser) {
                    while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                        input.step();
                    }
                    if (!input.isEmpty()) {
                        offsetXParser = LengthParser.parse(input);
                    }
                }
                if (offsetXParser) {
                    while (offsetXParser.isCont() && (!input.isEmpty() || input.isDone())) {
                        offsetXParser = offsetXParser.feed(input);
                    }
                    if (offsetXParser.isDone()) {
                        step = 5;
                    }
                    else if (offsetXParser.isError()) {
                        return offsetXParser.asError();
                    }
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            if (step === 5) {
                if (!input.isEmpty()) {
                    if (Iteratee.isSpace(input.head())) {
                        input.step();
                        step = 6;
                    }
                    else {
                        return Iteratee.expected('space', input);
                    }
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            if (step === 6) {
                if (!offsetYParser) {
                    while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                        input.step();
                    }
                    if (!input.isEmpty()) {
                        offsetYParser = LengthParser.parse(input);
                    }
                }
                if (offsetYParser) {
                    while (offsetYParser.isCont() && (!input.isEmpty() || input.isDone())) {
                        offsetYParser = offsetYParser.feed(input);
                    }
                    if (offsetYParser.isDone()) {
                        step = 7;
                    }
                    else if (offsetYParser.isError()) {
                        return offsetYParser.asError();
                    }
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            if (step === 7) {
                if (!input.isEmpty()) {
                    if (Iteratee.isSpace(input.head())) {
                        input.step();
                        step = 8;
                    }
                    else {
                        return Iteratee.expected('space', input);
                    }
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            if (step === 8) {
                if (!blurRadiusParser) {
                    while (!input.isEmpty() && (c = input.head(), Iteratee.isSpace(c))) {
                        input.step();
                    }
                    if (!input.isEmpty()) {
                        if (c === 45 || c >= 48 && c <= 57) {
                            blurRadiusParser = LengthParser.parse(input);
                        }
                        else {
                            step = 12;
                        }
                    }
                }
                if (blurRadiusParser) {
                    while (blurRadiusParser.isCont() && (!input.isEmpty() || input.isDone())) {
                        blurRadiusParser = blurRadiusParser.feed(input);
                    }
                    if (blurRadiusParser.isDone()) {
                        step = 9;
                    }
                    else if (blurRadiusParser.isError()) {
                        return blurRadiusParser.asError();
                    }
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            if (step === 9) {
                if (!input.isEmpty()) {
                    if (Iteratee.isSpace(input.head())) {
                        input.step();
                        step = 10;
                    }
                    else {
                        return Iteratee.expected('space', input);
                    }
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            if (step === 10) {
                if (!spreadRadiusParser) {
                    while (!input.isEmpty() && (c = input.head(), Iteratee.isSpace(c))) {
                        input.step();
                    }
                    if (!input.isEmpty()) {
                        if (c === 45 || c >= 48 && c <= 57) {
                            spreadRadiusParser = LengthParser.parse(input);
                        }
                        else {
                            step = 12;
                        }
                    }
                }
                if (spreadRadiusParser) {
                    while (spreadRadiusParser.isCont() && (!input.isEmpty() || input.isDone())) {
                        spreadRadiusParser = spreadRadiusParser.feed(input);
                    }
                    if (spreadRadiusParser.isDone()) {
                        step = 11;
                    }
                    else if (spreadRadiusParser.isError()) {
                        return spreadRadiusParser.asError();
                    }
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            if (step === 11) {
                if (!input.isEmpty()) {
                    if (Iteratee.isSpace(input.head())) {
                        input.step();
                        step = 12;
                    }
                    else {
                        return Iteratee.expected('space', input);
                    }
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            if (step === 12) {
                if (!colorParser) {
                    while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                        input.step();
                    }
                    if (!input.isEmpty()) {
                        colorParser = ColorParser.parse(input);
                    }
                }
                if (colorParser) {
                    while (colorParser.isCont() && (!input.isEmpty() || input.isDone())) {
                        colorParser = colorParser.feed(input);
                    }
                    if (colorParser.isDone()) {
                        var inset = identParser ? identParser.bind().stringValue() === 'inset' : false;
                        var offsetX = offsetXParser.bind();
                        var offsetY = offsetYParser.bind();
                        var blurRadius = blurRadiusParser ? blurRadiusParser.bind() : Length.zero();
                        var spreadRadius = spreadRadiusParser ? spreadRadiusParser.bind() : Length.zero();
                        var color = colorParser.bind();
                        var next = new BoxShadow(inset, offsetX, offsetY, blurRadius, spreadRadius, color, null);
                        if (!boxShadow) {
                            boxShadow = next;
                        }
                        else {
                            boxShadow = boxShadow.and(next);
                        }
                        identParser = undefined;
                        offsetXParser = undefined;
                        offsetYParser = undefined;
                        blurRadiusParser = undefined;
                        spreadRadiusParser = undefined;
                        colorParser = undefined;
                        step = 13;
                    }
                    else if (colorParser.isError()) {
                        return colorParser.asError();
                    }
                }
                else if (input.isDone()) {
                    return Iteratee.unexpected(input);
                }
            }
            if (step === 13) {
                while (!input.isEmpty() && (c = input.head(), Iteratee.isSpace(c))) {
                    input.step();
                }
                if (!input.isEmpty() && c === 44) {
                    input.step();
                    step = 1;
                    continue;
                }
                else if (!input.isEmpty() || input.isDone()) {
                    return Iteratee.done(boxShadow);
                }
            }
            break;
        } while (true);
        return new BoxShadowParser(boxShadow, identParser, offsetXParser, offsetYParser, blurRadiusParser, spreadRadiusParser, colorParser, step);
    };
    return BoxShadowParser;
}(Iteratee));
var BoxShadowForm = (function (_super) {
    __extends(BoxShadowForm, _super);
    function BoxShadowForm(unit) {
        if (unit === void 0) { unit = BoxShadow.None; }
        var _this = _super.call(this) || this;
        _this.unit = unit;
        return _this;
    }
    BoxShadowForm.prototype.mold = function (boxShadow) {
        var shadow = BoxShadow.fromAny(boxShadow);
        var record = Record.empty();
        do {
            var header = Record.empty(5);
            if (shadow.inset) {
                header.push('inset');
            }
            header.push(Length.Form.mold(shadow.offsetX));
            header.push(Length.Form.mold(shadow.offsetY));
            header.push(Length.Form.mold(shadow.blurRadius));
            header.push(Length.Form.mold(shadow.spreadRadius));
            header.push(Color.Form.mold(shadow.color));
            record.attr('boxShadow', header);
            if (shadow.next) {
                shadow = shadow.next;
                continue;
            }
            break;
        } while (true);
        return record;
    };
    BoxShadowForm.prototype.cast = function (value) {
        var boxShadow;
        try {
            boxShadow = BoxShadow.fromValue(value);
            if (!boxShadow) {
                var str = value.stringValue();
                if (str !== undefined) {
                    boxShadow = BoxShadow.parse(str);
                }
            }
        }
        catch (e) {
        }
        return boxShadow;
    };
    return BoxShadowForm;
}(Form));
BoxShadow.Form = new BoxShadowForm();

var UiValue = {
    Form: undefined,
    form: function (unit) {
        if (unit !== undefined) {
            return new UiValueForm(unit);
        }
        else {
            return UiValue.Form;
        }
    },
    fromAny: function (value) {
        if (value instanceof DateTime || value instanceof Angle || value instanceof Length
            || value instanceof Color || value instanceof BoxShadow
            || value instanceof Transform || value instanceof Interpolator
            || value instanceof Scale || value instanceof Transition
            || typeof value === 'number' || typeof value === 'boolean') {
            return value;
        }
        else if (value instanceof Date || DateTime.isInit(value)) {
            return DateTime.fromAny(value);
        }
        else if (Color.isInit(value)) {
            return Color.fromAny(value);
        }
        else if (BoxShadow.isInit(value)) {
            return BoxShadow.fromAny(value);
        }
        else if (Transition.isInit(value)) {
            return Transition.fromAny(value);
        }
        else if (typeof value === 'string') {
            return UiValue.parse(value);
        }
        throw new TypeError('' + value);
    },
    parse: function (input) {
        if (typeof input === 'string') {
            input = new StringInput(input);
        }
        while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
            input.step();
        }
        var output = UiValueParser.parse(input);
        if (output.isDone()) {
            while (!input.isEmpty() && Iteratee.isSpace(input.head())) {
                input.step();
            }
            if (!input.isEmpty()) {
                output = Iteratee.unexpected(input);
            }
        }
        return output.bind();
    },
};
var ISO_8601_REST = DateTimeFormat.pattern('%m-%dT%H:%M:%S.%LZ');
var UiValueParser = (function (_super) {
    __extends(UiValueParser, _super);
    function UiValueParser(identParser, valueParser, unitsOutput, step) {
        var _this = _super.call(this) || this;
        _this.identParser = identParser;
        _this.valueParser = valueParser;
        _this.unitsOutput = unitsOutput;
        _this.step = step;
        return _this;
    }
    UiValueParser.prototype.feed = function (input) {
        return UiValueParser.parse(input, this.identParser, this.valueParser, this.unitsOutput, this.step);
    };
    UiValueParser.parse = function (input, identParser, valueParser, unitsOutput, step) {
        if (step === void 0) { step = 1; }
        var c = 0;
        if (step === 1) {
            while (!input.isEmpty() && (c = input.head(), Iteratee.isSpace(c))) {
                input.step();
            }
            if (!input.isEmpty()) {
                if (c === 35) {
                    return RgbHexParser.parse(input);
                }
                else if (Recon.isIdentStartChar(c)) {
                    step = 2;
                }
                else {
                    step = 3;
                }
            }
            else if (input.isDone()) {
                return Iteratee.unexpected(input);
            }
        }
        if (step === 2) {
            if (!identParser) {
                identParser = Recon.Factory.parseIdent(input);
            }
            while (identParser.isCont() && (!input.isEmpty() || input.isDone())) {
                identParser = identParser.feed(input);
            }
            if (identParser.isDone()) {
                var ident = identParser.bind().stringValue();
                switch (ident) {
                    case 'rgb':
                    case 'rgba': return RgbFunctionParser.parseRest(input, identParser);
                    case 'hsl':
                    case 'hsla': return HslFunctionParser.parseRest(input, identParser);
                    case 'translateX':
                    case 'translateY':
                    case 'translate': return TranslateTransformParser.parseRest(input, identParser);
                    case 'scaleX':
                    case 'scaleY':
                    case 'scale': return ScaleTransformParser.parseRest(input, identParser);
                    case 'rotate': return RotateTransformParser.parseRest(input, identParser);
                    case 'skewX':
                    case 'skewY':
                    case 'skew': return SkewTransformParser.parseRest(input, identParser);
                    case 'matrix': return MatrixTransformParser.parseRest(input, identParser);
                    case 'true': return Iteratee.done(true);
                    case 'false': return Iteratee.done(false);
                    default: return Iteratee.error(ident);
                }
            }
            else if (identParser.isError()) {
                return identParser.asError();
            }
        }
        if (step === 3) {
            if (!valueParser) {
                valueParser = Recon.Factory.parseDecimal(input);
            }
            while (valueParser.isCont() && (!input.isEmpty() || input.isDone())) {
                valueParser = valueParser.feed(input);
            }
            if (valueParser.isDone()) {
                step = 4;
            }
            else if (valueParser.isError()) {
                return valueParser.asError();
            }
        }
        if (step === 4) {
            if (!input.isEmpty() && (c = input.head(), c === 45)) {
                input.step();
                var date = {};
                date.year = valueParser.bind().numberValue();
                return ISO_8601_REST.parseDate(input, date);
            }
            else if (!input.isEmpty() || input.isDone()) {
                step = 5;
            }
        }
        if (step === 5) {
            unitsOutput = unitsOutput || new StringOutput();
            while (!input.isEmpty() && (c = input.head(), Iteratee.isAlpha(c) || c === 37)) {
                input.step();
                unitsOutput.push(c);
            }
            if (!input.isEmpty() || input.isDone()) {
                var value = valueParser.bind().numberValue();
                var units = unitsOutput.bind();
                switch (units) {
                    case 'deg': return Iteratee.done(Angle.deg(value));
                    case 'grad': return Iteratee.done(Angle.grad(value));
                    case 'rad': return Iteratee.done(Angle.rad(value));
                    case 'turn': return Iteratee.done(Angle.turn(value));
                    case 'px': return Iteratee.done(Length.px(value));
                    case 'em': return Iteratee.done(Length.em(value));
                    case 'rem': return Iteratee.done(Length.rem(value));
                    case '%': return Iteratee.done(Length.pct(value));
                    case '': return Iteratee.done(value);
                    default: return Iteratee.error(units);
                }
            }
        }
        return new UiValueParser(identParser, valueParser, unitsOutput, step);
    };
    return UiValueParser;
}(Iteratee));
var UiValueForm = (function (_super) {
    __extends(UiValueForm, _super);
    function UiValueForm(unit) {
        var _this = _super.call(this) || this;
        _this.unit = unit;
        return _this;
    }
    UiValueForm.prototype.mold = function (value) {
        if (value !== undefined) {
            value = UiValue.fromAny(value);
            if (value instanceof DateTime) {
                return DateTime.Form.mold(value);
            }
            else if (value instanceof Angle) {
                return Angle.Form.mold(value);
            }
            else if (value instanceof Length) {
                return Length.Form.mold(value);
            }
            else if (value instanceof Color) {
                return Color.Form.mold(value);
            }
            else if (value instanceof BoxShadow) {
                return BoxShadow.Form.mold(value);
            }
            else if (value instanceof Transform) {
                return Transform.Form.mold(value);
            }
            else if (value instanceof Interpolator) {
                return Interpolator.Form.mold(value);
            }
            else if (value instanceof Scale) {
                return Scale.Form.mold(value);
            }
            else if (value instanceof Transition) {
                return Transition.Form.mold(value);
            }
            else if (typeof value === 'number') {
                return Num.valueOf(value);
            }
        }
        return Value.Absent;
    };
    UiValueForm.prototype.cast = function (value) {
        if (value instanceof Num) {
            return value.numberValue();
        }
        if (value instanceof Bool) {
            return value.booleanValue();
        }
        var str = value.stringValue();
        if (str !== undefined) {
            try {
                return UiValue.parse(str);
            }
            catch (e) {
            }
        }
        if (value instanceof Record) {
            var date = DateTime.fromValue(value);
            if (date) {
                return date;
            }
            var angle = Angle.fromValue(value);
            if (angle) {
                return angle;
            }
            var length_1 = Length.fromValue(value);
            if (length_1) {
                return length_1;
            }
            var color = Color.fromValue(value);
            if (color) {
                return color;
            }
            var boxShadow = BoxShadow.fromValue(value);
            if (boxShadow) {
                return boxShadow;
            }
            var transform = Transform.fromValue(value);
            if (transform) {
                return transform;
            }
            var interpolator = Interpolator.Form.cast(value);
            if (interpolator) {
                return interpolator;
            }
            var scale = Scale.Form.cast(value);
            if (scale) {
                return scale;
            }
            var transition = Transition.Form.cast(value);
            if (transition) {
                return transition;
            }
        }
        return undefined;
    };
    return UiValueForm;
}(Form));
UiValue.Form = new UiValueForm();
Interpolator.Form = new InterpolatorForm(UiValue.Form);
Scale.Form = new ScaleForm(UiValue.Form, Interpolator.Form);
ContinuousScale.Form = Scale.Form;
Transition.Form = new TransitionForm(Interpolator.Form);

var DateFunc = (function (_super) {
    __extends(DateFunc, _super);
    function DateFunc() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(DateFunc.prototype, "name", {
        get: function () {
            return 'date';
        },
        enumerable: true,
        configurable: true
    });
    DateFunc.prototype.invoke = function (args, stack) {
        var date;
        if (args instanceof Extant) {
            date = DateTime.current();
        }
        else {
            date = args.evaluate(stack).cast(DateTime.Form);
        }
        if (date) {
            return DateTime.Form.mold(date);
        }
        return Item.Absent;
    };
    return DateFunc;
}(Func));
var NowFunc = (function (_super) {
    __extends(NowFunc, _super);
    function NowFunc() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(NowFunc.prototype, "name", {
        get: function () {
            return 'now';
        },
        enumerable: true,
        configurable: true
    });
    NowFunc.prototype.invoke = function (args) {
        return Num.valueOf(Date.now());
    };
    return NowFunc;
}(Func));
var BrighterFunc = (function (_super) {
    __extends(BrighterFunc, _super);
    function BrighterFunc() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(BrighterFunc.prototype, "name", {
        get: function () {
            return 'brighter';
        },
        enumerable: true,
        configurable: true
    });
    BrighterFunc.prototype.invoke = function (args, stack) {
        var color;
        var k;
        if (args.length >= 2) {
            color = args.getItem(0).evaluate(stack).cast(Color.Form);
            k = args.getItem(1).evaluate(stack).numberValue();
        }
        else {
            color = args.evaluate(stack).cast(Color.Form);
        }
        if (color) {
            color = color.brighter(k);
            return Color.Form.mold(color);
        }
        return Item.Absent;
    };
    return BrighterFunc;
}(Func));
var DarkerFunc = (function (_super) {
    __extends(DarkerFunc, _super);
    function DarkerFunc() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(DarkerFunc.prototype, "name", {
        get: function () {
            return 'darker';
        },
        enumerable: true,
        configurable: true
    });
    DarkerFunc.prototype.invoke = function (args, stack) {
        var color;
        var k;
        if (args.length >= 2) {
            color = args.getItem(0).evaluate(stack).cast(Color.Form);
            k = args.getItem(1).evaluate(stack).numberValue();
        }
        else {
            color = args.evaluate(stack).cast(Color.Form);
        }
        if (color) {
            color = color.darker(k);
            return Color.Form.mold(color);
        }
        return Item.Absent;
    };
    return DarkerFunc;
}(Func));
var ContrastFunc = (function (_super) {
    __extends(ContrastFunc, _super);
    function ContrastFunc() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(ContrastFunc.prototype, "name", {
        get: function () {
            return 'contrast';
        },
        enumerable: true,
        configurable: true
    });
    ContrastFunc.prototype.invoke = function (args, stack) {
        var color;
        var k;
        if (args.length >= 2) {
            color = args.getItem(0).evaluate(stack).cast(Color.Form);
            k = args.getItem(1).evaluate(stack).numberValue();
        }
        else {
            color = args.evaluate(stack).cast(Color.Form);
        }
        if (color) {
            color = color.contrast(k);
            return Color.Form.mold(color);
        }
        return Item.Absent;
    };
    return ContrastFunc;
}(Func));
var OpacityFunc = (function (_super) {
    __extends(OpacityFunc, _super);
    function OpacityFunc() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(OpacityFunc.prototype, "name", {
        get: function () {
            return 'opacity';
        },
        enumerable: true,
        configurable: true
    });
    OpacityFunc.prototype.invoke = function (args, stack) {
        var color;
        var a;
        if (args.length >= 2) {
            color = args.getItem(0).evaluate(stack).cast(Color.Form);
            a = args.getItem(1).evaluate(stack).numberValue();
            if (color && a !== undefined) {
                color = color.alpha(a);
                return Color.Form.mold(color);
            }
        }
        return Item.Absent;
    };
    return OpacityFunc;
}(Func));
var InterpolatorFunc = (function (_super) {
    __extends(InterpolatorFunc, _super);
    function InterpolatorFunc(interpolator) {
        var _this = _super.call(this) || this;
        _this.interpolator = interpolator;
        return _this;
    }
    Object.defineProperty(InterpolatorFunc.prototype, "name", {
        get: function () {
            return 'interpolator';
        },
        enumerable: true,
        configurable: true
    });
    InterpolatorFunc.prototype.invoke = function (args, stack) {
        var u = args.evaluate(stack).numberValue();
        if (u !== undefined) {
            u = Math.min(Math.max(0, u || 0), 1);
            var value = this.interpolator.map(u);
            return UiValue.Form.mold(value);
        }
        return Item.Absent;
    };
    return InterpolatorFunc;
}(Func));
var InterpolateFunc = (function (_super) {
    __extends(InterpolateFunc, _super);
    function InterpolateFunc() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(InterpolateFunc.prototype, "name", {
        get: function () {
            return 'inerpolate';
        },
        enumerable: true,
        configurable: true
    });
    InterpolateFunc.prototype.invoke = function (args, stack) {
        var a;
        var b;
        if (args.length >= 2) {
            a = args.getItem(0).evaluate(stack).cast(UiValue.Form);
            b = args.getItem(1).evaluate(stack).cast(UiValue.Form);
        }
        else {
            a = args.evaluate(stack).cast(UiValue.Form);
        }
        if (a !== undefined || b !== undefined) {
            var interpolator = Interpolator.interpolate(a, b);
            return new InterpolatorFunc(interpolator);
        }
        return Item.Absent;
    };
    return InterpolateFunc;
}(Func));
var UiFunc = {
    Date: new DateFunc(),
    Now: new NowFunc(),
    Brighter: new BrighterFunc(),
    Darker: new DarkerFunc(),
    Contrast: new ContrastFunc(),
    Opacity: new OpacityFunc(),
    Interpolate: new InterpolateFunc(),
    GlobalScope: undefined,
};
UiFunc.GlobalScope = Item.GlobalScope.branch()
    .slot('date', UiFunc.Date)
    .slot('now', UiFunc.Now)
    .slot('brighter', UiFunc.Brighter)
    .slot('darker', UiFunc.Darker)
    .slot('contrast', UiFunc.Contrast)
    .slot('opacity', UiFunc.Opacity)
    .slot('interpolate', UiFunc.Interpolate)
    .commit();

var UiEnvelope = (function () {
    function UiEnvelope() {
    }
    Object.defineProperty(UiEnvelope.prototype, "tag", {
        get: function () {
            return this.constructor.tag;
        },
        enumerable: true,
        configurable: true
    });
    UiEnvelope.prototype.toRecon = function () {
        return this.toValue().toRecon();
    };
    Object.defineProperty(UiEnvelope, "tag", {
        get: function () {
            return '';
        },
        enumerable: true,
        configurable: true
    });
    UiEnvelope.fromValue = function (value) {
        switch (value.tag) {
            case 'append': return UiAppendEnvelope.fromValue(value);
            case 'prepend': return UiPrependEnvelope.fromValue(value);
            case 'insert': return UiInsertEnvelope.fromValue(value);
            case 'remove': return UiRemoveEnvelope.fromValue(value);
            case 'state': return UiStateEnvelope.fromValue(value);
            case 'model': return UiModelEnvelope.fromValue(value);
            default: return undefined;
        }
    };
    UiEnvelope.parseRecon = function (input) {
        return UiEnvelope.fromValue(Value.parseRecon(input));
    };
    return UiEnvelope;
}());
var UiTreeEnvelope = (function (_super) {
    __extends(UiTreeEnvelope, _super);
    function UiTreeEnvelope(parent, child, target, body) {
        var _this = _super.call(this) || this;
        _this._parent = parent;
        _this._child = child;
        _this._target = target;
        _this._body = body;
        return _this;
    }
    UiTreeEnvelope.prototype.parent = function (parent) {
        if (parent === undefined) {
            return this._parent;
        }
        else {
            return this.copy(parent, this._child, this._target, this._body);
        }
    };
    UiTreeEnvelope.prototype.child = function (child) {
        if (child === undefined) {
            return this._child;
        }
        else {
            return this.copy(this._parent, child, this._target, this._body);
        }
    };
    UiTreeEnvelope.prototype.target = function (target) {
        if (target === undefined) {
            return this._target;
        }
        else {
            return this.copy(this._parent, this._child, target, this._body);
        }
    };
    UiTreeEnvelope.prototype.body = function (body) {
        if (body === undefined) {
            return this._body;
        }
        else {
            body = Value.fromAny(body);
            return this.copy(this._parent, this._child, this._target, body);
        }
    };
    UiTreeEnvelope.prototype.toValue = function () {
        var header = Record.empty(this._target ? 3 : 2)
            .slot('parent', this._parent)
            .slot('child', this._child);
        if (this._target) {
            header.slot('target', this._target);
        }
        return Attr.of(this.tag, header).concat(this._body);
    };
    UiTreeEnvelope.fromValue = function (value, E) {
        var parent;
        var child;
        var target = '';
        var header = value.header(E.tag);
        header.forEach(function (item, index) {
            if (item.key instanceof Text$1) {
                var key = item.key.value;
                if (key === 'parent') {
                    parent = item.toValue().stringValue(parent);
                }
                else if (key === 'child') {
                    child = item.toValue().stringValue(child);
                }
                else if (key === 'target') {
                    target = item.toValue().stringValue(target);
                }
            }
            else if (item instanceof Value) {
                if (index === 0) {
                    parent = item.stringValue(parent);
                }
                else if (index === 1) {
                    child = item.stringValue(child);
                }
                else if (index === 2) {
                    target = item.stringValue(target);
                }
            }
        }, this);
        if (parent !== undefined && child !== undefined) {
            var body = value.body();
            return new E(parent, child, target, body);
        }
        return undefined;
    };
    return UiTreeEnvelope;
}(UiEnvelope));
var UiViewEnvelope = (function (_super) {
    __extends(UiViewEnvelope, _super);
    function UiViewEnvelope(child, body) {
        var _this = _super.call(this) || this;
        _this._child = child;
        _this._body = body;
        return _this;
    }
    UiViewEnvelope.prototype.parent = function (parent) {
        if (parent === undefined) {
            return '';
        }
        else {
            return this;
        }
    };
    UiViewEnvelope.prototype.child = function (child) {
        if (child === undefined) {
            return this._child;
        }
        else {
            return this.copy(child, this._body);
        }
    };
    UiViewEnvelope.prototype.target = function (target) {
        if (target === undefined) {
            return '';
        }
        else {
            return this;
        }
    };
    UiViewEnvelope.prototype.body = function (body) {
        if (body === undefined) {
            return this._body;
        }
        else {
            body = Value.fromAny(body);
            return this.copy(this._child, body);
        }
    };
    UiViewEnvelope.prototype.toValue = function () {
        var header = Record.empty(1)
            .slot('child', this._child);
        return Attr.of(this.tag, header).concat(this._body);
    };
    UiViewEnvelope.fromValue = function (value, E) {
        var child;
        var header = value.header(E.tag);
        header.forEach(function (item, index) {
            if (item.key instanceof Text$1) {
                var key = item.key.value;
                if (key === 'child') {
                    child = item.toValue().stringValue(child);
                }
            }
            else if (item instanceof Value) {
                if (index === 0) {
                    child = item.stringValue(child);
                }
            }
        }, this);
        if (child !== undefined) {
            var body = value.body();
            return new E(child, body);
        }
        return undefined;
    };
    return UiViewEnvelope;
}(UiEnvelope));
var UiAppendEnvelope = (function (_super) {
    __extends(UiAppendEnvelope, _super);
    function UiAppendEnvelope(parent, child, target, body) {
        return _super.call(this, parent, child, target, body) || this;
    }
    UiAppendEnvelope.prototype.copy = function (parent, child, target, body) {
        return new UiAppendEnvelope(parent, child, target, body);
    };
    UiAppendEnvelope.fromValue = function (value) {
        return UiTreeEnvelope.fromValue(value, UiAppendEnvelope);
    };
    Object.defineProperty(UiAppendEnvelope, "tag", {
        get: function () {
            return 'append';
        },
        enumerable: true,
        configurable: true
    });
    UiAppendEnvelope.of = function (parent, child, target, body) {
        if (body === void 0) { body = Value.Absent; }
        body = Value.fromAny(body);
        return new UiAppendEnvelope(parent, child, target, body);
    };
    return UiAppendEnvelope;
}(UiTreeEnvelope));
var UiPrependEnvelope = (function (_super) {
    __extends(UiPrependEnvelope, _super);
    function UiPrependEnvelope(parent, child, target, body) {
        return _super.call(this, parent, child, target, body) || this;
    }
    UiPrependEnvelope.prototype.copy = function (parent, child, target, body) {
        return new UiPrependEnvelope(parent, child, target, body);
    };
    UiPrependEnvelope.fromValue = function (value) {
        return UiTreeEnvelope.fromValue(value, UiPrependEnvelope);
    };
    Object.defineProperty(UiPrependEnvelope, "tag", {
        get: function () {
            return 'prepend';
        },
        enumerable: true,
        configurable: true
    });
    UiPrependEnvelope.of = function (parent, child, target, body) {
        if (body === void 0) { body = Value.Absent; }
        body = Value.fromAny(body);
        return new UiPrependEnvelope(parent, child, target, body);
    };
    return UiPrependEnvelope;
}(UiTreeEnvelope));
var UiInsertEnvelope = (function (_super) {
    __extends(UiInsertEnvelope, _super);
    function UiInsertEnvelope(parent, child, target, body) {
        return _super.call(this, parent, child, target, body) || this;
    }
    UiInsertEnvelope.prototype.copy = function (parent, child, target, body) {
        return new UiInsertEnvelope(parent, child, target, body);
    };
    UiInsertEnvelope.fromValue = function (value) {
        return UiTreeEnvelope.fromValue(value, UiInsertEnvelope);
    };
    Object.defineProperty(UiInsertEnvelope, "tag", {
        get: function () {
            return 'insert';
        },
        enumerable: true,
        configurable: true
    });
    UiInsertEnvelope.of = function (parent, child, target, body) {
        if (body === void 0) { body = Value.Absent; }
        body = Value.fromAny(body);
        return new UiInsertEnvelope(parent, child, target, body);
    };
    return UiInsertEnvelope;
}(UiTreeEnvelope));
var UiRemoveEnvelope = (function (_super) {
    __extends(UiRemoveEnvelope, _super);
    function UiRemoveEnvelope(parent, child, target, body) {
        if (body === void 0) { body = Value.Absent; }
        return _super.call(this, parent, child, target, body) || this;
    }
    UiRemoveEnvelope.prototype.copy = function (parent, child, target, body) {
        return new UiRemoveEnvelope(parent, child, target, body);
    };
    UiRemoveEnvelope.fromValue = function (value) {
        return UiTreeEnvelope.fromValue(value, UiRemoveEnvelope);
    };
    Object.defineProperty(UiRemoveEnvelope, "tag", {
        get: function () {
            return 'remove';
        },
        enumerable: true,
        configurable: true
    });
    UiRemoveEnvelope.of = function (parent, child, target, body) {
        if (body === void 0) { body = Value.Absent; }
        body = Value.fromAny(body);
        return new UiRemoveEnvelope(parent, child, target, body);
    };
    return UiRemoveEnvelope;
}(UiTreeEnvelope));
var UiStateEnvelope = (function (_super) {
    __extends(UiStateEnvelope, _super);
    function UiStateEnvelope(child, body) {
        return _super.call(this, child, body) || this;
    }
    UiStateEnvelope.prototype.copy = function (child, body) {
        return new UiStateEnvelope(child, body);
    };
    UiStateEnvelope.fromValue = function (value) {
        return UiViewEnvelope.fromValue(value, UiStateEnvelope);
    };
    Object.defineProperty(UiStateEnvelope, "tag", {
        get: function () {
            return 'state';
        },
        enumerable: true,
        configurable: true
    });
    UiStateEnvelope.of = function (child, body) {
        if (body === void 0) { body = Value.Absent; }
        body = Value.fromAny(body);
        return new UiStateEnvelope(child, body);
    };
    return UiStateEnvelope;
}(UiViewEnvelope));
var UiModelEnvelope = (function (_super) {
    __extends(UiModelEnvelope, _super);
    function UiModelEnvelope(child, body) {
        return _super.call(this, child, body) || this;
    }
    UiModelEnvelope.prototype.copy = function (child, body) {
        return new UiModelEnvelope(child, body);
    };
    UiModelEnvelope.fromValue = function (value) {
        return UiViewEnvelope.fromValue(value, UiModelEnvelope);
    };
    Object.defineProperty(UiModelEnvelope, "tag", {
        get: function () {
            return 'model';
        },
        enumerable: true,
        configurable: true
    });
    UiModelEnvelope.of = function (child, body) {
        if (body === void 0) { body = Value.Absent; }
        body = Value.fromAny(body);
        return new UiModelEnvelope(child, body);
    };
    return UiModelEnvelope;
}(UiViewEnvelope));

var DirectiveForm = (function () {
    function DirectiveForm() {
    }
    DirectiveForm.addGlobal = function (directiveForm) {
        DirectiveForm.Global = DirectiveForm.Global.withDirectiveForm(directiveForm);
    };
    DirectiveForm.removeGlobal = function (directiveForm) {
        DirectiveForm.Global = DirectiveForm.Global.withoutDirectiveForm(directiveForm);
    };
    DirectiveForm.Global = undefined;
    return DirectiveForm;
}());
var PolyDirectiveForm = (function (_super) {
    __extends(PolyDirectiveForm, _super);
    function PolyDirectiveForm(directiveForms) {
        var _this = _super.call(this) || this;
        _this._directiveForms = directiveForms;
        return _this;
    }
    Object.defineProperty(PolyDirectiveForm.prototype, "tag", {
        get: function () {
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    PolyDirectiveForm.prototype.directiveForms = function () {
        return this._directiveForms.slice(0);
    };
    PolyDirectiveForm.prototype.withDirectiveForm = function (directiveForm) {
        if (this._directiveForms.indexOf(directiveForm) < 0) {
            var newDirectiveForms = this._directiveForms.slice(0);
            newDirectiveForms.push(directiveForm);
            return new PolyDirectiveForm(newDirectiveForms);
        }
        else {
            return this;
        }
    };
    PolyDirectiveForm.prototype.withDirectiveForms = function () {
        var directiveForms = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            directiveForms[_i] = arguments[_i];
        }
        var newDirectiveForms = this._directiveForms.slice(0);
        for (var i = 0; i < directiveForms.length; i += 1) {
            var directiveForm = directiveForms[i];
            if (newDirectiveForms.indexOf(directiveForm) < 0) {
                newDirectiveForms.push(directiveForm);
            }
        }
        if (this._directiveForms.length !== newDirectiveForms.length) {
            return new PolyDirectiveForm(newDirectiveForms);
        }
        else {
            return this;
        }
    };
    PolyDirectiveForm.prototype.withoutDirectiveForm = function (directiveForm) {
        var i = this._directiveForms.indexOf(directiveForm);
        if (i >= 0) {
            var newDirectiveForms = this._directiveForms.slice(0);
            newDirectiveForms.splice(i, 1);
            return new PolyDirectiveForm(newDirectiveForms);
        }
        else {
            return this;
        }
    };
    PolyDirectiveForm.prototype.cast = function (item) {
        if (typeof item === 'string') {
            item = Value.parseRecon(item);
        }
        for (var i = 0; i < this._directiveForms.length; i += 1) {
            var directiveForm = this._directiveForms[i];
            var directive = directiveForm.cast(item);
            if (directive !== undefined) {
                return directive;
            }
        }
        return undefined;
    };
    return PolyDirectiveForm;
}(DirectiveForm));
DirectiveForm.Global = new PolyDirectiveForm([]);

var UiForm = (function () {
    function UiForm() {
    }
    UiForm.prototype.materializeView = function (view, value, stack, factory) {
        var modelDef = Record.empty();
        value.forEach(function (item) {
            item = this.materializeViewParam(view, item, stack, factory);
            if (item instanceof Item && item.isDefined()) {
                modelDef.push(item);
            }
        }, this);
        return modelDef;
    };
    UiForm.prototype.materializeViewParam = function (view, param, stack, factory) {
        return param;
    };
    UiForm.prototype.materializeModel = function (model, value, stack, factory) {
        var modelDef = Record.empty();
        value.forEach(function (item) {
            item = this.materializeModelParam(model, item, stack, factory);
            if (item instanceof Item && item.isDefined()) {
                modelDef.push(item);
            }
        }, this);
        return modelDef;
    };
    UiForm.prototype.materializeModelParam = function (model, param, stack, factory) {
        if (param instanceof Field && param.key instanceof Text$1) {
            if (param.key.value === 'sealed') {
                var sealed = param.toValue().booleanValue();
                if (sealed !== undefined) {
                    model.isSealed(sealed);
                    return param;
                }
            }
        }
        var directive = DirectiveForm.Global.cast(param);
        if (directive) {
            model.addDirective(directive);
            return Item.Absent;
        }
        return param;
    };
    UiForm.addGlobal = function (uiForm) {
        UiForm.Global = UiForm.Global.withUiForm(uiForm);
    };
    UiForm.removeGlobal = function (uiForm) {
        UiForm.Global = UiForm.Global.withoutUiForm(uiForm);
    };
    UiForm.Global = undefined;
    return UiForm;
}());
var PolyUiForm = (function (_super) {
    __extends(PolyUiForm, _super);
    function PolyUiForm(uiForms) {
        var _this = _super.call(this) || this;
        _this._uiForms = uiForms;
        return _this;
    }
    Object.defineProperty(PolyUiForm.prototype, "tag", {
        get: function () {
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    PolyUiForm.prototype.uiForms = function () {
        return this._uiForms.slice(0);
    };
    PolyUiForm.prototype.withUiForm = function (uiForm) {
        if (this._uiForms.indexOf(uiForm) < 0) {
            var newUiForms = this._uiForms.slice(0);
            newUiForms.push(uiForm);
            return new PolyUiForm(newUiForms);
        }
        else {
            return this;
        }
    };
    PolyUiForm.prototype.withUiForms = function () {
        var uiForms = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            uiForms[_i] = arguments[_i];
        }
        var newUiForms = this._uiForms.slice(0);
        for (var i = 0; i < uiForms.length; i += 1) {
            var uiForm = uiForms[i];
            if (newUiForms.indexOf(uiForm) < 0) {
                newUiForms.push(uiForm);
            }
        }
        if (this._uiForms.length !== newUiForms.length) {
            return new PolyUiForm(newUiForms);
        }
        else {
            return this;
        }
    };
    PolyUiForm.prototype.withoutUiForm = function (uiForm) {
        var i = this._uiForms.indexOf(uiForm);
        if (i >= 0) {
            var newUiForms = this._uiForms.slice(0);
            newUiForms.splice(i, 1);
            return new PolyUiForm(newUiForms);
        }
        else {
            return this;
        }
    };
    PolyUiForm.prototype.castModel = function (value, stack, factory) {
        if (factory === void 0) { factory = this; }
        if (typeof value === 'string') {
            value = Value.parseRecon(value);
        }
        for (var i = 0; i < this._uiForms.length; i += 1) {
            var modelForm = this._uiForms[i];
            var model = modelForm.castModel(value, stack, factory);
            if (model !== undefined) {
                return model;
            }
        }
        return undefined;
    };
    PolyUiForm.prototype.castView = function (value, stack, factory) {
        if (factory === void 0) { factory = this; }
        if (typeof value === 'string') {
            value = Value.parseRecon(value);
        }
        for (var i = 0; i < this._uiForms.length; i += 1) {
            var uiForm = this._uiForms[i];
            var view = uiForm.castView(value, stack, factory);
            if (view !== undefined) {
                return view;
            }
        }
        return undefined;
    };
    PolyUiForm.prototype.materializeScripts = function (stack) {
        if (!stack) {
            stack = EvalStack.of(Item.GlobalScope, View.GlobalScope);
        }
        if (typeof document !== 'undefined') {
            var scripts = document.querySelectorAll('script[type="text/recon"]');
            for (var i = 0; i < scripts.length; i += 1) {
                var script = scripts[i];
                if (script instanceof HTMLElement) {
                    this.materializeScript(script, stack);
                }
            }
        }
    };
    PolyUiForm.prototype.materializeScript = function (script, stack) {
        var text = script.innerText;
        var view = this.castView(text, stack);
        if (view instanceof NodeView && script.parentNode) {
            script.parentNode.replaceChild(view.node, script);
            view.attachApp();
        }
    };
    return PolyUiForm;
}(UiForm));
UiForm.Global = new PolyUiForm([]);

var View = (function () {
    function View(id) {
        if (id === void 0) { id = Random.generateId(); }
        this._id = id;
        this._parentView = null;
        this._childViews = [];
        this._appView = null;
        this._model = Value.Absent;
        this._state = Value.Absent;
        this._flags = 0;
    }
    View.prototype.property = function (accessor, value, trans) {
        var animator = accessor.animator(this);
        if (value === undefined) {
            if (animator) {
                return animator.get();
            }
            else {
                return accessor.get(this);
            }
        }
        else if (value === null) {
            accessor.set(this, null);
            return this;
        }
        else {
            trans = Transition.fromAny(trans, value);
            if (!animator && trans !== undefined) {
                if (!trans.f) {
                    trans = trans.range(value);
                }
                animator = accessor.animator(this, value, trans);
            }
            if (animator) {
                animator.set(value, trans);
            }
            else {
                accessor.set(this, value);
            }
            return this;
        }
    };
    View.prototype.propertyNumber = function (accessor, value, trans) {
        if (value !== undefined && value !== null) {
            value = +value;
        }
        var result = this.property(accessor, value, trans);
        if (typeof result === 'string') {
            result = +result;
        }
        return result;
    };
    View.prototype.propertyColor = function (accessor, value, trans) {
        if (value !== undefined && value !== null) {
            value = Color.fromAny(value);
        }
        var result = this.property(accessor, value, trans);
        if (typeof result === 'string') {
            result = Color.fromAny(result);
        }
        return result;
    };
    Object.defineProperty(View.prototype, "id", {
        get: function () {
            return this._id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(View.prototype, "parentView", {
        get: function () {
            return this._parentView;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(View.prototype, "childViews", {
        get: function () {
            return this._childViews;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(View.prototype, "appView", {
        get: function () {
            var appView = this._appView;
            if (appView === null) {
                var view = this;
                while (view) {
                    if (view instanceof View.AppView) {
                        this._appView = appView = view;
                        break;
                    }
                    view = view.parentView;
                }
            }
            return appView;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(View.prototype, "model", {
        get: function () {
            return this._model;
        },
        enumerable: true,
        configurable: true
    });
    View.prototype.setModel = function (newModel) {
        newModel = Value.fromAny(newModel);
        var oldModel = this._model;
        if (!oldModel.equals(newModel)) {
            this._model = newModel.commit();
            this.didSetModel(newModel);
            var appView = this.appView;
            if (appView) {
                appView.setModel(newModel, this);
            }
        }
    };
    View.prototype.didSetModel = function (model) {
        if (this._controller) {
            this._controller.didSetModel(model, this);
        }
    };
    Object.defineProperty(View.prototype, "state", {
        get: function () {
            return this._state;
        },
        enumerable: true,
        configurable: true
    });
    View.prototype.setState = function (newState) {
        newState = Value.fromAny(newState);
        var oldState = this._state;
        if (!oldState.equals(newState)) {
            this._state = newState.commit();
            this.didSetState(newState, oldState);
        }
    };
    View.prototype.didSetState = function (newState, oldState) {
        if (this._controller) {
            this._controller.didSetState(newState, oldState, this);
        }
        newState.forEach(function (item) {
            if (item instanceof Slot && item.key instanceof Text$1) {
                this.didSetStateParam(item.key.value, item.value);
            }
        }, this);
    };
    View.prototype.didSetStateParam = function (key, value) {
    };
    View.prototype.setParentView = function (parentView) {
        var oldParentView = this._parentView;
        if (parentView) {
            if (oldParentView) {
                return;
            }
            this._parentView = parentView;
            var appView = this.appView;
            if (appView) {
                appView.addDescendantViews(this, parentView);
            }
            this.requireResize();
            this.didSetParentView(parentView);
        }
        else if (oldParentView) {
            oldParentView.requireResize();
            var appView = oldParentView.appView;
            if (appView) {
                appView.removeDescendantViews(this, oldParentView);
            }
            this._flags = 0;
            this._appView = null;
            this._parentView = null;
            this.didSetParentView(parentView);
        }
    };
    View.prototype.didSetParentView = function (parentView) {
        if (this._controller) {
            this._controller.didSetParentView(parentView, this);
        }
    };
    View.prototype.setAppView = function (appView) {
        this._appView = appView;
        this.didSetAppView(appView);
    };
    View.prototype.didSetAppView = function (appView) {
    };
    View.prototype.appendChildView = function (childView) {
        if (!childView) {
            throw new TypeError('' + childView);
        }
        this._childViews.push(childView);
        childView.setParentView(this);
        this.didInsertChildView(childView);
    };
    View.prototype.prependChildView = function (childView) {
        if (!childView) {
            throw new TypeError('' + childView);
        }
        else if (this._childViews.indexOf(childView) >= 0) {
            throw new Error('duplicate child');
        }
        else if (childView._parentView) {
            throw new Error('duplicate parent');
        }
        this._childViews.unshift(childView);
        childView.setParentView(this);
        this.didInsertChildView(childView);
    };
    View.prototype.insertChildView = function (childView, targetView) {
        if (!childView) {
            throw new TypeError('' + childView);
        }
        else if (this._childViews.indexOf(childView) >= 0) {
            throw new Error('duplicate child');
        }
        else if (childView._parentView) {
            throw new Error('duplicate parent');
        }
        var i = targetView ? this._childViews.indexOf(targetView) : -1;
        if (i < 0) {
            i = this._childViews.length;
        }
        this._childViews.splice(i, 0, childView);
        childView.setParentView(this);
        this.didInsertChildView(childView);
    };
    View.prototype.removeChildView = function (childView) {
        if (!childView) {
            throw new TypeError('' + childView);
        }
        var i = this._childViews.indexOf(childView);
        if (i >= 0) {
            childView.setParentView(null);
            this._childViews.splice(i, 1);
            this.didRemoveChildView(childView);
        }
    };
    View.prototype.removeAllChildViews = function () {
        while (this._childViews.length) {
            var childView = this._childViews[0];
            childView.setParentView(null);
            this._childViews.splice(0, 1);
            this.didRemoveChildView(childView);
        }
    };
    View.prototype.didInsertChildView = function (childView) {
        if ((childView._flags & View.REQUEST_RESIZE) !== 0) {
            this.requestResize();
            this._flags |= View.REQUEST_RESIZE;
        }
        if (this._controller) {
            this._controller.didInsertChildView(childView, this);
        }
    };
    View.prototype.didRemoveChildView = function (childView) {
        if (this._controller) {
            this._controller.didRemoveChildView(childView, this);
        }
    };
    View.prototype.controller = function (controller) {
        if (controller === undefined) {
            return this._controller || null;
        }
        else {
            if (this._controller !== controller) {
                if (this._controller) {
                    this._controller.view = null;
                }
                this._controller = controller || undefined;
                if (this._controller) {
                    this._controller.view = this;
                }
            }
            return this;
        }
    };
    View.prototype.isViewable = function () {
        return true;
    };
    View.prototype.willResize = function () {
        if (this._controller) {
            this._controller.willResize(this);
        }
    };
    View.prototype.didResize = function () {
        if (this._controller) {
            this._controller.didResize(this);
        }
    };
    View.prototype.willReview = function (viewable) {
        if (this._controller) {
            this._controller.willReview(viewable, this);
        }
    };
    View.prototype.didReview = function (viewable) {
        if (this._controller) {
            this._controller.didReview(viewable, this);
        }
    };
    View.prototype.willRedraw = function () {
        if (this._controller) {
            this._controller.willRedraw(this);
        }
    };
    View.prototype.didRedraw = function () {
        if (this._controller) {
            this._controller.didRedraw(this);
        }
    };
    View.prototype.requestResize = function () {
        if ((this._flags & View.REQUEST_RESIZE) === 0) {
            this._flags |= View.REQUEST_RESIZE;
            if (this._parentView) {
                this._parentView.requestResize();
            }
        }
    };
    View.prototype.requireResize = function () {
        if ((this._flags & View.REQUIRE_RESIZE) === 0) {
            this._flags |= View.REQUIRE_RESIZE;
            this.requestResize();
            var childViews = this._childViews;
            for (var i = 0, n = childViews.length; i < n; i += 1) {
                childViews[i].requireResize();
            }
        }
    };
    View.prototype.cascadeWillResize = function () {
        if ((this._flags & View.REQUEST_RESIZE) !== 0) {
            if ((this._flags & View.REQUIRE_RESIZE) !== 0) {
                this.willResize();
            }
            var childViews = this._childViews;
            for (var i = 0, n = childViews.length; i < n; i += 1) {
                childViews[i].cascadeWillResize();
            }
        }
    };
    View.prototype.cascadeDidResize = function () {
        if ((this._flags & View.REQUEST_RESIZE) !== 0) {
            var childViews = this._childViews;
            for (var i = 0, n = childViews.length; i < n; i += 1) {
                childViews[i].cascadeDidResize();
            }
            this._flags &= ~View.REQUEST_RESIZE;
            if ((this._flags & View.REQUIRE_RESIZE) !== 0) {
                this._flags &= ~View.REQUIRE_RESIZE;
                this.didResize();
            }
        }
    };
    View.prototype.requestReview = function () {
        if ((this._flags & View.REQUEST_REVIEW) === 0) {
            this._flags |= View.REQUEST_REVIEW;
            if (this._parentView) {
                this._parentView.requestReview();
            }
        }
    };
    View.prototype.requireReview = function () {
        if ((this._flags & View.REQUIRE_REVIEW) === 0) {
            this._flags |= View.REQUIRE_REVIEW;
            this.requestReview();
            var childViews = this._childViews;
            for (var i = 0, n = childViews.length; i < n; i += 1) {
                childViews[i].requireReview();
            }
        }
    };
    View.prototype.cascadeWillReview = function () {
        if ((this._flags & View.REQUEST_REVIEW) !== 0) {
            if ((this._flags & View.REQUIRE_REVIEW) !== 0) {
                if ((this._flags & View.VIEWABLE) === 0) {
                    if (this.isViewable()) {
                        this.willReview(true);
                    }
                }
                else if ((this._flags & View.VIEWABLE) !== 0) {
                    if (!this.isViewable()) {
                        this.willReview(false);
                    }
                }
            }
            var childViews = this._childViews;
            for (var i = 0, n = childViews.length; i < n; i += 1) {
                childViews[i].cascadeWillReview();
            }
        }
    };
    View.prototype.cascadeDidReview = function () {
        if ((this._flags & View.REQUEST_REVIEW) !== 0) {
            this._flags &= ~View.REQUEST_REVIEW;
            var childViews = this._childViews;
            for (var i = 0, n = childViews.length; i < n; i += 1) {
                childViews[i].cascadeDidReview();
            }
            if ((this._flags & View.REQUIRE_REVIEW) !== 0) {
                this._flags &= ~View.REQUIRE_REVIEW;
                if ((this._flags & View.VIEWABLE) === 0) {
                    if (this.isViewable()) {
                        this._flags |= View.VIEWABLE;
                        this.didReview(true);
                    }
                }
                else if ((this._flags & View.VIEWABLE) !== 0) {
                    if (!this.isViewable()) {
                        this._flags &= ~View.VIEWABLE;
                        this.didReview(false);
                    }
                }
            }
        }
    };
    View.prototype.requestRedraw = function () {
        if ((this._flags & View.REQUEST_REDRAW) === 0) {
            this._flags |= View.REQUEST_REDRAW;
            if (this._parentView) {
                this._parentView.requestRedraw();
            }
        }
    };
    View.prototype.requireRedraw = function () {
        if ((this._flags & View.REQUIRE_REDRAW) === 0) {
            this._flags |= View.REQUIRE_REDRAW;
            this.requestRedraw();
            var childViews = this._childViews;
            for (var i = 0, n = childViews.length; i < n; i += 1) {
                childViews[i].requireRedraw();
            }
        }
    };
    View.prototype.cascadeWillRedraw = function () {
        if ((this._flags & View.REQUEST_REDRAW) !== 0) {
            if ((this._flags & View.REQUIRE_REDRAW) !== 0) {
                this.willRedraw();
            }
            var childViews = this._childViews;
            for (var i = 0, n = childViews.length; i < n; i += 1) {
                childViews[i].cascadeWillRedraw();
            }
        }
    };
    View.prototype.cascadeDidRedraw = function () {
        if ((this._flags & View.REQUEST_REDRAW) !== 0) {
            this._flags &= ~View.REQUEST_REDRAW;
            var childViews = this._childViews;
            for (var i = 0, n = childViews.length; i < n; i += 1) {
                childViews[i].cascadeDidRedraw();
            }
            if ((this._flags & View.REQUIRE_REDRAW) !== 0) {
                this._flags &= ~View.REQUIRE_REDRAW;
                this.didRedraw();
            }
        }
    };
    View.prototype.stack = function () {
        return EvalStack.of(View.GlobalScope, this._model, this._state);
    };
    View.initTheme = function () {
        var theme = Record.empty();
        theme.slot('textColor', '#555c78');
        theme.slot('subtextColor', '#555c78');
        theme.slot('primaryColor', '#9b9eb1');
        var primaryColor = Selector.get('primaryColor');
        var primaryColorDarker = Selector.get('darker').invoke(Record.of(primaryColor, 0.2));
        var primaryColorBrighter = Selector.get('brighter').invoke(Record.of(primaryColor, 0.2));
        var primaryHue = Selector.get('interpolate').invoke(Record.of(primaryColorDarker, primaryColorBrighter));
        theme.slot('primaryHue', primaryHue);
        return theme;
    };
    View.GlobalScope = UiFunc.GlobalScope;
    View.Theme = View.initTheme();
    View.REQUEST_RESIZE = 1 << 0;
    View.REQUIRE_RESIZE = 1 << 1;
    View.REQUEST_REVIEW = 1 << 2;
    View.REQUIRE_REVIEW = 1 << 3;
    View.REQUEST_REDRAW = 1 << 4;
    View.REQUIRE_REDRAW = 1 << 5;
    View.VIEWABLE = 1 << 6;
    View.NodeView = undefined;
    View.ElemView = undefined;
    View.TextView = undefined;
    View.HtmlView = undefined;
    View.SvgView = undefined;
    View.AppView = undefined;
    return View;
}());

var ViewController = (function () {
    function ViewController() {
        this._view = null;
    }
    Object.defineProperty(ViewController.prototype, "view", {
        get: function () {
            return this._view;
        },
        set: function (newView) {
            var oldView = this._view;
            if (oldView !== newView) {
                this._view = newView;
                if (this._view) {
                    this.didSetView(this._view);
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    ViewController.prototype.didSetView = function (view) {
    };
    ViewController.prototype.didSetParentView = function (parentView, view) {
    };
    ViewController.prototype.didInsertChildView = function (childView, view) {
    };
    ViewController.prototype.didRemoveChildView = function (childView, view) {
    };
    ViewController.prototype.viewScope = function () {
        var scope = Record.empty();
        return scope;
    };
    ViewController.prototype.stack = function () {
        var stack = new EvalStack();
        stack.push(View.GlobalScope);
        stack.push(this.viewScope());
        return stack;
    };
    ViewController.prototype.didSetModel = function (model, view) {
    };
    ViewController.prototype.didSetStyle = function (newStyle, oldStyle, view) {
    };
    ViewController.prototype.didSetState = function (newState, oldState, view) {
    };
    ViewController.prototype.willResize = function (view) {
    };
    ViewController.prototype.didResize = function (view) {
    };
    ViewController.prototype.willReview = function (viewable, view) {
    };
    ViewController.prototype.didReview = function (viewable, view) {
    };
    ViewController.prototype.willRedraw = function (view) {
    };
    ViewController.prototype.didRedraw = function (view) {
    };
    return ViewController;
}());

var ModelParam = (function () {
    function ModelParam(name, selector) {
        this._name = name;
        this._selector = selector;
    }
    ModelParam.prototype.evaluate = function (state, stack) {
        var value = this._selector.evaluate(stack).toValue();
        if (value.isDefined()) {
            state.slot(this._name, value);
        }
    };
    return ModelParam;
}());
var Model = (function () {
    function Model(id) {
        if (id === void 0) { id = Random.generateId(); }
        this._id = id;
        this._parentModel = null;
        this._childModels = [];
        this._directives = [];
        this._appModel = null;
        this._modelScope = new ModelScope(this);
        this._state = Value.Absent;
        this._flags = 0;
    }
    Object.defineProperty(Model.prototype, "id", {
        get: function () {
            return this._id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Model.prototype, "parentModel", {
        get: function () {
            return this._parentModel;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Model.prototype, "childModels", {
        get: function () {
            return this._childModels;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Model.prototype, "appModel", {
        get: function () {
            var appModel = this._appModel;
            if (appModel === null) {
                var model = this;
                while (model) {
                    if (model instanceof Model.AppModel) {
                        this._appModel = appModel = model;
                        break;
                    }
                    model = model._parentModel;
                }
            }
            return appModel;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Model.prototype, "directives", {
        get: function () {
            return this._directives;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Model.prototype, "modelScope", {
        get: function () {
            return this._modelScope;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Model.prototype, "routeScope", {
        get: function () {
            var appModel = this.appModel;
            return appModel ? appModel._routeScope : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Model.prototype, "parentScope", {
        get: function () {
            var parentModel = this._parentModel;
            return parentModel ? parentModel._modelScope : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Model.prototype, "downlinkContext", {
        get: function () {
            var model = this;
            while (model) {
                if (model._downlinkContext) {
                    return model._downlinkContext;
                }
                model = model._parentModel;
            }
            return client;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Model.prototype, "params", {
        get: function () {
            return this.constructor.Params;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Model.prototype, "state", {
        get: function () {
            return this._state;
        },
        enumerable: true,
        configurable: true
    });
    Model.prototype.setState = function (newState) {
        newState = Value.fromAny(newState);
        var oldState = this._state;
        newState = this.willSetState(newState, oldState);
        if (!oldState.equals(newState)) {
            this._state = newState.commit();
            this.didSetState(newState, oldState);
            var appModel = this.appModel;
            if (appModel) {
                appModel.setState(newState, this);
            }
        }
    };
    Model.prototype.willSetState = function (newState, oldState) {
        return newState;
    };
    Model.prototype.didSetState = function (newState, oldState) {
    };
    Model.prototype.setParentModel = function (parentModel) {
        var oldParentModel = this._parentModel;
        if (parentModel) {
            if (oldParentModel) {
                throw new Error();
            }
            this._parentModel = parentModel;
            var appModel = this.appModel;
            if (appModel) {
                appModel.addDescendantModels(this, parentModel);
            }
            this.requireRestate();
            this.didSetParentModel(parentModel);
        }
        else if (oldParentModel) {
            var appModel = oldParentModel.appModel;
            if (appModel) {
                appModel.removeDescendantModels(this, oldParentModel);
            }
            this._flags = 0;
            this._appModel = null;
            this._parentModel = null;
            this.didSetParentModel(null);
        }
    };
    Model.prototype.didSetParentModel = function (parentModel) {
    };
    Model.prototype.setAppModel = function (appModel) {
        this._appModel = appModel;
        if (appModel === null) {
            this._modelScope.close();
        }
        this.didSetAppModel(appModel);
    };
    Model.prototype.didSetAppModel = function (appModel) {
    };
    Model.prototype.appendChildModel = function (childModel) {
        if (!childModel) {
            throw new TypeError('' + childModel);
        }
        else if (this._childModels.indexOf(childModel) >= 0) {
            throw new Error('duplicate child');
        }
        else if (childModel._parentModel) {
            throw new Error('duplicate parent');
        }
        this._childModels.push(childModel);
        childModel.setParentModel(this);
        this.didInsertChildModel(childModel);
    };
    Model.prototype.prependChildModel = function (childModel) {
        if (!childModel) {
            throw new TypeError('' + childModel);
        }
        else if (this._childModels.indexOf(childModel) >= 0) {
            throw new Error('duplicate child');
        }
        else if (childModel._parentModel) {
            throw new Error('duplicate parent');
        }
        this._childModels.unshift(childModel);
        childModel.setParentModel(this);
        this.didInsertChildModel(childModel);
    };
    Model.prototype.insertChildModel = function (childModel, targetModel) {
        if (!childModel) {
            throw new TypeError('' + childModel);
        }
        else if (this._childModels.indexOf(childModel) >= 0) {
            throw new Error('duplicate child');
        }
        else if (childModel._parentModel) {
            throw new Error('duplicate parent');
        }
        var i = targetModel ? this._childModels.indexOf(targetModel) : -1;
        if (i < 0) {
            i = this._childModels.length;
        }
        this._childModels.splice(i, 0, childModel);
        childModel.setParentModel(this);
        this.didInsertChildModel(childModel);
    };
    Model.prototype.removeChildModel = function (childModel) {
        if (!childModel) {
            throw new TypeError('' + childModel);
        }
        var i = this._childModels.indexOf(childModel);
        if (i >= 0) {
            childModel.setParentModel(null);
            this._childModels.splice(i, 1);
            this.didRemoveChildModel(childModel);
        }
    };
    Model.prototype.didInsertChildModel = function (childModel) {
        for (var i = 0, n = this._directives.length; i < n; i += 1) {
            this._directives[i].didInsertChildModel(childModel);
        }
        if ((childModel._flags & Model.REQUEST_RESTATE) !== 0) {
            this.requestRestate();
        }
    };
    Model.prototype.didRemoveChildModel = function (childModel) {
        for (var i = 0, n = this._directives.length; i < n; i += 1) {
            this._directives[i].didRemoveChildModel(childModel);
        }
    };
    Model.prototype.addDirective = function (directive) {
        if (!directive) {
            throw new TypeError('' + directive);
        }
        else if (this._directives.indexOf(directive) >= 0) {
            throw new Error('duplicate directive');
        }
        else if (directive._model) {
            throw new Error('duplicate model');
        }
        this._directives.push(directive);
        directive.setModel(this);
        this.didAddDirective(directive);
    };
    Model.prototype.removeDirective = function (directive) {
        if (!directive) {
            throw new TypeError('' + directive);
        }
        var i = this._directives.indexOf(directive);
        if (i >= 0) {
            directive.setModel(null);
            this._directives.splice(i, 1);
            this.didRemoveDirective(directive);
        }
    };
    Model.prototype.didAddDirective = function (directive) {
    };
    Model.prototype.didRemoveDirective = function (directive) {
    };
    Model.prototype.appendChildView = function (childId, viewDef) {
        var appModel = this._appModel;
        if (appModel) {
            appModel.appendChildView(this._id, childId, viewDef);
        }
    };
    Model.prototype.prependChildView = function (childId, viewDef) {
        var appModel = this._appModel;
        if (appModel) {
            appModel.prependChildView(this._id, childId, viewDef);
        }
    };
    Model.prototype.insertChildView = function (childId, targetId, viewDef) {
        var appModel = this._appModel;
        if (appModel) {
            appModel.insertChildView(this._id, childId, targetId, viewDef);
        }
    };
    Model.prototype.removeChildView = function (childId) {
        var appModel = this._appModel;
        if (appModel) {
            appModel.removeChildView(this._id, childId);
        }
    };
    Model.prototype.isSealed = function (sealed) {
        if (sealed === undefined) {
            return (this._flags & Model.SEALED) !== 0;
        }
        else {
            if (sealed) {
                this._flags |= Model.SEALED;
            }
            else {
                this._flags &= ~Model.SEALED;
            }
            return this;
        }
    };
    Model.prototype.willRemodel = function (state, stack) {
        for (var i = 0, n = this._directives.length; i < n; i += 1) {
            this._directives[i].willRemodel(state, stack);
        }
    };
    Model.prototype.didRemodel = function (state, stack) {
        for (var i = 0, n = this._directives.length; i < n; i += 1) {
            this._directives[i].didRemodel(state, stack);
        }
    };
    Model.prototype.remodel = function (stack) {
        if (stack === void 0) { stack = this.stack(); }
        var params = this.params;
        var state = Record.empty(params.length);
        for (var i = 0; i < params.length; i += 1) {
            params[i].evaluate(state, stack);
        }
        this.willRemodel(state, stack);
        this.setState(state);
        this.didRemodel(state, stack);
    };
    Model.prototype.willRestate = function () {
        for (var i = 0, n = this._directives.length; i < n; i += 1) {
            this._directives[i].willRestate();
        }
    };
    Model.prototype.didRestate = function () {
        this._modelScope.materializeScope();
        for (var i = 0, n = this._directives.length; i < n; i += 1) {
            this._directives[i].didRestate();
        }
        this.remodel();
    };
    Model.prototype.requestRestate = function () {
        if ((this._flags & Model.REQUEST_RESTATE) === 0) {
            this._flags |= Model.REQUEST_RESTATE;
            if (this._parentModel) {
                this._parentModel.requestRestate();
            }
        }
    };
    Model.prototype.requireRestate = function (source) {
        if (source === void 0) { source = this; }
        if ((this._flags & Model.REQUIRE_RESTATE) === 0) {
            this._flags |= Model.REQUIRE_RESTATE;
            this.requestRestate();
            if (source === this || (this._flags & Model.SEALED) === 0) {
                var childModels = this._childModels;
                for (var i = 0, n = childModels.length; i < n; i += 1) {
                    childModels[i].requireRestate(source);
                }
            }
        }
    };
    Model.prototype.cascadeWillRestate = function () {
        if ((this._flags & Model.REQUEST_RESTATE) !== 0) {
            if ((this._flags & Model.REQUIRE_RESTATE) !== 0) {
                this.willRestate();
            }
            var childModels = this._childModels;
            for (var i = 0, n = childModels.length; i < n; i += 1) {
                childModels[i].cascadeWillRestate();
            }
        }
    };
    Model.prototype.cascadeDidRestate = function () {
        if ((this._flags & Model.REQUEST_RESTATE) !== 0) {
            this._flags &= ~Model.REQUEST_RESTATE;
            var childModels = this._childModels;
            for (var i = 0, n = childModels.length; i < n; i += 1) {
                childModels[i].cascadeDidRestate();
            }
            if ((this._flags & Model.REQUIRE_RESTATE) !== 0) {
                this._flags &= ~Model.REQUIRE_RESTATE;
                this.didRestate();
            }
        }
    };
    Model.prototype.setData = function (data) {
        if (typeof data === 'string') {
            data = Record.parseRecon(data);
        }
        else if (!(data instanceof Record)) {
            data = Record.of(data);
        }
        for (var i = 0, n = this._directives.length; i < n; i += 1) {
            this._directives[i].setData(data);
        }
        this._modelScope._record = data;
        this.requireRestate();
    };
    Model.prototype.initDownlink = function (init, stack) {
        if (stack === void 0) { stack = this.stack(); }
        if (!init || init.hostUri === undefined) {
            init = init || {};
            init.hostUri = MODEL_HOST_SELECTOR.evaluate(stack).cast(Form.Uri);
        }
        if (!init || init.nodeUri === undefined) {
            init = init || {};
            init.nodeUri = MODEL_NODE_SELECTOR.evaluate(stack).cast(Form.Uri);
        }
        if (!init || init.laneUri === undefined) {
            init = init || {};
            init.laneUri = MODEL_LANE_SELECTOR.evaluate(stack).cast(Form.Uri);
        }
        if (!init || init.prio === undefined) {
            init = init || {};
            init.prio = MODEL_PRIO_SELECTOR.evaluate(stack).numberValue();
        }
        if (!init || init.rate === undefined) {
            init = init || {};
            init.rate = MODEL_RATE_SELECTOR.evaluate(stack).numberValue();
        }
        return init;
    };
    Model.prototype.stack = function () {
        return EvalStack.of(Model.GlobalScope, this._modelScope);
    };
    Model.Params = [];
    Model.GlobalScope = UiFunc.GlobalScope;
    Model.REQUEST_RESTATE = 1 << 0;
    Model.REQUIRE_RESTATE = 1 << 1;
    Model.SEALED = 1 << 8;
    Model.AppModel = undefined;
    return Model;
}());
var ModelScope = (function (_super) {
    __extends(ModelScope, _super);
    function ModelScope(model) {
        var _this = _super.call(this) || this;
        _this._model = model;
        return _this;
    }
    Object.defineProperty(ModelScope.prototype, "parentScope", {
        get: function () {
            return this._model.parentScope;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ModelScope.prototype, "downlinkContext", {
        get: function () {
            return this._model.downlinkContext;
        },
        enumerable: true,
        configurable: true
    });
    ModelScope.prototype.initDownlink = function (init, stack) {
        return this._model.initDownlink(init, stack);
    };
    ModelScope.prototype.materializeMutableScope = function (value, stack) {
        var scope = new MutableScope(this._model);
        value.header('mutable').forEach(function (item) {
            if (item instanceof Selector) {
                scope._dependents.push(item);
            }
        }, this);
        scope._record = value.tail();
        return scope;
    };
    ModelScope.prototype.materializeValue = function (value, stack) {
        if (value.tag === 'mutable') {
            var scope = this.materializeMutableScope(value, stack);
            if (scope instanceof MutableScope) {
                return scope;
            }
        }
        return _super.prototype.materializeValue.call(this, value, stack);
    };
    ModelScope.prototype.didChange = function (newItem, oldItem, index) {
        this._model.requireRestate();
    };
    ModelScope.prototype.stack = function () {
        return EvalStack.of(Model.GlobalScope, this);
    };
    return ModelScope;
}(DownlinkScope));
var RouteScope = (function (_super) {
    __extends(RouteScope, _super);
    function RouteScope(model) {
        var _this = _super.call(this) || this;
        _this._model = model;
        return _this;
    }
    Object.defineProperty(RouteScope.prototype, "parentScope", {
        get: function () {
            return null;
        },
        enumerable: true,
        configurable: true
    });
    RouteScope.prototype.didChange = function (newItem, oldItem, index) {
        this._model.requireRestate();
    };
    RouteScope.prototype.stack = function () {
        return EvalStack.of(Model.GlobalScope, this);
    };
    return RouteScope;
}(RecordScope));
var MutableScope = (function (_super) {
    __extends(MutableScope, _super);
    function MutableScope(model) {
        var _this = _super.call(this) || this;
        _this._model = model;
        _this._dependents = Record.empty();
        return _this;
    }
    Object.defineProperty(MutableScope.prototype, "parentScope", {
        get: function () {
            return null;
        },
        enumerable: true,
        configurable: true
    });
    MutableScope.prototype.didChange = function (newItem, oldItem, index) {
        this._model.requireRestate();
    };
    MutableScope.prototype.stack = function () {
        return EvalStack.of(Model.GlobalScope, this);
    };
    return MutableScope;
}(RecordScope));
var MODEL_HOST_SELECTOR = Selector.get('host');
var MODEL_NODE_SELECTOR = Selector.get('node');
var MODEL_LANE_SELECTOR = Selector.get('lane');
var MODEL_PRIO_SELECTOR = Selector.get('prio');
var MODEL_RATE_SELECTOR = Selector.get('rate');

var ViewForm = (function (_super) {
    __extends(ViewForm, _super);
    function ViewForm() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(ViewForm.prototype, "tag", {
        get: function () {
            return 'view';
        },
        enumerable: true,
        configurable: true
    });
    ViewForm.prototype.castView = function (value, stack, factory) {
        if (value.tag === this.tag) {
            var view = new View();
            var modelDef = this.materializeView(view, value, stack, factory);
            view.setModel(modelDef);
            return view;
        }
        return undefined;
    };
    ViewForm.prototype.castModel = function (value, stack, factory) {
        if (value.tag === this.tag) {
            var model = new Model();
            var dataDef = this.materializeModel(model, value, stack, factory);
            model.setData(dataDef);
            return model;
        }
        return undefined;
    };
    ViewForm.prototype.materializeViewParam = function (view, param, stack, factory) {
        return _super.prototype.materializeViewParam.call(this, view, param, stack, factory);
    };
    ViewForm.prototype.materializeModelParam = function (model, param, stack, factory) {
        if (param instanceof Attr && param.key.value === this.tag) {
            return Item.Absent;
        }
        return _super.prototype.materializeModelParam.call(this, model, param, stack, factory);
    };
    ViewForm.Form = new ViewForm();
    return ViewForm;
}(UiForm));
UiForm.addGlobal(ViewForm.Form);

var ViewPort = (function () {
    function ViewPort() {
    }
    return ViewPort;
}());

var NodeView = (function (_super) {
    __extends(NodeView, _super);
    function NodeView(node, id) {
        var _this = _super.call(this, id) || this;
        _this.node = node;
        _this.node.view = _this;
        return _this;
    }
    NodeView.prototype.text = function (value) {
        if (value === undefined) {
            return this.node.textContent || '';
        }
        else {
            this.node.textContent = value;
            return this;
        }
    };
    NodeView.prototype.attachApp = function () {
        var node = this.node;
        var parentNode;
        while (parentNode = node.parentNode, parentNode) {
            if (parentNode.view instanceof View.AppView) {
                var parentView = parentNode.view;
                parentView.appendChildView(node.view);
                break;
            }
            else if (parentNode instanceof HTMLBodyElement) {
                var parentView = View.AppView.create(parentNode);
                parentView.appendChildView(node.view);
                break;
            }
            else if (!(parentNode instanceof HTMLHeadElement) && !(parentNode instanceof HTMLHtmlElement)) {
                var parentView = NodeView.create(parentNode);
                parentView.appendChildView(node.view);
                node = parentNode;
            }
            else {
                break;
            }
        }
    };
    NodeView.create = function (node) {
        if (node instanceof NodeView) {
            return node;
        }
        else if (typeof node === 'string') {
            return new View.ElemView(document.createElement(node));
        }
        else if (node.view) {
            return node.view;
        }
        else if (node instanceof HTMLElement) {
            return new View.HtmlView(node);
        }
        else if (node instanceof SVGElement) {
            return new View.SvgView(node);
        }
        else if (node instanceof Element) {
            return new View.ElemView(node);
        }
        else if (node instanceof Text) {
            return new View.TextView(node);
        }
        else {
            return new NodeView(node);
        }
    };
    return NodeView;
}(View));
View.NodeView = NodeView;

var NodeModel = (function (_super) {
    __extends(NodeModel, _super);
    function NodeModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return NodeModel;
}(Model));

var NodeForm = (function (_super) {
    __extends(NodeForm, _super);
    function NodeForm() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NodeForm.prototype.materializeViewParam = function (view, param, stack, factory) {
        return _super.prototype.materializeViewParam.call(this, view, param, stack, factory);
    };
    NodeForm.prototype.materializeModelParam = function (model, param, stack, factory) {
        return _super.prototype.materializeModelParam.call(this, model, param, stack, factory);
    };
    return NodeForm;
}(UiForm));

var ElemView = (function (_super) {
    __extends(ElemView, _super);
    function ElemView(node, id) {
        var _this = _super.call(this, node, id) || this;
        _this.attributeAnimators = {};
        _this.styleAnimators = {};
        return _this;
    }
    ElemView.prototype.isViewable = function () {
        var bounds = this.node.getBoundingClientRect();
        var windowWidth = document.documentElement.clientWidth;
        var windowHeight = document.documentElement.clientHeight;
        return (bounds.top <= 0 && bounds.bottom > 0 || bounds.top >= 0 && bounds.top < windowHeight)
            && (bounds.left <= 0 && bounds.right > 0 || bounds.left >= 0 && bounds.left < windowWidth);
    };
    ElemView.prototype.attribute = function (name, value, trans, flags) {
        var animator = this.attributeAnimators[name];
        if (value === undefined) {
            if (animator) {
                return animator.get();
            }
            else {
                return this.node.getAttribute(name);
            }
        }
        else if (value === null) {
            if (animator) {
                animator.cancel();
                this.attributeAnimators[name] = undefined;
            }
            this.node.removeAttribute(name);
            return this;
        }
        else {
            trans = Transition.fromAny(trans, value);
            if (!animator && trans !== undefined) {
                if (!trans.f) {
                    trans = trans.range(value);
                }
                animator = new AttributeAnimator(this.node, name, value, trans, flags);
                this.attributeAnimators[name] = animator;
            }
            if (animator) {
                animator.set(value, trans);
            }
            else {
                var oldValue = this.node.getAttribute(name);
                var newValue = toAttributeString(value);
                if (oldValue !== newValue) {
                    this.node.setAttribute(name, newValue);
                    if (flags !== undefined && (flags & Animator.REQUIRES_RESIZE) !== 0) {
                        this.requireResize();
                    }
                }
            }
            return this;
        }
    };
    ElemView.prototype.style = function (name, value, trans, flags) {
        var animator = this.styleAnimators[name];
        if (value === undefined) {
            if (animator) {
                return animator.get();
            }
            else {
                return this.node.style.getPropertyValue(name);
            }
        }
        else if (value === null) {
            if (animator) {
                animator.cancel();
                this.styleAnimators[name] = undefined;
            }
            this.node.style.removeProperty(name);
            return this;
        }
        else {
            trans = Transition.fromAny(trans, value);
            if (!animator && trans !== undefined) {
                if (!trans.f) {
                    trans = trans.range(value);
                }
                animator = new StyleAnimator(this.node, name, value, trans, undefined, flags);
                this.styleAnimators[name] = animator;
            }
            if (animator) {
                animator.set(value, trans);
            }
            else {
                var oldValue = this.node.style.getPropertyValue(name);
                var newValue = toStyleString(value);
                if (oldValue !== newValue) {
                    this.node.style.setProperty(name, newValue);
                    if (flags !== undefined && (flags & Animator.REQUIRES_RESIZE) !== 0) {
                        this.requireResize();
                    }
                }
            }
            return this;
        }
    };
    ElemView.prototype.attributeEnum = function (name, value, trans, flags) {
        return this.attribute(name, value, trans, flags);
    };
    ElemView.prototype.attributeNumber = function (name, value, trans, flags) {
        if (value !== undefined && value !== null) {
            value = +value;
        }
        var result = this.attribute(name, value, trans, flags);
        if (typeof result === 'string') {
            result = +result;
        }
        return result;
    };
    ElemView.prototype.attributeLength = function (name, value, trans, flags) {
        if (value !== undefined && value !== null) {
            value = Length.fromAny(value, this.node);
        }
        var result = this.attribute(name, value, trans, flags);
        if (typeof result === 'string') {
            result = Length.fromAny(result, this.node);
        }
        return result;
    };
    ElemView.prototype.attributeLengthEnum = function (name, value, trans, flags) {
        if (value !== undefined && value !== null) {
            try {
                value = Length.fromAny(value, this.node);
            }
            catch (swallow) {
            }
        }
        var result = this.attribute(name, value, trans, flags);
        if (typeof result === 'string') {
            try {
                result = Length.fromAny(result, this.node);
            }
            catch (swallow) {
            }
        }
        return result;
    };
    ElemView.prototype.attributeColor = function (name, value, trans, flags) {
        if (value !== undefined && value !== null) {
            value = Color.fromAny(value);
        }
        var result = this.attribute(name, value, trans, flags);
        if (typeof result === 'string') {
            result = Color.fromAny(result);
        }
        return result;
    };
    ElemView.prototype.attributeTransform = function (name, value, trans, flags) {
        if (value !== undefined && value !== null) {
            value = Transform.fromAny(value);
        }
        var result = this.attribute(name, value, trans, flags);
        if (typeof result === 'string') {
            result = Transform.fromAny(result);
        }
        return result;
    };
    ElemView.prototype.attributeBoolean = function (name, value, trans, flags) {
        if (value !== undefined && value !== null) {
            value = (value ? true : null);
        }
        var result = this.attribute(name, value, trans, flags);
        if (typeof result === 'string') {
            result = !!result;
        }
        return result;
    };
    ElemView.prototype.attributeValue = function (name, value, trans, flags) {
        var uiValue;
        if (value !== undefined && value !== null) {
            uiValue = UiValue.Form.cast(value);
            if (uiValue === undefined) {
                uiValue = value.stringValue();
            }
        }
        var result = this.attribute(name, uiValue, trans, flags);
        if (typeof result === 'string') {
            result = UiValue.parse(result);
        }
        if (result !== this) {
            result = UiValue.Form.mold(result);
        }
        return result;
    };
    ElemView.prototype.styleEnum = function (name, value, trans, flags) {
        return this.style(name, value, trans, flags);
    };
    ElemView.prototype.styleNumber = function (name, value, trans, flags) {
        if (value !== undefined && value !== null) {
            value = +value;
        }
        var result = this.style(name, value, trans, flags);
        if (typeof result === 'string') {
            result = +result;
        }
        return result;
    };
    ElemView.prototype.styleNumberEnum = function (name, value, trans, flags) {
        var result = this.style(name, value, trans, flags);
        if (typeof result === 'string' && isFinite(+result)) {
            result = +result;
        }
        return result;
    };
    ElemView.prototype.styleLength = function (name, value, trans, flags) {
        if (value !== undefined && value !== null) {
            value = Length.fromAny(value, this.node);
        }
        var result = this.style(name, value, trans, flags);
        if (typeof result === 'string') {
            result = Length.fromAny(result, this.node);
        }
        return result;
    };
    ElemView.prototype.styleLengthEnum = function (name, value, trans, flags) {
        if (value !== undefined && value !== null) {
            try {
                value = Length.fromAny(value, this.node);
            }
            catch (swallow) {
            }
        }
        var result = this.style(name, value, trans, flags);
        if (typeof result === 'string') {
            try {
                result = Length.fromAny(result, this.node);
            }
            catch (swallow) {
            }
        }
        return result;
    };
    ElemView.prototype.styleColor = function (name, value, trans, flags) {
        if (value !== undefined && value !== null) {
            value = Color.fromAny(value);
        }
        var result = this.style(name, value, trans, flags);
        if (typeof result === 'string') {
            result = Color.fromAny(result);
        }
        return result;
    };
    ElemView.prototype.styleColorEnum = function (name, value, trans, flags) {
        if (value !== undefined && value !== null) {
            try {
                value = Color.fromAny(value);
            }
            catch (swallow) {
            }
        }
        var result = this.style(name, value, trans, flags);
        if (typeof result === 'string') {
            try {
                result = Color.fromAny(result);
            }
            catch (swallow) {
            }
        }
        return result;
    };
    ElemView.prototype.styleTransform = function (name, value, trans, flags) {
        if (value !== undefined && value !== null) {
            value = Transform.fromAny(value);
        }
        var result = this.style(name, value, trans, flags);
        if (typeof result === 'string') {
            result = Transform.fromAny(result);
        }
        return result;
    };
    ElemView.prototype.styleValue = function (name, value, trans, flags) {
        var uiValue;
        if (value !== undefined && value !== null) {
            uiValue = UiValue.Form.cast(value);
            if (uiValue === undefined) {
                uiValue = value.stringValue();
            }
        }
        var result = this.style(name, uiValue, trans, flags);
        if (typeof result === 'string') {
            result = UiValue.parse(result);
        }
        if (result !== this) {
            result = UiValue.Form.mold(result);
        }
        return result;
    };
    ElemView.prototype.propertyEnum = function (accessor, value, trans) {
        return this.property(accessor, value, trans);
    };
    ElemView.prototype.propertyNumberEnum = function (accessor, value, trans) {
        var result = this.property(accessor, value, trans);
        if (typeof result === 'string' && isFinite(+result)) {
            result = +result;
        }
        return result;
    };
    ElemView.prototype.propertyAngle = function (accessor, value, trans) {
        if (value !== undefined && value !== null) {
            value = Angle.fromAny(value);
        }
        var result = this.property(accessor, value, trans);
        if (typeof result === 'string') {
            result = Angle.fromAny(result);
        }
        return result;
    };
    ElemView.prototype.propertyLength = function (accessor, value, trans) {
        if (value !== undefined && value !== null) {
            value = Length.fromAny(value, this.node);
        }
        var result = this.property(accessor, value, trans);
        if (typeof result === 'string') {
            result = Length.fromAny(result, this.node);
        }
        return result;
    };
    ElemView.prototype.propertyLengthEnum = function (accessor, value, trans) {
        if (value !== undefined && value !== null) {
            try {
                value = Length.fromAny(value, this.node);
            }
            catch (swallow) {
            }
        }
        var result = this.property(accessor, value, trans);
        if (typeof result === 'string') {
            try {
                result = Length.fromAny(result, this.node);
            }
            catch (swallow) {
            }
        }
        return result;
    };
    ElemView.prototype.propertyColorEnum = function (accessor, value, trans) {
        if (value !== undefined && value !== null) {
            try {
                value = Color.fromAny(value);
            }
            catch (swallow) {
            }
        }
        var result = this.property(accessor, value, trans);
        if (typeof result === 'string') {
            try {
                result = Color.fromAny(result);
            }
            catch (swallow) {
            }
        }
        return result;
    };
    ElemView.prototype.propertyBoolean = function (accessor, value, trans) {
        return this.property(accessor, value, trans);
    };
    ElemView.prototype.elemId = function (value, trans) {
        return this.attribute('id', value, trans);
    };
    ElemView.prototype.name = function (value, trans) {
        return this.attribute('name', value, trans);
    };
    ElemView.prototype.className = function (value, trans) {
        return this.attribute('class', value, trans);
    };
    ElemView.prototype.on = function (type, listener, options) {
        this.node.addEventListener(type, listener, options);
        return this;
    };
    ElemView.prototype.off = function (type, listener, options) {
        this.node.removeEventListener(type, listener, options);
        return this;
    };
    ElemView.prototype.createChildView = function (node) {
        return ElemView.create(node);
    };
    ElemView.prototype.append = function (node) {
        var childView = this.createChildView(node);
        this.appendChildView(childView);
        this.node.appendChild(childView.node);
        return childView;
    };
    ElemView.prototype.prepend = function (node) {
        var childView = this.createChildView(node);
        this.prependChildView(childView);
        this.node.insertBefore(childView.node, this.node.firstChild);
        return childView;
    };
    ElemView.prototype.insertBefore = function (node, target) {
        var targetView;
        if (target instanceof NodeView) {
            targetView = target;
            target = target.node;
        }
        else if (target) {
            targetView = target.view || null;
        }
        else {
            targetView = null;
        }
        var childView = this.createChildView(node);
        this.insertChildView(childView, targetView);
        this.node.insertBefore(childView.node, target);
        return childView;
    };
    ElemView.prototype.remove = function (child) {
        if (child === undefined) {
            if (this._parentView) {
                this._parentView.removeChildView(this);
            }
            if (this.node.parentNode) {
                this.node.parentNode.removeChild(this.node);
            }
        }
        else {
            var childView = void 0;
            var childNode = void 0;
            if (child instanceof NodeView) {
                childView = child;
                childNode = childView.node;
            }
            else {
                childNode = child;
                childView = childNode.view;
            }
            this.node.removeChild(childNode);
            if (childView) {
                this.removeChildView(childView);
            }
        }
        return this;
    };
    ElemView.prototype.removeAll = function () {
        var childNode;
        while (childNode = this.node.firstChild, childNode) {
            this.node.removeChild(childNode);
            if (childNode.view) {
                this.removeChildView(childNode.view);
            }
        }
        this.removeAllChildViews();
        return this;
    };
    ElemView.prototype.didInsertChildView = function (childView) {
        _super.prototype.didInsertChildView.call(this, childView);
        if (childView instanceof NodeView && !childView.node.parentNode) {
            this.node.appendChild(childView.node);
        }
    };
    ElemView.prototype.didRemoveChildView = function (childView) {
        if (childView instanceof NodeView && childView.node.parentNode === this.node) {
            childView.node.parentNode.removeChild(childView.node);
        }
        _super.prototype.didRemoveChildView.call(this, childView);
    };
    ElemView.prototype.didSetStateParam = function (key, value) {
        if (key === 'attrs') {
            this.didSetAttrs(value);
        }
        else if (key === 'style') {
            this.didSetStyle(value);
        }
        else {
            _super.prototype.didSetStateParam.call(this, key, value);
        }
    };
    ElemView.prototype.didSetAttrs = function (attrs) {
        var trans = attrs.get('transition').cast(Transition.Form);
        attrs.forEach(function (item) {
            if (item instanceof Slot && item.key instanceof Text$1) {
                var name_1 = item.key.value;
                if (name_1 !== 'transition') {
                    this.didSetAttrsParam(item.key.value, item.value, trans);
                }
            }
        }, this);
    };
    ElemView.prototype.didSetAttrsParam = function (name, value, trans) {
        this.attributeValue(name, value, trans);
    };
    ElemView.prototype.didSetStyle = function (style) {
        var trans = style.get('transition').cast(Transition.Form);
        style.forEach(function (item) {
            if (item instanceof Slot && item.key instanceof Text$1) {
                var name_2 = item.key.value;
                if (name_2 !== 'transition') {
                    this.didSetStyleParam(item.key.value, item.value, trans);
                }
            }
        }, this);
    };
    ElemView.prototype.didSetStyleParam = function (name, value, trans) {
        this.styleValue(name, value, trans);
    };
    return ElemView;
}(NodeView));
View.ElemView = ElemView;

var ElemModel = (function (_super) {
    __extends(ElemModel, _super);
    function ElemModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return ElemModel;
}(NodeModel));

var ElemForm = (function (_super) {
    __extends(ElemForm, _super);
    function ElemForm() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ElemForm.prototype.materializeViewParam = function (view, param, stack, factory) {
        if (param.key instanceof Text$1) {
            var key = param.key.value;
            if (key === 'id') {
                var elemId = param.toValue().stringValue();
                if (elemId !== undefined) {
                    view.elemId(elemId);
                    return param;
                }
            }
        }
        return _super.prototype.materializeViewParam.call(this, view, param, stack, factory);
    };
    ElemForm.prototype.materializeModelParam = function (model, param, stack, factory) {
        return _super.prototype.materializeModelParam.call(this, model, param, stack, factory);
    };
    return ElemForm;
}(NodeForm));

var SvgView = (function (_super) {
    __extends(SvgView, _super);
    function SvgView(node, id) {
        return _super.call(this, node, id) || this;
    }
    SvgView.prototype.viewBox = function (value, trans) {
        return this.attribute('viewBox', value, trans);
    };
    SvgView.prototype.preserveAspectRatio = function (value, trans) {
        return this.attributeBoolean('preserveAspectRatio', value, trans);
    };
    SvgView.prototype.transform = function (value, trans) {
        this.attributeTransform('transform', value, trans);
        return this.styleTransform('transform', value, trans);
    };
    SvgView.prototype.x = function (value, trans) {
        return this.attributeNumber('x', value, trans);
    };
    SvgView.prototype.y = function (value, trans) {
        return this.attributeNumber('y', value, trans);
    };
    SvgView.prototype.x1 = function (value, trans) {
        return this.attributeNumber('x1', value, trans);
    };
    SvgView.prototype.y1 = function (value, trans) {
        return this.attributeNumber('y1', value, trans);
    };
    SvgView.prototype.x2 = function (value, trans) {
        return this.attributeNumber('x2', value, trans);
    };
    SvgView.prototype.y2 = function (value, trans) {
        return this.attributeNumber('y2', value, trans);
    };
    SvgView.prototype.cx = function (value, trans) {
        return this.attributeNumber('cx', value, trans);
    };
    SvgView.prototype.cy = function (value, trans) {
        return this.attributeNumber('cy', value, trans);
    };
    SvgView.prototype.dx = function (value, trans) {
        return this.attributeNumber('dx', value, trans);
    };
    SvgView.prototype.dy = function (value, trans) {
        return this.attributeNumber('dy', value, trans);
    };
    SvgView.prototype.r = function (value, trans) {
        return this.attributeNumber('r', value, trans);
    };
    SvgView.prototype.d = function (value, trans) {
        return this.attribute('d', value, trans);
    };
    SvgView.prototype.points = function (value, trans) {
        return this.attribute('points', value, trans);
    };
    SvgView.prototype.clipPath = function (value, trans) {
        return this.attribute('clip-path', value, trans);
    };
    SvgView.prototype.in = function (value, trans) {
        return this.attribute('in', value, trans);
    };
    SvgView.prototype.in2 = function (value, trans) {
        return this.attribute('in2', value, trans);
    };
    SvgView.prototype.mode = function (value, trans) {
        return this.attribute('mode', value, trans);
    };
    SvgView.prototype.edgeMode = function (value, trans) {
        return this.attribute('edgeMode', value, trans);
    };
    SvgView.prototype.stdDeviation = function (value, trans) {
        return this.attribute('stdDeviation', value, trans);
    };
    SvgView.prototype.type = function (value, trans) {
        return this.attribute('type', value, trans);
    };
    SvgView.prototype.values = function (value, trans) {
        return this.attribute('values', value, trans);
    };
    SvgView.prototype.result = function (value, trans) {
        return this.attribute('result', value, trans);
    };
    SvgView.prototype.width = function (value, trans) {
        return this.attributeLength('width', value, trans);
    };
    SvgView.prototype.height = function (value, trans) {
        return this.attributeLength('height', value, trans);
    };
    SvgView.prototype.alignmentBaseline = function (value, trans) {
        return this.attributeEnum('alignment-baseline', value, trans);
    };
    SvgView.prototype.textAnchor = function (value, trans) {
        return this.attributeEnum('text-anchor', value, trans);
    };
    SvgView.prototype.fill = function (value, trans) {
        return this.styleColorEnum('fill', value, trans);
    };
    SvgView.prototype.fillRule = function (value, trans) {
        return this.style('fill-rule', value, trans);
    };
    SvgView.prototype.stroke = function (value, trans) {
        return this.styleColorEnum('stroke', value, trans);
    };
    SvgView.prototype.strokeWidth = function (value, trans) {
        return this.styleNumber('stroke-width', value, trans);
    };
    SvgView.prototype.strokeDashArray = function (value, trans) {
        return this.styleNumber('stroke-dasharray', value, trans);
    };
    SvgView.prototype.cursor = function (value, trans) {
        return this.styleEnum('cursor', value, trans);
    };
    SvgView.prototype.createChildView = function (node) {
        return SvgView.create(node);
    };
    SvgView.prototype.append = function (node) {
        return _super.prototype.append.call(this, node);
    };
    SvgView.prototype.prepend = function (node) {
        return _super.prototype.prepend.call(this, node);
    };
    SvgView.prototype.insertBefore = function (node, target) {
        return _super.prototype.insertBefore.call(this, node, target);
    };
    SvgView.create = function (node) {
        if (node instanceof NodeView) {
            return node;
        }
        else if (typeof node === 'string') {
            return new View.SvgView(document.createElementNS(SvgView.NS, node));
        }
        else if (node.view) {
            return node.view;
        }
        else if (node instanceof HTMLElement) {
            return new View.HtmlView(node);
        }
        else if (node instanceof SVGElement) {
            return new View.SvgView(node);
        }
        else if (node instanceof Element) {
            return new View.ElemView(node);
        }
        else if (node instanceof Text) {
            return new View.TextView(node);
        }
        else {
            return new NodeView(node);
        }
    };
    SvgView.NS = 'http://www.w3.org/2000/svg';
    return SvgView;
}(ElemView));
View.SvgView = SvgView;

var SvgModel = (function (_super) {
    __extends(SvgModel, _super);
    function SvgModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return SvgModel;
}(ElemModel));

var SvgForm = (function (_super) {
    __extends(SvgForm, _super);
    function SvgForm() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SvgForm.prototype.materializeViewParam = function (view, param, stack, factory) {
        return _super.prototype.materializeViewParam.call(this, view, param, stack, factory);
    };
    SvgForm.prototype.materializeModelParam = function (model, param, stack, factory) {
        return _super.prototype.materializeModelParam.call(this, model, param, stack, factory);
    };
    return SvgForm;
}(ElemForm));

function ParentElement(node, tagname) {
    if (node === null) {
        return undefined;
    }
    if (tagname === undefined) {
        return node.parentElement;
    }
    else {
        var parent_1 = node.parentNode;
        tagname = tagname.toUpperCase();
        while (parent_1.tagName !== "HTML") {
            if (parent_1.tagName === tagname) {
                return parent_1;
            }
            parent_1 = parent_1.parentNode;
        }
        return parent_1;
    }
}

var Utils = (function () {
    function Utils() {
    }
    Utils.newGuid = function () {
        return 'xxxxxxxx'.replace(/[xy]/g, function (c) {
            var r = Math.random() * 16 | 0;
            var v = (c === 'x') ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });
    };
    Utils.openSwimValueLink = function (linkConfig) {
        return new SwimLink('value', linkConfig).downlink;
    };
    Utils.openSwimMapLink = function (linkConfig) {
        return new SwimLink('map', linkConfig).downlink;
    };
    Utils.copyConfig = function (originalConfig) {
        var newConfig = {};
        for (var key in originalConfig) {
            newConfig[key] = originalConfig[key];
        }
        return newConfig;
    };
    Utils.parseHost = function (host) {
        var hostObject = {};
        var parseHost = null;
        if (host.indexOf('://') !== -1) {
            parseHost = host.split('://');
            hostObject.isSecure = (parseHost[0] === 'wss') ? true : false;
        }
        else {
            hostObject.isSecure = false;
        }
        parseHost = (parseHost) ? parseHost[1].split(':') : host.split(':');
        hostObject.hostUrl = parseHost[0];
        hostObject.hostPort = (parseHost[1]) ? parseHost[1] : '';
        return hostObject;
    };
    return Utils;
}());
var SwimLink = (function () {
    function SwimLink(type, config, debug) {
        if (debug === void 0) { debug = false; }
        this.type = type;
        this.config = config;
        this.shortUrl = null;
        this._debug = debug;
        this._downlink = null;
        this.connect();
    }
    SwimLink.prototype.connect = function () {
        switch (this.type) {
            case "value":
                this._swimService = downlinkValue;
                break;
            default:
                this._swimService = downlinkMap;
                break;
        }
        var portUrl = (this.config.hostPort) ? ":" + this.config.hostPort : '';
        this.shortUrl = ((this.config.isSecure) ? 'wss' : 'ws') + "://" + this.config.hostUrl + portUrl;
        this.fullUrlWithPath = "" + this.shortUrl + this.config.node + "/" + this.config.lane + "/";
        if (this.config.keepSynced === undefined || this.config.keepSynced === null) {
            this.config.keepSynced = false;
        }
        this._downlink = this._swimService()
            .host(this.shortUrl)
            .node(this.config.node)
            .lane(this.config.lane)
            .keepSynced(this.config.keepSynced)
            .didConnect(this.didConnect.bind(this))
            .didFail(this.didFail.bind(this))
            .didSync(this.didSync.bind(this))
            .didLink(this.didLink.bind(this))
            .didUnlink(this.didUnlink.bind(this));
        this.valueType();
        this.mapType();
        this.open();
    };
    Object.defineProperty(SwimLink.prototype, "downlink", {
        get: function () {
            if (this._downlink === null) {
                this.connect();
            }
            return this._downlink;
        },
        enumerable: true,
        configurable: true
    });
    SwimLink.prototype.valueType = function () {
        if (this.type !== 'value') {
            return;
        }
        this._downlink.didSet(this.didSet.bind(this));
    };
    SwimLink.prototype.didSet = function (value) {
        if (this._debug) {
            console.log("[util] " + this.fullUrlWithPath + " didSet", value);
        }
        if (!this.config.didSet) {
            return;
        }
        this.config.didSet(value);
    };
    SwimLink.prototype.mapType = function () {
        if (this.type === 'value') {
            return;
        }
        this._downlink.didSync(this.didSync.bind(this));
        this._downlink.didUpdate(this.didUpdate.bind(this));
    };
    SwimLink.prototype.didSync = function () {
        if (this._debug) {
            console.log("[util] " + this.fullUrlWithPath + " didSync");
        }
        if (!this.config.didSync) {
            return;
        }
        this.config.didSync();
    };
    SwimLink.prototype.didLink = function () {
        if (this._debug) {
            console.log("[util] " + this.fullUrlWithPath + " didLink");
        }
        if (!this.config.didLink) {
            return;
        }
        this.config.didLink();
    };
    SwimLink.prototype.didUnlink = function () {
        if (this._debug) {
            console.log("[util] " + this.fullUrlWithPath + " didunlink");
        }
        if (!this.config.didUnlink) {
            return;
        }
        this.config.didUnlink();
    };
    SwimLink.prototype.didUpdate = function (key, value) {
        if (this._debug) {
            console.log("[util] " + this.fullUrlWithPath + " didUpdate - key: " + key + ", Value: ", value);
        }
        if (!this.config.didUpdate) {
            return;
        }
        this.config.didUpdate(key, value);
    };
    SwimLink.prototype.update = function (type, config, debug) {
        if (debug === void 0) { debug = false; }
        this.close();
        this.type = type;
        this.config = config;
        this._debug = debug;
        this.connect();
    };
    SwimLink.prototype.didConnect = function (newLink) {
        if (!this._debug) {
            return;
        }
        console.log("[util] " + this.fullUrlWithPath + " opened.");
    };
    SwimLink.prototype.didFail = function (error) {
        if (!this._debug) {
            return;
        }
        console.error(this.fullUrlWithPath + " error: " + error);
        if (!this.config.didFail) {
            return;
        }
        this.config.didFail(error);
    };
    SwimLink.prototype.open = function () {
        this._downlink.open();
    };
    SwimLink.prototype.close = function () {
        this._downlink.close();
        this._downlink.didSync(null);
        this._downlink.didUpdate(null);
    };
    SwimLink.create = function (type, config, debug) {
        return new SwimLink(type, config, debug);
    };
    return SwimLink;
}());

var LayoutRenderView = (function () {
    function LayoutRenderView(parentElement) {
        this.swimDataConfig = {
            isSecure: false,
            hostUrl: '',
            hostPort: '',
            node: '',
            lane: '',
            keepSynced: false,
        };
        this.parentElem = parentElement;
        this.layoutDataIsDirty = false;
        this.renderedElementCache = {};
        this.swimDataLink = null;
    }
    LayoutRenderView.prototype.setLayoutDefinition = function (newDataDefinition) {
        this.layoutDefinition = newDataDefinition;
        if (!this.layoutDefinition) {
            return false;
        }
        if (this.layoutDefinition.width) {
            this.setLayoutWidth(this.layoutDefinition.width);
        }
        if (this.layoutDefinition.height) {
            this.setLayoutHeight(this.layoutDefinition.height);
        }
        if (this.layoutDefinition.title) {
            this.setLayoutTitle(this.layoutDefinition.title);
        }
        this.setLayoutElements(this.layoutDefinition.layoutElements);
        if (this.layoutDefinition.hostUrl) {
            this.swimDataConfig.hostUrl = this.layoutDefinition.hostUrl;
        }
        if (this.layoutDefinition.hostPort) {
            this.swimDataConfig.hostPort = this.layoutDefinition.hostPort;
        }
        if (this.layoutDefinition.node) {
            this.swimDataConfig.node = this.layoutDefinition.node;
        }
        if (this.layoutDefinition.lane) {
            this.swimDataConfig.lane = this.layoutDefinition.lane;
        }
        if (this.layoutDefinition.keepSynced) {
            this.swimDataConfig.keepSynced = this.layoutDefinition.keepSynced;
        }
        if (this.layoutDefinition.renderType) {
            this.setLayoutRenderType(this.layoutDefinition.renderType || 'json');
        }
        return true;
    };
    LayoutRenderView.prototype.openSwimDataLink = function () {
        this.swimDataConfig.didUpdate = this.handleSwimDataUpdate.bind(this);
        console.error('dataconfig', this.swimDataConfig);
        this.swimDataLink = Utils.openSwimMapLink(this.swimDataConfig);
    };
    LayoutRenderView.prototype.handleSwimDataUpdate = function () {
        console.error('render sync', this.swimDataLink);
        if (this.swimDataLink) {
            console.error(this.swimDataLink.get());
            this.setSwimData(this.swimDataLink.get());
        }
    };
    LayoutRenderView.prototype.getLayoutDefinition = function () {
        return this.layoutDefinition;
    };
    LayoutRenderView.prototype.setLayoutTitle = function (newTitle) {
        this.layoutDefinition.title = newTitle;
        this.layoutTitle = this.layoutDefinition.title;
    };
    LayoutRenderView.prototype.getLayoutTitle = function () {
        return this.layoutTitle || 'No Title';
    };
    LayoutRenderView.prototype.setLayoutWidth = function (newWidth) {
        if (newWidth !== this.layoutDefinition.width) {
            this.layoutDefinition.width = newWidth;
        }
        if (this.container) {
            this.container.width(this.layoutDefinition.width);
        }
    };
    LayoutRenderView.prototype.setLayoutHeight = function (newHeight) {
        if (newHeight !== this.layoutDefinition.height) {
            this.layoutDefinition.height = newHeight;
        }
        if (this.container) {
            this.container.height(this.layoutDefinition.height);
        }
    };
    LayoutRenderView.prototype.setLayoutBackground = function (newColor) {
        if (newColor !== this.layoutDefinition.backgroundColor) {
            this.layoutDefinition.backgroundColor = newColor;
        }
        if (this.container) {
            this.container.backgroundColor(this.layoutDefinition.backgroundColor);
        }
    };
    LayoutRenderView.prototype.setLayoutDisplayType = function (newType) {
        if (newType !== this.layoutDefinition.display) {
            this.layoutDefinition.display = newType;
        }
        if (this.container) {
            this.container.display(this.layoutDefinition.display);
        }
    };
    LayoutRenderView.prototype.setLayoutFlexType = function (newType) {
        if (newType !== this.layoutDefinition.flexDirection) {
            this.layoutDefinition.flexDirection = newType;
        }
    };
    LayoutRenderView.prototype.setLayoutElements = function (miniBlockList) {
        this.layoutElements = miniBlockList;
    };
    LayoutRenderView.prototype.setLayoutRenderType = function (newType) {
        if (newType !== this.layoutDefinition.renderType) {
            this.layoutDefinition.renderType = newType;
            console.info('RE_RENDER THE LAYOUT HERE!!!!');
            if (newType === 'recon') {
                this.buildReconLayout();
            }
            else {
                this.buildJsonLayout();
            }
        }
    };
    LayoutRenderView.prototype.setSwimData = function (newDataset) {
    };
    LayoutRenderView.prototype.setSwimDataModel = function (newModel) {
    };
    LayoutRenderView.prototype.buildJsonLayout = function () {
        console.info('build json layout');
        if (!this.layoutDefinition) {
            return;
        }
        console.info('build json layout');
        this.container = HtmlView.create('div')
            .width(this.layoutDefinition.width || '100%')
            .height(this.layoutDefinition.height || '100%')
            .backgroundColor(this.layoutDefinition.backgroundColor || 'transparent')
            .display(this.layoutDefinition.display)
            .flexDirection(this.layoutDefinition.flexDirection)
            .position('relative');
        this.container.node.innerHTML = "";
        this.parentElem.appendChild(this.container.node);
        if (this.layoutElements && this.layoutElements.length > 0) {
            for (var _i = 0, _a = this.layoutElements; _i < _a.length; _i++) {
                var blockData = _a[_i];
                this.renderLayoutElement(blockData);
            }
        }
    };
    LayoutRenderView.prototype.buildReconLayout = function () {
        console.info('build recon layout');
        if (!this.layoutDefinition) {
            return;
        }
        this.container = HtmlView.create('script')
            .type('script/recon');
        this.container.node.innerHTML = "";
        this.parentElem.appendChild(this.container.node);
    };
    LayoutRenderView.prototype.destroyLayout = function () {
        if (this.container) {
            for (var index in this.renderedElementCache) {
                this.renderedElementCache[index].remove();
                delete this.renderedElementCache[index];
            }
            this.renderedElementCache = [];
            this.container.remove();
            this.container.removeAll();
        }
    };
    LayoutRenderView.prototype.renderLayoutElement = function (elementData) {
        var main = this.createHtmlElement(elementData);
        if (this.container) {
            this.container.node.appendChild(main.node);
        }
    };
    LayoutRenderView.prototype.cacheNewElement = function (elementId, newElement) {
        this.renderedElementCache[elementId] = newElement;
    };
    LayoutRenderView.prototype.getCachedElement = function (elementId) {
        return this.renderedElementCache[elementId];
    };
    LayoutRenderView.prototype.getLayoutElements = function () {
        return this.layoutElements;
    };
    LayoutRenderView.prototype.createHtmlElement = function (elementData) {
        var main = HtmlView.create(elementData.type);
        if (elementData.type === 'svg') {
            main = SvgView.create('svg')
                .width(elementData.width)
                .height(elementData.height)
                .viewBox("0 0 " + elementData.width + " " + elementData.height);
        }
        if (!elementData.id) {
            elementData.id = Utils.newGuid();
        }
        main.elemId(elementData.id);
        if (elementData.width && elementData.type !== 'svg') {
            main.width(elementData.width);
        }
        if (elementData.height && elementData.type !== 'svg') {
            main.height(elementData.height);
        }
        if (elementData.content) {
            main.text(elementData.content);
        }
        if (elementData.swimAttributes) {
            for (var _i = 0, _a = Object.keys(elementData.swimAttributes); _i < _a.length; _i++) {
                var attributeKey = _a[_i];
                if (typeof main[attributeKey] === 'function') {
                    main[attributeKey](elementData.swimAttributes[attributeKey]);
                }
                else {
                    main.node.setAttribute(attributeKey, elementData.swimAttributes[attributeKey]);
                }
            }
        }
        if (elementData.htmlAttributes) {
            for (var _b = 0, _c = Object.keys(elementData.htmlAttributes); _b < _c.length; _b++) {
                var attributeKey = _c[_b];
                if (typeof elementData.htmlAttributes[attributeKey] === 'function') {
                    main.node[attributeKey] = elementData.htmlAttributes[attributeKey];
                }
                else if (attributeKey === 'path') {
                    main.append('path').d(elementData.htmlAttributes[attributeKey]);
                }
                else if (attributeKey === 'polygon') {
                    main.append('polygon')
                        .points(elementData.htmlAttributes[attributeKey]);
                }
                else {
                    main.node.setAttribute(attributeKey, elementData.htmlAttributes[attributeKey]);
                }
            }
        }
        if (elementData.styleAttributes) {
            var newStyleStr = '';
            for (var _d = 0, _e = Object.keys(elementData.styleAttributes); _d < _e.length; _d++) {
                var attributeKey = _e[_d];
                newStyleStr += attributeKey + ": " + elementData.styleAttributes[attributeKey] + "; ";
            }
            main.node.setAttribute('style', newStyleStr);
        }
        if (elementData.children && elementData.children.length > 0) {
            for (var _f = 0, _g = elementData.children; _f < _g.length; _f++) {
                var child = _g[_f];
                var childElement = this.createHtmlElement(child);
                main.append(childElement);
            }
        }
        this.cacheNewElement(elementData.id, main);
        return main;
    };
    return LayoutRenderView;
}());

var LayoutDataHandler = (function () {
    function LayoutDataHandler() {
    }
    LayoutDataHandler.getCachedLayout = function (layoutDataLink, layoutId) {
        var returnLayoutData = layoutDataLink.get(layoutId);
        if (!returnLayoutData) {
            layoutDataLink.set(layoutId, this.getLayout(layoutId));
            returnLayoutData = layoutDataLink.get(layoutId);
        }
        return returnLayoutData;
    };
    LayoutDataHandler.getLayout = function (layoutId) {
        return this.layoutList[layoutId];
    };
    LayoutDataHandler.getLayoutList = function () {
        return Object.keys(this.layoutList);
    };
    LayoutDataHandler.layoutList = {
        'addAttributeForm': { "title": "New Add Attr Form", "style": null, "width": "100%", "height": "100%", "backgroundColor": "transparent", "display": "flex", "flexDirection": "column", "layoutElements": [{ "type": "div", "swimAttributes": { "width": "100%" }, "id": "a199175b", "styleAttributes": { "display": "flex", "flex-direction": "column", "margin": "15px" }, "children": [{ "type": "h2", "swimAttributes": { "width": "100%" }, "id": "fc14565c", "content": "Add Attribute to Element", "styleAttributes": { "color": "black", "margin": "10px 0 0 0" } }, { "type": "h3", "swimAttributes": {}, "id": "353ec5b7", "content": "error message", "htmlAttributes": {}, "styleAttributes": { "color": "red" } }, { "type": "div", "swimAttributes": {}, "id": "ddb022da", "content": "", "htmlAttributes": {}, "styleAttributes": { "display": "flex", "flex-direction": "row", "width": "95%", "padding-bottom": "10px", "margin": "0px auto" }, "children": [{ "type": "h3", "swimAttributes": { "width": "100%" }, "styleAttributes": { "flex-grow": 1, "text-align": "right", "width": "25%", "padding-right": "5px", "color": "black" }, "id": "2c102917", "content": "Attribute Name" }, { "type": "input", "swimAttributes": { "width": "100%" }, "styleAttributes": { "flex-grow": 1, "width": "75%", "font-size": "27px", "background-color": "rgba(155,155,155,0.4)", "border": "solid 1px rgba(45,45,45,0.4)", "padding-left": "5px" }, "id": "e299d99c", "htmlAttributes": { "type": "text" } }] }, { "type": "div", "swimAttributes": {}, "id": "ddb022db", "content": "", "htmlAttributes": {}, "styleAttributes": { "display": "flex", "flex-direction": "row", "width": "95%", "margin": "0px auto" }, "children": [{ "type": "h3", "swimAttributes": { "width": "100%" }, "styleAttributes": { "flex-grow": 1, "text-align": "right", "width": "25%", "padding-right": "5px", "color": "black" }, "id": "88cc7f14", "content": "Attribute Value" }, { "type": "input", "swimAttributes": { "width": "100%" }, "styleAttributes": { "flex-grow": 1, "width": "75%", "font-size": "27px", "background-color": "rgba(155,155,155,0.4)", "border": "solid 1px rgba(45,45,45,0.4)", "padding-left": "5px" }, "id": "01fa2cb7", "htmlAttributes": { "type": "text" } }] }, { "type": "div", "swimAttributes": { "width": "100%", "height": "100px" }, "id": "b6fb0f93", "children": [{ "type": "input", "swimAttributes": {}, "id": "917495b7", "content": "Add", "styleAttributes": { "flex-grow": "1", "font-size": "27px", "margin": "20px", "padding": "20px 0", "background-color": "rgb(43,43,53)", "border": "0", "color": "white", "border-radius": "5px" }, "htmlAttributes": { "type": "button", "value": "Add" } }, { "type": "input", "swimAttributes": {}, "id": "0e315fca", "content": "Cancel", "styleAttributes": { "font-size": "27px", "flex-grow": "1", "margin": "20px", "padding": "20px 0", "background-color": "rgb(43,43,53)", "color": "white", "border": "0px", "border-radius": "5px" }, "htmlAttributes": { "type": "button", "value": "Cancel" } }], "styleAttributes": { "display": "flex", "flex-direction": "row" } }] }], "id": "6693a2c9" },
        'loadJsonDialog': { "title": "Load Layout", "style": null, "width": "100%", "height": "100%", "backgroundColor": "transparent", "display": "flex", "flexDirection": "column", "layoutElements": [{ "type": "div", "swimAttributes": { "width": "100%" }, "id": "a199175b", "styleAttributes": { "display": "flex", "flex-direction": "column", "margin": "15px" }, "children": [{ "type": "h2", "swimAttributes": { "width": "100%" }, "id": "fc14565c", "content": "Load Card Layout", "styleAttributes": { "color": "black", "margin": "10px 0 0 0" } }, { "type": "h3", "swimAttributes": {}, "id": "353ec5b7", "content": "error message", "htmlAttributes": {}, "styleAttributes": { "color": "red" } }, { "type": "textarea", "swimAttributes": {}, "id": "ddb022da", "content": "Enter Layout JSON", "htmlAttributes": { "cols": "60", "rows": "15" }, "styleAttributes": { "border": "solid 3px rgba(100,100,100, 0.3)", "border-radius": "10px" } }, { "type": "div", "swimAttributes": { "width": "100%", "height": "100px" }, "id": "b6fb0f93", "children": [{ "type": "button", "swimAttributes": {}, "id": "3fcd7fab", "content": "Load", "styleAttributes": { "flex-grow": "1", "font-size": "27px", "margin": "20px", "padding": "20px 0", "background-color": "rgb(43,43,53)", "border": "0", "color": "white", "border-radius": "5px" } }, { "type": "button", "swimAttributes": {}, "id": "0e315fca", "content": "Cancel", "styleAttributes": { "font-size": "27px", "flex-grow": "1", "margin": "20px", "padding": "20px 0", "background-color": "rgb(43,43,53)", "color": "white", "border": "0px", "border-radius": "5px" } }], "styleAttributes": { "display": "flex", "flex-direction": "row" } }] }] },
        'loadListDialog': { "title": "Load Layout", "style": null, "width": "100%", "height": "100%", "backgroundColor": "transparent", "display": "flex", "flexDirection": "column", "layoutElements": [{ "type": "div", "swimAttributes": { "width": "100%" }, "id": "a199175b", "styleAttributes": { "display": "flex", "flex-direction": "column", "margin": "15px" }, "children": [{ "type": "h2", "swimAttributes": { "width": "100%" }, "id": "fc14565c", "content": "Load Card Layout", "styleAttributes": { "color": "black", "margin": "10px 0 0 0" } }, { "type": "h3", "swimAttributes": {}, "id": "353ec5b7", "content": "error message", "htmlAttributes": {}, "styleAttributes": { "color": "red" } }, { "type": "div", "swimAttributes": {}, "id": "ddb022da", "content": "<list goes here>", "htmlAttributes": {}, "styleAttributes": { "border": "solid 3px rgba(100,100,100, 0.3)", "border-radius": "10px", "height": "270px", "overflow": "auto" } }, { "type": "div", "swimAttributes": { "width": "100%", "height": "100px" }, "id": "b6fb0f93", "children": [{ "type": "button", "swimAttributes": {}, "id": "0e315fca", "content": "Cancel", "styleAttributes": { "font-size": "27px", "flex-grow": "1", "margin": "20px", "padding": "20px 0", "background-color": "rgb(43,43,53)", "color": "white", "border": "0px", "border-radius": "5px" } }], "styleAttributes": { "display": "flex", "flex-direction": "row" } }] }] },
        'mainLayoutForm': { "title": "Layout Form", "width": "260px", "height": "608px", "backgroundColor": "rgb(53,53,53)", "display": "flex", "flexDirection": "column", "layoutElements": [{ "type": "h3", "id": "ee19a133", "content": "Layout Info", "styleAttributes": { "margin": "0 0 18px 0", "padding": "12px 0px 4px 8px", "background-color": "rgb(42,42,42)", "border-top": "solid 1px rgb(42,42,42)", "border-bottom": "solid 1px rgba(255,255,255,0.4)", "font-size": "22px" }, "children": [] }, { "type": "form", "swimAttributes": {}, "id": "1090afd2", "content": "", "children": [{ "type": "div", "swimAttributes": {}, "content": "Layout Title", "styleAttributes": { "font-size": "18px" }, "id": "0ac74869" }, { "type": "input", "swimAttributes": { "bind": "{{blockTitleValue}}", "slot": "value" }, "htmlAttributes": { "type": "text" }, "styleAttributes": { "margin": "3px 0 10px 0", "background-color": "rgba(255,255,255,0.1)", "background": "rgba(255,255,255,0.1)", "border": "solid 1px rgba(255,255,255,0.8)", "color": "white", "font-size": "20px", "padding": "3px", "border-radius": "3px", "margin-bottom": "10px", "width": "95%" }, "id": "258f66d4" }, { "type": "div", "swimAttributes": {}, "content": "Layout Width", "styleAttributes": { "font-size": "18px" }, "id": "83fea821" }, { "type": "input", "swimAttributes": { "bind": "{{blockWidthValue}}", "slot": "value" }, "htmlAttributes": { "type": "text" }, "styleAttributes": { "margin": "3px 0 10px 0", "background-color": "rgba(255,255,255,0.1)", "background": "rgba(255,255,255,0.1)", "border": "solid 1px rgba(255,255,255,0.8)", "color": "white", "font-size": "20px", "padding": "3px", "border-radius": "3px", "margin-bottom": "10px", "width": "95%" }, "id": "1056f91e" }, { "type": "div", "swimAttributes": {}, "content": "Layout Height", "styleAttributes": { "font-size": "18px" }, "id": "1707e5cf" }, { "type": "input", "swimAttributes": { "bind": "{{blockHeightValue}}", "slot": "value" }, "htmlAttributes": { "type": "text" }, "styleAttributes": { "margin": "3px 0 10px 0", "background-color": "rgba(255,255,255,0.1)", "background": "rgba(255,255,255,0.1)", "border": "solid 1px rgba(255,255,255,0.8)", "color": "white", "font-size": "20px", "padding": "3px", "border-radius": "3px", "margin-bottom": "10px", "width": "95%" }, "id": "e9a054b0" }, { "type": "div", "swimAttributes": {}, "content": "Background Color", "styleAttributes": { "font-size": "18px" }, "id": "63568108" }, { "type": "input", "swimAttributes": { "bind": "{{blockBgColorValue}}", "slot": "value" }, "htmlAttributes": { "type": "text" }, "styleAttributes": { "margin": "3px 0 10px 0", "background-color": "rgba(255,255,255,0.1)", "background": "rgba(255,255,255,0.1)", "border": "solid 1px rgba(255,255,255,0.8)", "color": "white", "font-size": "20px", "padding": "3px", "border-radius": "3px", "margin-bottom": "10px", "width": "95%" }, "id": "bf26f39e" }, { "type": "div", "swimAttributes": {}, "content": "Layout Display Type", "styleAttributes": { "font-size": "18px" }, "id": "a32edb7c" }, { "type": "input", "swimAttributes": { "bind": "{{blockDisplayValue}}", "slot": "value" }, "htmlAttributes": { "type": "text" }, "styleAttributes": { "margin": "3px 0 10px 0", "background-color": "rgba(255,255,255,0.1)", "background": "rgba(255,255,255,0.1)", "border": "solid 1px rgba(255,255,255,0.8)", "color": "white", "font-size": "20px", "padding": "3px", "border-radius": "3px", "margin-bottom": "10px", "width": "95%" }, "id": "ea01c64a" }, { "type": "div", "swimAttributes": {}, "content": "Layout Flex Type", "styleAttributes": { "font-size": "18px" }, "id": "8bf2625c" }, { "type": "input", "swimAttributes": { "bind": "{{blockFlexType}}", "slot": "value" }, "htmlAttributes": { "type": "text" }, "styleAttributes": { "margin": "3px 0 10px 0", "background-color": "rgba(255,255,255,0.1)", "background": "rgba(255,255,255,0.1)", "border": "solid 1px rgba(255,255,255,0.8)", "color": "white", "font-size": "20px", "padding": "3px", "border-radius": "3px", "margin-bottom": "10px", "width": "95%" }, "id": "9e5c85a6" }, { "type": "div", "swimAttributes": {}, "styleAttributes": { "font-size": "18px" }, "id": "d23899aa", "content": "Render Type (json||recon)" }, { "type": "input", "swimAttributes": { "width": "100%" }, "styleAttributes": { "margin": "3px 0 10px 0", "background-color": "rgba(255,255,255,0.1)", "border": "solid 1px rgba(255,255,255,0.8)", "color": "white", "font-size": "20px", "padding": "3px", "border-radius": "3px", "margin-bottom": "10px", "width": "95%" }, "id": "933f721d", "htmlAttributes": { "type": "text" } }], "styleAttributes": { "padding": "10px" } }, { "type": "h3", "swimAttributes": {}, "id": "7aada818", "content": "Layout Elements", "styleAttributes": { "margin": "0 0 18px 0", "padding": "12px 0 4px 8px", "background-color": "rgb(42,42,42)", "border-top": "solid 1px rgba(0,0,0,0.8)", "border-bottom": "solid 1px rgba(255,255,255,0.4)", "position": "relative", "font-size": "22px" }, "children": [{ "type": "div", "swimAttributes": { "width": "100%", "height": "100px" }, "id": "27e250a2", "content": "+", "styleAttributes": { "width": "28px", "height": "28px", "position": "absolute", "right": "3px", "top": "5px", "border-radius": "50%", "cursor": "pointer", "background-color": "rgba(255,255,255,0.3)", "text-align": "center", "line-height": "28px", "border": "solid 1px rgba(255,255,255,0.8)" }, "htmlAttributes": {} }] }], "keepSynced": false, "renderType": "json" },
        'mainHeaderMenus': { "title": "Editor Header Menus", "width": "100%", "height": "45px", "backgroundColor": "rgba(53,53,53,1)", "display": "flex", "flexDirection": "row", "layoutElements": [{ "type": "div", "swimAttributes": {}, "styleAttributes": {}, "id": "FileMenuContainer", "content": "", "children": [{ "type": "button", "swimAttributes": {}, "styleAttributes": {}, "id": "e2e1d9a7", "content": "File", "children": {}, "htmlAttributes": { "class": "dropbtn" } }, { "type": "div", "swimAttributes": {}, "styleAttributes": {}, "id": "26bd9978", "htmlAttributes": { "class": "dropdown-content" }, "children": [{ "type": "a", "swimAttributes": {}, "styleAttributes": {}, "id": "e5bae29c", "content": "New  Layout", "htmlAttributes": { "href": "javascript:pageController.newLayout()" } }, { "type": "a", "swimAttributes": {}, "styleAttributes": {}, "id": "933364fc", "content": "Load Layout", "htmlAttributes": { "href": "javascript:pageController.loadLayoutFromService()" } }, { "type": "a", "swimAttributes": {}, "styleAttributes": {}, "id": "d451499b", "content": "Save Layout", "htmlAttributes": { "href": "javascript:pageController.saveLayout()" } }, { "type": "a", "swimAttributes": {}, "styleAttributes": {}, "id": "adf15cb1", "content": "Load Template", "htmlAttributes": { "href": "javascript:pageController.loadLayoutFromList()" } }, { "type": "a", "swimAttributes": {}, "styleAttributes": {}, "id": "e328a3d2", "content": "Load from JSON", "htmlAttributes": { "href": "javascript:pageController.loadLayoutFromJson()" } }, { "type": "a", "swimAttributes": {}, "styleAttributes": {}, "id": "ba942fc2", "content": "Output JSON", "htmlAttributes": { "href": "javascript:pageController.debugLayout()" } }] }], "htmlAttributes": { "class": "dropdown" } }, { "type": "div", "swimAttributes": {}, "styleAttributes": {}, "id": "a997a04b", "children": [{ "type": "button", "swimAttributes": {}, "styleAttributes": {}, "id": "b4b0adbd", "content": "Link Config", "htmlAttributes": { "class": "dropbtn" } }, { "type": "div", "swimAttributes": {}, "styleAttributes": {}, "id": "a8ca9f23", "htmlAttributes": { "class": "dropdown-content" }, "children": [{ "type": "a", "swimAttributes": {}, "styleAttributes": {}, "id": "36a36814", "content": "Quilt Link Config", "htmlAttributes": { "href": "javascript:pageController.showQuiltConfigDialog()" } }, { "type": "a", "swimAttributes": {}, "styleAttributes": {}, "id": "c49ea016", "content": "Swim Link Config", "htmlAttributes": { "href": "javascript:pageController.showLinkConfigDialog()" } }, { "type": "a", "swimAttributes": {}, "styleAttributes": {}, "id": "faf0659b", "content": "Flush Saved Templates", "htmlAttributes": { "href": "javascript:pageController.flushSavedTemplates()" } }] }], "htmlAttributes": { "class": "dropdown" } }, { "type": "div", "swimAttributes": { "width": "100%" }, "styleAttributes": { "flex-grow": 1, "color": "white", "line-height": "42px", "text-align": "right" }, "id": "swimHostUrlLabel", "content": "" }, { "type": "div", "swimAttributes": { "width": "100%" }, "styleAttributes": { "flex-grow": 1, "color": "white", "line-height": "42px" }, "id": "452d2af0" }], "keepSynced": false },
        'dataLinkConfigForm': { "title": "Data Link Config Form", "width": "640px", "height": "480px", "backgroundColor": "transparent", "display": "flex", "flexDirection": "column", "layoutElements": [{ "type": "div", "swimAttributes": { "width": "100%" }, "id": "a199175b", "styleAttributes": { "display": "flex", "flex-direction": "column", "margin": "0 15px", "height": "75%", "flex-grow": "1" }, "children": [{ "type": "h2", "swimAttributes": { "width": "100%" }, "id": "fc14565c", "content": "link config", "styleAttributes": { "color": "black", "margin": "10px 0 0 0" } }, { "type": "h3", "swimAttributes": {}, "id": "353ec5b7", "content": "error message", "htmlAttributes": {}, "styleAttributes": { "color": "red" } }, { "type": "div", "swimAttributes": {}, "id": "ddb022da", "content": "", "htmlAttributes": {}, "styleAttributes": { "display": "flex", "flex-direction": "row", "width": "95%", "padding-bottom": "10px", "margin": "0px auto" }, "children": [{ "type": "h3", "swimAttributes": { "width": "100%" }, "styleAttributes": { "flex-grow": 1, "text-align": "right", "width": "25%", "padding-right": "5px", "color": "black" }, "content": "Host", "id": "140f3854" }, { "type": "input", "swimAttributes": { "width": "100%" }, "styleAttributes": { "flex-grow": 1, "width": "75%", "font-size": "27px", "background-color": "rgba(155,155,155,0.4)", "border": "solid 1px rgba(45,45,45,0.4)", "padding-left": "5px" }, "htmlAttributes": { "type": "text" }, "id": "96af4f65" }] }, { "type": "div", "swimAttributes": {}, "id": "ddb022da", "content": "", "htmlAttributes": {}, "styleAttributes": { "display": "flex", "flex-direction": "row", "width": "95%", "padding-bottom": "10px", "margin": "0px auto" }, "children": [{ "type": "h3", "swimAttributes": { "width": "100%" }, "styleAttributes": { "flex-grow": 1, "text-align": "right", "width": "25%", "padding-right": "5px", "color": "black" }, "id": "2c102917", "content": "Node" }, { "type": "input", "swimAttributes": { "width": "100%" }, "styleAttributes": { "flex-grow": 1, "width": "75%", "font-size": "27px", "background-color": "rgba(155,155,155,0.4)", "border": "solid 1px rgba(45,45,45,0.4)", "padding-left": "5px" }, "id": "e299d99c", "htmlAttributes": { "type": "text" } }] }, { "type": "div", "swimAttributes": {}, "id": "ddb022db", "content": "", "htmlAttributes": {}, "styleAttributes": { "display": "flex", "flex-direction": "row", "width": "95%", "margin": "0px auto", "padding-bottom": "10px" }, "children": [{ "type": "h3", "swimAttributes": { "width": "100%" }, "styleAttributes": { "flex-grow": 1, "text-align": "right", "width": "25%", "padding-right": "5px", "color": "black" }, "id": "88cc7f14", "content": "Lane" }, { "type": "input", "swimAttributes": { "width": "100%" }, "styleAttributes": { "flex-grow": 1, "width": "75%", "font-size": "27px", "background-color": "rgba(155,155,155,0.4)", "border": "solid 1px rgba(45,45,45,0.4)", "padding-left": "5px" }, "id": "01fa2cb7", "htmlAttributes": { "type": "text" } }] }, { "type": "div", "swimAttributes": {}, "content": "", "htmlAttributes": {}, "styleAttributes": { "display": "flex", "flex-direction": "row", "width": "95%", "margin": "0px auto" }, "children": [{ "type": "h3", "swimAttributes": { "width": "100%" }, "styleAttributes": { "flex-grow": 1, "text-align": "right", "width": "25%", "padding-right": "5px", "color": "black" }, "content": "Keep Synced", "id": "22c76974" }, { "type": "input", "swimAttributes": { "width": "100%" }, "styleAttributes": { "flex-grow": 1, "width": "75%", "font-size": "27px", "background-color": "rgba(155,155,155,0.4)", "border": "solid 1px rgba(45,45,45,0.4)", "padding-left": "5px" }, "htmlAttributes": { "type": "text" }, "id": "faf17c1c" }], "id": "a7000b31" }, { "type": "div", "swimAttributes": { "width": "100%", "height": "110px" }, "id": "b6fb0f93", "children": [{ "type": "input", "swimAttributes": {}, "id": "917495b7", "content": "", "styleAttributes": { "flex-grow": "1", "font-size": "27px", "margin": "20px", "padding": "20px 0", "background-color": "rgb(43,43,53)", "border": "0", "color": "white", "border-radius": "5px" }, "htmlAttributes": { "type": "button", "value": "Connect" } }, { "type": "input", "swimAttributes": {}, "id": "0e315fca", "content": "Cancel", "styleAttributes": { "font-size": "27px", "flex-grow": "1", "margin": "20px", "padding": "20px 0", "background-color": "rgb(43,43,53)", "color": "white", "border": "0px", "border-radius": "5px" }, "htmlAttributes": { "type": "button", "value": "Done" } }], "styleAttributes": { "display": "flex", "flex-direction": "row" } }] }], "hostUrl": null, "hostPort": null, "node": null, "lane": null },
        'quiltConfigForm': { "title": "Quilt Config Form", "width": "640px", "height": "480px", "backgroundColor": "transparent", "display": "flex", "flexDirection": "column", "layoutElements": [{ "type": "div", "swimAttributes": { "width": "100%" }, "id": "a199175b", "styleAttributes": { "display": "flex", "flex-direction": "column", "margin": "0 15px", "height": "75%", "flex-grow": "1" }, "children": [{ "type": "h2", "swimAttributes": { "width": "100%" }, "id": "fc14565c", "content": "link config", "styleAttributes": { "color": "black", "margin": "10px 0 0 0" } }, { "type": "h3", "swimAttributes": {}, "id": "353ec5b7", "content": "error message", "htmlAttributes": {}, "styleAttributes": { "color": "red" } }, { "type": "div", "swimAttributes": {}, "id": "ddb022da", "content": "", "htmlAttributes": {}, "styleAttributes": { "display": "flex", "flex-direction": "row", "width": "95%", "padding-bottom": "10px", "margin": "0px auto" }, "children": [{ "type": "h3", "swimAttributes": { "width": "100%" }, "styleAttributes": { "flex-grow": 1, "text-align": "right", "width": "25%", "padding-right": "5px", "color": "black" }, "content": "Host", "id": "140f3854" }, { "type": "input", "swimAttributes": { "width": "100%" }, "styleAttributes": { "flex-grow": 1, "width": "75%", "font-size": "27px", "background-color": "rgba(155,155,155,0.4)", "border": "solid 1px rgba(45,45,45,0.4)", "padding-left": "5px" }, "htmlAttributes": { "type": "text" }, "id": "96af4f65" }] }, { "type": "div", "swimAttributes": {}, "id": "ddb022da", "content": "", "htmlAttributes": {}, "styleAttributes": { "display": "none", "flex-direction": "row", "width": "95%", "padding-bottom": "10px", "margin": "0px auto" }, "children": [{ "type": "h3", "swimAttributes": { "width": "100%" }, "styleAttributes": { "flex-grow": 1, "text-align": "right", "width": "25%", "padding-right": "5px", "color": "black" }, "id": "2c102917", "content": "Node" }, { "type": "input", "swimAttributes": { "width": "100%" }, "styleAttributes": { "flex-grow": 1, "width": "75%", "font-size": "27px", "background-color": "rgba(155,155,155,0.4)", "border": "solid 1px rgba(45,45,45,0.4)", "padding-left": "5px" }, "id": "e299d99c", "htmlAttributes": { "type": "text" } }] }, { "type": "div", "swimAttributes": {}, "id": "ddb022db", "content": "", "htmlAttributes": {}, "styleAttributes": { "display": "flex", "flex-direction": "row", "width": "95%", "margin": "0px auto", "padding-bottom": "10px" }, "children": [{ "type": "h3", "swimAttributes": { "width": "100%" }, "styleAttributes": { "flex-grow": 1, "text-align": "right", "width": "25%", "padding-right": "5px", "color": "black" }, "id": "88cc7f14", "content": "Quilt ID" }, { "type": "input", "swimAttributes": { "width": "100%" }, "styleAttributes": { "flex-grow": 1, "width": "75%", "font-size": "27px", "background-color": "rgba(155,155,155,0.4)", "border": "solid 1px rgba(45,45,45,0.4)", "padding-left": "5px" }, "id": "01fa2cb7", "htmlAttributes": { "type": "text" } }] }, { "type": "div", "swimAttributes": { "width": "100%", "height": "110px" }, "id": "b6fb0f93", "children": [{ "type": "input", "swimAttributes": {}, "id": "917495b7", "content": "", "styleAttributes": { "flex-grow": "1", "font-size": "27px", "margin": "20px", "padding": "20px 0", "background-color": "rgb(43,43,53)", "border": "0", "color": "white", "border-radius": "5px" }, "htmlAttributes": { "type": "button", "value": "Update" } }, { "type": "input", "swimAttributes": {}, "id": "0e315fca", "content": "Cancel", "styleAttributes": { "font-size": "27px", "flex-grow": "1", "margin": "20px", "padding": "20px 0", "background-color": "rgb(43,43,53)", "color": "white", "border": "0px", "border-radius": "5px" }, "htmlAttributes": { "type": "button", "value": "Cancel" } }], "styleAttributes": { "display": "flex", "flex-direction": "row" } }] }], "hostUrl": null, "hostPort": null, "node": null, "lane": null, "keepSynced": false },
        'flexTestLayout': { "title": "flex test layout", "style": null, "width": "100%", "height": "100%", "backgroundColor": "transparent", "display": "flex", "flexDirection": "column", "layoutElements": [{ "type": "div", "swimAttributes": {}, "id": "9d2fe39b", "styleAttributes": { "background-color": "red", "width": "200px", "height": "200px", "margin": "5px" } }, { "type": "div", "swimAttributes": { "width": "100%", "height": "100px" }, "id": "08734296", "styleAttributes": { "width": "200px", "height": "200px", "background-color": "blue", "margin": "5px" } }] },
        '@canary': { "title": "@Canary Card Layout", "width": "100%", "height": "100%", "backgroundColor": "transparent", "display": "flex", "flexDirection": "row", "layoutElements": [{ "type": "div", "swimAttributes": { "width": "100%" }, "styleAttributes": { "flex-grow": 1 }, "id": "88181e51", "children": [{ "type": "swim-canary-card", "swimAttributes": { "width": "100%", "header": false }, "styleAttributes": { "flex-grow": 1, "width": "100%", "height": "100%" }, "id": "37a2b719", "content": "" }] }], "hostUrl": null, "hostPort": null, "node": null, "lane": null, "keepSynced": false },
        '@chart': { "title": "@Chart Layout", "width": "100%", "height": "100%", "backgroundColor": "transparent", "display": "flex", "flexDirection": "column", "layoutElements": [{ "type": "div", "swimAttributes": { "width": "100%" }, "styleAttributes": { "flex-grow": 1, "display": "flex", "height": "90%" }, "id": "52716243", "children": [{ "type": "swim-time-series", "swimAttributes": { "width": "100%", "height": "100%", "gutter-left": "60px", "gutter-bottom": "20px", "header": false }, "styleAttributes": { "flex-grow": 1 }, "id": "584d0bee" }] }], "hostUrl": null, "hostPort": null, "node": null, "lane": null, "keepSynced": false },
        '@gauge': { "title": "@Gauge Card", "width": "100%", "height": "100%", "backgroundColor": "transparent", "display": "flex", "flexDirection": "column", "layoutElements": [{ "type": "div", "swimAttributes": {}, "styleAttributes": { "flex-grow": "1", "display": "flex", "padding": "0px", "margin-left": "5%", "margin-right": "5%", "margin-top": "5%", "margin-bottom": "5%" }, "id": "78bcaa56", "content": "", "children": [{ "type": "swim-gauge", "swimAttributes": { "width": "100%", "meter": "{{powerBattery}}", "height": "100%", "dial-corner": "10", "header": false }, "styleAttributes": { "flex-grow": 1 }, "id": "cd9db6a1", "content": "" }] }], "hostUrl": "", "hostPort": "", "node": "", "lane": "", "keepSynced": false },
        '@pie': { "title": "@Pie chart ", "width": "100%", "height": "100%", "backgroundColor": "transparent", "display": "flex", "flexDirection": "column", "layoutElements": [{ "type": "div", "swimAttributes": {}, "styleAttributes": { "flex-grow": "1", "display": "flex", "padding": "0px", "margin-left": "0%", "margin-right": "0%", "margin-top": "0%", "margin-bottom": "0%" }, "id": "78bcaa56", "content": "", "children": [{ "type": "swim-pie", "swimAttributes": { "inner-radius": "40", "outer-radius": "160", "tick-radius": "180", "tick-length": "240", "tick-color": "#667095", "label-radius": "135", "pad-angle": "0", "label-size": "10", "label-color": "#ffffff", "title-size": "14", "title-color": "#7883AA", "header": false }, "styleAttributes": { "flex-grow": "1" }, "id": "ab79f9fc", "content": "" }] }], "hostUrl": null, "hostPort": null, "node": null, "lane": null, "keepSynced": false },
        '@donut': { "title": "@Donut pie chart ", "width": "100%", "height": "100%", "backgroundColor": "transparent", "display": "flex", "flexDirection": "column", "layoutElements": [{ "type": "div", "swimAttributes": {}, "styleAttributes": { "flex-grow": "1", "display": "flex", "padding": "0px", "margin-left": "0%", "margin-right": "0%", "margin-top": "0%", "margin-bottom": "0%" }, "id": "78bcaa56", "content": "", "children": [{ "type": "swim-pie", "swimAttributes": { "inner-radius": "40", "outer-radius": "160", "tick-radius": "180", "tick-length": "240", "tick-color": "#667095", "label-radius": "135", "pad-angle": "0", "label-size": "10", "label-color": "#ffffff", "title-size": "14", "title-color": "#7883AA", "header": false }, "styleAttributes": { "flex-grow": "1" }, "id": "ab79f9fc", "content": "" }] }], "hostUrl": null, "hostPort": null, "node": null, "lane": null, "keepSynced": false },
        '@treemap': { "title": "@Treemap chart", "width": "100%", "height": "100%", "backgroundColor": "transparent", "display": "flex", "flexDirection": "column", "layoutElements": [{ "type": "div", "swimAttributes": { "width": "100%" }, "styleAttributes": { "flex-grow": 1, "display": "flex", "padding": "0px", "margin-left": "2%", "margin-right": "2%", "margin-top": "2%", "margin-bottom": "2%" }, "id": "fead5c64", "content": "", "children": [{ "type": "swim-treemap", "swimAttributes": { "width": "100%" }, "styleAttributes": { "flex-grow": 1 }, "id": "31ed4f1c", "content": "" }] }], "hostUrl": "", "hostPort": "", "node": "", "lane": "", "keepSynced": false },
        'loginForm': { "title": "Login Form", "width": "100%", "height": "100%", "backgroundColor": "transparent", "display": "flex", "flexDirection": "row", "layoutElements": [{ "type": "div", "swimAttributes": {}, "styleAttributes": { "width": "420px", "margin": "40px auto", "height": "400px", "background-color": "rgba(155,155,155,0.2)", "display": "flex", "flex-direction": "column", "border-radius": "5px" }, "id": "7b8c3d21", "children": [{ "type": "h3", "swimAttributes": { "width": "100%" }, "styleAttributes": { "padding": "0px 10px" }, "id": "2cecd57e", "content": "UserName" }, { "type": "input", "swimAttributes": {}, "styleAttributes": { "padding": "10px", "margin": "0px 10px" }, "id": "709b0b18", "htmlAttributes": { "type": "text" } }, { "type": "h3", "swimAttributes": { "width": "100%" }, "styleAttributes": { "padding": "0px 10px" }, "id": "32e98c6a", "content": "Password" }, { "type": "input", "swimAttributes": {}, "styleAttributes": { "margin": "0px 10px", "padding": "10px" }, "id": "3586e072", "content": "", "htmlAttributes": { "type": "text" } }, { "type": "input", "swimAttributes": {}, "styleAttributes": { "margin": "20px", "font-size": "27px" }, "id": "f0bdc8ae", "htmlAttributes": { "type": "button", "value": "Login" } }] }], "hostUrl": "", "hostPort": "", "node": "", "lane": "", "keepSynced": false },
        'cardMainLayout': { "title": "Card Base Layout", "width": "100%", "height": "100%", "backgroundColor": "transparent", "display": "flex", "flexDirection": "row", "layoutElements": [{ "type": "div", "swimAttributes": {}, "styleAttributes": { "flex-grow": 1, "display": "flex", "width": "100%", "height": "100%", "flex-shrink": "0" }, "id": "85b73a7b", "children": [{ "type": "div", "swimAttributes": {}, "styleAttributes": { "flex-grow": 1, "display": "flex", "flex-direction": "column" }, "id": "b6933185", "children": [{ "type": "div", "swimAttributes": {}, "styleAttributes": { "flex-grow": 1, "display": "flex", "height": "5%", "flex-direction": "row" }, "id": "aca40a2a", "content": "", "children": [{ "type": "div", "swimAttributes": {}, "styleAttributes": { "flex-grow": 1, "width": "60%", "display": "flex" }, "id": "5cfbae2e", "content": "", "children": [{ "type": "swim-text", "swimAttributes": { "slot": "title" }, "styleAttributes": { "color": "rgb(78,84,108)", "padding-top": "0.5%", "padding-left": "1.5%" }, "id": "31fb9ec5", "content": "-title-" }], "name": "Title" }, { "type": "div", "swimAttributes": {}, "styleAttributes": { "flex-grow": 1, "display": "flex", "flex-direction": "row-reverse" }, "id": "fbb5cd76", "content": "", "children": [{ "type": "div", "swimAttributes": {}, "styleAttributes": { "color": "rgb(78, 84, 108)", "opacity": "0.5", "padding-top": "0.5%", "padding-right": "2.5%" }, "id": "c41341e7", "content": "ALL SYSTEMS" }], "name": "System Name" }], "name": "Header Row" }, { "type": "div", "swimAttributes": {}, "styleAttributes": { "flex-grow": 1, "height": "95%", "position": "relative" }, "id": "3baa2621", "content": "", "children": [{ "type": "div", "swimAttributes": {}, "styleAttributes": { "display": "flex", "position": "absolute", "top": "0%", "bottom": "0%", "right": "1.8%", "left": "1.8%" }, "id": "cardChartContainer", "name": "chart target" }, { "type": "div", "swimAttributes": {}, "styleAttributes": { "position": "absolute", "top": "0px", "left": "3.8%", "right": "3.8%", "border-top": "solid 1px #529fc1", "display": "none" }, "id": "8e021f2b", "name": "blue top line" }, { "type": "swim-text", "swimAttributes": { "slot": "subtitle" }, "styleAttributes": { "position": "absolute", "left": "3.8%", "top": "1.6%", "opacity": "0" }, "id": "39be1de1", "content": "-subtitle-", "name": "subtitle" }], "name": "Center Row" }, { "type": "div", "swimAttributes": { "width": "100%" }, "styleAttributes": { "flex-grow": 1, "height": "1%" }, "id": "45ab68bf", "content": "", "name": "footer" }], "name": "Padding" }], "name": "Main" }], "hostUrl": "", "hostPort": "", "node": "", "lane": "", "keepSynced": false },
        'modalMainLayout': { "title": "Modal Base Layout", "width": "100%", "height": "100%", "backgroundColor": "transparent", "display": "flex", "flexDirection": "row", "layoutElements": [{ "type": "div", "swimAttributes": {}, "styleAttributes": { "flex-grow": 1, "display": "flex", "width": "100%", "height": "100%", "flex-shrink": "0" }, "id": "db97694a", "children": [{ "type": "div", "swimAttributes": {}, "styleAttributes": { "flex-grow": 1, "display": "flex", "flex-direction": "column" }, "id": "d37b387d", "children": [{ "type": "div", "swimAttributes": {}, "styleAttributes": { "flex-grow": 1, "display": "flex", "height": "10%", "flex-direction": "row" }, "id": "aca40a2a", "content": "", "children": [{ "type": "div", "swimAttributes": {}, "styleAttributes": { "flex-grow": 1, "width": "60%", "display": "flex", "align-items": "center", "margin-left": "3.8%" }, "id": "afd6c1db", "content": "", "children": [{ "type": "swim-text", "swimAttributes": { "slot": "title" }, "styleAttributes": { "font-size": "24px", "color": "rgb(78,84,108)" }, "id": "a82ff7a1", "content": "-title-" }], "name": "Title" }, { "type": "div", "swimAttributes": {}, "styleAttributes": { "flex-grow": 1, "display": "flex", "flex-direction": "row-reverse", "align-items": "center", "margin-right": "3.8%" }, "id": "96480d63", "content": "", "children": [{ "type": "swim-text", "swimAttributes": {}, "styleAttributes": { "color": "rgb(78, 84, 108)", "opacity": "0.5" }, "id": "7f041834", "content": "ALL SYSTEMS" }], "name": "System Name" }], "name": "Header Row" }, { "type": "div", "swimAttributes": {}, "styleAttributes": { "flex-grow": 1, "height": "80%", "position": "relative" }, "id": "f34fd5cd", "content": "", "children": [{ "type": "div", "swimAttributes": {}, "styleAttributes": { "display": "flex", "position": "absolute", "top": "0%", "bottom": "0%", "right": "3.8%", "left": "3.8%" }, "id": "mainChartContainer", "name": "chart target" }, { "type": "div", "swimAttributes": {}, "styleAttributes": { "position": "absolute", "top": "0px", "left": "3.8%", "right": "3.8%", "border-top": "solid 1px #529fc1" }, "id": "34b3d8b3", "name": "blue top line" }, { "type": "swim-text", "swimAttributes": { "slot": "subtitle" }, "styleAttributes": { "position": "absolute", "left": "3.8%", "top": "1.6%", "opacity": "0" }, "id": "80f95769", "content": "-subtitle-", "name": "subtitle" }], "name": "Center Row" }, { "type": "div", "swimAttributes": {}, "styleAttributes": { "flex-grow": "1", "flex-direction": "row", "display": "flex", "position": "relative", "height": "15%" }, "id": "30ab02aa", "content": "", "children": [{ "type": "div", "swimAttributes": {}, "styleAttributes": { "position": "absolute", "top": "0%", "bottom": "0%", "left": "3.8%", "right": "3.8%", "display": "flex" }, "id": "secondChartContainer", "content": "", "children": [{ "type": "swim-time-series", "swimAttributes": { "width": "100%", "gutter-left": "0px", "gutter-bottom": "0px", "header": false, "subheader": false }, "styleAttributes": { "flex-grow": 1 }, "id": "954dfba4" }], "name": "second chart tagget" }], "name": "second chart row" }, { "type": "div", "swimAttributes": { "width": "100%" }, "styleAttributes": { "flex-grow": 1, "height": "5%" }, "id": "10a281f8", "content": "", "name": "footer" }], "name": "Padding" }], "name": "Main" }], "hostUrl": "", "hostPort": "", "node": "", "lane": "", "keepSynced": false },
        'moonOverMountainsLayout': { "title": "Moon Over Mountains Layout", "width": "100%", "height": "100%", "backgroundColor": "transparent", "display": "flex", "flexDirection": "row", "layoutElements": [{ "type": "div", "swimAttributes": {}, "styleAttributes": { "flex-grow": 1, "display": "flex", "width": "100%", "height": "100%", "flex-shrink": "0" }, "id": "db97694a", "children": [{ "type": "div", "swimAttributes": {}, "styleAttributes": { "flex-grow": 1, "display": "flex", "flex-direction": "column" }, "id": "d37b387d", "children": [{ "type": "div", "swimAttributes": {}, "styleAttributes": { "flex-grow": 1, "display": "flex", "height": "10%", "flex-direction": "row" }, "id": "aca40a2a", "content": "", "children": [{ "type": "div", "swimAttributes": {}, "styleAttributes": { "flex-grow": 1, "width": "60%", "display": "flex", "align-items": "center", "margin-left": "3.8%" }, "id": "afd6c1db", "content": "", "children": [{ "type": "swim-text", "swimAttributes": { "slot": "title" }, "styleAttributes": { "font-size": "24px", "color": "rgb(78,84,108)" }, "id": "a82ff7a1", "content": "-title-" }], "name": "Title" }, { "type": "div", "swimAttributes": {}, "styleAttributes": { "flex-grow": 1, "display": "flex", "flex-direction": "row-reverse", "align-items": "center", "margin-right": "3.8%" }, "id": "96480d63", "content": "", "children": [{ "type": "div", "swimAttributes": {}, "styleAttributes": { "color": "rgb(78, 84, 108)", "opacity": "0.5" }, "id": "7f041834", "content": "ALL SYSTEMS" }], "name": "System Name" }], "name": "Header Row" }, { "type": "div", "swimAttributes": {}, "styleAttributes": { "flex-grow": 1, "height": "80%", "position": "relative" }, "id": "f34fd5cd", "content": "", "children": [{ "type": "div", "swimAttributes": {}, "styleAttributes": { "display": "flex", "position": "absolute", "top": "0%", "bottom": "0%", "right": "3.8%", "left": "3.8%" }, "id": "mainChartContainer", "name": "time series target" }, { "type": "div", "swimAttributes": {}, "styleAttributes": { "position": "absolute", "top": "0px", "left": "3.8%", "right": "3.8%", "border-top": "solid 1px #529fc1" }, "id": "34b3d8b3", "name": "blue top line" }, { "type": "swim-text", "swimAttributes": { "slot": "subtitle" }, "styleAttributes": { "position": "absolute", "left": "3.8%", "top": "1.6%", "opacity": "0" }, "id": "80f95769", "content": "-subtitle-", "name": "subtitle" }, { "type": "div", "swimAttributes": {}, "styleAttributes": { "position": "absolute", "width": "40%", "height": "40%", "top": "0px", "right": "0px" }, "id": "smallChartContainer", "name": "small chart target" }], "name": "Center Row" }, { "type": "div", "swimAttributes": {}, "styleAttributes": { "flex-grow": "1", "flex-direction": "row", "display": "flex", "position": "relative", "height": "15%" }, "id": "30ab02aa", "content": "", "children": [{ "type": "div", "swimAttributes": {}, "styleAttributes": { "position": "absolute", "top": "0%", "bottom": "0%", "left": "3.8%", "right": "3.8%", "display": "flex" }, "id": "secondChartContainer", "content": "", "children": [{ "type": "swim-time-series", "swimAttributes": { "width": "100%", "gutter-left": "0px", "gutter-bottom": "0px", "header": false, "subheader": false }, "styleAttributes": { "flex-grow": 1 }, "id": "954dfba4" }], "name": "second chart tagget" }], "name": "second chart row" }, { "type": "div", "swimAttributes": { "width": "100%" }, "styleAttributes": { "flex-grow": 1, "height": "5%" }, "id": "10a281f8", "content": "", "name": "footer" }], "name": "Padding" }], "name": "Main" }], "hostUrl": "", "hostPort": "", "node": "", "lane": "", "keepSynced": false },
        'pieChartCard3': { "title": "pie chart 1", "width": "100%", "height": "100%", "backgroundColor": "transparent", "display": "flex", "flexDirection": "row", "layoutElements": [{ "type": "swim-pie", "swimAttributes": { "width": "100%", "inner-radius": "0", "outer-radius": "60", "tick-radius": "80", "tick-length": "140", "tick-color": "#667095", "label-radius": "35", "label-size": "10", "label-color": "#ffffff", "title-size": "14", "title-color": "#7883aa" }, "styleAttributes": { "flex-grow": "1" }, "id": "13245", "content": "" }] },
        'boxGraphCard': { "title": "block chart", "width": "100%", "height": "100%", "backgroundColor": "transparent", "display": "flex", "flexDirection": "column", "layoutElements": [{ "type": "div", "swimAttributes": {}, "id": "9d2fe39b", "styleAttributes": { "flex-grow": "0", "height": "6%" }, "children": [{ "type": "div", "swimAttributes": { "width": "100%" }, "styleAttributes": { "flex-grow": 1, "color": "#555c78", "margin": "2%" }, "id": "661d7ca7", "content": "Alerts Distribution by Fan Types & Manufacturers - Al" }] }, { "type": "div", "swimAttributes": {}, "id": "08734296", "styleAttributes": { "flex-grow": "1", "display": "flex", "height": "77%", "width": "100%", "flex-direction": "row" }, "children": [{ "type": "div", "swimAttributes": {}, "styleAttributes": { "flex-grow": "1", "display": "flex", "flex-direction": "row", "margin": "2%" }, "id": "440cb5a2", "content": "", "children": [{ "type": "div", "swimAttributes": {}, "styleAttributes": { "flex-grow": "1", "background-color": "#d4d7e5", "border": "solid 1px #b0b6cf", "display": "flex", "flex-shrink": "0", "width": "33%" }, "id": "96d6d678", "children": [{ "type": "span", "swimAttributes": {}, "styleAttributes": { "flex-grow": 1, "border-right": "solid 1px #b0b6cf", "display": "flex", "overflow": "hidden", "text-align": "center", "align-items": "center" }, "id": "054e1d501", "children": [{ "type": "div", "swimAttributes": { "width": "100%" }, "styleAttributes": { "flex-grow": 1, "text-align": "center" }, "id": "24c68b73", "content": "Samsung" }], "content": "" }, { "type": "div", "swimAttributes": {}, "styleAttributes": { "flex-grow": 1, "display": "flex", "flex-direction": "column" }, "id": "9ee59edf", "content": "", "children": [{ "type": "div", "swimAttributes": { "width": "100%" }, "styleAttributes": { "flex-grow": "1.7", "border-bottom": "solid 1px #b0b6cf", "text-align": "center", "align-items": "center", "display": "flex" }, "id": "7bf10628", "content": "", "children": [{ "type": "div", "swimAttributes": { "width": "100%" }, "styleAttributes": { "flex-grow": 1 }, "id": "75114a32", "content": "LG" }] }, { "type": "div", "swimAttributes": { "width": "100%" }, "styleAttributes": { "flex-grow": 1, "border-bottom": "solid 1px #b0b6cf", "display": "flex", "align-items": "center" }, "id": "d31b2f01", "children": [{ "type": "div", "swimAttributes": { "width": "100%" }, "styleAttributes": { "flex-grow": 1, "text-align": "center" }, "id": "41ec8cdf", "content": "LTech" }] }, { "type": "div", "swimAttributes": { "width": "100%" }, "styleAttributes": { "flex-grow": 1, "display": "flex", "align-items": "center" }, "id": "e2d38b18", "content": "", "children": [{ "type": "div", "swimAttributes": { "width": "100%" }, "styleAttributes": { "flex-grow": 1, "text-align": "center" }, "id": "c6bcc9cb", "content": "TEL" }] }] }] }, { "type": "div", "swimAttributes": {}, "styleAttributes": { "flex-grow": 1, "background-color": "#e0e2ec", "border": "solid 1px #b0b6cf", "flex-shrink": "0", "display": "flex", "width": "33%" }, "id": "9179933a", "children": [{ "type": "div", "swimAttributes": { "width": "100%" }, "styleAttributes": { "flex-grow": 1, "border-right": "solid 1px #b0b6cf", "display": "flex", "align-items": "center" }, "id": "bf5646ce", "content": "", "children": [{ "type": "div", "swimAttributes": { "width": "100%" }, "styleAttributes": { "flex-grow": 1, "text-align": "center" }, "id": "7d6b584a", "content": "Samsung" }] }, { "type": "div", "swimAttributes": { "width": "100%" }, "styleAttributes": { "flex-grow": 1, "display": "flex", "flex-direction": "column" }, "id": "5d5ceb7e", "children": [{ "type": "div", "swimAttributes": { "width": "100%" }, "styleAttributes": { "flex-grow": 1, "border-bottom": "solid 1px #b0b6cf", "display": "flex", "align-items": "center" }, "id": "ee57a30d", "content": "", "children": [{ "type": "div", "swimAttributes": { "width": "100%" }, "styleAttributes": { "flex-grow": 1, "text-align": "center" }, "id": "cf495ff3", "content": "XPower" }] }, { "type": "div", "swimAttributes": { "width": "100%" }, "styleAttributes": { "flex-grow": 1, "border-bottom": "solid 1px #b0b6cf", "display": "flex", "align-items": "center" }, "id": "79576306", "children": [{ "type": "div", "swimAttributes": { "width": "100%" }, "styleAttributes": { "flex-grow": 1, "text-align": "center" }, "id": "9d8db363", "content": "Ltech" }] }, { "type": "div", "swimAttributes": { "width": "100%" }, "styleAttributes": { "flex-grow": 1, "border-bottom": "solid 1px #b0b6cf", "display": "flex", "align-items": "center" }, "id": "0e3f6374", "children": [{ "type": "div", "swimAttributes": { "width": "100%" }, "styleAttributes": { "flex-grow": 1, "text-align": "center" }, "id": "4f77c46e", "content": "PG" }] }, { "type": "div", "swimAttributes": { "width": "100%" }, "styleAttributes": { "flex-grow": 1, "display": "flex", "align-items": "center", "border-bottom": "solid 1px #b0b6cf" }, "id": "f0d5aa9e", "children": [{ "type": "div", "swimAttributes": { "width": "100%" }, "styleAttributes": { "flex-grow": 1, "text-align": "center" }, "id": "cbabebc9", "content": "TEL" }] }, { "type": "div", "swimAttributes": { "width": "100%" }, "styleAttributes": { "flex-grow": 1, "display": "flex", "align-items": "center" }, "id": "a5e75b9c", "children": [{ "type": "div", "swimAttributes": { "width": "100%" }, "styleAttributes": { "flex-grow": 1, "text-align": "center" }, "id": "3e0bd773", "content": "G5" }] }] }] }, { "type": "div", "swimAttributes": {}, "styleAttributes": { "flex-grow": 1, "background-color": "#eeeff5", "border": "solid 1px #b0b6cf", "flex-shrink": "0", "display": "flex", "width": "33%" }, "id": "ecc0feee", "content": "", "children": [{ "type": "div", "swimAttributes": { "width": "100%" }, "styleAttributes": { "flex-grow": 1, "border-right": "solid 1px #b0b6cf", "display": "flex", "align-items": "center" }, "id": "2cba09a0", "content": "", "children": [{ "type": "div", "swimAttributes": { "width": "100%" }, "styleAttributes": { "flex-grow": 1, "text-align": "center" }, "id": "132e1d3c", "content": "LTech" }] }, { "type": "div", "swimAttributes": { "width": "100%" }, "styleAttributes": { "flex-grow": 1, "display": "flex", "flex-direction": "column" }, "id": "e6f25067", "children": [{ "type": "div", "swimAttributes": { "width": "100%" }, "styleAttributes": { "flex-grow": 1, "border-bottom": "solid 1px #b0b6cf", "display": "flex", "align-items": "center" }, "id": "5e13a780", "content": "", "children": [{ "type": "div", "swimAttributes": { "width": "100%" }, "styleAttributes": { "flex-grow": 1, "text-align": "center" }, "id": "28a3260a", "content": "PG" }] }, { "type": "div", "swimAttributes": { "width": "100%" }, "styleAttributes": { "flex-grow": 1, "border-bottom": "solid 1px #b0b6cf", "display": "flex", "align-items": "center" }, "id": "1db161ee", "children": [{ "type": "div", "swimAttributes": { "width": "100%" }, "styleAttributes": { "flex-grow": 1, "text-align": "center" }, "id": "2213f1e8", "content": "TEL" }] }, { "type": "div", "swimAttributes": { "width": "100%" }, "styleAttributes": { "flex-grow": 1, "display": "flex", "align-items": "center" }, "id": "dd5fcdb8", "children": [{ "type": "div", "swimAttributes": { "width": "100%" }, "styleAttributes": { "flex-grow": 1, "text-align": "center" }, "id": "4e02c462", "content": "G5" }] }] }] }] }], "content": "" }, { "type": "div", "swimAttributes": { "width": "100%" }, "styleAttributes": { "flex-grow": "0", "height": "16%", "display": "flex", "padding": "0px" }, "id": "165d28d8", "children": [{ "type": "div", "swimAttributes": { "width": "100%" }, "styleAttributes": { "flex-grow": 1, "margin": "2%", "display": "flex" }, "id": "aad130ae", "children": [{ "type": "div", "swimAttributes": { "width": "100%" }, "styleAttributes": { "flex-grow": "1", "display": "flex", "width": "33%" }, "id": "6211555d", "children": [{ "type": "div", "swimAttributes": {}, "styleAttributes": { "width": "20px" }, "id": "c47b2767", "children": [{ "type": "div", "swimAttributes": {}, "styleAttributes": { "width": "20px", "height": "20px", "background-color": "#cccfe0", "border": "solid 1px #b7bed9" }, "id": "c8a005dc" }] }, { "type": "div", "swimAttributes": { "width": "100%" }, "styleAttributes": { "flex-grow": 1, "padding": "0 0 0 10px", "display": "flex", "flex-direction": "column" }, "id": "309e5643", "children": [{ "type": "swim-text", "swimAttributes": { "width": "100%" }, "styleAttributes": { "flex-grow": 1, "font-size": "12px" }, "id": "3fa0e788", "content": "Fan Type 1 (2 blade)" }, { "type": "swim-text", "swimAttributes": { "width": "100%" }, "styleAttributes": { "flex-grow": 1, "font-size": "12px" }, "id": "d4e46fc1", "content": "51% of types" }, { "type": "swim-text", "swimAttributes": { "width": "100%" }, "styleAttributes": { "flex-grow": 1, "font-size": "12px" }, "id": "ca48ae9d", "content": "5 Fan dudes" }] }] }, { "type": "div", "swimAttributes": { "width": "100%" }, "styleAttributes": { "flex-grow": "1", "display": "flex", "width": "33%" }, "id": "669c77bc", "children": [{ "type": "div", "swimAttributes": {}, "styleAttributes": { "flex-grow": "0", "width": "20px" }, "id": "b80f830c", "children": [{ "type": "div", "swimAttributes": {}, "styleAttributes": { "width": "20px", "height": "20px", "border": "solid 1px #b7bed9", "background-color": "#e0e2ec" }, "id": "e24df4ae" }] }, { "type": "div", "swimAttributes": { "width": "100%" }, "styleAttributes": { "flex-grow": 1, "display": "flex", "padding": "0 0 0 10px", "flex-direction": "column" }, "id": "e3502637", "children": [{ "type": "swim-text", "swimAttributes": {}, "styleAttributes": { "flex-grow": 1, "font-size": "12px" }, "id": "ca9b8cf5", "content": "Fan Type 2 (3 blade)" }, { "type": "swim-text", "swimAttributes": { "width": "100%" }, "styleAttributes": { "flex-grow": 1, "font-size": "12px" }, "id": "108e84d0", "content": "26% of Types" }, { "type": "swim-text", "swimAttributes": { "width": "100%" }, "styleAttributes": { "flex-grow": 1, "font-size": "12px" }, "id": "6ce8705d", "content": "6 Fan Manuf." }] }] }, { "type": "div", "swimAttributes": { "width": "100%" }, "styleAttributes": { "flex-grow": "1", "display": "flex", "width": "33%" }, "id": "4090ed1a", "children": [{ "type": "div", "swimAttributes": {}, "styleAttributes": { "flex-grow": "0", "width": "20px" }, "id": "92414999", "children": [{ "type": "div", "swimAttributes": {}, "styleAttributes": { "flex-grow": 1, "width": "20px", "height": "20px", "border": "solid 1px #b7bed9", "background-color": "#edeef5" }, "id": "16a7f5a9" }] }, { "type": "div", "swimAttributes": { "width": "100%" }, "styleAttributes": { "flex-grow": 1, "display": "flex", "flex-direction": "column", "padding": "0 0 0 10px" }, "id": "39d43ef0", "children": [{ "type": "swim-text", "swimAttributes": { "width": "100%" }, "styleAttributes": { "flex-grow": 1, "font-size": "12px" }, "id": "0e561efe", "content": "Fan Type 3 (4 blade)" }, { "type": "swim-text", "swimAttributes": { "width": "100%" }, "styleAttributes": { "flex-grow": 1, "font-size": "12px" }, "id": "98a4fda1", "content": "23% of Types" }, { "type": "swim-text", "swimAttributes": { "width": "100%" }, "styleAttributes": { "flex-grow": 1, "font-size": "12px" }, "id": "8a370100", "content": "5 Fan man" }] }] }] }] }, { "type": "swim-text", "swimAttributes": { "width": "100%" }, "styleAttributes": { "flex-grow": 1, "position": "absolute", "top": "3%", "right": "2%", "color": "rgba(85, 92, 120, 0.4)" }, "id": "5be728c3", "content": "GRPNG" }] },
    };
    return LayoutDataHandler;
}());

var LayoutEditor = (function () {
    function LayoutEditor(parentElement, swimDataSet) {
        this.unselectedShadow = 'rgb(0, 0, 0) 0px 0px 0px 0px';
        this.selectedShadow = 'rgba(42, 255, 42, 0.5) 0px 0px 0px 5px';
        this.highlightedShadow = 'rgba(255, 42, 42, 0.5) 0px 0px 0px 5px';
        this.titleFieldTagId = '258f66d4';
        this.widthFieldTagId = '1056f91e';
        this.widthTitleTagId = '83fea821';
        this.heightFieldTagId = 'e9a054b0';
        this.heightTitleTagId = '1707e5cf';
        this.bgColorFieldTagId = 'bf26f39e';
        this.bgColorTitleTagId = '63568108';
        this.addElementButtonTagId = '27e250a2';
        this.displayTypeTitleTagId = 'a32edb7c';
        this.displayTypeFieldTagId = 'ea01c64a';
        this.flexTypeTitleTagId = '8bf2625c';
        this.flexTypeFieldTagId = '9e5c85a6';
        this.renderTypeTitleTagId = 'd23899aa';
        this.renderTypeFieldTagId = '933f721d';
        this.swimHostUrlLabelId = 'swimHostUrlLabel';
        this.swimDataKeysLabelId = '452d2af0';
        this.hostInputFieldId = '96af4f65';
        this.nodeInputFieldId = 'e299d99c';
        this.laneInputFieldId = '01fa2cb7';
        this.submitButtonId = '917495b7';
        this.cancelButtonId = '0e315fca';
        this.errorMessageId = '353ec5b7';
        this.titleMessageId = 'fc14565c';
        this.keepSyncedFieldId = 'faf17c1c';
        this.quiltIdInputFieldId = '01fa2cb7';
        this.nameInputFieldId = 'e299d99c';
        this.valueInputFieldId = '01fa2cb7';
        this.loadButtonId = '3fcd7fab';
        this.textAreaInputFieldId = 'ddb022da';
        this.addAttributeForm = LayoutDataHandler.getLayout('addAttributeForm');
        this.loadJsonDialog = LayoutDataHandler.getLayout('loadJsonDialog');
        this.loadListDialog = LayoutDataHandler.getLayout('loadListDialog');
        this.mainHeaderMenus = LayoutDataHandler.getLayout('mainHeaderMenus');
        this.mainLayoutForm = LayoutDataHandler.getLayout('mainLayoutForm');
        this.dataLinkConfigForm = LayoutDataHandler.getLayout('dataLinkConfigForm');
        this.quiltConfigForm = LayoutDataHandler.getLayout('quiltConfigForm');
        this.flexTestLayout = LayoutDataHandler.getLayout('flexTestLayout');
        this.swimLayoutLinkConfig = {
            isSecure: false,
            hostUrl: 'auto2.swim.services',
            hostPort: '',
            node: '/quilt/martin_quilt',
            lane: 'layouts',
            keepSynced: true,
        };
        this.swimDataConfig = {
            isSecure: false,
            hostUrl: '',
            hostPort: '',
            node: '',
            lane: '',
            keepSynced: false,
        };
        this.loadJsonDialog = LayoutDataHandler.getLayout('loadJsonDialog');
        this.parentElem = parentElement;
        this.editorPanelDefinition = LayoutDataHandler.getLayout('mainLayoutForm');
        this.swimDataSet = swimDataSet;
        this.buildBaseEditorLayout();
        this.buildLayoutEditorForm();
        this.newLayout();
    }
    LayoutEditor.prototype.saveLayout = function () {
        var layoutDef = this.activeLayoutRenderTrack.getLayoutDefinition();
        if (!layoutDef.id) {
            layoutDef.id = Utils.newGuid();
        }
        var saveObject = {
            id: layoutDef.id,
            title: layoutDef.title,
            width: layoutDef.width,
            height: layoutDef.height,
            backgroundColor: layoutDef.backgroundColor,
            display: layoutDef.display,
            flexDirection: layoutDef.flexDirection,
            layoutElements: layoutDef.layoutElements || [],
            hostUrl: this.swimDataConfig.hostUrl,
            hostPort: this.swimDataConfig.hostPort,
            node: this.swimDataConfig.node,
            lane: this.swimDataConfig.lane,
            keepSynced: this.swimDataConfig.keepSynced,
            renderType: layoutDef.renderType,
        };
        this.swimLayoutLink.set(layoutDef.id, saveObject);
    };
    LayoutEditor.prototype.buildEditorHeader = function () {
        var menu = HtmlView.create('div');
        this.headerMenuElement = menu.renderLayout(this.mainHeaderMenus);
        var headerDiv = document.getElementById('headerNavigation');
        if (headerDiv) {
            headerDiv.appendChild(menu.node);
        }
    };
    LayoutEditor.prototype.openSwimDataLink = function () {
        var _this = this;
        if (this.headerMenuElement && this.swimDataConfig && this.swimDataConfig.hostUrl !== '') {
            var swimHostLabel = this.headerMenuElement.getCachedElement(this.swimHostUrlLabelId);
            var swimDataKeysLabel_1 = this.headerMenuElement.getCachedElement(this.swimDataKeysLabelId);
            if (swimHostLabel && swimDataKeysLabel_1) {
                swimHostLabel.node.innerText = "swim://" + this.swimDataConfig.hostUrl + ":" + this.swimDataConfig.hostPort + this.swimDataConfig.node + "/" + this.swimDataConfig.lane;
                swimDataKeysLabel_1.node.innerHTML = '';
            }
            this.swimDataConfig.didUpdate = function (key, value) {
                if (_this.swimDataLink) {
                    _this.updateLayoutDataset(value);
                }
                if (_this.headerMenuElement) {
                    if (swimDataKeysLabel_1 && _this.swimDataLink && value) {
                        if (swimDataKeysLabel_1.node.innerHTML === '') {
                            swimDataKeysLabel_1.node.innerHTML = '&nbsp;<i>Bindings:</i>&nbsp;';
                            for (var key_1 in value) {
                                swimDataKeysLabel_1.node.innerHTML += "&nbsp;{{" + key_1 + "}}&nbsp;";
                            }
                        }
                    }
                }
            };
            if (this.swimDataLink) {
                if (this.swimDataLink.isConnected()) {
                    this.swimDataLink.close();
                }
            }
        }
    };
    LayoutEditor.prototype.buildBaseEditorLayout = function () {
        this.buildEditorHeader();
        this.leftColumnElementTrack = HtmlView.create('div')
            .elemId('leftColumn');
        this.workspaceElementTrack = HtmlView.create('div')
            .elemId('workspace');
        this.rightColumnElementTrack = HtmlView.create('div')
            .elemId('rightColumn');
        this.parentElem.appendChild(this.leftColumnElementTrack.node);
        this.parentElem.appendChild(this.workspaceElementTrack.node);
        this.parentElem.appendChild(this.rightColumnElementTrack.node);
    };
    LayoutEditor.prototype.buildLayoutEditorForm = function () {
        var _this = this;
        this.editorFormRenderTrack = this.leftColumnElementTrack.renderLayout(this.mainLayoutForm);
        var titleField = this.editorFormRenderTrack.getCachedElement(this.titleFieldTagId);
        var widthField = this.editorFormRenderTrack.getCachedElement(this.widthFieldTagId);
        var widthTitle = this.editorFormRenderTrack.getCachedElement(this.widthTitleTagId);
        var heightField = this.editorFormRenderTrack.getCachedElement(this.heightFieldTagId);
        var heightTitle = this.editorFormRenderTrack.getCachedElement(this.heightTitleTagId);
        var bgColorField = this.editorFormRenderTrack.getCachedElement(this.bgColorFieldTagId);
        var bgColorTitle = this.editorFormRenderTrack.getCachedElement(this.bgColorTitleTagId);
        var displayTypeField = this.editorFormRenderTrack.getCachedElement(this.displayTypeFieldTagId);
        var flexTypeField = this.editorFormRenderTrack.getCachedElement(this.flexTypeFieldTagId);
        var addElementButton = this.editorFormRenderTrack.getCachedElement(this.addElementButtonTagId);
        var renderTypeTitle = this.editorFormRenderTrack.getCachedElement(this.renderTypeTitleTagId);
        var renderTypeField = this.editorFormRenderTrack.getCachedElement(this.renderTypeFieldTagId);
        var handleValueChange = function (fieldName, evt) {
            if (evt) {
                var keyEvent = evt;
                if (keyEvent && keyEvent.srcElement && keyEvent.srcElement.value) {
                    var newValue = keyEvent.srcElement.value;
                    switch (fieldName) {
                        case 'title':
                            _this.updateLayoutTitle(newValue);
                            break;
                        case 'width':
                            try {
                                if (Length.parse(newValue) instanceof Object) {
                                    _this.updateLayoutWidth(newValue);
                                    if (widthTitle) {
                                        widthTitle.color(Color.parse('rgb(214,214,214)'));
                                    }
                                }
                            }
                            catch (err) {
                                if (widthTitle) {
                                    widthTitle.color(Color.parse('rgb(255,0,0)'));
                                }
                            }
                            break;
                        case 'height':
                            try {
                                if (Length.parse(newValue) instanceof Object) {
                                    _this.updateLayoutHeight(newValue);
                                    if (heightTitle) {
                                        heightTitle.color(Color.parse('rgb(214,214,214)'));
                                    }
                                }
                            }
                            catch (err) {
                                if (heightTitle) {
                                    heightTitle.color(Color.parse('rgb(255,0,0)'));
                                }
                            }
                            break;
                        case 'bgColor':
                            try {
                                if (Color.parse(newValue)) {
                                    _this.updateLayoutBackgroundColor(newValue);
                                }
                                if (bgColorTitle) {
                                    bgColorTitle.color(Color.parse('rgb(214,214,214)'));
                                }
                            }
                            catch (err) {
                                if (bgColorTitle) {
                                    bgColorTitle.color(Color.parse('rgb(255,0,0)'));
                                }
                            }
                            break;
                        case 'displayType':
                            _this.updateLayoutDisplayType(newValue);
                            break;
                        case 'flexType':
                            _this.updateLayoutFlexType(newValue);
                            break;
                        case 'renderType':
                            if (newValue === "json" || newValue === "recon") {
                                _this.updateLayoutRenderType(newValue);
                                if (renderTypeTitle) {
                                    renderTypeTitle.color(Color.parse('rgb(214,214,214)'));
                                }
                            }
                            else {
                                if (renderTypeTitle) {
                                    renderTypeTitle.color(Color.parse('rgb(255,0,0)'));
                                }
                            }
                            break;
                    }
                }
            }
        };
        if (titleField) {
            titleField.on('keyup', function (evt) {
                handleValueChange('title', evt);
            });
        }
        if (widthField) {
            widthField.on('keyup', function (evt) {
                handleValueChange('width', evt);
            });
        }
        if (heightField) {
            heightField.on('keyup', function (evt) {
                handleValueChange('height', evt);
            });
        }
        if (bgColorField) {
            bgColorField.on('keyup', function (evt) {
                handleValueChange('bgColor', evt);
            });
        }
        if (displayTypeField) {
            displayTypeField.on('keyup', function (evt) {
                handleValueChange('displayType', evt);
            });
        }
        if (flexTypeField) {
            flexTypeField.on('keyup', function (evt) {
                handleValueChange('flexType', evt);
            });
        }
        if (renderTypeField) {
            renderTypeField.on('keyup', function (evt) {
                handleValueChange('renderType', evt);
            });
        }
        if (addElementButton) {
            addElementButton.on('mouseup', function (evt) {
                _this.addNewLayoutElement('div');
            });
        }
    };
    LayoutEditor.prototype.buildLayoutAttributePanelLists = function () {
        this.removeLayoutAttributePanel();
        this.layoutAttributesPanelTrack = HtmlView.create('div');
        this.buildLayoutAttributePanel('Core Attributes');
        this.buildLayoutAttributePanel('Swim Attributes', 'swimAttributes');
        this.buildLayoutAttributePanel('HTML Attributes', 'htmlAttributes');
        this.buildLayoutAttributePanel('Style Attributes', 'styleAttributes');
        this.rightColumnElementTrack.append(this.layoutAttributesPanelTrack);
    };
    LayoutEditor.prototype.buildLayoutAttributePanel = function (panelTitle, newAttributeListKey, isHtmlAttributes) {
        var _this = this;
        if (newAttributeListKey === void 0) { newAttributeListKey = 'core'; }
        if (isHtmlAttributes === void 0) { isHtmlAttributes = false; }
        var newAttributeList = null;
        if (newAttributeListKey === 'core') {
            newAttributeList = {
                id: this.selectedLayoutData.id,
                name: this.selectedLayoutData.name || '',
                type: this.selectedLayoutData.type,
                content: this.selectedLayoutData.content || '',
            };
        }
        else {
            newAttributeList = this.selectedLayoutData[newAttributeListKey];
        }
        var newPanel = HtmlView.create('div')
            .elemId('attributePanel');
        var title = HtmlView.create('h3')
            .text(panelTitle);
        var addAttributeButton = HtmlView.create('div')
            .className('addElementButton')
            .text('+');
        addAttributeButton.node.onmouseup = function (evt) {
            _this.showAddAttributeDialog(function (attrName, attrValue) {
                if (attrName && attrValue) {
                    _this.addElementAttribute(newAttributeListKey, attrName, attrValue);
                }
            });
        };
        title.append(addAttributeButton);
        newPanel.append(title);
        var rowNumber = 1;
        var listing = HtmlView.create('div');
        if (isHtmlAttributes) {
            listing.append(this.buildAttributeRow(newAttributeListKey, 'type', this.selectedLayoutData.type));
            if (this.selectedLayoutData.content) {
                var contentRowTrack = this.buildAttributeRow(newAttributeListKey, 'content', this.selectedLayoutData.content);
                contentRowTrack.node.style.backgroundColor = 'rgba(200, 200, 200, 0.2)';
                rowNumber++;
                listing.append(contentRowTrack);
            }
        }
        if (newAttributeList) {
            for (var _i = 0, _a = Object.keys(newAttributeList); _i < _a.length; _i++) {
                var attributeKey = _a[_i];
                var value = newAttributeList[attributeKey];
                var rowTrack = this.buildAttributeRow(newAttributeListKey, attributeKey, value);
                if (rowNumber % 2 === 1) {
                    rowTrack.node.style.backgroundColor = 'rgba(200, 200, 200, 0.2)';
                }
                listing.append(rowTrack);
                rowNumber++;
            }
        }
        newPanel.append(listing);
        if (this.layoutAttributesPanelTrack) {
            this.layoutAttributesPanelTrack.append(newPanel);
        }
    };
    LayoutEditor.prototype.flushSavedTemplates = function () {
        var _this = this;
        if (confirm('This will reset all saved templates. Are you sure?')) {
            this.swimLayoutLink.forEach(function (layoutListKey) {
                var template = LayoutDataHandler.getLayout(layoutListKey);
                if (template) {
                    _this.swimLayoutLink.set(layoutListKey, template);
                }
            });
        }
    };
    LayoutEditor.prototype.showLinkConfigDialog = function (linkType) {
        var _this = this;
        var renderTrack = this.spawnDialog(this.dataLinkConfigForm);
        if (renderTrack) {
            var hostInputField_1 = renderTrack.getCachedElement(this.hostInputFieldId);
            var nodeInputField_1 = renderTrack.getCachedElement(this.nodeInputFieldId);
            var laneInputField_1 = renderTrack.getCachedElement(this.laneInputFieldId);
            var submitButton = renderTrack.getCachedElement(this.submitButtonId);
            var cancelButton = renderTrack.getCachedElement(this.cancelButtonId);
            var errorMessage_1 = renderTrack.getCachedElement(this.errorMessageId);
            var titleMessage = renderTrack.getCachedElement(this.titleMessageId);
            var keepSyncedInput_1 = renderTrack.getCachedElement(this.keepSyncedFieldId);
            if (hostInputField_1 && nodeInputField_1 && submitButton && laneInputField_1 && cancelButton && errorMessage_1 && titleMessage && keepSyncedInput_1) {
                titleMessage.text("Configure swim data link");
                errorMessage_1.text('');
                if (this.swimDataConfig.hostPort !== '') {
                    hostInputField_1.node.value = this.swimDataConfig.hostUrl + ":" + this.swimDataConfig.hostPort;
                }
                else {
                    hostInputField_1.node.value = "" + this.swimDataConfig.hostUrl;
                }
                nodeInputField_1.node.value = this.swimDataConfig.node;
                laneInputField_1.node.value = this.swimDataConfig.lane;
                keepSyncedInput_1.node.value = this.swimDataConfig.keepSynced;
                hostInputField_1.node.focus();
                submitButton.on('click', function (evt) {
                    var hostValue = hostInputField_1.node.value;
                    if (hostValue && hostValue.indexOf(":") >= 0) {
                        var hostStrSplit = hostValue.split(':');
                        _this.swimDataConfig.hostUrl = hostStrSplit[0];
                        _this.swimDataConfig.hostPort = hostStrSplit[1];
                    }
                    else {
                        _this.swimDataConfig.hostUrl = hostValue;
                        _this.swimDataConfig.hostPort = '';
                    }
                    _this.swimDataConfig.node = nodeInputField_1.node.value;
                    _this.swimDataConfig.lane = laneInputField_1.node.value;
                    _this.swimDataConfig.keepSynced = keepSyncedInput_1.node.value;
                    errorMessage_1.node.innerHTML = "<span style='color:black'>Connecting Link...</span>";
                    _this.swimDataConfig.didUnlink = function () {
                        errorMessage_1.node.innerHTML = "Link disconected due to error";
                    };
                    _this.swimDataConfig.didFail = function () {
                        errorMessage_1.node.innerHTML = "Link failed to connect";
                    };
                    _this.swimDataConfig.didLink = function () {
                        errorMessage_1.node.innerHTML = "<span style='color:green'>Link Connected</span>";
                    };
                    _this.openSwimDataLink();
                });
                cancelButton.on('click', function (evt) {
                    _this.swimDataConfig.didUnlink = null;
                    _this.swimDataConfig.didLink = null;
                    _this.swimDataConfig.didUpdate = function (value) {
                        if (_this.swimDataLink) {
                            _this.updateLayoutDataset(_this.swimDataLink.get(value));
                        }
                    };
                });
            }
        }
    };
    LayoutEditor.prototype.showQuiltConfigDialog = function () {
        var _this = this;
        var renderTrack = this.spawnDialog(this.quiltConfigForm);
        if (renderTrack) {
            var hostInputField_2 = renderTrack.getCachedElement(this.hostInputFieldId);
            var nodeInputField = renderTrack.getCachedElement(this.nodeInputFieldId);
            var quiltIdInputField_1 = renderTrack.getCachedElement(this.quiltIdInputFieldId);
            var submitButton = renderTrack.getCachedElement(this.submitButtonId);
            var cancelButton = renderTrack.getCachedElement(this.cancelButtonId);
            var errorMessage = renderTrack.getCachedElement(this.errorMessageId);
            var titleMessage = renderTrack.getCachedElement(this.titleMessageId);
            if (hostInputField_2 && nodeInputField && submitButton && quiltIdInputField_1 && cancelButton && errorMessage && titleMessage) {
                titleMessage.text("Configure Quilt");
                errorMessage.text('');
                if (this.swimLayoutLinkConfig.hostPort !== '') {
                    hostInputField_2.node.value = this.swimLayoutLinkConfig.hostUrl + ":" + this.swimLayoutLinkConfig.hostPort;
                }
                else {
                    hostInputField_2.node.value = "" + this.swimLayoutLinkConfig.hostUrl;
                }
                quiltIdInputField_1.node.value = this.swimLayoutLinkConfig.node.replace('/quilt/', '');
                hostInputField_2.node.focus();
                submitButton.on('click', function (evt) {
                    var hostValue = hostInputField_2.node.value;
                    if (hostValue && hostValue.indexOf(":") >= 0) {
                        var hostStrSplit = hostValue.split(':');
                        _this.swimLayoutLinkConfig.hostUrl = hostStrSplit[0];
                        _this.swimLayoutLinkConfig.hostPort = hostStrSplit[1];
                    }
                    else {
                        _this.swimLayoutLinkConfig.hostUrl = hostValue;
                        _this.swimLayoutLinkConfig.hostPort = '';
                    }
                    _this.swimLayoutLinkConfig.node = "/quilt/" + quiltIdInputField_1.node.value;
                    _this.swimLayoutLink.close();
                });
                cancelButton.on('click', function (evt) {
                });
            }
        }
    };
    LayoutEditor.prototype.showAddAttributeDialog = function (onSubmitHandler) {
        if (this.loadJsonDialog !== null) {
            var renderTrack = this.spawnDialog(this.addAttributeForm);
            if (renderTrack) {
                var nameInputField_1 = renderTrack.getCachedElement(this.nameInputFieldId);
                var valueInputField_1 = renderTrack.getCachedElement(this.valueInputFieldId);
                var submitButton = renderTrack.getCachedElement(this.submitButtonId);
                var cancelButton = renderTrack.getCachedElement(this.cancelButtonId);
                var errorMessage = renderTrack.getCachedElement(this.errorMessageId);
                if (nameInputField_1 && submitButton && valueInputField_1 && cancelButton && errorMessage) {
                    errorMessage.text('');
                    submitButton.on('click', function (evt) {
                        var nameInputValue = nameInputField_1.node.value;
                        var valueInputValue = valueInputField_1.node.value;
                        onSubmitHandler(nameInputValue, valueInputValue);
                    });
                    cancelButton.on('click', function (evt) {
                    });
                }
            }
        }
    };
    LayoutEditor.prototype.buildAttributeRow = function (listKey, attributeKey, value) {
        var _this = this;
        var rowTrack = HtmlView.create('div')
            .className('attributeRow')
            .display('flex')
            .flexDirection('row');
        var rowKeyElement = HtmlView.create('div')
            .text(attributeKey)
            .className('rowKey');
        var removeButton = HtmlView.create('span')
            .className('removeElementButton')
            .text('-');
        rowKeyElement.append(removeButton);
        removeButton.node.onmouseup = function (evt) {
            if (confirm('Are you sure you want to delete this element?\r\nThis will also remove any child elements as well and can not be undone')) {
                if (_this.deleteElementAttribute(listKey, attributeKey)) {
                    rowTrack.remove();
                }
            }
            evt.preventDefault();
        };
        var rowValueElememt = HtmlView.create('div')
            .text(value)
            .className('rowValue');
        rowValueElememt.node.setAttribute('contenteditable', 'true');
        rowValueElememt.node.onkeyup = function (evt) {
            _this.updateSelectedLayoutAttribute(listKey, attributeKey, rowValueElememt.node.innerText);
        };
        rowTrack.append(rowKeyElement);
        rowTrack.append(rowValueElememt);
        return rowTrack;
    };
    LayoutEditor.prototype.updateSelectedLayoutAttribute = function (listKey, attributeKey, value) {
        var dirty = false;
        if (listKey === 'core') {
            switch (attributeKey) {
                case 'type':
                    if (value === '') {
                        break;
                    }
                    if (this.selectedLayoutData.type !== value) {
                        this.selectedLayoutData.type = value;
                        dirty = true;
                    }
                    break;
                case 'name':
                    if (this.selectedLayoutData.name !== value) {
                        this.selectedLayoutData.name = value;
                        dirty = true;
                    }
                    break;
                case 'content':
                    if (this.selectedLayoutData.content !== value) {
                        this.selectedLayoutData.content = value;
                        dirty = true;
                    }
                    break;
                case 'id':
                    if (this.selectedLayoutData.id !== value) {
                        this.selectedLayoutData.id = value;
                        dirty = true;
                    }
                    break;
                default:
                    break;
            }
        }
        else {
            var updateList = this.selectedLayoutData[listKey];
            if (updateList[attributeKey] !== value) {
                updateList[attributeKey] = value;
                dirty = true;
            }
        }
        if (dirty) {
            this.clearWorkspace(false);
            this.setLayoutDefinition(this.activeLayoutDefinition);
            dirty = false;
        }
    };
    LayoutEditor.prototype.removeLayoutAttributePanel = function () {
        if (this.layoutAttributesPanelTrack) {
            this.rightColumnElementTrack.remove(this.layoutAttributesPanelTrack);
            this.layoutAttributesPanelTrack = null;
        }
    };
    LayoutEditor.prototype.loadLayoutFromJson = function () {
        var _this = this;
        if (this.loadJsonDialog !== null) {
            var renderTrack = this.spawnDialog(this.loadJsonDialog);
            if (renderTrack) {
                var loadButton = renderTrack.getCachedElement(this.loadButtonId);
                var cancelButton = renderTrack.getCachedElement(this.cancelButtonId);
                var inputArea_1 = renderTrack.getCachedElement(this.textAreaInputFieldId);
                var errorMessage_2 = renderTrack.getCachedElement(this.errorMessageId);
                if (loadButton && cancelButton && inputArea_1 && errorMessage_2) {
                    errorMessage_2.text('');
                    loadButton.on('click', function (evt) {
                        try {
                            _this.clearWorkspace(true);
                            _this.setLayoutDefinition(JSON.parse(inputArea_1.node.value));
                        }
                        catch (ex) {
                            errorMessage_2.text(ex.toString());
                            return;
                        }
                    });
                    cancelButton.on('click', function (evt) {
                    });
                }
            }
        }
    };
    LayoutEditor.prototype.loadLayoutFromList = function () {
        var _this = this;
        if (this.loadJsonDialog !== null) {
            var renderTrack = this.spawnDialog(this.loadListDialog);
            if (renderTrack) {
                var cancelButton = renderTrack.getCachedElement(this.cancelButtonId);
                var listArea = renderTrack.getCachedElement(this.textAreaInputFieldId);
                var errorMessage = renderTrack.getCachedElement(this.errorMessageId);
                if (cancelButton && listArea && errorMessage) {
                    var layoutList = LayoutDataHandler.getLayoutList();
                    listArea.node.innerHTML = '';
                    var _loop_1 = function (layoutId) {
                        var layoutRow = HtmlView.create('li')
                            .width('100%')
                            .padding('10px')
                            .text(layoutId)
                            .color(Color.parse('black'))
                            .on('mouseover', function () {
                            layoutRow.backgroundColor('rgba(0,0,0,0.3)');
                        })
                            .on('mouseout', function () {
                            layoutRow.backgroundColor('transparent');
                        })
                            .on('click', function () {
                            _this.clearWorkspace(true);
                            _this.setLayoutDefinition(LayoutDataHandler.getLayout(layoutId));
                        });
                        listArea.append(layoutRow);
                    };
                    for (var _i = 0, layoutList_1 = layoutList; _i < layoutList_1.length; _i++) {
                        var layoutId = layoutList_1[_i];
                        _loop_1(layoutId);
                    }
                    errorMessage.text('');
                    cancelButton.on('click', function (evt) {
                    });
                }
            }
        }
    };
    LayoutEditor.prototype.loadLayoutFromService = function () {
        var _this = this;
        if (this.loadJsonDialog !== null) {
            var renderTrack = this.spawnDialog(this.loadListDialog);
            if (renderTrack) {
                var cancelButton = renderTrack.getCachedElement(this.cancelButtonId);
                var listArea_1 = renderTrack.getCachedElement(this.textAreaInputFieldId);
                var errorMessage = renderTrack.getCachedElement(this.errorMessageId);
                if (cancelButton && listArea_1 && errorMessage) {
                    listArea_1.node.innerHTML = '';
                    this.swimLayoutLink.forEach(function (layoutListKey) {
                        var layoutDef = _this.swimLayoutLink.get(layoutListKey);
                        if (!layoutDef) {
                            return;
                        }
                        layoutDef.id = layoutListKey;
                        var layoutRow = HtmlView.create('li')
                            .width('100%')
                            .padding('10px')
                            .text(layoutDef.title || 'No Title')
                            .color(Color.parse('black'))
                            .on('mouseover', function () {
                            layoutRow.backgroundColor('rgba(0,0,0,0.3)');
                        })
                            .on('mouseout', function () {
                            layoutRow.backgroundColor('transparent');
                        })
                            .on('click', function () {
                            _this.clearWorkspace(true);
                            _this.setLayoutDefinition(layoutDef);
                        });
                        listArea_1.append(layoutRow);
                    });
                    errorMessage.text('');
                    cancelButton.on('click', function (evt) {
                    });
                }
            }
        }
    };
    LayoutEditor.prototype.newLayout = function () {
        this.clearWorkspace(true);
        var emptyDef = {
            id: Utils.newGuid(),
            title: 'New layout',
            width: '100%',
            height: '100%',
            backgroundColor: 'transparent',
            display: 'flex',
            flexDirection: 'row',
            layoutElements: null,
            hostUrl: '',
            hostPort: '',
            node: '',
            lane: '',
            keepSynced: false,
            renderType: 'json',
        };
        this.setLayoutDefinition(emptyDef);
    };
    LayoutEditor.prototype.debugLayout = function () {
        var layoutDef = this.activeLayoutRenderTrack.getLayoutDefinition();
        var saveObject = {
            id: layoutDef.id,
            title: layoutDef.title,
            width: layoutDef.width,
            height: layoutDef.height,
            backgroundColor: layoutDef.backgroundColor,
            display: layoutDef.display,
            flexDirection: layoutDef.flexDirection,
            layoutElements: layoutDef.layoutElements || [],
            hostUrl: this.swimDataConfig.hostUrl,
            hostPort: this.swimDataConfig.hostPort,
            node: this.swimDataConfig.node,
            lane: this.swimDataConfig.lane,
            keepSynced: this.swimDataConfig.keepSynced,
            renderType: 'json',
        };
        console.log(JSON.stringify(saveObject));
    };
    LayoutEditor.prototype.clearWorkspace = function (clearSelection) {
        if (clearSelection === void 0) { clearSelection = false; }
        if (this.activeLayoutRenderTrack) {
            this.activeLayoutRenderTrack.destroyLayout();
        }
        if (clearSelection) {
            this.selectLayoutElement();
        }
    };
    LayoutEditor.prototype.updateLayoutTitle = function (newTitleValue) {
        if (newTitleValue !== this.activeLayoutDefinition.title) {
            this.activeLayoutDefinition.title = newTitleValue;
            this.activeLayoutRenderTrack.setLayoutTitle(this.activeLayoutDefinition.title);
        }
    };
    LayoutEditor.prototype.updateLayoutWidth = function (newWidthValue) {
        if (newWidthValue !== this.activeLayoutDefinition.width) {
            this.activeLayoutDefinition.width = newWidthValue;
            this.activeLayoutRenderTrack.setLayoutWidth(this.activeLayoutDefinition.width);
        }
    };
    LayoutEditor.prototype.updateLayoutHeight = function (newHeightValue) {
        if (newHeightValue !== this.activeLayoutDefinition.height) {
            this.activeLayoutDefinition.height = newHeightValue;
            this.activeLayoutRenderTrack.setLayoutHeight(this.activeLayoutDefinition.height);
        }
    };
    LayoutEditor.prototype.updateLayoutBackgroundColor = function (newColor) {
        if (newColor !== this.activeLayoutDefinition.backgroundColor) {
            this.activeLayoutDefinition.backgroundColor = newColor;
            this.activeLayoutRenderTrack.setLayoutBackground(this.activeLayoutDefinition.backgroundColor);
        }
    };
    LayoutEditor.prototype.updateLayoutDisplayType = function (newType) {
        if (newType !== this.activeLayoutDefinition.backgroundColor) {
            this.activeLayoutDefinition.display = newType;
            this.activeLayoutRenderTrack.setLayoutDisplayType(this.activeLayoutDefinition.display);
        }
    };
    LayoutEditor.prototype.updateLayoutFlexType = function (newType) {
        if (newType !== this.activeLayoutDefinition.flexDirection) {
            this.activeLayoutDefinition.flexDirection = newType;
            this.activeLayoutRenderTrack.setLayoutFlexType(this.activeLayoutDefinition.flexDirection);
        }
    };
    LayoutEditor.prototype.updateLayoutDataset = function (dataSet) {
        this.swimDataSet = dataSet;
        this.editorFormRenderTrack.setSwimData(this.swimDataSet);
    };
    LayoutEditor.prototype.updateLayoutRenderType = function (newType) {
        if (newType !== this.activeLayoutDefinition.flexDirection) {
            this.activeLayoutDefinition.renderType = newType;
            this.activeLayoutRenderTrack.setLayoutRenderType(this.activeLayoutDefinition.renderType || 'json');
        }
    };
    LayoutEditor.prototype.setLayoutDataValue = function (newData) {
        for (var _i = 0, newData_1 = newData; _i < newData_1.length; _i++) {
            var _a = newData_1[_i], key = _a[0], value = _a[1];
            this.swimDataSet[key] = value;
        }
        this.activeLayoutRenderTrack.setSwimData(this.swimDataSet);
        this.editorFormRenderTrack.setSwimData(this.swimDataSet);
    };
    LayoutEditor.prototype.setLayoutDefinition = function (newBlockDef) {
        this.activeLayoutDefinition = newBlockDef;
        if (this.activeLayoutDefinition) {
            this.activeLayoutRenderTrack = new LayoutRenderView(this.workspaceElementTrack.node);
            this.activeLayoutRenderTrack.setLayoutDefinition(this.activeLayoutDefinition);
            if (this.activeLayoutDefinition.renderType && this.activeLayoutDefinition.renderType === 'recon') {
                this.activeLayoutRenderTrack.buildReconLayout();
            }
            else {
                this.activeLayoutRenderTrack.buildJsonLayout();
            }
            this.buildLayoutElementList(this.activeLayoutRenderTrack.getLayoutElements());
            var titleField = this.editorFormRenderTrack.getCachedElement(this.titleFieldTagId);
            var widthField = this.editorFormRenderTrack.getCachedElement(this.widthFieldTagId);
            var heightField = this.editorFormRenderTrack.getCachedElement(this.heightFieldTagId);
            var bgColorField = this.editorFormRenderTrack.getCachedElement(this.bgColorFieldTagId);
            var displayTypeField = this.editorFormRenderTrack.getCachedElement(this.displayTypeFieldTagId);
            var flexTypeField = this.editorFormRenderTrack.getCachedElement(this.flexTypeFieldTagId);
            var renderTypeField = this.editorFormRenderTrack.getCachedElement(this.renderTypeFieldTagId);
            if (titleField) {
                titleField.node.value = this.activeLayoutDefinition.title;
            }
            if (widthField) {
                widthField.node.value = this.activeLayoutDefinition.width;
            }
            if (heightField) {
                heightField.node.value = this.activeLayoutDefinition.height;
            }
            if (bgColorField) {
                bgColorField.node.value = this.activeLayoutDefinition.backgroundColor;
            }
            if (displayTypeField) {
                displayTypeField.node.value = this.activeLayoutDefinition.display;
            }
            if (flexTypeField) {
                flexTypeField.node.value = this.activeLayoutDefinition.flexDirection;
            }
            if (renderTypeField) {
                renderTypeField.node.value = this.activeLayoutDefinition.renderType || 'json';
            }
            this.swimDataConfig.hostUrl = this.activeLayoutDefinition.hostUrl;
            this.swimDataConfig.hostPort = this.activeLayoutDefinition.hostPort;
            this.swimDataConfig.node = this.activeLayoutDefinition.node;
            this.swimDataConfig.lane = this.activeLayoutDefinition.lane;
            if (this.headerMenuElement) {
                var swimHostLabel = this.headerMenuElement.getCachedElement('swimHostUrlLabel');
                var swimDataKeysLabel = this.headerMenuElement.getCachedElement('452d2af0');
                if (swimHostLabel && swimDataKeysLabel) {
                    swimHostLabel.node.innerText = '';
                    swimDataKeysLabel.node.innerHTML = '';
                }
            }
            if (this.swimDataLink && this.swimDataLink.close) {
                this.swimDataLink.close();
            }
            if (this.swimDataConfig.hostUrl && this.swimDataConfig.hostUrl !== '') {
                this.openSwimDataLink();
            }
        }
    };
    LayoutEditor.prototype.buildLayoutElementList = function (layoutElementList) {
        if (this.layoutElementListTrack && this.layoutElementListTrack !== null) {
            this.layoutElementListTrack.remove();
        }
        this.layoutElementListTrack = HtmlView.create('div')
            .elemId('layoutElementListContainer')
            .overflow('auto');
        this.leftColumnElementTrack.append(this.layoutElementListTrack);
        var listWithRoot = [{
                type: 'root',
                id: 'root',
                children: layoutElementList,
            }];
        if (listWithRoot) {
            this.outputLayoutElementsListItems(listWithRoot, this.layoutElementListTrack);
        }
    };
    LayoutEditor.prototype.selectLayoutElement = function (elementData, selectedElement) {
        if (elementData === void 0) { elementData = null; }
        if (selectedElement === void 0) { selectedElement = null; }
        console.info(elementData, selectedElement);
        if (this.selectedLayoutElement) {
            this.selectedLayoutElement.node.style.boxShadow = this.unselectedShadow;
            this.selectedLayoutElement = null;
        }
        if (this.selectedLayoutElement) {
            this.selectedLayoutElement.node.className = '';
            this.selectedLayoutElement = null;
        }
        if (selectedElement) {
            this.selectedLayoutElement = selectedElement;
            this.selectedLayoutElement.node.className = 'selected';
        }
        var element = null;
        if (elementData && elementData.id !== 'root') {
            element = this.activeLayoutRenderTrack.getCachedElement(elementData.id);
        }
        if (element) {
            this.selectedLayoutData = elementData;
            this.selectedLayoutElement = element;
            this.selectedLayoutElement.node.style.boxShadow = this.selectedShadow;
            this.buildLayoutAttributePanelLists();
        }
        else {
            this.selectedLayoutData = null;
            this.selectedLayoutElement = null;
            this.removeLayoutAttributePanel();
        }
    };
    LayoutEditor.prototype.removeElementHightlight = function () {
        if (this.selectedLayoutElement && this.highlightedLayoutElement && this.selectedLayoutElement.node.id === this.highlightedLayoutElement.node.id) {
            return;
        }
        if (this.highlightedLayoutElement) {
            this.highlightedLayoutElement.node.style.boxShadow = this.unselectedShadow;
            this.highlightedLayoutElement = null;
        }
    };
    LayoutEditor.prototype.highlightLayoutElement = function (element) {
        if (element && this.selectedLayoutElement && this.selectedLayoutElement.node.id === element.node.id) {
            return;
        }
        if (this.highlightedLayoutElement) {
            this.removeElementHightlight();
        }
        this.highlightedLayoutElement = element;
        if (this.highlightedLayoutElement) {
            this.highlightedLayoutElement.node.style.boxShadow = this.highlightedShadow;
        }
    };
    LayoutEditor.prototype.addNewLayoutElement = function (elementType) {
        if (elementType === void 0) { elementType = 'div'; }
        var newElementInfo = {
            type: elementType,
            swimAttributes: {
                width: '100%',
            },
            styleAttributes: {
                'flex-grow': 1,
            },
        };
        if (this.selectedLayoutElement) {
            var elemToUpdate = this.findLayoutElementById(this.selectedLayoutElement.node.id, this.activeLayoutDefinition.layoutElements);
            if (!elemToUpdate.children || !elemToUpdate.children.length) {
                elemToUpdate.children = [];
            }
            elemToUpdate.children.push(newElementInfo);
        }
        else {
            if (this.activeLayoutDefinition.layoutElements === null) {
                this.activeLayoutDefinition.layoutElements = [];
                this.activeLayoutDefinition.layoutElements.push(newElementInfo);
            }
            else {
                this.activeLayoutDefinition.layoutElements.push(newElementInfo);
            }
        }
        this.clearWorkspace(false);
        this.activeLayoutRenderTrack.setLayoutDefinition(this.activeLayoutDefinition);
        if (this.activeLayoutDefinition.renderType && this.activeLayoutDefinition.renderType === 'recon') {
            this.activeLayoutRenderTrack.buildReconLayout();
        }
        else {
            this.activeLayoutRenderTrack.buildJsonLayout();
        }
        this.buildLayoutElementList(this.activeLayoutRenderTrack.getLayoutElements());
    };
    LayoutEditor.prototype.addElementAttribute = function (listKey, attributeName, attributeValue) {
        if (attributeName === void 0) { attributeName = 'newAttr'; }
        if (attributeValue === void 0) { attributeValue = ''; }
        if (attributeName === 'style' || attributeName === 'id') {
            alert("You can not set the " + attributeName + " manually");
            return;
        }
        if (attributeName === '') {
            alert('Enter an attribute name.');
            return;
        }
        if (this.selectedLayoutElement) {
            var elemToUpdate = this.findLayoutElementById(this.selectedLayoutElement.node.id, this.activeLayoutDefinition.layoutElements);
            if (attributeName === 'content') {
                if (!elemToUpdate.hasOwnProperty('content')) {
                    elemToUpdate.content = 'new content';
                }
                else {
                    alert('content already exists');
                }
            }
            else {
                if (!elemToUpdate[listKey]) {
                    elemToUpdate[listKey] = {};
                }
                if (elemToUpdate[listKey].hasOwnProperty(attributeName)) {
                    alert("Attribute '" + attributeName + "' already exists");
                }
                else {
                    var attr = elemToUpdate[listKey];
                    attr[attributeName] = attributeValue;
                }
            }
            this.buildLayoutAttributePanelLists();
            this.clearWorkspace(false);
            if (this.activeLayoutDefinition.renderType && this.activeLayoutDefinition.renderType === 'recon') {
                this.activeLayoutRenderTrack.buildReconLayout();
            }
            else {
                this.activeLayoutRenderTrack.buildJsonLayout();
            }
            this.buildLayoutElementList(this.activeLayoutRenderTrack.getLayoutElements());
        }
    };
    LayoutEditor.prototype.findLayoutElementById = function (elementId, searchList) {
        var returnObject = null;
        for (var _i = 0, searchList_1 = searchList; _i < searchList_1.length; _i++) {
            var element = searchList_1[_i];
            if (returnObject !== null) {
                break;
            }
            if (element.id === elementId) {
                returnObject = element;
            }
            if (element.children && returnObject === null) {
                returnObject = this.findLayoutElementById(elementId, element.children);
            }
        }
        return returnObject;
    };
    LayoutEditor.prototype.findParentElementById = function (elementId, searchList, parentElement) {
        if (searchList === void 0) { searchList = this.activeLayoutDefinition.layoutElements; }
        if (parentElement === void 0) { parentElement = null; }
        var returnObject = null;
        for (var _i = 0, searchList_2 = searchList; _i < searchList_2.length; _i++) {
            var element = searchList_2[_i];
            if (returnObject !== null) {
                break;
            }
            if (element.id === elementId) {
                returnObject = parentElement;
            }
            if (element.children && returnObject === null) {
                returnObject = this.findParentElementById(elementId, element.children, element);
            }
        }
        return returnObject;
    };
    LayoutEditor.prototype.deleteChildElement = function (parentElement, childElement) {
        this.selectLayoutElement();
        if (!parentElement) {
            var newChildList = [];
            for (var _i = 0, _a = this.activeLayoutDefinition.layoutElements; _i < _a.length; _i++) {
                var oldChild = _a[_i];
                if (oldChild.id !== childElement.id) {
                    newChildList.push(oldChild);
                }
            }
            this.activeLayoutDefinition.layoutElements = newChildList;
            this.activeLayoutRenderTrack.setLayoutDefinition(this.activeLayoutDefinition);
        }
        else {
            var newChildList = [];
            for (var _b = 0, _c = parentElement.children; _b < _c.length; _b++) {
                var oldChild = _c[_b];
                if (oldChild.id !== childElement.id) {
                    newChildList.push(oldChild);
                }
            }
            parentElement.children = newChildList;
        }
        this.buildLayoutElementList(this.activeLayoutRenderTrack.getLayoutElements());
        this.clearWorkspace(true);
        if (this.activeLayoutDefinition.renderType && this.activeLayoutDefinition.renderType === 'recon') {
            this.activeLayoutRenderTrack.buildReconLayout();
        }
        else {
            this.activeLayoutRenderTrack.buildJsonLayout();
        }
    };
    LayoutEditor.prototype.deleteElementAttribute = function (listKey, attributeKey) {
        if (listKey === 'core') {
            alert('You can not delete core attributes.');
            return false;
        }
        else {
            var newAttrList = {};
            var listToEdit = this.selectedLayoutData[listKey];
            for (var attr in listToEdit) {
                if (attr !== attributeKey) {
                    newAttrList[attr] = listToEdit[attr];
                }
            }
            this.selectedLayoutData[listKey] = newAttrList;
            this.clearWorkspace(false);
            if (this.activeLayoutDefinition.renderType && this.activeLayoutDefinition.renderType === 'recon') {
                this.activeLayoutRenderTrack.buildReconLayout();
            }
            else {
                this.activeLayoutRenderTrack.buildJsonLayout();
            }
        }
        return true;
    };
    LayoutEditor.prototype.spawnDialog = function (layoutDefinition) {
        return null;
    };
    LayoutEditor.prototype.outputLayoutElementsListItems = function (elementsList, target, nestingLevel) {
        var _this = this;
        if (nestingLevel === void 0) { nestingLevel = 0; }
        var row = 0;
        var _loop_2 = function (element) {
            var lineStartChar = '';
            var nestedLines = '';
            row++;
            if (nestingLevel !== 0) {
                lineStartChar = (row === elementsList.length && !element.children) ? '└' : '├';
            }
            if (nestingLevel >= 2) {
                for (var i = 1; i < nestingLevel; i++) {
                    nestedLines += '─';
                }
            }
            var elemName = (element.name) ? "" + element.name : "<" + element.type + ">";
            var tempElement = HtmlView.create((nestingLevel === 0) ? 'div' : 'div')
                .text("" + lineStartChar + nestedLines + " " + elemName);
            if (tempElement.node) {
                tempElement.node.id = element.id;
            }
            var removeButton = HtmlView.create('span')
                .className('removeElementButton')
                .text('-');
            if (this_1.selectedLayoutElement && this_1.selectedLayoutElement.node.id === element.id) {
                this_1.selectedLayoutElement = tempElement;
                tempElement.className('selected');
            }
            else if (!this_1.selectedLayoutElement && element.id === 'root') {
                this_1.selectedLayoutElement = tempElement;
                tempElement.className('selected');
            }
            else {
                tempElement.className('');
            }
            if (element.id !== 'root') {
                removeButton.node.onmouseup = function (evt) {
                    if (confirm('Are you sure you want to delete this element?\r\nThis will also remove any child elements as well and can not be undone')) {
                        var parent_1 = _this.findParentElementById(element.id);
                        _this.deleteChildElement(parent_1, element);
                    }
                    evt.preventDefault();
                    evt.stopPropagation();
                };
                tempElement.append(removeButton);
            }
            tempElement.node.onmouseover = function (evt) {
                if (element.id === 'root') {
                    _this.highlightLayoutElement(_this.workspaceElementTrack);
                }
                else {
                    _this.highlightLayoutElement(_this.activeLayoutRenderTrack.getCachedElement(element.id));
                }
                evt.preventDefault();
                evt.stopPropagation();
            };
            tempElement.node.onmouseout = function (evt) {
                _this.removeElementHightlight();
                evt.preventDefault();
                evt.stopPropagation();
            };
            tempElement.node.onmouseup = function (evt) {
                if (element.id === 'root') {
                    _this.selectLayoutElement(null, tempElement);
                }
                else {
                    _this.selectLayoutElement(element, tempElement);
                }
                evt.preventDefault();
                evt.stopPropagation();
            };
            this_1.layoutElementListTrack.append(tempElement);
            if (element.children && element.children.length > 0) {
                var currNestLevel = nestingLevel + 1;
                this_1.outputLayoutElementsListItems(element.children, tempElement, currNestLevel);
            }
        };
        var this_1 = this;
        for (var _i = 0, elementsList_1 = elementsList; _i < elementsList_1.length; _i++) {
            var element = elementsList_1[_i];
            _loop_2(element);
        }
    };
    return LayoutEditor;
}());

var HtmlView = (function (_super) {
    __extends(HtmlView, _super);
    function HtmlView(node, id) {
        return _super.call(this, node, id) || this;
    }
    HtmlView.prototype.width = function (value, trans) {
        return this.styleLengthEnum('width', value, trans, Animator.REQUIRES_RESIZE);
    };
    HtmlView.prototype.minWidth = function (value, trans) {
        return this.styleLengthEnum('min-width', value, trans);
    };
    HtmlView.prototype.maxWidth = function (value, trans) {
        return this.styleLengthEnum('max-width', value, trans);
    };
    HtmlView.prototype.height = function (value, trans) {
        return this.styleLengthEnum('height', value, trans, Animator.REQUIRES_RESIZE);
    };
    HtmlView.prototype.minHeight = function (value, trans) {
        return this.styleLengthEnum('min-height', value, trans);
    };
    HtmlView.prototype.maxHeight = function (value, trans) {
        return this.styleLengthEnum('max-height', value, trans);
    };
    HtmlView.prototype.type = function (value, trans) {
        return this.attribute('type', value, trans);
    };
    HtmlView.prototype.value = function (value, trans) {
        return this.attribute('value', value, trans);
    };
    HtmlView.prototype.placeholder = function (value, trans) {
        return this.attribute('placeholder', value, trans);
    };
    HtmlView.prototype.autocomplete = function (value, trans) {
        return this.attribute('autocomplete', value, trans);
    };
    HtmlView.prototype.selected = function (value, trans) {
        return this.attributeBoolean('selected', value, trans);
    };
    HtmlView.prototype.checked = function (value, trans) {
        return this.attributeBoolean('checked', value, trans);
    };
    HtmlView.prototype.disabled = function (value, trans) {
        return this.attributeBoolean('disabled', value, trans);
    };
    HtmlView.prototype.title = function (value, trans) {
        return this.attribute('title', value, trans);
    };
    HtmlView.prototype.display = function (value, trans) {
        return this.styleEnum('display', value, trans);
    };
    HtmlView.prototype.visibility = function (value, trans) {
        return this.styleEnum('visibility', value, trans);
    };
    HtmlView.prototype.position = function (value, trans) {
        return this.styleEnum('position', value, trans);
    };
    HtmlView.prototype.justifyContent = function (value, trans) {
        return this.styleEnum('justify-content', value, trans);
    };
    HtmlView.prototype.alignContent = function (value, trans) {
        return this.styleEnum('align-content', value, trans);
    };
    HtmlView.prototype.alignItems = function (value, trans) {
        return this.styleEnum('align-items', value, trans);
    };
    HtmlView.prototype.alignSelf = function (value, trans) {
        return this.styleEnum('align-self', value, trans);
    };
    HtmlView.prototype.flexDirection = function (value, trans) {
        return this.styleEnum('flex-direction', value, trans);
    };
    HtmlView.prototype.flexWrap = function (value, trans) {
        return this.styleEnum('flex-wrap', value, trans);
    };
    HtmlView.prototype.flexGrow = function (value, trans) {
        return this.styleNumber('flex-grow', value, trans);
    };
    HtmlView.prototype.flexShrink = function (value, trans) {
        return this.styleNumber('flex-shrink', value, trans);
    };
    HtmlView.prototype.flexBasis = function (value, trans) {
        return this.styleLengthEnum('flex-basis', value, trans);
    };
    HtmlView.prototype.order = function (value, trans) {
        return this.styleNumber('order', value, trans);
    };
    HtmlView.prototype.verticalAlign = function (value, trans) {
        return this.styleLengthEnum('vertical-align', value, trans);
    };
    HtmlView.prototype.overflowX = function (value, trans) {
        return this.styleEnum('overflow-x', value, trans);
    };
    HtmlView.prototype.overflowY = function (value, trans) {
        return this.styleEnum('overflow-y', value, trans);
    };
    HtmlView.prototype.overflow = function (value, trans) {
        return this.styleEnum('overflow', value, trans);
    };
    HtmlView.prototype.pointerEvents = function (value, trans) {
        return this.styleEnum('pointer-events', value, trans);
    };
    HtmlView.prototype.cursor = function (value, trans) {
        return this.styleEnum('cursor', value, trans);
    };
    HtmlView.prototype.opacity = function (value, trans) {
        return this.styleNumber('opacity', value, trans);
    };
    HtmlView.prototype.backgroundColor = function (value, trans) {
        return this.styleColor('background-color', value, trans);
    };
    HtmlView.prototype.backdropFilter = function (value, trans) {
        return this.style('backdrop-filter', value, trans);
    };
    HtmlView.prototype.filter = function (value, trans) {
        return this.style('filter', value, trans);
    };
    HtmlView.prototype.boxShadow = function (value, trans) {
        if (value !== undefined && value !== null) {
            value = BoxShadow.fromAny(value);
        }
        var result = this.style('box-shadow', value, trans);
        if (typeof result === 'string') {
            result = BoxShadow.fromAny(result);
        }
        return result;
    };
    HtmlView.prototype.boxSizing = function (value, trans) {
        return this.styleEnum('box-sizing', value, trans);
    };
    HtmlView.prototype.transform = function (value, trans) {
        return this.styleTransform('transform', value, trans);
    };
    HtmlView.prototype.top = function (value, trans) {
        return this.styleLengthEnum('top', value, trans);
    };
    HtmlView.prototype.right = function (value, trans) {
        return this.styleLengthEnum('right', value, trans);
    };
    HtmlView.prototype.bottom = function (value, trans) {
        return this.styleLengthEnum('bottom', value, trans);
    };
    HtmlView.prototype.left = function (value, trans) {
        return this.styleLengthEnum('left', value, trans);
    };
    HtmlView.prototype.marginTop = function (value, trans) {
        return this.styleLengthEnum('margin-top', value, trans);
    };
    HtmlView.prototype.marginRight = function (value, trans) {
        return this.styleLengthEnum('margin-right', value, trans);
    };
    HtmlView.prototype.marginBottom = function (value, trans) {
        return this.styleLengthEnum('margin-bottom', value, trans);
    };
    HtmlView.prototype.marginLeft = function (value, trans) {
        return this.styleLengthEnum('margin-left', value, trans);
    };
    HtmlView.prototype.margin = function (value, trans) {
        if (value === undefined) {
            return [this.marginTop(), this.marginRight(), this.marginBottom(), this.marginLeft()];
        }
        else {
            if (Array.isArray(value)) {
                if (value.length >= 1) {
                    this.marginTop(value[0], trans);
                }
                if (value.length >= 2) {
                    this.marginRight(value[1], trans);
                }
                if (value.length >= 3) {
                    this.marginBottom(value[2], trans);
                }
                if (value.length >= 4) {
                    this.marginLeft(value[3], trans);
                }
            }
            else {
                this.marginTop(value, trans);
                this.marginRight(value, trans);
                this.marginBottom(value, trans);
                this.marginLeft(value, trans);
            }
            return this;
        }
    };
    HtmlView.prototype.paddingTop = function (value, trans) {
        return this.styleLength('padding-top', value, trans);
    };
    HtmlView.prototype.paddingRight = function (value, trans) {
        return this.styleLength('padding-right', value, trans);
    };
    HtmlView.prototype.paddingBottom = function (value, trans) {
        return this.styleLength('padding-bottom', value, trans);
    };
    HtmlView.prototype.paddingLeft = function (value, trans) {
        return this.styleLength('padding-left', value, trans);
    };
    HtmlView.prototype.padding = function (value, trans) {
        if (value === undefined) {
            return [this.paddingTop(), this.paddingRight(), this.paddingBottom(), this.paddingLeft()];
        }
        else {
            if (Array.isArray(value)) {
                if (value.length >= 1) {
                    this.paddingTop(value[0], trans);
                }
                if (value.length >= 2) {
                    this.paddingRight(value[1], trans);
                }
                if (value.length >= 3) {
                    this.paddingBottom(value[2], trans);
                }
                if (value.length >= 4) {
                    this.paddingLeft(value[3], trans);
                }
            }
            else {
                this.paddingTop(value, trans);
                this.paddingRight(value, trans);
                this.paddingBottom(value, trans);
                this.paddingLeft(value, trans);
            }
            return this;
        }
    };
    HtmlView.prototype.borderTopWidth = function (value, trans) {
        return this.styleLengthEnum('border-top-width', value, trans);
    };
    HtmlView.prototype.borderRightWidth = function (value, trans) {
        return this.styleLengthEnum('border-right-width', value, trans);
    };
    HtmlView.prototype.borderBottomWidth = function (value, trans) {
        return this.styleLengthEnum('border-bottom-width', value, trans);
    };
    HtmlView.prototype.borderLeftWidth = function (value, trans) {
        return this.styleLengthEnum('border-left-width', value, trans);
    };
    HtmlView.prototype.borderWidth = function (value, trans) {
        if (value === undefined) {
            return [this.borderTopWidth(), this.borderRightWidth(), this.borderBottomWidth(), this.borderLeftWidth()];
        }
        else {
            if (Array.isArray(value)) {
                if (value.length >= 1) {
                    this.borderTopWidth(value[0], trans);
                }
                if (value.length >= 2) {
                    this.borderRightWidth(value[1], trans);
                }
                if (value.length >= 3) {
                    this.borderBottomWidth(value[2], trans);
                }
                if (value.length >= 4) {
                    this.borderLeftWidth(value[3], trans);
                }
            }
            else {
                this.borderTopWidth(value, trans);
                this.borderRightWidth(value, trans);
                this.borderBottomWidth(value, trans);
                this.borderLeftWidth(value, trans);
            }
            return this;
        }
    };
    HtmlView.prototype.borderTopStyle = function (value, trans) {
        return this.styleEnum('border-top-style', value, trans);
    };
    HtmlView.prototype.borderRightStyle = function (value, trans) {
        return this.styleEnum('border-right-style', value, trans);
    };
    HtmlView.prototype.borderBottomStyle = function (value, trans) {
        return this.styleEnum('border-bottom-style', value, trans);
    };
    HtmlView.prototype.borderLeftStyle = function (value, trans) {
        return this.styleEnum('border-left-style', value, trans);
    };
    HtmlView.prototype.borderStyle = function (value, trans) {
        if (value === undefined) {
            return [this.borderTopStyle(), this.borderRightStyle(), this.borderBottomStyle(), this.borderLeftStyle()];
        }
        else {
            if (Array.isArray(value)) {
                if (value.length >= 1) {
                    this.borderTopStyle(value[0], trans);
                }
                if (value.length >= 2) {
                    this.borderRightStyle(value[1], trans);
                }
                if (value.length >= 3) {
                    this.borderBottomStyle(value[2], trans);
                }
                if (value.length >= 4) {
                    this.borderLeftStyle(value[3], trans);
                }
            }
            else {
                this.borderTopStyle(value, trans);
                this.borderRightStyle(value, trans);
                this.borderBottomStyle(value, trans);
                this.borderLeftStyle(value, trans);
            }
            return this;
        }
    };
    HtmlView.prototype.borderTopColor = function (value, trans) {
        return this.styleColorEnum('border-top-color', value, trans);
    };
    HtmlView.prototype.borderRightColor = function (value, trans) {
        return this.styleColorEnum('border-right-color', value, trans);
    };
    HtmlView.prototype.borderBottomColor = function (value, trans) {
        return this.styleColorEnum('border-bottom-color', value, trans);
    };
    HtmlView.prototype.borderLeftColor = function (value, trans) {
        return this.styleColorEnum('border-left-color', value, trans);
    };
    HtmlView.prototype.borderColor = function (value, trans) {
        if (value === undefined) {
            return [this.borderTopColor(), this.borderRightColor(), this.borderBottomColor(), this.borderLeftColor()];
        }
        else {
            if (Array.isArray(value)) {
                if (value.length >= 1) {
                    this.borderTopColor(value[0], trans);
                }
                if (value.length >= 2) {
                    this.borderRightColor(value[1], trans);
                }
                if (value.length >= 3) {
                    this.borderBottomColor(value[2], trans);
                }
                if (value.length >= 4) {
                    this.borderLeftColor(value[3], trans);
                }
            }
            else {
                this.borderTopColor(value, trans);
                this.borderRightColor(value, trans);
                this.borderBottomColor(value, trans);
                this.borderLeftColor(value, trans);
            }
            return this;
        }
    };
    HtmlView.prototype.borderTopLeftRadius = function (value, trans) {
        return this.styleLength('border-top-left-radius', value, trans);
    };
    HtmlView.prototype.borderTopRightRadius = function (value, trans) {
        return this.styleLength('border-top-right-radius', value, trans);
    };
    HtmlView.prototype.borderBottomRightRadius = function (value, trans) {
        return this.styleLength('border-bottom-right-radius', value, trans);
    };
    HtmlView.prototype.borderBottomLeftRadius = function (value, trans) {
        return this.styleLength('border-bottom-left-radius', value, trans);
    };
    HtmlView.prototype.borderRadius = function (value, trans) {
        return this.styleLength('border-radius', value, trans);
    };
    HtmlView.prototype.borderCollapse = function (value, trans) {
        return this.styleEnum('border-collapse', value, trans);
    };
    HtmlView.prototype.borderSpacing = function (value, trans) {
        return this.style('border-spacing', value, trans);
    };
    HtmlView.prototype.outlineWidth = function (value, trans) {
        return this.styleLengthEnum('outline-width', value, trans);
    };
    HtmlView.prototype.outlineStyle = function (value, trans) {
        return this.styleEnum('outline-style', value, trans);
    };
    HtmlView.prototype.outlineColor = function (value, trans) {
        return this.styleColorEnum('outline-color', value, trans);
    };
    HtmlView.prototype.appearance = function (value, trans) {
        return this.styleEnum('appearance', value, trans);
    };
    HtmlView.prototype.zIndex = function (value, trans) {
        return this.styleNumberEnum('z-index', value, trans);
    };
    HtmlView.prototype.fontFamily = function (value, trans) {
        return this.style('font-family', value, trans);
    };
    HtmlView.prototype.fontSize = function (value, trans) {
        return this.styleLengthEnum('font-size', value, trans);
    };
    HtmlView.prototype.fontStyle = function (value, trans) {
        return this.styleEnum('font-style', value, trans);
    };
    HtmlView.prototype.fontWeight = function (value, trans) {
        return this.styleEnum('font-weight', value, trans);
    };
    HtmlView.prototype.fontVariant = function (value, trans) {
        return this.style('font-variant', value, trans);
    };
    HtmlView.prototype.lineHeight = function (value, trans) {
        if (typeof value === 'number') {
            value = Length.fromAny(value, '');
        }
        return this.styleLengthEnum('line-height', value, trans);
    };
    HtmlView.prototype.textTransform = function (value, trans) {
        return this.styleEnum('text-transform', value, trans);
    };
    HtmlView.prototype.textOverflow = function (value, trans) {
        return this.style('text-overflow', value, trans);
    };
    HtmlView.prototype.textAlign = function (value, trans) {
        return this.styleEnum('text-align', value, trans);
    };
    HtmlView.prototype.textDecorationLine = function (value, trans) {
        return this.style('text-decoration-line', value, trans);
    };
    HtmlView.prototype.textDecorationStyle = function (value, trans) {
        return this.styleEnum('text-decoration-style', value, trans);
    };
    HtmlView.prototype.textDecorationColor = function (value, trans) {
        return this.styleColorEnum('text-decoration-color', value, trans);
    };
    HtmlView.prototype.whiteSpace = function (value, trans) {
        return this.styleEnum('white-space', value, trans);
    };
    HtmlView.prototype.userSelect = function (value, trans) {
        this.styleEnum('-webkit-user-select', value, trans);
        this.styleEnum('-moz-user-select', value, trans);
        this.styleEnum('-ms-user-select', value, trans);
        return this.styleEnum('user-select', value, trans);
    };
    HtmlView.prototype.color = function (value, trans) {
        return this.styleColorEnum('color', value, trans);
    };
    HtmlView.prototype.fill = function (value, trans) {
        return this.styleColorEnum('fill', value, trans);
    };
    HtmlView.prototype.fillRule = function (value, trans) {
        return this.style('fill-rule', value, trans);
    };
    HtmlView.prototype.stroke = function (value, trans) {
        return this.styleColorEnum('stroke', value, trans);
    };
    HtmlView.prototype.strokeWidth = function (value, trans) {
        return this.styleNumber('stroke-width', value, trans);
    };
    HtmlView.prototype.strokeDashArray = function (value, trans) {
        return this.styleNumber('stroke-dasharray', value, trans);
    };
    HtmlView.prototype.createChildView = function (node) {
        return HtmlView.create(node);
    };
    HtmlView.prototype.append = function (node) {
        return _super.prototype.append.call(this, node);
    };
    HtmlView.prototype.prepend = function (node) {
        return _super.prototype.prepend.call(this, node);
    };
    HtmlView.prototype.insertBefore = function (node, target) {
        return _super.prototype.insertBefore.call(this, node, target);
    };
    HtmlView.prototype.renderLayout = function (layoutDataDefinition) {
        this.node.innerHTML = "";
        var layout = new LayoutRenderView(this.node);
        layout.setLayoutDefinition(layoutDataDefinition);
        if (layoutDataDefinition.renderType && layoutDataDefinition.renderType === 'recon') {
            layout.buildReconLayout();
        }
        else {
            layout.buildJsonLayout();
        }
        return layout;
    };
    HtmlView.create = function (node) {
        if (node instanceof NodeView) {
            return node;
        }
        else if (typeof node === 'string') {
            return new View.HtmlView(document.createElement(node));
        }
        else if (node.view) {
            return node.view;
        }
        else if (node instanceof HTMLElement) {
            return new View.HtmlView(node);
        }
        else if (node instanceof SVGElement) {
            return new View.SvgView(node);
        }
        else if (node instanceof Element) {
            return new View.ElemView(node);
        }
        else if (node instanceof Text) {
            return new View.TextView(node);
        }
        else {
            return new NodeView(node);
        }
    };
    return HtmlView;
}(ElemView));
View.HtmlView = HtmlView;

var HtmlModel = (function (_super) {
    __extends(HtmlModel, _super);
    function HtmlModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return HtmlModel;
}(ElemModel));

var HtmlForm = (function (_super) {
    __extends(HtmlForm, _super);
    function HtmlForm() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HtmlForm.prototype.materializeViewParam = function (view, param, stack, factory) {
        return _super.prototype.materializeViewParam.call(this, view, param, stack, factory);
    };
    HtmlForm.prototype.materializeModelParam = function (model, param, stack, factory) {
        return _super.prototype.materializeModelParam.call(this, model, param, stack, factory);
    };
    return HtmlForm;
}(ElemForm));

var HtmlElementForm = (function (_super) {
    __extends(HtmlElementForm, _super);
    function HtmlElementForm() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HtmlElementForm.prototype.materializeView = function (view, value, stack, factory, viewTag, modelTag) {
        if (modelTag === void 0) { modelTag = viewTag; }
        var modelDef = Record.empty();
        value.forEach(function (item) {
            if (item instanceof Attr && item.key.value === viewTag) {
                if (item.value instanceof Record) {
                    modelDef.attr(modelTag);
                    var attrs_1 = Record.empty(1 + item.value.length).attr('attrs');
                    item.value.forEach(function (item) {
                        if (item instanceof Slot) {
                            var attrValueName = item.key.value;
                            var attrValueStr_1 = '';
                            if (item.value instanceof RecordMap) {
                                item.value.forEach(function (attrValue) {
                                    if (attrValue.value instanceof Text$1) {
                                        console.info(attrValue.value);
                                        attrValueStr_1 += attrValue.key + ": " + attrValue.value + "; ";
                                    }
                                    else {
                                        attrValueStr_1 += attrValue + "; ";
                                    }
                                });
                            }
                            else {
                                attrValueStr_1 = item.value.value;
                            }
                            view.node.setAttribute(attrValueName, attrValueStr_1);
                        }
                        attrs_1.push(item);
                    }, this);
                    modelDef.push(attrs_1);
                }
                else if (viewTag !== modelTag) {
                    modelDef.attr(modelTag, item.value);
                }
                else {
                    modelDef.push(item);
                }
            }
            else {
                if (item instanceof Slot) {
                    var attrValueName = item.key.value;
                    if (attrValueName === 'style') {
                        var attrValueStr_2 = '';
                        if (item.value instanceof RecordMap) {
                            item.value.forEach(function (attrValue) {
                                if (attrValue.value instanceof Text$1) {
                                    attrValueStr_2 += attrValue.key + ": " + attrValue.value + "; ";
                                }
                                else {
                                    attrValueStr_2 += attrValue + "; ";
                                }
                            });
                        }
                        else {
                            attrValueStr_2 = item.value.value;
                        }
                        view.node.setAttribute(attrValueName, attrValueStr_2);
                    }
                }
                item = this.materializeViewParam(view, item, stack, factory, false);
                if (item instanceof Record && item.tag === undefined) {
                    item.forEach(function (item) {
                        item = this.materializeViewParam(view, item, stack, factory, true);
                        if (item instanceof Item && item.isDefined()) {
                            modelDef.push(item);
                        }
                    }, this);
                }
                else if (item instanceof Item && item.isDefined()) {
                    modelDef.push(item);
                }
            }
        }, this);
        return modelDef;
    };
    HtmlElementForm.prototype.materializeViewParam = function (view, param, stack, factory, nested) {
        if (param instanceof Text$1) {
            var textView = TextView.create(param.value);
            view.append(textView);
            return textView;
        }
        else if (param instanceof Value) {
            var childView = factory.castView(param.toValue(), stack, factory);
            if (childView instanceof NodeView) {
                view.append(childView);
                return childView;
            }
            else if (childView instanceof View) {
                view.appendChildView(childView);
                return childView;
            }
            else if (nested && param.isDefined() && param.tag === undefined) {
                var textView = TextView.create();
                var modelDef = Record.empty(1).attr('text', param);
                textView.setModel(modelDef);
                return textView;
            }
        }
        return _super.prototype.materializeViewParam.call(this, view, param, stack, factory);
    };
    HtmlElementForm.prototype.materializeModel = function (model, value, stack, factory, modelTag) {
        var modelDef = Record.empty();
        value.forEach(function (item) {
            item = this.materializeModelParam(model, item, stack, factory, modelTag);
            if (item instanceof Item && item.isDefined()) {
                modelDef.push(item);
            }
        }, this);
        return modelDef;
    };
    HtmlElementForm.prototype.materializeModelParam = function (model, param, stack, factory, modelTag) {
        if (param instanceof Attr && param.key.value === modelTag) {
            return Item.Absent;
        }
        return _super.prototype.materializeModelParam.call(this, model, param, stack, factory);
    };
    return HtmlElementForm;
}(HtmlForm));

var HtmlNativeElementForm = (function (_super) {
    __extends(HtmlNativeElementForm, _super);
    function HtmlNativeElementForm(tag) {
        var _this = _super.call(this) || this;
        _this.tag = tag;
        return _this;
    }
    HtmlNativeElementForm.prototype.castView = function (value, stack, factory) {
        if (value.tag === this.tag) {
            var view = HtmlView.create(this.tag);
            var modelDef = this.materializeView(view, value, stack, factory, this.tag);
            view.setModel(modelDef);
            return view;
        }
        return undefined;
    };
    HtmlNativeElementForm.prototype.castModel = function (value, stack, factory) {
        if (value.tag === this.tag) {
            var model = new HtmlModel();
            var dataDef = this.materializeModel(model, value, stack, factory, this.tag);
            model.setData(dataDef);
            return model;
        }
        return undefined;
    };
    return HtmlNativeElementForm;
}(HtmlElementForm));
UiForm.addGlobal(new HtmlNativeElementForm('main'));
UiForm.addGlobal(new HtmlNativeElementForm('article'));
UiForm.addGlobal(new HtmlNativeElementForm('section'));
UiForm.addGlobal(new HtmlNativeElementForm('nav'));
UiForm.addGlobal(new HtmlNativeElementForm('aside'));
UiForm.addGlobal(new HtmlNativeElementForm('h1'));
UiForm.addGlobal(new HtmlNativeElementForm('h2'));
UiForm.addGlobal(new HtmlNativeElementForm('h3'));
UiForm.addGlobal(new HtmlNativeElementForm('h4'));
UiForm.addGlobal(new HtmlNativeElementForm('h5'));
UiForm.addGlobal(new HtmlNativeElementForm('h6'));
UiForm.addGlobal(new HtmlNativeElementForm('hgroup'));
UiForm.addGlobal(new HtmlNativeElementForm('header'));
UiForm.addGlobal(new HtmlNativeElementForm('footer'));
UiForm.addGlobal(new HtmlNativeElementForm('address'));
UiForm.addGlobal(new HtmlNativeElementForm('p'));
UiForm.addGlobal(new HtmlNativeElementForm('hr'));
UiForm.addGlobal(new HtmlNativeElementForm('pre'));
UiForm.addGlobal(new HtmlNativeElementForm('blockquote'));
UiForm.addGlobal(new HtmlNativeElementForm('ol'));
UiForm.addGlobal(new HtmlNativeElementForm('ul'));
UiForm.addGlobal(new HtmlNativeElementForm('menu'));
UiForm.addGlobal(new HtmlNativeElementForm('li'));
UiForm.addGlobal(new HtmlNativeElementForm('dl'));
UiForm.addGlobal(new HtmlNativeElementForm('dt'));
UiForm.addGlobal(new HtmlNativeElementForm('dd'));
UiForm.addGlobal(new HtmlNativeElementForm('figure'));
UiForm.addGlobal(new HtmlNativeElementForm('figcaption'));
UiForm.addGlobal(new HtmlNativeElementForm('main'));
UiForm.addGlobal(new HtmlNativeElementForm('div'));
UiForm.addGlobal(new HtmlNativeElementForm('a'));
UiForm.addGlobal(new HtmlNativeElementForm('em'));
UiForm.addGlobal(new HtmlNativeElementForm('strong'));
UiForm.addGlobal(new HtmlNativeElementForm('small'));
UiForm.addGlobal(new HtmlNativeElementForm('s'));
UiForm.addGlobal(new HtmlNativeElementForm('cite'));
UiForm.addGlobal(new HtmlNativeElementForm('q'));
UiForm.addGlobal(new HtmlNativeElementForm('dfn'));
UiForm.addGlobal(new HtmlNativeElementForm('abbr'));
UiForm.addGlobal(new HtmlNativeElementForm('ruby'));
UiForm.addGlobal(new HtmlNativeElementForm('rt'));
UiForm.addGlobal(new HtmlNativeElementForm('rp'));
UiForm.addGlobal(new HtmlNativeElementForm('data'));
UiForm.addGlobal(new HtmlNativeElementForm('time'));
UiForm.addGlobal(new HtmlNativeElementForm('code'));
UiForm.addGlobal(new HtmlNativeElementForm('var'));
UiForm.addGlobal(new HtmlNativeElementForm('samp'));
UiForm.addGlobal(new HtmlNativeElementForm('kbd'));
UiForm.addGlobal(new HtmlNativeElementForm('sub'));
UiForm.addGlobal(new HtmlNativeElementForm('sup'));
UiForm.addGlobal(new HtmlNativeElementForm('i'));
UiForm.addGlobal(new HtmlNativeElementForm('b'));
UiForm.addGlobal(new HtmlNativeElementForm('u'));
UiForm.addGlobal(new HtmlNativeElementForm('mark'));
UiForm.addGlobal(new HtmlNativeElementForm('bdi'));
UiForm.addGlobal(new HtmlNativeElementForm('bdo'));
UiForm.addGlobal(new HtmlNativeElementForm('span'));
UiForm.addGlobal(new HtmlNativeElementForm('br'));
UiForm.addGlobal(new HtmlNativeElementForm('wbr'));
UiForm.addGlobal(new HtmlNativeElementForm('a'));
UiForm.addGlobal(new HtmlNativeElementForm('ins'));
UiForm.addGlobal(new HtmlNativeElementForm('del'));
UiForm.addGlobal(new HtmlNativeElementForm('picture'));
UiForm.addGlobal(new HtmlNativeElementForm('source'));
UiForm.addGlobal(new HtmlNativeElementForm('img'));
UiForm.addGlobal(new HtmlNativeElementForm('iframe'));
UiForm.addGlobal(new HtmlNativeElementForm('embed'));
UiForm.addGlobal(new HtmlNativeElementForm('object'));
UiForm.addGlobal(new HtmlNativeElementForm('param'));
UiForm.addGlobal(new HtmlNativeElementForm('video'));
UiForm.addGlobal(new HtmlNativeElementForm('audio'));
UiForm.addGlobal(new HtmlNativeElementForm('track'));
UiForm.addGlobal(new HtmlNativeElementForm('table'));
UiForm.addGlobal(new HtmlNativeElementForm('caption'));
UiForm.addGlobal(new HtmlNativeElementForm('colgroup'));
UiForm.addGlobal(new HtmlNativeElementForm('col'));
UiForm.addGlobal(new HtmlNativeElementForm('tbody'));
UiForm.addGlobal(new HtmlNativeElementForm('thead'));
UiForm.addGlobal(new HtmlNativeElementForm('tfoot'));
UiForm.addGlobal(new HtmlNativeElementForm('tr'));
UiForm.addGlobal(new HtmlNativeElementForm('td'));
UiForm.addGlobal(new HtmlNativeElementForm('th'));
UiForm.addGlobal(new HtmlNativeElementForm('form'));
UiForm.addGlobal(new HtmlNativeElementForm('label'));
UiForm.addGlobal(new HtmlNativeElementForm('input'));
UiForm.addGlobal(new HtmlNativeElementForm('button'));
UiForm.addGlobal(new HtmlNativeElementForm('select'));
UiForm.addGlobal(new HtmlNativeElementForm('datalist'));
UiForm.addGlobal(new HtmlNativeElementForm('optgroup'));
UiForm.addGlobal(new HtmlNativeElementForm('option'));
UiForm.addGlobal(new HtmlNativeElementForm('textarea'));
UiForm.addGlobal(new HtmlNativeElementForm('output'));
UiForm.addGlobal(new HtmlNativeElementForm('progress'));
UiForm.addGlobal(new HtmlNativeElementForm('meter'));
UiForm.addGlobal(new HtmlNativeElementForm('fieldset'));
UiForm.addGlobal(new HtmlNativeElementForm('legend'));
UiForm.addGlobal(new HtmlNativeElementForm('details'));
UiForm.addGlobal(new HtmlNativeElementForm('summary'));
UiForm.addGlobal(new HtmlNativeElementForm('dialog'));
UiForm.addGlobal(new HtmlNativeElementForm('script'));
UiForm.addGlobal(new HtmlNativeElementForm('noscript'));

var HtmlCustomElementForm = (function (_super) {
    __extends(HtmlCustomElementForm, _super);
    function HtmlCustomElementForm() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(HtmlCustomElementForm.prototype, "tag", {
        get: function () {
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    HtmlCustomElementForm.prototype.isCustomElement = function (tag) {
        return typeof customElements !== 'undefined' && customElements.get(tag);
    };
    HtmlCustomElementForm.prototype.castView = function (value, stack, factory) {
        var tag = value.tag;
        if (tag !== undefined && this.isCustomElement(tag)) {
            var view = HtmlView.create(tag);
            var modelDef = this.materializeView(view, value, stack, factory, tag, 'customElement');
            view.setModel(modelDef);
            return view;
        }
        return undefined;
    };
    HtmlCustomElementForm.prototype.castModel = function (value, stack, factory) {
        if (value.tag === 'customElement') {
            var model = new HtmlModel();
            var dataDef = this.materializeModel(model, value, stack, factory, 'customElement');
            model.setData(dataDef);
            return model;
        }
        return undefined;
    };
    HtmlCustomElementForm.Form = new HtmlCustomElementForm();
    return HtmlCustomElementForm;
}(HtmlElementForm));
UiForm.addGlobal(HtmlCustomElementForm.Form);

var StylesheetView = (function (_super) {
    __extends(StylesheetView, _super);
    function StylesheetView(node) {
        return _super.call(this, node) || this;
    }
    StylesheetView.prototype.didSetStateParam = function (key, value) {
        if (key === 'rules') {
            this.didSetStyleRules(value);
        }
        else {
            _super.prototype.didSetStateParam.call(this, key, value);
        }
    };
    StylesheetView.prototype.didSetStyleRules = function (rules) {
        var ruleIndex = 0;
        rules.forEach(function (rule) {
            if (rule instanceof Slot && rule.key instanceof Text$1) {
                if (rule.value instanceof Record && rule.value.isObject()) {
                    var ruleText = void 0;
                    if (rule.value instanceof Record && rule.value.isObject()) {
                        ruleText = StylesheetView.castCssRules(rule.key.value, rule.value);
                    }
                    else {
                        ruleText = StylesheetView.castCssRule(rule.key.value, rule.value);
                    }
                    if (ruleText !== undefined) {
                        var sheet = this.node.sheet;
                        if (ruleIndex < sheet.cssRules.length) {
                            sheet.deleteRule(ruleIndex);
                        }
                        sheet.insertRule(ruleText, ruleIndex);
                        ruleIndex += 1;
                    }
                }
            }
        }, this);
    };
    StylesheetView.castCssRules = function (selector, rules) {
        var cssText = selector + ' {';
        rules.forEach(function (rule) {
            if (rule instanceof Slot && rule.key instanceof Text$1) {
                var ruleText = void 0;
                if (rule.value instanceof Record && rule.value.isObject()) {
                    ruleText = StylesheetView.castCssRules(rule.key.value, rule.value);
                }
                else {
                    ruleText = StylesheetView.castCssRule(rule.key.value, rule.value);
                }
                if (ruleText !== undefined) {
                    cssText += ' ' + ruleText;
                }
            }
        });
        cssText += ' }';
        return cssText;
    };
    StylesheetView.castCssRule = function (name, value) {
        var ruleValue = value.stringValue();
        if (ruleValue !== undefined) {
            return name + ': ' + value.stringValue() + ';';
        }
        return undefined;
    };
    StylesheetView.create = function () {
        var node = document.createElement('style');
        node.setAttribute('type', 'text/css');
        return new StylesheetView(node);
    };
    return StylesheetView;
}(HtmlView));

var StylesheetModel = (function (_super) {
    __extends(StylesheetModel, _super);
    function StylesheetModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    StylesheetModel.prototype.willRemodel = function (state, stack) {
        _super.prototype.willRemodel.call(this, state, stack);
        var rules = this._modelScope._record.evaluate(stack);
        state.slot('rules', rules);
    };
    StylesheetModel.prototype.stack = function () {
        if (this._parentModel) {
            return this._parentModel.stack();
        }
        else {
            return EvalStack.of(Model.GlobalScope);
        }
    };
    return StylesheetModel;
}(HtmlModel));

var StylesheetForm = (function (_super) {
    __extends(StylesheetForm, _super);
    function StylesheetForm() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(StylesheetForm.prototype, "tag", {
        get: function () {
            return 'stylesheet';
        },
        enumerable: true,
        configurable: true
    });
    StylesheetForm.prototype.castView = function (value, stack, factory) {
        if (value.tag === this.tag) {
            var view = StylesheetView.create();
            var modelDef = this.materializeView(view, value, stack, factory);
            view.setModel(modelDef);
            return view;
        }
        return undefined;
    };
    StylesheetForm.prototype.castModel = function (value, stack, factory) {
        if (value.tag === this.tag) {
            var model = new StylesheetModel();
            var dataDef = this.materializeModel(model, value, stack, factory);
            model.setData(dataDef);
            return model;
        }
        return undefined;
    };
    StylesheetForm.prototype.materializeViewParam = function (view, param, stack, factory) {
        return _super.prototype.materializeViewParam.call(this, view, param, stack, factory);
    };
    StylesheetForm.prototype.materializeModelParam = function (model, param, stack, factory) {
        if (param instanceof Attr && param.key.value === this.tag) {
            return Item.Absent;
        }
        return _super.prototype.materializeModelParam.call(this, model, param, stack, factory);
    };
    StylesheetForm.Form = new StylesheetForm();
    return StylesheetForm;
}(HtmlForm));
UiForm.addGlobal(StylesheetForm.Form);

var PopoverState;
(function (PopoverState) {
    PopoverState[PopoverState["Hidden"] = 0] = "Hidden";
    PopoverState[PopoverState["Showing"] = 1] = "Showing";
    PopoverState[PopoverState["Visible"] = 2] = "Visible";
    PopoverState[PopoverState["Hiding"] = 3] = "Hiding";
})(PopoverState || (PopoverState = {}));
var PopoverAnimator = (function (_super) {
    __extends(PopoverAnimator, _super);
    function PopoverAnimator(popover, popoverState) {
        var _this = _super.call(this) || this;
        _this.popover = popover;
        _this.popoverState = popoverState;
        _this.opacity = undefined;
        _this.backgroundColor = undefined;
        _this.borderRadius = undefined;
        _this.arrowWidth = undefined;
        _this.arrowHeight = undefined;
        _this.viewportLeft = undefined;
        _this.viewportRight = undefined;
        _this.viewportTop = undefined;
        _this.viewportBottom = undefined;
        _this.sourceLeft = undefined;
        _this.sourceTop = undefined;
        _this.sourceWidth = undefined;
        _this.sourceHeight = undefined;
        return _this;
    }
    PopoverAnimator.prototype.onFrame = function (t) {
        if (this.opacity) {
            this.opacity.onFrame(t);
        }
        if (this.backgroundColor) {
            this.backgroundColor.onFrame(t);
        }
        if (this.borderRadius) {
            this.borderRadius.onFrame(t);
        }
        if (this.arrowWidth) {
            this.arrowWidth.onFrame(t);
        }
        if (this.arrowHeight) {
            this.arrowHeight.onFrame(t);
        }
        if (this.viewportLeft) {
            this.viewportLeft.onFrame(t);
        }
        if (this.viewportRight) {
            this.viewportRight.onFrame(t);
        }
        if (this.viewportTop) {
            this.viewportTop.onFrame(t);
        }
        if (this.viewportBottom) {
            this.viewportBottom.onFrame(t);
        }
        if (this.sourceLeft) {
            this.sourceLeft.onFrame(t);
        }
        if (this.sourceTop) {
            this.sourceTop.onFrame(t);
        }
        if (this.sourceWidth) {
            this.sourceWidth.onFrame(t);
        }
        if (this.sourceHeight) {
            this.sourceHeight.onFrame(t);
        }
        this.update();
    };
    PopoverAnimator.prototype.show = function (trans) {
        if (this.popoverState === 0 || this.popoverState === 3) {
            trans = Transition.fromAny(trans || true, 1);
            var animator = this.opacity;
            if (!animator) {
                if (!trans.f) {
                    trans = trans.range(0);
                }
                animator = new PopoverOpacityAnimator(this, 0, trans);
                this.opacity = animator;
            }
            this.popover.willShow();
            this.popover.node.style.setProperty('pointer-events', 'auto');
            this.popoverState = 1;
            animator.set(1, trans);
            return true;
        }
        else {
            return false;
        }
    };
    PopoverAnimator.prototype.hide = function (trans) {
        if (this.popoverState === 2 || this.popoverState === 1) {
            trans = Transition.fromAny(trans || true, 0);
            var animator = this.opacity;
            if (!animator) {
                if (!trans.f) {
                    trans = trans.range(1);
                }
                animator = new PopoverOpacityAnimator(this, 1, trans);
                this.opacity = animator;
            }
            this.popover.willHide();
            this.popover.node.style.setProperty('pointer-events', 'none');
            this.popoverState = 3;
            animator.set(0, trans);
            return true;
        }
        else {
            return false;
        }
    };
    PopoverAnimator.prototype.update = function () {
        this.popover.place();
        this.popover.render();
    };
    return PopoverAnimator;
}(FrameAnimator));
var PopoverOpacityAnimator = (function (_super) {
    __extends(PopoverOpacityAnimator, _super);
    function PopoverOpacityAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    PopoverOpacityAnimator.prototype.update = function (value) {
        this.parent.popover.node.style.setProperty('opacity', '' + value);
    };
    PopoverOpacityAnimator.prototype.onEnd = function (value) {
        if (this.parent.popoverState === 1) {
            this.parent.popover.node.style.setProperty('pointer-events', 'auto');
            this.parent.popoverState = 2;
            this.parent.popover.didShow();
        }
        else if (this.parent.popoverState === 3) {
            this.parent.popover.node.style.setProperty('pointer-events', 'none');
            this.parent.popoverState = 0;
            this.parent.popover.didHide();
        }
    };
    PopoverOpacityAnimator.get = function (self) {
        return +self.node.style.getPropertyValue('opacity');
    };
    PopoverOpacityAnimator.set = function (self, value) {
        if (value === null) {
            self.popoverAnimator.opacity = undefined;
            self.node.style.removeProperty('opacity');
        }
        else {
            self.node.style.setProperty('opacity', '' + value);
        }
    };
    PopoverOpacityAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.popoverAnimator.opacity) {
            self.popoverAnimator.opacity = new PopoverOpacityAnimator(self.popoverAnimator, value, trans);
        }
        return self.popoverAnimator.opacity;
    };
    return PopoverOpacityAnimator;
}(ChildFrameAnimator));
var PopoverBackgroundColorAnimator = (function (_super) {
    __extends(PopoverBackgroundColorAnimator, _super);
    function PopoverBackgroundColorAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    PopoverBackgroundColorAnimator.prototype.update = function (value) {
        this.parent.popover.backgroundColor(value);
    };
    PopoverBackgroundColorAnimator.get = function (self) {
        return self.popover.backgroundColor();
    };
    PopoverBackgroundColorAnimator.set = function (self, value) {
        if (value === null) {
            self.popoverAnimator.backgroundColor = undefined;
        }
        else {
            self.popover.backgroundColor(value);
        }
    };
    PopoverBackgroundColorAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.popoverAnimator.backgroundColor) {
            self.popoverAnimator.backgroundColor =
                new PopoverBackgroundColorAnimator(self.popoverAnimator, value, trans);
        }
        return self.popoverAnimator.backgroundColor;
    };
    return PopoverBackgroundColorAnimator;
}(ChildFrameAnimator));
var PopoverBorderRadiusAnimator = (function (_super) {
    __extends(PopoverBorderRadiusAnimator, _super);
    function PopoverBorderRadiusAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    PopoverBorderRadiusAnimator.prototype.update = function (value) {
        this.parent.popover.borderRadius(value);
    };
    PopoverBorderRadiusAnimator.get = function (self) {
        return self.popover.borderRadius();
    };
    PopoverBorderRadiusAnimator.set = function (self, value) {
        if (value === null) {
            self.popoverAnimator.borderRadius = undefined;
        }
        else {
            self.popover.borderRadius(value);
        }
    };
    PopoverBorderRadiusAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.popoverAnimator.borderRadius) {
            self.popoverAnimator.borderRadius =
                new PopoverBorderRadiusAnimator(self.popoverAnimator, value, trans);
        }
        return self.popoverAnimator.borderRadius;
    };
    return PopoverBorderRadiusAnimator;
}(ChildFrameAnimator));
var PopoverArrowWidthAnimator = (function (_super) {
    __extends(PopoverArrowWidthAnimator, _super);
    function PopoverArrowWidthAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    PopoverArrowWidthAnimator.prototype.update = function (value) {
        this.parent.popover.arrowWidth(value);
    };
    PopoverArrowWidthAnimator.get = function (self) {
        return self.popover.arrowWidth();
    };
    PopoverArrowWidthAnimator.set = function (self, value) {
        if (value === null) {
            self.popoverAnimator.arrowWidth = undefined;
        }
        else {
            self.popover.arrowWidth(value);
        }
    };
    PopoverArrowWidthAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.popoverAnimator.arrowWidth) {
            self.popoverAnimator.arrowWidth =
                new PopoverArrowWidthAnimator(self.popoverAnimator, value, trans);
        }
        return self.popoverAnimator.arrowWidth;
    };
    return PopoverArrowWidthAnimator;
}(ChildFrameAnimator));
var PopoverArrowHeightAnimator = (function (_super) {
    __extends(PopoverArrowHeightAnimator, _super);
    function PopoverArrowHeightAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    PopoverArrowHeightAnimator.prototype.update = function (value) {
        this.parent.popover.arrowHeight(value);
    };
    PopoverArrowHeightAnimator.get = function (self) {
        return self.popover.arrowHeight();
    };
    PopoverArrowHeightAnimator.set = function (self, value) {
        if (value === null) {
            self.popoverAnimator.arrowHeight = undefined;
        }
        else {
            self.popover.arrowHeight(value);
        }
    };
    PopoverArrowHeightAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.popoverAnimator.arrowHeight) {
            self.popoverAnimator.arrowHeight =
                new PopoverArrowHeightAnimator(self.popoverAnimator, value, trans);
        }
        return self.popoverAnimator.arrowHeight;
    };
    return PopoverArrowHeightAnimator;
}(ChildFrameAnimator));
var PopoverViewportLeftAnimator = (function (_super) {
    __extends(PopoverViewportLeftAnimator, _super);
    function PopoverViewportLeftAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    PopoverViewportLeftAnimator.prototype.update = function (value) {
        this.parent.popover.viewportLeft(value);
    };
    PopoverViewportLeftAnimator.get = function (self) {
        return self.popover.viewportLeft();
    };
    PopoverViewportLeftAnimator.set = function (self, value) {
        if (value === null) {
            self.popoverAnimator.viewportLeft = undefined;
        }
        else {
            self.popover.viewportLeft(value);
        }
    };
    PopoverViewportLeftAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.popoverAnimator.viewportLeft) {
            self.popoverAnimator.viewportLeft =
                new PopoverViewportLeftAnimator(self.popoverAnimator, value, trans);
        }
        return self.popoverAnimator.viewportLeft;
    };
    return PopoverViewportLeftAnimator;
}(ChildFrameAnimator));
var PopoverViewportRightAnimator = (function (_super) {
    __extends(PopoverViewportRightAnimator, _super);
    function PopoverViewportRightAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    PopoverViewportRightAnimator.prototype.update = function (value) {
        this.parent.popover.viewportRight(value);
    };
    PopoverViewportRightAnimator.get = function (self) {
        return self.popover.viewportRight();
    };
    PopoverViewportRightAnimator.set = function (self, value) {
        if (value === null) {
            self.popoverAnimator.viewportRight = undefined;
        }
        else {
            self.popover.viewportRight(value);
        }
    };
    PopoverViewportRightAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.popoverAnimator.viewportRight) {
            self.popoverAnimator.viewportRight =
                new PopoverViewportRightAnimator(self.popoverAnimator, value, trans);
        }
        return self.popoverAnimator.viewportRight;
    };
    return PopoverViewportRightAnimator;
}(ChildFrameAnimator));
var PopoverViewportTopAnimator = (function (_super) {
    __extends(PopoverViewportTopAnimator, _super);
    function PopoverViewportTopAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    PopoverViewportTopAnimator.prototype.update = function (value) {
        this.parent.popover.viewportTop(value);
    };
    PopoverViewportTopAnimator.get = function (self) {
        return self.popover.viewportTop();
    };
    PopoverViewportTopAnimator.set = function (self, value) {
        if (value === null) {
            self.popoverAnimator.viewportTop = undefined;
        }
        else {
            self.popover.viewportTop(value);
        }
    };
    PopoverViewportTopAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.popoverAnimator.viewportTop) {
            self.popoverAnimator.viewportTop =
                new PopoverViewportTopAnimator(self.popoverAnimator, value, trans);
        }
        return self.popoverAnimator.viewportTop;
    };
    return PopoverViewportTopAnimator;
}(ChildFrameAnimator));
var PopoverViewportBottomAnimator = (function (_super) {
    __extends(PopoverViewportBottomAnimator, _super);
    function PopoverViewportBottomAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    PopoverViewportBottomAnimator.prototype.update = function (value) {
        this.parent.popover.viewportBottom(value);
    };
    PopoverViewportBottomAnimator.get = function (self) {
        return self.popover.viewportBottom();
    };
    PopoverViewportBottomAnimator.set = function (self, value) {
        if (value === null) {
            self.popoverAnimator.viewportBottom = undefined;
        }
        else {
            self.popover.viewportBottom(value);
        }
    };
    PopoverViewportBottomAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.popoverAnimator.viewportBottom) {
            self.popoverAnimator.viewportBottom =
                new PopoverViewportBottomAnimator(self.popoverAnimator, value, trans);
        }
        return self.popoverAnimator.viewportBottom;
    };
    return PopoverViewportBottomAnimator;
}(ChildFrameAnimator));
var PopoverSourceLeftAnimator = (function (_super) {
    __extends(PopoverSourceLeftAnimator, _super);
    function PopoverSourceLeftAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    PopoverSourceLeftAnimator.prototype.update = function (value) {
        this.parent.popover.sourceLeft(value);
    };
    PopoverSourceLeftAnimator.get = function (self) {
        return self.popover.sourceLeft();
    };
    PopoverSourceLeftAnimator.set = function (self, value) {
        if (value === null) {
            self.popoverAnimator.sourceLeft = undefined;
        }
        else {
            self.popover.sourceLeft(value);
        }
    };
    PopoverSourceLeftAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.popoverAnimator.sourceLeft) {
            self.popoverAnimator.sourceLeft =
                new PopoverSourceLeftAnimator(self.popoverAnimator, value, trans);
        }
        return self.popoverAnimator.sourceLeft;
    };
    return PopoverSourceLeftAnimator;
}(ChildFrameAnimator));
var PopoverSourceTopAnimator = (function (_super) {
    __extends(PopoverSourceTopAnimator, _super);
    function PopoverSourceTopAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    PopoverSourceTopAnimator.prototype.update = function (value) {
        this.parent.popover.sourceTop(value);
    };
    PopoverSourceTopAnimator.get = function (self) {
        return self.popover.sourceTop();
    };
    PopoverSourceTopAnimator.set = function (self, value) {
        if (value === null) {
            self.popoverAnimator.sourceTop = undefined;
        }
        else {
            self.popover.sourceTop(value);
        }
    };
    PopoverSourceTopAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.popoverAnimator.sourceTop) {
            self.popoverAnimator.sourceTop =
                new PopoverSourceTopAnimator(self.popoverAnimator, value, trans);
        }
        return self.popoverAnimator.sourceTop;
    };
    return PopoverSourceTopAnimator;
}(ChildFrameAnimator));
var PopoverSourceWidthAnimator = (function (_super) {
    __extends(PopoverSourceWidthAnimator, _super);
    function PopoverSourceWidthAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    PopoverSourceWidthAnimator.prototype.update = function (value) {
        this.parent.popover.sourceWidth(value);
    };
    PopoverSourceWidthAnimator.get = function (self) {
        return self.popover.sourceWidth();
    };
    PopoverSourceWidthAnimator.set = function (self, value) {
        if (value === null) {
            self.popoverAnimator.sourceWidth = undefined;
        }
        else {
            self.popover.sourceWidth(value);
        }
    };
    PopoverSourceWidthAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.popoverAnimator.sourceWidth) {
            self.popoverAnimator.sourceWidth =
                new PopoverSourceWidthAnimator(self.popoverAnimator, value, trans);
        }
        return self.popoverAnimator.sourceWidth;
    };
    return PopoverSourceWidthAnimator;
}(ChildFrameAnimator));
var PopoverSourceHeightAnimator = (function (_super) {
    __extends(PopoverSourceHeightAnimator, _super);
    function PopoverSourceHeightAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    PopoverSourceHeightAnimator.prototype.update = function (value) {
        this.parent.popover.sourceHeight(value);
    };
    PopoverSourceHeightAnimator.get = function (self) {
        return self.popover.sourceHeight();
    };
    PopoverSourceHeightAnimator.set = function (self, value) {
        if (value === null) {
            self.popoverAnimator.sourceHeight = undefined;
        }
        else {
            self.popover.sourceHeight(value);
        }
    };
    PopoverSourceHeightAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.popoverAnimator.sourceHeight) {
            self.popoverAnimator.sourceHeight =
                new PopoverSourceHeightAnimator(self.popoverAnimator, value, trans);
        }
        return self.popoverAnimator.sourceHeight;
    };
    return PopoverSourceHeightAnimator;
}(ChildFrameAnimator));
var PopoverView = (function (_super) {
    __extends(PopoverView, _super);
    function PopoverView(popover) {
        var _this = _super.call(this, popover.node) || this;
        _this.popover = popover;
        _this._source = null;
        _this._sourceZIndex = null;
        _this._replaceDelay = 0;
        _this.resizeObserver = null;
        _this.mutationObserver = null;
        _this.replaceTimer = 0;
        _this.popoverAnimator = new PopoverAnimator(_this.popover, 0);
        _this.replace = _this.replace.bind(_this);
        _this.onResize = _this.onResize.bind(_this);
        _this.onMutation = _this.onMutation.bind(_this);
        _this.onClick = _this.onClick.bind(_this);
        _this.node.addEventListener('click', _this.onClick);
        return _this;
    }
    PopoverView.prototype.isVisible = function () {
        return this.popoverAnimator.popoverState === 2 ||
            this.popoverAnimator.popoverState === 1;
    };
    PopoverView.prototype.isViewable = function () {
        return true;
    };
    PopoverView.prototype.show = function (trans) {
        this.popover.addObserver(this);
        var showing = this.popoverAnimator.show(trans);
        if (showing) {
            this.observeSource(this._source);
            if (this._sourceZIndex !== null && this._source instanceof HTMLElement ||
                this._source instanceof SVGElement) {
                this._source.style.setProperty('z-index', '' + this._sourceZIndex);
            }
        }
        return this;
    };
    PopoverView.prototype.hide = function (trans) {
        this.popoverAnimator.hide(trans);
        return this;
    };
    PopoverView.prototype.opacity = function (value, trans) {
        return this.propertyNumber(PopoverOpacityAnimator, value, trans);
    };
    PopoverView.prototype.backgroundColor = function (value, trans) {
        return this.propertyColor(PopoverBackgroundColorAnimator, value, trans);
    };
    PopoverView.prototype.borderRadius = function (value, trans) {
        return this.propertyLength(PopoverBorderRadiusAnimator, value, trans);
    };
    PopoverView.prototype.arrowWidth = function (value, trans) {
        return this.propertyLength(PopoverArrowWidthAnimator, value, trans);
    };
    PopoverView.prototype.arrowHeight = function (value, trans) {
        return this.propertyLength(PopoverArrowHeightAnimator, value, trans);
    };
    PopoverView.prototype.placement = function (pp) {
        if (pp === undefined) {
            return this.popover.placement();
        }
        else {
            this.popover.placement(pp);
            return this;
        }
    };
    PopoverView.prototype.viewportLeft = function (value, trans) {
        return this.propertyLength(PopoverViewportLeftAnimator, value, trans);
    };
    PopoverView.prototype.viewportRight = function (value, trans) {
        return this.propertyLength(PopoverViewportRightAnimator, value, trans);
    };
    PopoverView.prototype.viewportTop = function (value, trans) {
        return this.propertyLength(PopoverViewportTopAnimator, value, trans);
    };
    PopoverView.prototype.viewportBottom = function (value, trans) {
        return this.propertyLength(PopoverViewportBottomAnimator, value, trans);
    };
    PopoverView.prototype.source = function (newSource) {
        var oldSource = this._source;
        if (newSource === undefined) {
            return oldSource;
        }
        else {
            if (oldSource !== newSource) {
                this.popover.sourceWillChange(newSource, oldSource);
                this.unobserveSource(oldSource);
                this._source = newSource;
                if (newSource) {
                    this.replace();
                    this.observeSource(newSource);
                }
                this.popover.sourceDidChange(newSource, oldSource);
            }
            else if (newSource) {
                this.replace();
            }
            return this;
        }
    };
    PopoverView.prototype.sourceLeft = function (value, trans) {
        return this.propertyLength(PopoverSourceLeftAnimator, value, trans);
    };
    PopoverView.prototype.sourceTop = function (value, trans) {
        return this.propertyLength(PopoverSourceTopAnimator, value, trans);
    };
    PopoverView.prototype.sourceWidth = function (value, trans) {
        return this.propertyLength(PopoverSourceWidthAnimator, value, trans);
    };
    PopoverView.prototype.sourceHeight = function (value, trans) {
        return this.propertyLength(PopoverSourceHeightAnimator, value, trans);
    };
    PopoverView.prototype.sourceZIndex = function (sourceZIndex) {
        if (sourceZIndex === undefined) {
            return this._sourceZIndex;
        }
        else {
            this._sourceZIndex = sourceZIndex;
            return this;
        }
    };
    PopoverView.prototype.replaceDelay = function (replaceDelay) {
        if (replaceDelay === undefined) {
            return this._replaceDelay;
        }
        else {
            this._replaceDelay = replaceDelay;
            return this;
        }
    };
    PopoverView.prototype.render = function () {
        this.popoverAnimator.update();
    };
    PopoverView.prototype.didResize = function () {
        _super.prototype.didResize.call(this);
        this.onReplace();
    };
    PopoverView.prototype.addObserver = function (observer) {
        this.popover.addObserver(observer);
    };
    PopoverView.prototype.removeObserver = function (observer) {
        this.popover.removeObserver(observer);
    };
    PopoverView.prototype.observeSource = function (source) {
        if (source) {
            if (!this.resizeObserver) {
                this.resizeObserver = new ResizeObserver(this.onResize);
            }
            if (!this.mutationObserver) {
                this.mutationObserver = new MutationObserver(this.onMutation);
            }
            this.resizeObserver.observe(source);
            this.mutationObserver.observe(source, {
                attributes: true,
                childList: true,
                subtree: true,
                attributeFilter: ['style'],
            });
        }
    };
    PopoverView.prototype.unobserveSource = function (source) {
        if (source) {
            if (this.resizeObserver) {
                this.resizeObserver.unobserve(source);
            }
            if (this.mutationObserver) {
                this.mutationObserver.disconnect();
                this.mutationObserver = null;
            }
        }
    };
    PopoverView.prototype.replace = function () {
        this.replaceTimer = 0;
        var source = this._source;
        while (source && !(source instanceof HTMLElement)) {
            source = source.parentNode || source.host;
        }
        if (source) {
            var sourceBounds = source.getBoundingClientRect();
            var sourceClientLeft = sourceBounds.left - source.offsetLeft;
            var sourceClientTop = sourceBounds.top - source.offsetTop;
            var popoverBounds = this.node.getBoundingClientRect();
            var popoverClientLeft = popoverBounds.left - this.node.offsetLeft;
            var popoverClientTop = popoverBounds.top - this.node.offsetTop;
            this.popover.sourceLeft(source.offsetLeft + sourceClientLeft - popoverClientLeft);
            this.popover.sourceTop(source.offsetTop + sourceClientTop - popoverClientTop);
            this.popover.sourceWidth(source.offsetWidth);
            this.popover.sourceHeight(source.offsetHeight);
            this.popoverAnimator.update();
        }
    };
    PopoverView.prototype.onReplace = function () {
        if (this._replaceDelay < 0) {
            this.replace();
        }
        else if (this.replaceTimer === 0) {
            this.replaceTimer = setTimeout(this.replace, this._replaceDelay);
        }
    };
    PopoverView.prototype.onResize = function (entries) {
        this.onReplace();
    };
    PopoverView.prototype.onMutation = function (mutations) {
        this.onReplace();
    };
    PopoverView.prototype.onClick = function (event) {
        event.stopPropagation();
    };
    PopoverView.prototype.popoverDidPlace = function (placement, popover) {
        this.requireReview();
        this.requireResize();
    };
    PopoverView.prototype.popoverWillShow = function (popover) {
        this.requireReview();
        this.requireResize();
    };
    PopoverView.prototype.popoverDidShow = function (popover) {
        this.requireReview();
        this.requireResize();
    };
    PopoverView.prototype.popoverDidHide = function (popover) {
        if (this._sourceZIndex !== null && this._source instanceof HTMLElement ||
            this._source instanceof SVGElement) {
            this._source.style.removeProperty('z-index');
        }
        if (this.replaceTimer) {
            clearTimeout(this.replaceTimer);
            this.replaceTimer = 0;
        }
        if (this.resizeObserver) {
            this.resizeObserver.disconnect();
            this.resizeObserver = null;
        }
        if (this.mutationObserver) {
            this.mutationObserver.disconnect();
            this.mutationObserver = null;
        }
        this.popover.removeObserver(this);
    };
    PopoverView.prototype.didSetState = function (newState, oldState) {
        _super.prototype.didSetState.call(this, newState, oldState);
        var trans = newState.get('transition').cast(Transition.Form);
        var backgroundColor = newState.get('backgroundColor').cast(Color.Form);
        if (backgroundColor) {
            this.backgroundColor(backgroundColor, trans);
        }
        var borderRadius = newState.get('borderRadius').cast(Length.Form);
        if (borderRadius) {
            this.borderRadius(borderRadius, trans);
        }
        var arrowWidth = newState.get('arrowWidth').cast(Length.Form);
        if (arrowWidth) {
            this.arrowWidth(arrowWidth, trans);
        }
        var arrowHeight = newState.get('arrowHeight').cast(Length.Form);
        if (arrowHeight) {
            this.arrowHeight(arrowHeight, trans);
        }
        var viewportLeft = newState.get('viewportLeft').cast(Length.Form);
        if (viewportLeft) {
            this.viewportLeft(viewportLeft, trans);
        }
        var viewportRight = newState.get('viewportRight').cast(Length.Form);
        if (viewportRight) {
            this.viewportRight(viewportRight, trans);
        }
        var viewportTop = newState.get('viewportTop').cast(Length.Form);
        if (viewportTop) {
            this.viewportTop(viewportTop, trans);
        }
        var viewportBottom = newState.get('viewportBottom').cast(Length.Form);
        if (viewportBottom) {
            this.viewportBottom(viewportBottom, trans);
        }
    };
    PopoverView.create = function (node) {
        if (node instanceof PopoverView) {
            return node;
        }
        else if (node instanceof NodeView) {
            throw new TypeError('' + node);
        }
        else if (node === undefined || typeof node === 'string') {
            return new PopoverView(Popover.create(node));
        }
        else if (node.view instanceof PopoverView) {
            return node.view;
        }
        else if (node.view) {
            throw new TypeError('' + node.view);
        }
        else if (node instanceof HTMLElement) {
            return new PopoverView(new Popover(node));
        }
        else {
            throw new TypeError('' + node);
        }
    };
    return PopoverView;
}(HtmlView));

var PopoverModel = (function (_super) {
    __extends(PopoverModel, _super);
    function PopoverModel(id) {
        return _super.call(this, id) || this;
    }
    PopoverModel.Params = HtmlModel.Params.concat([
        new ModelParam('backgroundColor', Selector.get('backgroundColor').or(Selector.get('popover').get('backgroundColor'))),
        new ModelParam('borderRadius', Selector.get('borderRadius').or(Selector.get('popover').get('borderRadius'))),
        new ModelParam('arrowWidth', Selector.get('arrowWidth').or(Selector.get('popover').get('arrowWidth'))),
        new ModelParam('arrowHeight', Selector.get('arrowHeight').or(Selector.get('popover').get('arrowHeight'))),
        new ModelParam('viewportLeft', Selector.get('viewportLeft').or(Selector.get('popover').get('viewportLeft'))),
        new ModelParam('viewportRight', Selector.get('viewportRight').or(Selector.get('popover').get('viewportRight'))),
        new ModelParam('viewportTop', Selector.get('viewportTop').or(Selector.get('popover').get('viewportTop'))),
        new ModelParam('viewportBottom', Selector.get('viewportBottom').or(Selector.get('popover').get('viewportBottom'))),
    ]);
    return PopoverModel;
}(HtmlModel));

var ShadowBoxState;
(function (ShadowBoxState) {
    ShadowBoxState[ShadowBoxState["Hidden"] = 0] = "Hidden";
    ShadowBoxState[ShadowBoxState["Showing"] = 1] = "Showing";
    ShadowBoxState[ShadowBoxState["Visible"] = 2] = "Visible";
    ShadowBoxState[ShadowBoxState["Hiding"] = 3] = "Hiding";
})(ShadowBoxState || (ShadowBoxState = {}));
var ShadowBoxAnimator = (function (_super) {
    __extends(ShadowBoxAnimator, _super);
    function ShadowBoxAnimator(shadowBox, value, transition) {
        var _this = _super.call(this, value, transition) || this;
        _this.shadowBox = shadowBox;
        return _this;
    }
    ShadowBoxAnimator.prototype.update = function (value) {
        this.shadowBox.backgroundColor(this.shadowBox.shadowColor().alpha(value));
    };
    ShadowBoxAnimator.prototype.onEnd = function (value) {
        if (this.shadowBox.shadowBoxState === 1) {
            this.shadowBox.shadowBoxState = 2;
            this.shadowBox.didShow();
        }
        else if (this.shadowBox.shadowBoxState === 3) {
            this.shadowBox.shadowBoxState = 0;
            this.shadowBox.didHide();
        }
    };
    return ShadowBoxAnimator;
}(TweenFrameAnimator));
var ShadowBoxView = (function (_super) {
    __extends(ShadowBoxView, _super);
    function ShadowBoxView(node) {
        var _this = _super.call(this, node) || this;
        _this._shadowColor = Color.black();
        _this._shadowOpacity = 0.5;
        _this._shadowTransition = new Transition(250, Ease.quadOut).range(0);
        _this.shadowBoxState = 0;
        _this.shadowBoxAnimator = new ShadowBoxAnimator(_this, 0, _this._shadowTransition);
        return _this;
    }
    ShadowBoxView.prototype.isVisible = function () {
        return this.shadowBoxState === 2 ||
            this.shadowBoxState === 1;
    };
    ShadowBoxView.prototype.shadowColor = function (shadowColor) {
        if (shadowColor === undefined) {
            return this._shadowColor;
        }
        else {
            this._shadowColor = Color.fromAny(shadowColor);
            return this;
        }
    };
    ShadowBoxView.prototype.shadowOpacity = function (shadowOpacity) {
        if (shadowOpacity === undefined) {
            return this._shadowOpacity;
        }
        else {
            this._shadowOpacity = shadowOpacity;
            return this;
        }
    };
    ShadowBoxView.prototype.shadowTransition = function (shadowTransition) {
        if (shadowTransition === undefined) {
            return this._shadowTransition;
        }
        else {
            this._shadowTransition = Transition.fromAny(shadowTransition);
            return this;
        }
    };
    ShadowBoxView.prototype.show = function (trans) {
        if (this.shadowBoxState !== 2) {
            if (trans === undefined) {
                trans = this._shadowTransition;
            }
            else {
                trans = Transition.fromAny(trans || this._shadowTransition, 0);
            }
            this.willShow();
            this.shadowBoxState = 1;
            this.shadowBoxAnimator.set(this._shadowOpacity, trans);
        }
    };
    ShadowBoxView.prototype.hide = function (trans) {
        if (this.shadowBoxState !== 0) {
            if (trans === undefined) {
                trans = this._shadowTransition;
            }
            else {
                trans = Transition.fromAny(trans || this._shadowTransition, this._shadowOpacity);
            }
            this.willHide();
            this.shadowBoxState = 3;
            this.shadowBoxAnimator.set(0, trans);
        }
    };
    ShadowBoxView.prototype.willShow = function () {
    };
    ShadowBoxView.prototype.didShow = function () {
    };
    ShadowBoxView.prototype.willHide = function () {
    };
    ShadowBoxView.prototype.didHide = function () {
    };
    ShadowBoxView.create = function () {
        return new ShadowBoxView(document.createElement('div'))
            .className('shadow-box')
            .display('flex')
            .position('absolute')
            .top(0)
            .right(0)
            .bottom(0)
            .left(0)
            .pointerEvents('none')
            .zIndex(50);
    };
    return ShadowBoxView;
}(HtmlView));

var ModelPort = (function () {
    function ModelPort() {
    }
    return ModelPort;
}());

var WorkerViewPort = (function (_super) {
    __extends(WorkerViewPort, _super);
    function WorkerViewPort(appModel) {
        var _this = _super.call(this) || this;
        _this._appModel = appModel;
        _this.onMessage = _this.onMessage.bind(_this);
        self.addEventListener('message', _this.onMessage);
        return _this;
    }
    WorkerViewPort.prototype.appendChild = function (parentId, childId, viewDef) {
        viewDef = Value.fromAny(viewDef);
        var envelope = new UiAppendEnvelope(parentId, childId, '', viewDef);
        this.postEnvelope(envelope);
    };
    WorkerViewPort.prototype.prependChild = function (parentId, childId, viewDef) {
        viewDef = Value.fromAny(viewDef);
        var envelope = new UiPrependEnvelope(parentId, childId, '', viewDef);
        this.postEnvelope(envelope);
    };
    WorkerViewPort.prototype.insertChild = function (parentId, childId, targetId, viewDef) {
        viewDef = Value.fromAny(viewDef);
        var envelope = new UiInsertEnvelope(parentId, childId, targetId, viewDef);
        this.postEnvelope(envelope);
    };
    WorkerViewPort.prototype.removeChild = function (parentId, childId) {
        var envelope = new UiRemoveEnvelope(parentId, childId, '');
        this.postEnvelope(envelope);
    };
    WorkerViewPort.prototype.setState = function (modelId, viewDef) {
        viewDef = Value.fromAny(viewDef);
        var envelope = new UiStateEnvelope(modelId, viewDef);
        this.postEnvelope(envelope);
    };
    WorkerViewPort.prototype.postEnvelope = function (envelope) {
        var text = envelope.toRecon();
        self.postMessage(text);
    };
    WorkerViewPort.prototype.onEnvelope = function (envelope) {
        if (envelope instanceof UiAppendEnvelope) {
            this.onAppendEnvelope(envelope);
        }
        else if (envelope instanceof UiPrependEnvelope) {
            this.onPrependEnvelope(envelope);
        }
        else if (envelope instanceof UiInsertEnvelope) {
            this.onInsertEnvelope(envelope);
        }
        else if (envelope instanceof UiRemoveEnvelope) {
            this.onRemoveEnvelope(envelope);
        }
        else if (envelope instanceof UiModelEnvelope) {
            this.onModelEnvelope(envelope);
        }
        else {
            this.onUnknownEnvelope(envelope);
        }
    };
    WorkerViewPort.prototype.onAppendEnvelope = function (envelope) {
        var parentId = envelope.parent();
        var childId = envelope.child();
        var modelDef = envelope.body();
        var parentModel = this._appModel.getModel(parentId);
        if (parentModel) {
            var childModel = UiForm.Global.castModel(modelDef, parentModel.stack(), UiForm.Global);
            if (!childModel) {
                childModel = new Model(childId);
            }
            if (childModel) {
                childModel._id = childId;
                parentModel.appendChildModel(childModel);
            }
        }
    };
    WorkerViewPort.prototype.onPrependEnvelope = function (envelope) {
        var parentId = envelope.parent();
        var childId = envelope.child();
        var modelDef = envelope.body();
        var parentModel = this._appModel.getModel(parentId);
        if (parentModel) {
            var childModel = UiForm.Global.castModel(modelDef, parentModel.stack(), UiForm.Global);
            if (!childModel) {
                childModel = new Model(childId);
            }
            if (childModel) {
                childModel._id = childId;
                parentModel.prependChildModel(childModel);
            }
        }
    };
    WorkerViewPort.prototype.onInsertEnvelope = function (envelope) {
        var parentId = envelope.parent();
        var childId = envelope.child();
        var targetId = envelope.target();
        var modelDef = envelope.body();
        var parentModel = this._appModel.getModel(parentId);
        if (parentModel) {
            var childModel = UiForm.Global.castModel(modelDef, parentModel.stack(), UiForm.Global);
            if (!childModel) {
                childModel = new Model(childId);
            }
            if (childModel) {
                childModel._id = childId;
                var targetModel = this._appModel.getModel(targetId) || null;
                parentModel.insertChildModel(childModel, targetModel);
            }
        }
    };
    WorkerViewPort.prototype.onRemoveEnvelope = function (envelope) {
        var parentId = envelope.parent();
        var childId = envelope.child();
        var parentModel = this._appModel.getModel(parentId);
        if (parentModel) {
            var childModel = this._appModel.getModel(childId);
            if (childModel) {
                parentModel.removeChildModel(childModel);
            }
        }
    };
    WorkerViewPort.prototype.onModelEnvelope = function (envelope) {
        var modelId = envelope.child();
        var modelDef = envelope.body();
        var model = this._appModel.getModel(modelId);
        if (model) {
            model.setData(modelDef);
        }
    };
    WorkerViewPort.prototype.onUnknownEnvelope = function (envelope) {
    };
    WorkerViewPort.prototype.onMessage = function (event) {
        var data = event.data;
        if (typeof data === 'string') {
            var envelope = UiEnvelope.parseRecon(data);
            if (envelope) {
                this.onEnvelope(envelope);
            }
            else {
                this.onUnknownEnvelope(data);
            }
        }
    };
    return WorkerViewPort;
}(ViewPort));
var WorkerModelPort = (function (_super) {
    __extends(WorkerModelPort, _super);
    function WorkerModelPort(appView, worker) {
        var _this = _super.call(this) || this;
        _this._appView = appView;
        _this._worker = worker;
        _this.onMessage = _this.onMessage.bind(_this);
        _this._worker.addEventListener('message', _this.onMessage);
        return _this;
    }
    Object.defineProperty(WorkerModelPort.prototype, "worker", {
        get: function () {
            return this._worker;
        },
        enumerable: true,
        configurable: true
    });
    WorkerModelPort.prototype.appendChild = function (parentId, childId, modelDef) {
        modelDef = Value.fromAny(modelDef);
        var envelope = new UiAppendEnvelope(parentId, childId, '', modelDef);
        this.postEnvelope(envelope);
    };
    WorkerModelPort.prototype.prependChild = function (parentId, childId, modelDef) {
        modelDef = Value.fromAny(modelDef);
        var envelope = new UiPrependEnvelope(parentId, childId, '', modelDef);
        this.postEnvelope(envelope);
    };
    WorkerModelPort.prototype.insertChild = function (parentId, childId, targetId, modelDef) {
        modelDef = Value.fromAny(modelDef);
        var envelope = new UiInsertEnvelope(parentId, childId, targetId, modelDef);
        this.postEnvelope(envelope);
    };
    WorkerModelPort.prototype.removeChild = function (parentId, childId) {
        var envelope = new UiRemoveEnvelope(parentId, childId, '');
        this.postEnvelope(envelope);
    };
    WorkerModelPort.prototype.setModel = function (modelId, modelDef) {
        modelDef = Value.fromAny(modelDef);
        var envelope = new UiModelEnvelope(modelId, modelDef);
        this.postEnvelope(envelope);
    };
    WorkerModelPort.prototype.postEnvelope = function (envelope) {
        var text = envelope.toRecon();
        this._worker.postMessage(text);
    };
    WorkerModelPort.prototype.onEnvelope = function (envelope) {
        if (envelope instanceof UiAppendEnvelope) {
            this.onAppendEnvelope(envelope);
        }
        else if (envelope instanceof UiPrependEnvelope) {
            this.onPrependEnvelope(envelope);
        }
        else if (envelope instanceof UiInsertEnvelope) {
            this.onInsertEnvelope(envelope);
        }
        else if (envelope instanceof UiRemoveEnvelope) {
            this.onRemoveEnvelope(envelope);
        }
        else if (envelope instanceof UiStateEnvelope) {
            this.onStateEnvelope(envelope);
        }
        else {
            this.onUnknownEnvelope(envelope);
        }
    };
    WorkerModelPort.prototype.onAppendEnvelope = function (envelope) {
        var parentId = envelope.parent();
        var childId = envelope.child();
        var viewDef = envelope.body();
        var parentView = this._appView.getView(parentId);
        if (parentView) {
            var childView = UiForm.Global.castView(viewDef, parentView.stack(), UiForm.Global);
            if (childView) {
                childView._id = childId;
                parentView.appendChildView(childView);
            }
        }
    };
    WorkerModelPort.prototype.onPrependEnvelope = function (envelope) {
        var parentId = envelope.parent();
        var childId = envelope.child();
        var viewDef = envelope.body();
        var parentView = this._appView.getView(parentId);
        if (parentView) {
            var childView = UiForm.Global.castView(viewDef, parentView.stack(), UiForm.Global);
            if (childView) {
                childView._id = childId;
                parentView.prependChildView(childView);
            }
        }
    };
    WorkerModelPort.prototype.onInsertEnvelope = function (envelope) {
        var parentId = envelope.parent();
        var childId = envelope.child();
        var targetId = envelope.target();
        var viewDef = envelope.body();
        var parentView = this._appView.getView(parentId);
        if (parentView) {
            var childView = UiForm.Global.castView(viewDef, parentView.stack(), UiForm.Global);
            if (childView) {
                childView._id = childId;
                var targetView = this._appView.getView(targetId) || null;
                parentView.insertChildView(childView, targetView);
            }
        }
    };
    WorkerModelPort.prototype.onRemoveEnvelope = function (envelope) {
        var parentId = envelope.parent();
        var childId = envelope.child();
        var parentView = this._appView.getView(parentId);
        if (parentView) {
            var childView = this._appView.getView(childId);
            if (childView) {
                parentView.removeChildView(childView);
            }
        }
    };
    WorkerModelPort.prototype.onStateEnvelope = function (envelope) {
        var viewId = envelope.child();
        var viewDef = envelope.body();
        var view = this._appView.getView(viewId);
        if (view) {
            view.setState(viewDef);
        }
    };
    WorkerModelPort.prototype.onUnknownEnvelope = function (envelope) {
    };
    WorkerModelPort.prototype.onMessage = function (event) {
        var data = event.data;
        if (typeof data === 'string') {
            var envelope = UiEnvelope.parseRecon(data);
            if (envelope) {
                this.onEnvelope(envelope);
            }
            else {
                this.onUnknownEnvelope(data);
            }
        }
    };
    return WorkerModelPort;
}(ModelPort));

var ClientViewPort = (function (_super) {
    __extends(ClientViewPort, _super);
    function ClientViewPort(appView) {
        var _this = _super.call(this) || this;
        _this._appView = appView;
        return _this;
    }
    Object.defineProperty(ClientViewPort.prototype, "appView", {
        get: function () {
            return this._appView;
        },
        enumerable: true,
        configurable: true
    });
    ClientViewPort.prototype.appendChild = function (parentId, childId, viewDef) {
        viewDef = Value.fromAny(viewDef);
        var parentView = this._appView.getView(parentId);
        if (parentView) {
            var childView = UiForm.Global.castView(viewDef, parentView.stack(), UiForm.Global);
            if (childView) {
                childView._id = childId;
                parentView.appendChildView(childView);
            }
        }
    };
    ClientViewPort.prototype.prependChild = function (parentId, childId, viewDef) {
        viewDef = Value.fromAny(viewDef);
        var parentView = this._appView.getView(parentId);
        if (parentView) {
            var childView = UiForm.Global.castView(viewDef, parentView.stack(), UiForm.Global);
            if (childView) {
                childView._id = childId;
                parentView.prependChildView(childView);
            }
        }
    };
    ClientViewPort.prototype.insertChild = function (parentId, childId, targetId, viewDef) {
        viewDef = Value.fromAny(viewDef);
        var parentView = this._appView.getView(parentId);
        if (parentView) {
            var childView = UiForm.Global.castView(viewDef, parentView.stack(), UiForm.Global);
            if (childView) {
                childView._id = childId;
                var targetView = this._appView.getView(targetId) || null;
                parentView.insertChildView(childView, targetView);
            }
        }
    };
    ClientViewPort.prototype.removeChild = function (parentId, childId) {
        var parentView = this._appView.getView(parentId);
        if (parentView) {
            var childView = this._appView.getView(childId);
            if (childView) {
                parentView.removeChildView(childView);
            }
        }
    };
    ClientViewPort.prototype.setState = function (viewId, viewDef) {
        viewDef = Value.fromAny(viewDef);
        var view = this._appView.getView(viewId);
        if (view) {
            view.setState(viewDef);
        }
    };
    return ClientViewPort;
}(ViewPort));
var ClientModelPort = (function (_super) {
    __extends(ClientModelPort, _super);
    function ClientModelPort(appModel) {
        var _this = _super.call(this) || this;
        _this._appModel = appModel;
        return _this;
    }
    Object.defineProperty(ClientModelPort.prototype, "appModel", {
        get: function () {
            return this._appModel;
        },
        enumerable: true,
        configurable: true
    });
    ClientModelPort.prototype.appendChild = function (parentId, childId, modelDef) {
        modelDef = Value.fromAny(modelDef);
        var parentModel = this._appModel.getModel(parentId);
        if (parentModel) {
            var childModel = UiForm.Global.castModel(modelDef, parentModel.stack(), UiForm.Global);
            if (!childModel) {
                childModel = new Model(childId);
            }
            if (childModel) {
                childModel._id = childId;
                parentModel.appendChildModel(childModel);
            }
        }
    };
    ClientModelPort.prototype.prependChild = function (parentId, childId, modelDef) {
        modelDef = Value.fromAny(modelDef);
        var parentModel = this._appModel.getModel(parentId);
        if (parentModel) {
            var childModel = UiForm.Global.castModel(modelDef, parentModel.stack(), UiForm.Global);
            if (!childModel) {
                childModel = new Model(childId);
            }
            if (childModel) {
                childModel._id = childId;
                parentModel.prependChildModel(childModel);
            }
        }
    };
    ClientModelPort.prototype.insertChild = function (parentId, childId, targetId, modelDef) {
        modelDef = Value.fromAny(modelDef);
        var parentModel = this._appModel.getModel(parentId);
        if (parentModel) {
            var childModel = UiForm.Global.castModel(modelDef, parentModel.stack(), UiForm.Global);
            if (!childModel) {
                childModel = new Model(childId);
            }
            if (childModel) {
                childModel._id = childId;
                var targetModel = this._appModel.getModel(targetId) || null;
                parentModel.insertChildModel(childModel, targetModel);
            }
        }
    };
    ClientModelPort.prototype.removeChild = function (parentId, childId) {
        var parentModel = this._appModel.getModel(parentId);
        if (parentModel) {
            var childModel = this._appModel.getModel(childId);
            if (childModel) {
                parentModel.removeChildModel(childModel);
            }
        }
    };
    ClientModelPort.prototype.setModel = function (modelId, modelDef) {
        modelDef = Value.fromAny(modelDef);
        var model = this._appModel.getModel(modelId);
        if (model) {
            model.setData(modelDef);
        }
    };
    return ClientModelPort;
}(ModelPort));

var AppModel = (function (_super) {
    __extends(AppModel, _super);
    function AppModel(port) {
        var _this = _super.call(this, 'app') || this;
        _this._appModel = _this;
        if (port === undefined) {
            port = new WorkerViewPort(_this);
        }
        _this._port = port;
        _this._routeScope = new RouteScope(_this);
        _this._descendantModels = {};
        _this._descendantModels[_this._id] = _this;
        _this._lastRefreshTime = 0;
        _this._refreshTimer = 0;
        _this.onRefresh = _this.onRefresh.bind(_this);
        return _this;
    }
    Object.defineProperty(AppModel.prototype, "appModel", {
        get: function () {
            return this;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AppModel.prototype, "routeScope", {
        get: function () {
            return this._routeScope;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AppModel.prototype, "parentScope", {
        get: function () {
            return this._routeScope;
        },
        enumerable: true,
        configurable: true
    });
    AppModel.prototype.getModel = function (modelId) {
        return this._descendantModels[modelId];
    };
    AppModel.prototype.addDescendantModels = function (childModel, parentModel) {
        if (!this._descendantModels[childModel._id]) {
            this._descendantModels[childModel._id] = childModel;
            childModel.setAppModel(this);
        }
        for (var i = 0; i < childModel._childModels.length; i += 1) {
            this.addDescendantModels(childModel._childModels[i], childModel);
        }
    };
    AppModel.prototype.removeDescendantModels = function (childModel, parentModel) {
        for (var i = 0; i < childModel._childModels.length; i += 1) {
            this.removeDescendantModels(childModel._childModels[i], childModel);
        }
        if (this._descendantModels[childModel._id]) {
            childModel.setAppModel(null);
            delete this._descendantModels[childModel._id];
        }
    };
    AppModel.prototype.appendChildView = function (parentId, childId, viewDef) {
        if (arguments.length === 2) {
            viewDef = childId;
            childId = parentId;
            parentId = this._id;
        }
        this._port.appendChild(parentId, childId, viewDef);
    };
    AppModel.prototype.prependChildView = function (parentId, childId, viewDef) {
        if (arguments.length === 2) {
            viewDef = childId;
            childId = parentId;
            parentId = this._id;
        }
        this._port.prependChild(parentId, childId, viewDef);
    };
    AppModel.prototype.insertChildView = function (parentId, childId, targetId, viewDef) {
        if (arguments.length === 3) {
            viewDef = targetId;
            targetId = childId;
            childId = parentId;
            parentId = this._id;
        }
        this._port.insertChild(parentId, childId, targetId, viewDef);
    };
    AppModel.prototype.removeChildView = function (parentId, childId) {
        if (arguments.length === 1) {
            childId = parentId;
            parentId = this._id;
        }
        this._port.removeChild(parentId, childId);
    };
    AppModel.prototype.setState = function (newState, parentModel) {
        if (parentModel === undefined) {
            _super.prototype.setState.call(this, newState);
        }
        else {
            this._port.setState(parentModel._id, newState);
        }
    };
    AppModel.prototype.requestRestate = function () {
        if ((this._flags & Model.REQUEST_RESTATE) === 0) {
            this._flags |= Model.REQUEST_RESTATE;
            if (!this._refreshTimer) {
                this._refreshTimer = setTimeout(this.onRefresh, 1 / 60);
            }
        }
    };
    AppModel.prototype.onRefresh = function () {
        this._refreshTimer = 0;
        if ((this._flags & Model.REQUEST_RESTATE) !== 0) {
            this.cascadeWillRestate();
            this.cascadeDidRestate();
        }
    };
    return AppModel;
}(Model));
Model.AppModel = AppModel;

var AppView = (function (_super) {
    __extends(AppView, _super);
    function AppView(node, port) {
        var _this = _super.call(this, node, 'app') || this;
        _this._appView = _this;
        if (port === undefined) {
            var scripts = document.querySelectorAll('script');
            for (var i = 0; i < scripts.length; i += 1) {
                var script = scripts[i];
                if (script.hasAttribute('swim-app')) {
                    var src = script.getAttribute('src');
                    if (src) {
                        var worker = new Worker(src);
                        port = new WorkerModelPort(_this, worker);
                        break;
                    }
                }
            }
        }
        if (port === undefined) {
            var viewPort = new ClientViewPort();
            viewPort._appView = _this;
            var modelPort = new ClientModelPort();
            modelPort._appModel = new AppModel(viewPort);
            port = modelPort;
        }
        _this._port = port;
        _this._descendantViews = {};
        _this._descendantViews[_this._id] = _this;
        _this.onPopState = _this.onPopState.bind(_this);
        _this._popovers = [];
        _this._modals = [];
        _this._popoverTransition = new Transition(250, Ease.quadOut);
        _this._modalTransition = _this._popoverTransition;
        _this._shadowBox = ShadowBoxView.create();
        _this._shadowBox.didHide = _this.shadowBoxDidHide.bind(_this);
        _this.onClick = _this.onClick.bind(_this);
        _this.node.addEventListener('click', _this.onClick);
        _this._refreshFrame = 0;
        _this.onRefreshFrame = _this.onRefreshFrame.bind(_this);
        _this.onResize = _this.onResize.bind(_this);
        _this.onScroll = _this.onScroll.bind(_this);
        window.addEventListener('resize', _this.onResize);
        window.addEventListener('scroll', _this.onScroll);
        _this._port.setModel(_this._id, View.Theme);
        _this.refreshRouteState();
        return _this;
    }
    Object.defineProperty(AppView.prototype, "appView", {
        get: function () {
            return this;
        },
        enumerable: true,
        configurable: true
    });
    AppView.prototype.getView = function (viewId) {
        return this._descendantViews[viewId];
    };
    AppView.prototype.addDescendantViews = function (childView, parentView) {
        if (!this._descendantViews[childView._id]) {
            this._descendantViews[childView._id] = childView;
            childView.setAppView(this);
            this._port.appendChild(parentView._id, childView._id, childView._model);
        }
        for (var i = 0; i < childView._childViews.length; i += 1) {
            this.addDescendantViews(childView._childViews[i], childView);
        }
    };
    AppView.prototype.removeDescendantViews = function (childView, parentView) {
        for (var i = 0; i < childView._childViews.length; i += 1) {
            this.removeDescendantViews(childView._childViews[i], childView);
        }
        if (this._descendantViews[childView._id]) {
            this._port.removeChild(parentView._id, childView._id);
            childView.setAppView(null);
            delete this._descendantViews[childView._id];
        }
    };
    AppView.prototype.setModel = function (newModel, parentView) {
        if (parentView === undefined) {
            _super.prototype.setModel.call(this, newModel);
        }
        else {
            this._port.setModel(parentView._id, newModel);
        }
    };
    AppView.prototype.popoverTransition = function (popoverTransition) {
        if (popoverTransition === undefined) {
            return this._popoverTransition;
        }
        else {
            this._popoverTransition = Transition.fromAny(popoverTransition);
            return this;
        }
    };
    AppView.prototype.modalTransition = function (nodalTransition) {
        if (nodalTransition === undefined) {
            return this._modalTransition;
        }
        else {
            this._modalTransition = Transition.fromAny(nodalTransition);
            return this;
        }
    };
    AppView.prototype.pushRouteState = function (selector, value) {
    };
    AppView.prototype.replaceRouteState = function (selector, value) {
    };
    AppView.prototype.refreshRouteState = function () {
    };
    AppView.prototype.onPopState = function (event) {
        this.refreshRouteState();
    };
    AppView.prototype.indexOfPopover = function (popover) {
        if (popover instanceof PopoverView) {
            popover = popover.popover;
        }
        for (var i = 0; i < this._popovers.length; i += 1) {
            if (this._popovers[i].popover === popover) {
                return i;
            }
        }
        return -1;
    };
    AppView.prototype.showPopover = function (popover, options, trans) {
        if (trans === undefined && options !== undefined) {
            trans = options;
        }
        options = options;
        var i = this.indexOfPopover(popover);
        if (i >= 0) {
            popover = this._popovers[i];
        }
        else {
            if (!options || options.exclusive === undefined || options.exclusive) {
                this.hideAll(trans);
            }
            if (popover instanceof Popover) {
                popover = new PopoverView(popover);
            }
            this._popovers.push(popover);
            this.appendPopover(popover);
            popover.addObserver(this);
        }
        if (trans === undefined) {
            trans = this._popoverTransition;
        }
        popover.show(trans);
    };
    AppView.prototype.hidePopover = function (popover, trans) {
        var i = this.indexOfPopover(popover);
        if (i >= 0) {
            if (trans === undefined) {
                trans = this._popoverTransition;
            }
            this._popovers[i].hide(trans);
        }
    };
    AppView.prototype.hidePopovers = function (trans) {
        if (trans === undefined) {
            trans = this._popoverTransition;
        }
        for (var i = 0; i < this._popovers.length; i += 1) {
            this._popovers[i].hide(trans);
        }
    };
    AppView.prototype.appendPopover = function (popover) {
        this.node.appendChild(popover.node);
    };
    AppView.prototype.showShadowBox = function (trans) {
        if (!this._shadowBox.isVisible()) {
            if (!this._shadowBox.node.parentNode) {
                this.appendShadowBox(this._shadowBox);
            }
            this._shadowBox.show(trans);
        }
    };
    AppView.prototype.hideShadowBox = function (trans) {
        if (this._shadowBox.isVisible()) {
            this._shadowBox.hide(trans);
        }
    };
    AppView.prototype.appendShadowBox = function (shadowBox) {
        this.append(shadowBox);
    };
    AppView.prototype.shadowBoxDidHide = function () {
        this._shadowBox.remove();
    };
    AppView.prototype.indexOfModal = function (modal) {
        if (modal instanceof PopoverView) {
            modal = modal.popover;
        }
        for (var i = 0; i < this._modals.length; i += 1) {
            if (this._modals[i].popover === modal) {
                return i;
            }
        }
        return -1;
    };
    AppView.prototype.showModal = function (modal, options, trans) {
        if (trans === undefined && options !== undefined) {
            trans = options;
        }
        options = options;
        var i = this.indexOfModal(modal);
        if (i >= 0) {
            modal = this._modals[i];
        }
        else {
            if (!options || options.exclusive === undefined || options.exclusive) {
                this.hideAll(trans);
            }
            if (modal instanceof Popover) {
                modal = new PopoverView(modal);
            }
            this.showShadowBox(trans);
            this._modals.push(modal);
            this._shadowBox.append(modal);
            modal.addObserver(this);
        }
        if (trans === undefined) {
            trans = this._modalTransition;
        }
        modal.show(trans);
    };
    AppView.prototype.hideModal = function (modal, trans) {
        var i = this.indexOfModal(modal);
        if (i >= 0) {
            if (trans === undefined) {
                trans = this._modalTransition;
            }
            this._modals[i].hide(trans);
        }
        for (var i_1 = 0; i_1 < this._modals.length; i_1 += 1) {
            if (this._modals[i_1].isVisible()) {
                return;
            }
        }
        this.hideShadowBox(trans);
    };
    AppView.prototype.hideModals = function (trans) {
        if (trans === undefined) {
            trans = this._modalTransition;
        }
        for (var i = 0; i < this._modals.length; i += 1) {
            this._modals[i].hide(trans);
        }
        this.hideShadowBox(trans);
    };
    AppView.prototype.hideAll = function (trans) {
        this.hidePopovers();
        this.hideModals();
    };
    AppView.prototype.popoverDidShow = function (popover) {
        this.requireReview();
        this.requireResize();
    };
    AppView.prototype.popoverDidHide = function (popover) {
        var i = this.indexOfPopover(popover);
        if (i >= 0) {
            popover = this._popovers[i];
            popover.remove();
            this._popovers.splice(i, 1);
            return;
        }
        i = this.indexOfModal(popover);
        if (i >= 0) {
            popover = this._modals[i];
            popover.remove();
            this._modals.splice(i, 1);
            return;
        }
    };
    AppView.prototype.onPassthroughClick = function (event) {
        this.hideAll();
    };
    AppView.prototype.onClick = function (event) {
        this.onPassthroughClick(event);
    };
    AppView.prototype.requestResize = function () {
        if ((this._flags & View.REQUEST_RESIZE) === 0) {
            this._flags |= View.REQUEST_RESIZE;
            if (!this._refreshFrame) {
                this._refreshFrame = requestAnimationFrame(this.onRefreshFrame);
            }
        }
    };
    AppView.prototype.requestReview = function () {
        if ((this._flags & View.REQUEST_REVIEW) === 0) {
            this._flags |= View.REQUEST_REVIEW;
            if (!this._refreshFrame) {
                this._refreshFrame = requestAnimationFrame(this.onRefreshFrame);
            }
        }
    };
    AppView.prototype.requestRedraw = function () {
        if ((this._flags & View.REQUEST_REDRAW) === 0) {
            this._flags |= View.REQUEST_REDRAW;
            if (!this._refreshFrame) {
                this._refreshFrame = requestAnimationFrame(this.onRefreshFrame);
            }
        }
    };
    AppView.prototype.onRefreshFrame = function () {
        this._refreshFrame = 0;
        if ((this._flags & View.REQUEST_RESIZE) !== 0) {
            this.cascadeWillResize();
            this.cascadeDidResize();
        }
        if ((this._flags & View.REQUEST_REVIEW) !== 0) {
            this.cascadeWillReview();
            this.cascadeDidReview();
        }
        if ((this._flags & View.REQUEST_REDRAW) !== 0) {
            this.cascadeWillRedraw();
            this.cascadeDidRedraw();
        }
    };
    AppView.prototype.onResize = function (event) {
        this.requireResize();
    };
    AppView.prototype.onScroll = function (event) {
        this.requireReview();
    };
    AppView.create = function (node) {
        if (node === void 0) { node = 'div'; }
        if (node instanceof AppView) {
            return node;
        }
        else if (node instanceof NodeView) {
            throw new TypeError('' + node);
        }
        else if (typeof node === 'string') {
            return new AppView(document.createElement(node));
        }
        else if (node.view instanceof AppView) {
            return node.view;
        }
        else if (node.view) {
            throw new TypeError('' + node.view);
        }
        else if (node instanceof HTMLElement) {
            return new AppView(node);
        }
        else {
            throw new TypeError('' + node);
        }
    };
    return AppView;
}(HtmlView));
View.AppView = AppView;

var TextView = (function (_super) {
    __extends(TextView, _super);
    function TextView(node, id) {
        return _super.call(this, node, id) || this;
    }
    TextView.prototype.text = function (value, trans) {
        var animator = this.textAnimator;
        if (value === undefined) {
            if (animator) {
                return animator.get();
            }
            else {
                return this.node.nodeValue || '';
            }
        }
        else if (value === null) {
            if (animator) {
                animator.cancel();
                this.textAnimator = undefined;
            }
            this.node.nodeValue = null;
            return this;
        }
        else {
            trans = Transition.fromAny(trans, value);
            if (!animator && trans !== undefined) {
                if (!trans.f) {
                    trans = trans.range(value);
                }
                animator = new TextAnimator(this.node, value, trans);
                this.textAnimator = animator;
            }
            if (animator) {
                animator.set(value, trans);
            }
            else {
                if (value instanceof Item) {
                    var stack = this.stack();
                    this.node.nodeValue = value.evaluate(stack).stringValue('');
                }
                else {
                    this.node.nodeValue = '' + value;
                }
            }
            return this;
        }
    };
    TextView.prototype.didSetState = function (newState, oldState) {
        _super.prototype.didSetState.call(this, newState, oldState);
        var text = newState.get('text');
        if (text instanceof Item.Text) {
            this.text(text.value);
        }
        else if (text.isDefined()) {
            var trans = newState.get('transition').cast(Transition.Form);
            this.text(text, trans);
        }
    };
    TextView.create = function (node) {
        if (node === void 0) { node = ''; }
        if (node instanceof TextView) {
            return node;
        }
        else if (node instanceof NodeView) {
            throw new TypeError('' + node);
        }
        else if (typeof node === 'string') {
            return new View.TextView(document.createTextNode(node));
        }
        else if (node.view instanceof TextView) {
            return node.view;
        }
        else if (node.view) {
            throw new TypeError('' + node.view);
        }
        else if (node instanceof Text) {
            return new TextView(node);
        }
        else {
            throw new TypeError('' + node);
        }
    };
    return TextView;
}(NodeView));
View.TextView = TextView;

var TextModel = (function (_super) {
    __extends(TextModel, _super);
    function TextModel(id) {
        return _super.call(this, id) || this;
    }
    TextModel.prototype.remodel = function (stack) {
        if (stack === void 0) { stack = this.stack(); }
        var state = Record.empty();
        var transition = TEXT_TRANSITION_SELECTOR.evaluate(stack).toValue();
        if (transition.isDefined()) {
            state.slot('transition', transition);
        }
        var text = TEXT_SELECTOR.substitute(stack).toValue();
        if (text.isDefined()) {
            state.slot('text', text);
        }
        this.setState(state);
    };
    return TextModel;
}(NodeModel));
var TEXT_TRANSITION_SELECTOR = Selector.get('transition');
var TEXT_SELECTOR = Selector.get('text');

var TextForm = (function (_super) {
    __extends(TextForm, _super);
    function TextForm() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(TextForm.prototype, "tag", {
        get: function () {
            return 'text';
        },
        enumerable: true,
        configurable: true
    });
    TextForm.prototype.castView = function (value, stack, factory) {
        var header = value.header(this.tag);
        if (header.isDefined()) {
            var view = TextView.create();
            var modelDef = this.materializeView(view, value, stack, factory);
            view.setModel(modelDef);
            return view;
        }
        return undefined;
    };
    TextForm.prototype.castModel = function (value, stack, factory) {
        var header = value.header(this.tag);
        if (header.isDefined()) {
            var model = new TextModel();
            var dataDef = this.materializeModel(model, value, stack, factory);
            model.setData(dataDef);
            return model;
        }
        return undefined;
    };
    TextForm.Form = new TextForm();
    return TextForm;
}(NodeForm));
UiForm.addGlobal(TextForm.Form);

var CustomEventConstructor = function (type, init) {
    if (init === void 0) { init = {}; }
    var event = document.createEvent('CustomEvent');
    event.initCustomEvent(type, init.bubbles || false, init.cancelable || false, init.detail);
    event.__proto__ = this.__proto__;
    return event;
};
if (typeof Event !== 'undefined') {
    CustomEventConstructor.prototype = Event.prototype;
}

var DurationFormat = (function () {
    function DurationFormat() {
    }
    return DurationFormat;
}());
var SECOND$1 = 1000;
var MINUTE$1 = 60 * SECOND$1;
var HOUR$1 = 60 * MINUTE$1;
var DAY = 24 * HOUR$1;
var WEEK = 7 * DAY;
var HMSDurationFormat = (function (_super) {
    __extends(HMSDurationFormat, _super);
    function HMSDurationFormat(units) {
        if (units === void 0) { units = ''; }
        var _this = _super.call(this) || this;
        _this.units = units;
        return _this;
    }
    HMSDurationFormat.prototype.format = function (millis) {
        if (isFinite(millis)) {
            var weeks = void 0;
            if (millis > WEEK) {
                weeks = Math.floor(millis / WEEK);
                millis %= WEEK;
            }
            var days = void 0;
            if (millis > DAY) {
                days = Math.floor(millis / DAY);
                millis %= DAY;
            }
            var hours = void 0;
            if (millis > HOUR$1) {
                hours = Math.floor(millis / HOUR$1);
                millis %= HOUR$1;
            }
            var minutes = void 0;
            if (millis > MINUTE$1) {
                minutes = Math.floor(millis / MINUTE$1);
                millis %= MINUTE$1;
            }
            var seconds = void 0;
            if (millis > SECOND$1) {
                seconds = Math.floor(millis / SECOND$1);
                millis %= SECOND$1;
            }
            var s = '';
            if (weeks) {
                s += weeks + 'w';
            }
            if (days) {
                s += days + 'd';
            }
            if (hours) {
                s += hours + 'h';
            }
            if (minutes) {
                s += minutes + 'm';
            }
            if (seconds || !s) {
                s += (seconds || 0) + 's';
            }
            s += this.units;
            return s;
        }
        else {
            return '' + millis;
        }
    };
    return HMSDurationFormat;
}(DurationFormat));

var NumberFormat = (function () {
    function NumberFormat() {
    }
    return NumberFormat;
}());
var PREFIXES = ['p', 'n', 'u', 'm', '', 'k', 'M', 'G', 'T'];
var SINumberFormat = (function (_super) {
    __extends(SINumberFormat, _super);
    function SINumberFormat(digits, units, symbol) {
        if (digits === void 0) { digits = 2; }
        if (units === void 0) { units = ''; }
        if (symbol === void 0) { symbol = ''; }
        var _this = _super.call(this) || this;
        _this.digits = digits;
        _this.units = units;
        _this.symbol = symbol;
        return _this;
    }
    SINumberFormat.prototype.format = function (value) {
        if (isFinite(value)) {
            var se = value.toExponential(this.digits).split(/e/);
            var s = +se[0];
            var e = (+se[1] < 0) ? 0 : +se[1];
            var f = Math.floor(e / 3);
            return this.symbol + (s * Math.pow(10, e - f * 3)).toFixed(e) + PREFIXES[f + 4] + this.units;
        }
        else {
            return '' + value;
        }
    };
    return SINumberFormat;
}(NumberFormat));

var ReconInterpolator = (function (_super) {
    __extends(ReconInterpolator, _super);
    function ReconInterpolator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ReconInterpolator.prototype.map = function (u) {
        return Item.Absent;
    };
    ReconInterpolator.prototype.unmap = function (c) {
        return 0;
    };
    ReconInterpolator.prototype.range = function (i0, i1) {
        if (i0 === undefined) {
            return [this.map(0), this.map(1)];
        }
        else if (i1 === undefined) {
            i0 = i0;
            return Interpolator.recon(i0[0], i0[1]);
        }
        else {
            return Interpolator.recon(i0, i1);
        }
    };
    ReconInterpolator.prototype.equals = function (that) {
        return this === that;
    };
    return ReconInterpolator;
}(Interpolator));
var AttrInterpolator = (function (_super) {
    __extends(AttrInterpolator, _super);
    function AttrInterpolator(f0, f1) {
        var _this = _super.call(this) || this;
        if (!f0 && !f1) {
            throw new TypeError();
        }
        else if (!f1) {
            f1 = f0;
        }
        else if (!f0) {
            f0 = f1;
        }
        if (!(f0.key instanceof Text$1)) {
            throw new TypeError('' + f0.key);
        }
        else if (!(f1.key instanceof Text$1)) {
            throw new TypeError('' + f1.key);
        }
        f0.commit();
        f1.commit();
        _this.keyInterpolator = Interpolator.recon(f0.key, f1.key);
        _this.valueInterpolator = Interpolator.recon(f0.value, f1.value);
        return _this;
    }
    AttrInterpolator.prototype.map = function (u) {
        var key = this.keyInterpolator.map(u);
        var value = this.valueInterpolator.map(u);
        return Attr.of(key, value);
    };
    AttrInterpolator.prototype.unmap = function (f) {
        return 0;
    };
    AttrInterpolator.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof AttrInterpolator) {
            return this.keyInterpolator.equals(that.keyInterpolator)
                && this.valueInterpolator.equals(that.valueInterpolator);
        }
        return false;
    };
    return AttrInterpolator;
}(ReconInterpolator));
var SlotInterpolator = (function (_super) {
    __extends(SlotInterpolator, _super);
    function SlotInterpolator(f0, f1) {
        var _this = _super.call(this) || this;
        if (!f0 && !f1) {
            throw new TypeError();
        }
        else if (!f1) {
            f1 = f0;
        }
        else if (!f0) {
            f0 = f1;
        }
        f0.commit();
        f1.commit();
        _this.keyInterpolator = Interpolator.recon(f0.key, f1.key);
        _this.valueInterpolator = Interpolator.recon(f0.value, f1.value);
        return _this;
    }
    SlotInterpolator.prototype.map = function (u) {
        var key = this.keyInterpolator.map(u);
        var value = this.valueInterpolator.map(u);
        return Slot.of(key, value);
    };
    SlotInterpolator.prototype.unmap = function (f) {
        return 0;
    };
    SlotInterpolator.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof SlotInterpolator) {
            return this.keyInterpolator.equals(that.keyInterpolator)
                && this.valueInterpolator.equals(that.valueInterpolator);
        }
        return false;
    };
    return SlotInterpolator;
}(ReconInterpolator));
var ValueInterpolator = (function (_super) {
    __extends(ValueInterpolator, _super);
    function ValueInterpolator(v0, v1) {
        var _this = _super.call(this) || this;
        if (v0 !== undefined) {
            v0 = Value.fromAny(v0);
        }
        if (v1 !== undefined) {
            v1 = Value.fromAny(v1);
        }
        if (!v0 && !v1) {
            v1 = v0 = Value.Absent;
        }
        else if (!v1) {
            v1 = v0;
        }
        else if (!v0) {
            v0 = v1;
        }
        _this.v0 = v0.commit();
        _this.v1 = v1.commit();
        return _this;
    }
    ValueInterpolator.prototype.map = function (u) {
        return u < 1 ? this.v0 : this.v1;
    };
    ValueInterpolator.prototype.unmap = function (v) {
        return v.equals(this.v1) ? 1 : 0;
    };
    ValueInterpolator.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof ValueInterpolator) {
            return this.v0.equals(that.v0) && this.v1.equals(that.v1);
        }
        return false;
    };
    return ValueInterpolator;
}(ReconInterpolator));
var RecordInterpolator = (function (_super) {
    __extends(RecordInterpolator, _super);
    function RecordInterpolator(r0, r1) {
        var _this = _super.call(this) || this;
        if (r0 !== undefined) {
            r0 = Record.fromAny(r0);
        }
        if (r1 !== undefined) {
            r1 = Record.fromAny(r1);
        }
        if (!r0 && !r1) {
            r1 = r0 = Record.Empty;
        }
        else if (!r1) {
            r1 = r0;
        }
        else if (!r0) {
            r0 = r1;
        }
        r0.commit();
        r1.commit();
        _this.interpolators = [];
        var n = Math.min(r0.length, r1.length);
        for (var i = 0; i < n; i += 1) {
            _this.interpolators.push(Interpolator.recon(r0.getItem(i), r1.getItem(i)));
        }
        return _this;
    }
    RecordInterpolator.prototype.map = function (u) {
        var n = this.interpolators.length;
        var record = Record.empty(n);
        for (var i = 0; i < n; i += 1) {
            record.push(this.interpolators[i].map(u));
        }
        return record;
    };
    RecordInterpolator.prototype.unmap = function (f) {
        return 0;
    };
    RecordInterpolator.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof RecordInterpolator) {
            var n = this.interpolators.length;
            if (n === that.interpolators.length) {
                for (var i = 0; i < n; i += 1) {
                    if (!this.interpolators[i].equals(that.interpolators[i])) {
                        return false;
                    }
                }
                return true;
            }
        }
        return false;
    };
    return RecordInterpolator;
}(ReconInterpolator));
var NumInterpolator = (function (_super) {
    __extends(NumInterpolator, _super);
    function NumInterpolator(y0, y1) {
        var _this = _super.call(this) || this;
        if (y0 === undefined && y1 === undefined) {
            y1 = y0 = 0;
        }
        else if (y1 === undefined) {
            y1 = y0;
        }
        else if (y0 === undefined) {
            y0 = y1;
        }
        _this.y0 = +y0;
        _this.dy = +y1 - _this.y0;
        return _this;
    }
    NumInterpolator.prototype.map = function (u) {
        return Num.valueOf(this.y0 + this.dy * u);
    };
    NumInterpolator.prototype.unmap = function (y) {
        return this.dy ? (y.value - this.y0) / this.dy : this.dy;
    };
    NumInterpolator.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof NumInterpolator) {
            return this.y0 === that.y0 && this.dy === that.dy;
        }
        return false;
    };
    return NumInterpolator;
}(ReconInterpolator));
var InfixExprInterpolator = (function (_super) {
    __extends(InfixExprInterpolator, _super);
    function InfixExprInterpolator(e0, e1) {
        var _this = _super.call(this) || this;
        if (!e0 && !e1) {
            throw new TypeError();
        }
        else if (!e1) {
            e1 = e0;
        }
        else if (!e0) {
            e0 = e1;
        }
        _this.operator = e0.operator;
        if (_this.operator !== e1.operator) {
            throw new Error(e1.operator);
        }
        e0.commit();
        e1.commit();
        _this.lhsInterpolator = Interpolator.recon(e0.lhs, e1.lhs);
        _this.rhsInterpolator = Interpolator.recon(e0.rhs, e1.rhs);
        return _this;
    }
    InfixExprInterpolator.prototype.map = function (u) {
        var lhs = this.lhsInterpolator.map(u);
        var rhs = this.rhsInterpolator.map(u);
        switch (this.operator) {
            case '||': return lhs.or(rhs);
            case '&&': return lhs.and(rhs);
            case '|': return lhs.bor(rhs);
            case '^': return lhs.bxor(rhs);
            case '&': return lhs.band(rhs);
            case '<': return lhs.lt(rhs);
            case '<=': return lhs.le(rhs);
            case '==': return lhs.eq(rhs);
            case '!=': return lhs.ne(rhs);
            case '>=': return lhs.ge(rhs);
            case '>': return lhs.gt(rhs);
            case '+': return lhs.plus(rhs);
            case '-': return lhs.minus(rhs);
            case '*': return lhs.times(rhs);
            case '/': return lhs.divide(rhs);
            case '%': return lhs.modulo(rhs);
            default: throw new Error(this.operator);
        }
    };
    InfixExprInterpolator.prototype.unmap = function (f) {
        return 0;
    };
    InfixExprInterpolator.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof InfixExprInterpolator) {
            return this.lhsInterpolator.equals(that.lhsInterpolator)
                && this.rhsInterpolator.equals(that.rhsInterpolator);
        }
        return false;
    };
    return InfixExprInterpolator;
}(ReconInterpolator));
var PrefixExprInterpolator = (function (_super) {
    __extends(PrefixExprInterpolator, _super);
    function PrefixExprInterpolator(e0, e1) {
        var _this = _super.call(this) || this;
        if (!e0 && !e1) {
            throw new TypeError();
        }
        else if (!e1) {
            e1 = e0;
        }
        else if (!e0) {
            e0 = e1;
        }
        _this.operator = e0.operator;
        if (_this.operator !== e1.operator) {
            throw new Error(e1.operator);
        }
        e0.commit();
        e1.commit();
        _this.rhsInterpolator = Interpolator.recon(e0.rhs, e1.rhs);
        return _this;
    }
    PrefixExprInterpolator.prototype.map = function (u) {
        var rhs = this.rhsInterpolator.map(u);
        switch (this.operator) {
            case '!': return rhs.not();
            case '~': return rhs.bnot();
            case '-': return rhs.neg();
            default: throw new Error(this.operator);
        }
    };
    PrefixExprInterpolator.prototype.unmap = function (f) {
        return 0;
    };
    PrefixExprInterpolator.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof PrefixExprInterpolator) {
            return this.rhsInterpolator.equals(that.rhsInterpolator);
        }
        return false;
    };
    return PrefixExprInterpolator;
}(ReconInterpolator));
var InvokeExprInterpolator = (function (_super) {
    __extends(InvokeExprInterpolator, _super);
    function InvokeExprInterpolator(e0, e1) {
        var _this = _super.call(this) || this;
        if (!e0 && !e1) {
            throw new TypeError();
        }
        else if (!e1) {
            e1 = e0;
        }
        else if (!e0) {
            e0 = e1;
        }
        e0.commit();
        e1.commit();
        _this.funcInterpolator = Interpolator.recon(e0.func, e1.func);
        _this.argsInterpolator = Interpolator.recon(e0.args, e1.args);
        return _this;
    }
    InvokeExprInterpolator.prototype.map = function (u) {
        var func = this.funcInterpolator.map(u);
        var args = this.argsInterpolator.map(u);
        return Selector.literal(func).invoke(args);
    };
    InvokeExprInterpolator.prototype.unmap = function (f) {
        return 0;
    };
    InvokeExprInterpolator.prototype.equals = function (that) {
        if (this === that) {
            return true;
        }
        else if (that instanceof InvokeExprInterpolator) {
            return this.funcInterpolator.equals(that.funcInterpolator)
                && this.argsInterpolator.equals(that.argsInterpolator);
        }
        return false;
    };
    return InvokeExprInterpolator;
}(ReconInterpolator));
Interpolator.recon = function (i0, i1) {
    if (i0 === undefined && i1 === undefined) {
        return new ReconInterpolator();
    }
    if (i0 !== undefined) {
        i0 = Item.fromAny(i0);
    }
    if (i1 !== undefined) {
        i1 = Item.fromAny(i1);
    }
    if (!i0 && !i1) {
        i1 = i0 = Item.Absent;
    }
    else if (!i1) {
        i1 = i0;
    }
    else if (!i0) {
        i0 = i1;
    }
    if (i0 instanceof Field && i1 instanceof Field) {
        if (i0 instanceof Attr && i1 instanceof Attr
            || i0 instanceof Attr && i1.key instanceof Text$1
            || i1 instanceof Attr && i0.key instanceof Text$1) {
            return new AttrInterpolator(i0, i1);
        }
        else {
            return new SlotInterpolator(i0, i1);
        }
    }
    var v0 = i0.toValue();
    var v1 = i1.toValue();
    if (v0 instanceof Record && v1 instanceof Record) {
        return new RecordInterpolator(v0, v1);
    }
    else if (v0 instanceof Num && v1 instanceof Num) {
        return new NumInterpolator(v0, v1);
    }
    else if (v0 instanceof InfixExpr && v1 instanceof InfixExpr) {
        return new InfixExprInterpolator(v0, v1);
    }
    else if (v0 instanceof PrefixExpr && v1 instanceof PrefixExpr) {
        return new PrefixExprInterpolator(v0, v1);
    }
    else if (v0 instanceof InvokeExpr && v1 instanceof InvokeExpr) {
        return new InvokeExprInterpolator(v0, v1);
    }
    return new ValueInterpolator(v0, v1);
};

var COS_PI_4 = Math.cos(Math.PI / 4);
var SIN_PI_4 = Math.sin(Math.PI / 4);
var KinematicEvent = (function (_super) {
    __extends(KinematicEvent, _super);
    function KinematicEvent(type, init) {
        var _this = _super.call(this, type, init) || this;
        _this.points = init.points;
        return _this;
    }
    return KinematicEvent;
}(CustomEventConstructor));
var KinematicTrack = (function () {
    function KinematicTrack(kinematic, identifier) {
        this.kinematic = kinematic;
        this.identifier = identifier;
        this.path = [];
        this.t = NaN;
        this.cx = NaN;
        this.cy = NaN;
        this.vx = NaN;
        this.vy = NaN;
        this.ax = NaN;
        this.ay = NaN;
        this.dx = NaN;
        this.dy = NaN;
    }
    Object.defineProperty(KinematicTrack.prototype, "ghost", {
        get: function () {
            return false;
        },
        enumerable: true,
        configurable: true
    });
    KinematicTrack.prototype.moveTo = function (t, cx, cy) {
        this.path.push({ t: t, cx: cx, cy: cy });
        while (this.path.length > 1) {
            if (t - this.path[0].t > this.kinematic.h) {
                this.path.splice(0, 1);
            }
            else {
                break;
            }
        }
        this.update();
    };
    KinematicTrack.prototype.update = function () {
        var p0 = this.path[0];
        var p1 = this.path[this.path.length - 1];
        if (p1 && p1 !== p0) {
            var dt = p1.t - p0.t;
            var vx = void 0;
            var vy = void 0;
            if (dt) {
                vx = (p1.cx - p0.cx) / dt;
                vy = (p1.cy - p0.cy) / dt;
                var v2 = vx * vx + vy * vy;
                var vMax = this.kinematic.vMax;
                var vMax2 = vMax * vMax;
                if (vMax2 < v2) {
                    var v = Math.sqrt(v2);
                    vx = vx * vMax / v;
                    vy = vy * vMax / v;
                }
            }
            else {
                vx = 0;
                vy = 0;
            }
            this.t = p1.t;
            this.dx = p1.cx - this.cx;
            this.dy = p1.cy - this.cy;
            this.cx = p1.cx;
            this.cy = p1.cy;
            this.vx = vx;
            this.vy = vy;
        }
        else if (p0) {
            this.t = p0.t;
            this.dx = p0.cx - this.cx;
            this.dy = p0.cy - this.cy;
            this.cx = p0.cx;
            this.cy = p0.cy;
            this.vx = 0;
            this.vy = 0;
        }
    };
    return KinematicTrack;
}());
var KinematicGhost = (function () {
    function KinematicGhost(kinematic, identifier, t, cx, cy, vx, vy, ax, ay) {
        this.kinematic = kinematic;
        this.identifier = identifier;
        this.t = t;
        this.cx = cx;
        this.cy = cy;
        this.vx = vx;
        this.vy = vy;
        this.ax = ax;
        this.ay = ay;
        this.dx = 0;
        this.dy = 0;
    }
    Object.defineProperty(KinematicGhost.prototype, "ghost", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    KinematicGhost.prototype.translate = function (dx, dy) {
        this.cx += dx;
        this.cy += dy;
    };
    KinematicGhost.prototype.update = function (t) {
        var dt = t - this.t;
        if (dt) {
            var vx = this.vx + this.ax * dt;
            var cx = void 0;
            if (vx < 0 === this.vx < 0) {
                cx = this.cx + this.vx * dt + 0.5 * (this.ax * dt * dt);
            }
            else {
                cx = this.cx - (this.vx * this.vx) / (2 * this.ax);
                vx = 0;
                this.ax = 0;
            }
            var vy = this.vy + this.ay * dt;
            var cy = void 0;
            if (vy < 0 === this.vy < 0) {
                cy = this.cy + this.vy * dt + 0.5 * (this.ay * dt * dt);
            }
            else {
                cy = this.cy - (this.vy * this.vy) / (2 * this.ay);
                vy = 0;
                this.ay = 0;
            }
            this.dx = cx - this.cx;
            this.dy = cy - this.cy;
            this.cx = cx;
            this.cy = cy;
            this.vx = vx;
            this.vy = vy;
            this.t = t;
        }
    };
    return KinematicGhost;
}());
var Kinematic = (function () {
    function Kinematic() {
        this.node = null;
        this.tracks = {};
        this.trackCount = 0;
        this.ghosts = {};
        this.ghostCount = 0;
        this.ghostFrame = 0;
        this.h = 67;
        this.a = 0.00175;
        this.vMax = 1.75;
        this.dMin = 10;
        this.onGhostFrame = this.onGhostFrame.bind(this);
    }
    Kinematic.prototype.surface = function (node) {
        if (node === undefined) {
            return this.node;
        }
        else {
            if (this.node) {
                this.detach(this.node);
            }
            this.node = node;
            if (this.node) {
                this.attach(this.node);
            }
            return this;
        }
    };
    Kinematic.prototype.hysteresis = function (h) {
        if (h === undefined) {
            return this.h;
        }
        else {
            this.h = h;
            return this;
        }
    };
    Kinematic.prototype.acceleration = function (a) {
        if (a === undefined) {
            return this.a;
        }
        else {
            this.a = a;
            return this;
        }
    };
    Kinematic.prototype.velocityMax = function (vMax) {
        if (vMax === undefined) {
            return this.vMax;
        }
        else {
            this.vMax = vMax;
            return this;
        }
    };
    Kinematic.prototype.distanceMin = function (dMin) {
        if (dMin === undefined) {
            return this.dMin;
        }
        else {
            this.dMin = dMin;
            return this;
        }
    };
    Kinematic.prototype.wheel = function (wheel) {
        if (wheel === undefined) {
            return false;
        }
        else {
            return this;
        }
    };
    Kinematic.prototype.points = function () {
        var points = [];
        for (var identifier in this.tracks) {
            points.push(this.tracks[identifier]);
        }
        for (var identifier in this.ghosts) {
            points.push(this.ghosts[identifier]);
        }
        return points;
    };
    Kinematic.prototype.interrupt = function () {
        if (this.ghostFrame) {
            cancelAnimationFrame(this.ghostFrame);
            this.ghostFrame = 0;
        }
        if (this.ghostCount) {
            this.ghosts = {};
            this.ghostCount = 0;
            if (this.trackCount) {
                this.kinematicUpdate();
            }
            else {
                this.kinematicEnd();
            }
        }
    };
    Kinematic.prototype.zoom = function (cx, cy, dz) {
        if (!dz) {
            return;
        }
        var t = Date.now();
        var a = this.a;
        var ax = a * COS_PI_4;
        var ay = a * SIN_PI_4;
        var vMax = this.vMax;
        var vx = 0.5 * vMax * COS_PI_4;
        var vy = 0.5 * vMax * SIN_PI_4;
        var dx = (4 * vx * vx) / ax;
        var dy = (4 * vy * vy) / ay;
        var zoom0 = this.ghosts.zoom0;
        var zoom1 = this.ghosts.zoom1;
        if (zoom0 && zoom1) {
            var dcx = Math.abs(zoom1.cx - zoom0.cx) / 2;
            var dcy = Math.abs(zoom1.cy - zoom0.cy) / 2;
            var dt = t - zoom0.t;
            dz = Math.min(Math.max(-vMax * dt, dz), vMax * dt);
            var zx = (dz * dcx * COS_PI_4) / dx;
            var zy = (dz * dcy * SIN_PI_4) / dy;
            ax = (ax * dcx) / dx;
            ay = (ay * dcy) / dy;
            if (dt > 0) {
                zoom0.t = t;
                zoom0.cx += zx;
                zoom0.cy += zy;
                zoom0.vx = zx / dt;
                zoom0.vy = zy / dt;
                zoom0.ax = zoom0.vx < 0 ? ax : zoom0.vx > 0 ? -ax : 0;
                zoom0.ay = zoom0.vy < 0 ? ay : zoom0.vy > 0 ? -ay : 0;
                zoom0.dx = zx;
                zoom0.dy = zy;
                zoom1.t = t;
                zoom1.cx -= zx;
                zoom1.cy -= zy;
                zoom1.vx = -zx / dt;
                zoom1.vy = -zy / dt;
                zoom1.ax = zoom1.vx < 0 ? ax : zoom1.vx > 0 ? -ax : 0;
                zoom1.ay = zoom1.vy < 0 ? ay : zoom1.vy > 0 ? -ay : 0;
                zoom1.dx = -zx;
                zoom1.dy = -zy;
            }
        }
        else {
            this.interrupt();
            this.kinematicStart();
            if (dz < 0) {
                zoom0 = new KinematicGhost(this, 'zoom0', t, cx - dx, cy - dy, -vx, -vy, ax, ay);
                zoom1 = new KinematicGhost(this, 'zoom1', t, cx + dx, cy + dy, vx, vy, -ax, -ay);
            }
            else {
                zoom0 = new KinematicGhost(this, 'zoom0', t, cx - dx, cy - dy, vx, vy, -ax, -ay);
                zoom1 = new KinematicGhost(this, 'zoom1', t, cx + dx, cy + dy, -vx, -vy, ax, ay);
            }
            this.ghosts.zoom0 = zoom0;
            this.ghostCount += 1;
            this.ghosts.zoom1 = zoom1;
            this.ghostCount += 1;
        }
        this.kinematicUpdate();
        if (this.ghostFrame) {
            cancelAnimationFrame(this.ghostFrame);
        }
        this.ghostFrame = requestAnimationFrame(this.onGhostFrame);
    };
    Kinematic.prototype.updateVelocity = function (t, points) {
        var p0 = points[0];
        var p1 = points[1];
        var i = 0;
        if (p0 && p1) {
            i = 2;
            var dx0 = Math.abs(p1.cx - p0.cx);
            var dy0 = Math.abs(p1.cy - p0.cy);
            if (p0 instanceof KinematicGhost) {
                p0.update(t);
            }
            if (p1 instanceof KinematicGhost) {
                p1.update(t);
            }
            var dx1 = Math.abs(p1.cx - p0.cx);
            var dy1 = Math.abs(p1.cy - p0.cy);
            var sx = dx1 / dx0;
            var sy = dy1 / dy0;
            p0.vx *= sx;
            p0.vy *= sy;
            p0.ax *= sx;
            p0.ay *= sy;
            p1.vx *= sx;
            p1.vy *= sy;
            p1.ax *= sx;
            p1.ay *= sy;
        }
        while (i < points.length) {
            var p = points[i];
            if (p instanceof KinematicGhost) {
                p.update(t);
            }
            i += 1;
        }
    };
    Kinematic.prototype.spreadVelocity = function (track) {
        for (var identifier in this.ghosts) {
            var ghost = this.ghosts[identifier];
            if (track.vx < 0 === ghost.vx < 0) {
                track.vx = (track.vx + ghost.vx) / 2;
                ghost.vx = (track.vx + ghost.vx) / 2;
            }
            else {
                track.vx = (track.vx - ghost.vx) / 2;
                ghost.vx = (ghost.vx - track.vx) / 2;
            }
            if (track.vy < 0 === ghost.vy < 0) {
                track.vy = (track.vy + ghost.vy) / 2;
                ghost.vy = (track.vy + ghost.vy) / 2;
            }
            else {
                track.vy = (track.vy - ghost.vy) / 2;
                ghost.vy = (ghost.vy - track.vy) / 2;
            }
        }
    };
    Kinematic.prototype.coast = function (track) {
        if (track.vx || track.vy) {
            this.spreadVelocity(track);
            var alpha = Math.atan2(Math.abs(track.vy), Math.abs(track.vx));
            var a = this.a;
            var ax = (track.vx < 0 ? a : track.vx > 0 ? -a : 0) * Math.cos(alpha);
            var ay = (track.vy < 0 ? a : track.vy > 0 ? -a : 0) * Math.sin(alpha);
            if (ax || ay) {
                var ghost = new KinematicGhost(this, track.identifier, track.t, track.cx, track.cy, track.vx, track.vy, ax, ay);
                this.ghosts[ghost.identifier] = ghost;
                this.ghostCount += 1;
                if (!this.ghostFrame) {
                    this.ghostFrame = requestAnimationFrame(this.onGhostFrame);
                }
            }
        }
    };
    Kinematic.prototype.translate = function (dx, dy) {
        dx = dx || 0;
        dy = dy || 0;
        for (var identifier in this.ghosts) {
            this.ghosts[identifier].translate(dx, dy);
        }
    };
    Kinematic.prototype.interpolate = function (t) {
        for (var identifier in this.tracks) {
            this.tracks[identifier].update();
        }
        this.updateVelocity(t, this.points());
        this.kinematicUpdate();
        for (var identifier in this.ghosts) {
            var ghost = this.ghosts[identifier];
            if (!ghost.ax && !ghost.ay) {
                delete this.ghosts[identifier];
                this.ghostCount -= 1;
            }
        }
        if (!this.trackCount && !this.ghostCount) {
            this.kinematicEnd();
        }
        else if (this.ghostCount && !this.ghostFrame) {
            this.ghostFrame = requestAnimationFrame(this.onGhostFrame);
        }
    };
    Kinematic.prototype.onGhostFrame = function (t) {
        this.ghostFrame = 0;
        this.interpolate(Date.now());
    };
    Kinematic.prototype.kinematicStart = function () {
        var event = new KinematicEvent('kinematicstart', {
            bubbles: true,
            cancelable: true,
            composed: true,
            points: this.points(),
        });
        this.node.dispatchEvent(event);
    };
    Kinematic.prototype.kinematicUpdate = function () {
        var event = new KinematicEvent('kinematicupdate', {
            bubbles: true,
            cancelable: true,
            composed: true,
            points: this.points(),
        });
        this.node.dispatchEvent(event);
    };
    Kinematic.prototype.kinematicEnd = function () {
        var event = new KinematicEvent('kinematicend', {
            bubbles: true,
            cancelable: true,
            composed: true,
            points: this.points(),
        });
        this.node.dispatchEvent(event);
    };
    Kinematic.prototype.trackStart = function (identifier, clientX, clientY, event) {
        this.interrupt();
        var track = new KinematicTrack(this, identifier);
        this.tracks[identifier] = track;
        track.moveTo(Date.now(), clientX, clientY);
        this.trackCount += 1;
        if (this.trackCount === 1) {
            this.startTracking(this.node);
        }
        this.trackDidStart(track, this.node, event);
    };
    Kinematic.prototype.trackMove = function (identifier, clientX, clientY, event) {
        var track = this.tracks[identifier];
        if (track) {
            track.moveTo(Date.now(), clientX, clientY);
            this.trackDidMove(track, this.node, event);
        }
    };
    Kinematic.prototype.trackCancel = function (identifier, clientX, clientY, event) {
        var track = this.tracks[identifier];
        if (track) {
            delete this.tracks[identifier];
            this.trackCount -= 1;
            track.update();
            this.trackDidCancel(track, this.node, event);
            if (this.trackCount === 0) {
                this.endTracking(this.node);
            }
        }
    };
    Kinematic.prototype.trackEnd = function (identifier, clientX, clientY, event) {
        var track = this.tracks[identifier];
        if (track) {
            delete this.tracks[identifier];
            this.trackCount -= 1;
            track.update();
            this.trackDidEnd(track, this.node, event);
            if (this.trackCount === 0) {
                this.endTracking(this.node);
            }
        }
    };
    Kinematic.prototype.trackDidStart = function (track, surface, event) {
        if (this.trackCount === 1) {
            this.kinematicStart();
        }
    };
    Kinematic.prototype.trackDidMove = function (track, surface, event) {
        this.translate(track.dx, track.dy);
        this.interpolate(Date.now());
    };
    Kinematic.prototype.trackDidCancel = function (track, surface, event) {
        if (!this.trackCount && !this.ghostCount) {
            this.kinematicEnd();
        }
    };
    Kinematic.prototype.trackDidEnd = function (track, surface, event) {
        this.coast(track);
        if (!this.trackCount && !this.ghostCount) {
            this.kinematicEnd();
        }
    };
    Kinematic.create = function () {
        if (typeof PointerEvent !== 'undefined') {
            return new PointerKinematic();
        }
        else if (typeof TouchEvent !== 'undefined') {
            return new TouchKinematic();
        }
        else {
            return new MouseKinematic();
        }
    };
    return Kinematic;
}());
var PointerKinematic = (function (_super) {
    __extends(PointerKinematic, _super);
    function PointerKinematic() {
        var _this = _super.call(this) || this;
        _this._wheel = true;
        _this.onPointerDown = _this.onPointerDown.bind(_this);
        _this.onPointerMove = _this.onPointerMove.bind(_this);
        _this.onPointerUp = _this.onPointerUp.bind(_this);
        _this.onWheel = _this.onWheel.bind(_this);
        return _this;
    }
    PointerKinematic.prototype.wheel = function (wheel) {
        if (wheel === undefined) {
            return this._wheel;
        }
        else {
            if (this._wheel !== wheel) {
                this._wheel = wheel;
                if (this.node) {
                    if (wheel) {
                        this.node.addEventListener('wheel', this.onWheel);
                    }
                    else {
                        this.node.removeEventListener('wheel', this.onWheel);
                    }
                }
            }
            return this;
        }
    };
    PointerKinematic.prototype.attach = function (surface) {
        surface.addEventListener('pointerdown', this.onPointerDown);
        if (this._wheel) {
            surface.addEventListener('wheel', this.onWheel);
        }
    };
    PointerKinematic.prototype.detach = function (surface) {
        surface.removeEventListener('pointerdown', this.onPointerDown);
        surface.removeEventListener('wheel', this.onWheel);
    };
    PointerKinematic.prototype.startTracking = function (surface) {
        surface.addEventListener('pointermove', this.onPointerMove);
        surface.addEventListener('pointerup', this.onPointerUp);
    };
    PointerKinematic.prototype.endTracking = function (surface) {
        surface.removeEventListener('pointermove', this.onPointerMove);
        surface.removeEventListener('pointerup', this.onPointerUp);
    };
    PointerKinematic.prototype.trackDidStart = function (track, surface, event) {
        _super.prototype.trackDidStart.call(this, track, surface, event);
        if (surface.setPointerCapture) {
            surface.setPointerCapture(+track.identifier);
        }
    };
    PointerKinematic.prototype.trackDidEnd = function (track, surface, event) {
        _super.prototype.trackDidEnd.call(this, track, surface, event);
        if (surface.releasePointerCapture) {
            surface.releasePointerCapture(+track.identifier);
        }
    };
    PointerKinematic.prototype.onPointerDown = function (event) {
        this.trackStart('' + event.pointerId, event.clientX, event.clientY, event);
    };
    PointerKinematic.prototype.onPointerMove = function (event) {
        this.trackMove('' + event.pointerId, event.clientX, event.clientY, event);
    };
    PointerKinematic.prototype.onPointerUp = function (event) {
        this.trackEnd('' + event.pointerId, event.clientX, event.clientY, event);
    };
    PointerKinematic.prototype.onWheel = function (event) {
        event.preventDefault();
        this.zoom(event.clientX, event.clientY, event.wheelDeltaY || event.deltaY);
    };
    return PointerKinematic;
}(Kinematic));
var TouchKinematic = (function (_super) {
    __extends(TouchKinematic, _super);
    function TouchKinematic() {
        var _this = _super.call(this) || this;
        _this.onTouchStart = _this.onTouchStart.bind(_this);
        _this.onTouchMove = _this.onTouchMove.bind(_this);
        _this.onTouchCancel = _this.onTouchCancel.bind(_this);
        _this.onTouchEnd = _this.onTouchEnd.bind(_this);
        return _this;
    }
    TouchKinematic.prototype.attach = function (surface) {
        surface.addEventListener('touchstart', this.onTouchStart);
    };
    TouchKinematic.prototype.detach = function (surface) {
        surface.removeEventListener('touchstart', this.onTouchStart);
    };
    TouchKinematic.prototype.startTracking = function (surface) {
        surface.addEventListener('touchmove', this.onTouchMove);
        surface.addEventListener('touchcancel', this.onTouchCancel);
        surface.addEventListener('touchend', this.onTouchEnd);
    };
    TouchKinematic.prototype.endTracking = function (surface) {
        surface.removeEventListener('touchmove', this.onTouchMove);
        surface.removeEventListener('touchcancel', this.onTouchCancel);
        surface.removeEventListener('touchend', this.onTouchEnd);
    };
    TouchKinematic.prototype.onTouchStart = function (event) {
        for (var i = 0; i < event.changedTouches.length; i += 1) {
            var touch = event.changedTouches[i];
            this.trackStart('' + touch.identifier, touch.clientX, touch.clientY, event);
        }
        if (event.changedTouches.length > 1 || this.trackCount > 1) {
            event.preventDefault();
        }
    };
    TouchKinematic.prototype.onTouchMove = function (event) {
        for (var i = 0; i < event.changedTouches.length; i += 1) {
            var touch = event.changedTouches[i];
            this.trackMove('' + touch.identifier, touch.clientX, touch.clientY, event);
        }
    };
    TouchKinematic.prototype.onTouchCancel = function (event) {
        for (var i = 0; i < event.changedTouches.length; i += 1) {
            var touch = event.changedTouches[i];
            this.trackCancel('' + touch.identifier, touch.clientX, touch.clientY, event);
        }
    };
    TouchKinematic.prototype.onTouchEnd = function (event) {
        for (var i = 0; i < event.changedTouches.length; i += 1) {
            var touch = event.changedTouches[i];
            this.trackEnd('' + touch.identifier, touch.clientX, touch.clientY, event);
        }
    };
    return TouchKinematic;
}(Kinematic));
var MouseKinematic = (function (_super) {
    __extends(MouseKinematic, _super);
    function MouseKinematic() {
        var _this = _super.call(this) || this;
        _this._wheel = true;
        _this.onMouseDown = _this.onMouseDown.bind(_this);
        _this.onMouseMove = _this.onMouseMove.bind(_this);
        _this.onMouseUp = _this.onMouseUp.bind(_this);
        _this.onWheel = _this.onWheel.bind(_this);
        return _this;
    }
    MouseKinematic.prototype.wheel = function (wheel) {
        if (wheel === undefined) {
            return this._wheel;
        }
        else {
            if (this._wheel !== wheel) {
                this._wheel = wheel;
                if (this.node) {
                    if (wheel) {
                        this.node.addEventListener('wheel', this.onWheel);
                    }
                    else {
                        this.node.removeEventListener('wheel', this.onWheel);
                    }
                }
            }
            return this;
        }
    };
    MouseKinematic.prototype.attach = function (surface) {
        surface.addEventListener('mousedown', this.onMouseDown);
        if (this._wheel) {
            surface.addEventListener('wheel', this.onWheel);
        }
    };
    MouseKinematic.prototype.detach = function (surface) {
        surface.removeEventListener('mousedown', this.onMouseDown);
        surface.removeEventListener('wheel', this.onWheel);
    };
    MouseKinematic.prototype.startTracking = function (surface) {
        document.body.addEventListener('mousemove', this.onMouseMove);
        document.body.addEventListener('mouseup', this.onMouseUp);
    };
    MouseKinematic.prototype.endTracking = function (surface) {
        document.body.removeEventListener('mousemove', this.onMouseMove);
        document.body.removeEventListener('mouseup', this.onMouseUp);
    };
    MouseKinematic.prototype.onMouseDown = function (event) {
        this.trackStart('mouse', event.clientX, event.clientY, event);
    };
    MouseKinematic.prototype.onMouseMove = function (event) {
        this.trackMove('mouse', event.clientX, event.clientY, event);
    };
    MouseKinematic.prototype.onMouseUp = function (event) {
        this.trackEnd('mouse', event.clientX, event.clientY, event);
    };
    MouseKinematic.prototype.onWheel = function (event) {
        event.preventDefault();
        this.zoom(event.clientX, event.clientY, event.wheelDeltaY || event.deltaY);
    };
    return MouseKinematic;
}(Kinematic));

var KinematicScaleEvent = (function (_super) {
    __extends(KinematicScaleEvent, _super);
    function KinematicScaleEvent(type, init) {
        var _this = _super.call(this, type, init) || this;
        _this.kinematicScale = init.kinematicScale;
        _this.kinematic = init.kinematic;
        _this.ruler = init.ruler;
        _this.scale = init.scale;
        return _this;
    }
    return KinematicScaleEvent;
}(CustomEventConstructor));
var KinematicScale = (function () {
    function KinematicScale() {
        this._kinematic = null;
        this._ruler = null;
        this._scale = null;
        this._xMin = null;
        this._xMax = null;
        this._zMin = null;
        this._zMax = null;
        this._points = [];
        this.onKinematicStart = this.onKinematicStart.bind(this);
        this.onKinematicUpdate = this.onKinematicUpdate.bind(this);
        this.onKinematicEnd = this.onKinematicEnd.bind(this);
    }
    KinematicScale.prototype.kinematic = function (kinematic) {
        if (kinematic === undefined) {
            return this._kinematic;
        }
        else {
            if (this._kinematic) {
                this.detach(this._kinematic);
            }
            this._kinematic = kinematic;
            if (this._kinematic) {
                this.attach(this._kinematic);
            }
            return this;
        }
    };
    KinematicScale.prototype.hysteresis = function (h) {
        if (h === undefined) {
            return this._kinematic.hysteresis();
        }
        else {
            this._kinematic.hysteresis(h);
            return this;
        }
    };
    KinematicScale.prototype.acceleration = function (a) {
        if (a === undefined) {
            return this._kinematic.acceleration();
        }
        else {
            this._kinematic.acceleration(a);
            return this;
        }
    };
    KinematicScale.prototype.velocityMax = function (vMax) {
        if (vMax === undefined) {
            return this._kinematic.velocityMax();
        }
        else {
            this._kinematic.velocityMax(vMax);
            return this;
        }
    };
    KinematicScale.prototype.distanceMin = function (dMin) {
        if (dMin === undefined) {
            return this._kinematic.distanceMin();
        }
        else {
            this._kinematic.distanceMin(dMin);
            return this;
        }
    };
    KinematicScale.prototype.wheel = function (wheel) {
        if (wheel === undefined) {
            return this._kinematic.wheel();
        }
        else {
            this._kinematic.wheel(wheel);
            return this;
        }
    };
    KinematicScale.prototype.ruler = function (ruler) {
        if (ruler === undefined) {
            return this._ruler;
        }
        else {
            this._ruler = ruler;
            return this;
        }
    };
    KinematicScale.prototype.scale = function (scale) {
        if (scale === undefined) {
            return this._scale;
        }
        else {
            var oldScale = this._scale;
            this._scale = scale;
            if (oldScale === null) {
                this.zoomBounds(true);
            }
            return this;
        }
    };
    KinematicScale.prototype.domainMin = function (_xMin) {
        if (_xMin === undefined) {
            return this._xMin;
        }
        else {
            this._xMin = _xMin;
            return this;
        }
    };
    KinematicScale.prototype.domainMax = function (_xMax) {
        if (_xMax === undefined) {
            return this._xMax;
        }
        else {
            this._xMax = _xMax;
            return this;
        }
    };
    KinematicScale.prototype.domainBounds = function (_xMin, _xMax) {
        if (_xMin === undefined) {
            return [this._xMin, this._xMax];
        }
        else if (_xMax === undefined) {
            _xMin = _xMin;
            this._xMin = _xMin[0];
            this._xMax = _xMin[1];
            return this;
        }
        else {
            this._xMin = _xMin;
            this._xMax = _xMax;
            return this;
        }
    };
    KinematicScale.prototype.zoomMin = function (_zMin) {
        if (_zMin === undefined) {
            return this._zMin;
        }
        else {
            this._zMin = _zMin;
            return this;
        }
    };
    KinematicScale.prototype.zoomMax = function (_zMax) {
        if (_zMax === undefined) {
            return this._zMax;
        }
        else {
            this._zMax = _zMax;
            return this;
        }
    };
    KinematicScale.prototype.zoomBounds = function (_zMin, _zMax) {
        if (_zMin === undefined) {
            return [this._zMin, this._zMax];
        }
        else if (_zMax === undefined) {
            if (typeof _zMin === 'boolean') {
                if (this._scale instanceof LinearScale) {
                    this._zMin = 1000000;
                    this._zMax = 0.001;
                }
                else if (this._scale instanceof TimeScale) {
                    this._zMin = 86400000;
                    this._zMax = 1;
                }
            }
            else {
                _zMin = _zMin;
                this._zMin = _zMin[0];
                this._zMax = _zMin[1];
            }
            return this;
        }
        else {
            this._zMin = _zMin;
            this._zMax = _zMax;
            return this;
        }
    };
    KinematicScale.prototype.attach = function (kinematic) {
        var surface = this._kinematic && this._kinematic.surface();
        if (surface) {
            surface.addEventListener('kinematicstart', this.onKinematicStart);
            surface.addEventListener('kinematicupdate', this.onKinematicUpdate);
            surface.addEventListener('kinematicend', this.onKinematicEnd);
        }
    };
    KinematicScale.prototype.detach = function (kinematic) {
        var surface = this._kinematic && this._kinematic.surface();
        if (surface) {
            surface.removeEventListener('kinematicstart', this.onKinematicStart);
            surface.removeEventListener('kinematicupdate', this.onKinematicUpdate);
            surface.removeEventListener('kinematicend', this.onKinematicEnd);
        }
    };
    KinematicScale.prototype.createPoint = function (kinematicPoint) {
        var coords = this.coords(kinematicPoint.cx, kinematicPoint.cy);
        return {
            identifier: kinematicPoint.identifier,
            domainCoord: coords.domainCoord,
            rangeCoord: coords.rangeCoord,
        };
    };
    KinematicScale.prototype.updatePoint = function (kinematicPoint, scalePoint) {
        scalePoint.rangeCoord = this.rangeCoord(kinematicPoint.cx, kinematicPoint.cy);
    };
    KinematicScale.prototype.updatePoints = function (kinematicPoints) {
        var scalePoints = this._points;
        outer: for (var i = 0; i < kinematicPoints.length; i += 1) {
            var kinematicPoint = kinematicPoints[i];
            for (var j_1 = 0; j_1 < scalePoints.length; j_1 += 1) {
                var scalePoint_1 = scalePoints[j_1];
                if (kinematicPoint.identifier == scalePoint_1.identifier) {
                    this.updatePoint(kinematicPoint, scalePoint_1);
                    continue outer;
                }
            }
            var scalePoint = this.createPoint(kinematicPoint);
            scalePoints.push(scalePoint);
        }
        var j = 0;
        outer: while (j < scalePoints.length) {
            var scalePoint = scalePoints[j];
            for (var i = 0; i < kinematicPoints.length; i += 1) {
                var kinematicPoint = kinematicPoints[i];
                if (scalePoint.identifier == kinematicPoint.identifier) {
                    j += 1;
                    continue outer;
                }
            }
            scalePoints.splice(j, 1);
        }
    };
    KinematicScale.prototype.clampScale = function () {
        var _xMin = this._xMin !== null ? this._xMin : undefined;
        var _xMax = this._xMax !== null ? this._xMax : undefined;
        var _zMin = this._zMin !== null ? this._zMin : undefined;
        var _zMax = this._zMax !== null ? this._zMax : undefined;
        var scale = this._scale;
        this._scale = scale.clampDomain(_xMin, _xMax, _zMin, _zMax);
        if (this._scale !== scale) {
            for (var i = 0; i < this._points.length; i += 1) {
                var scalePoint = this._points[i];
                scalePoint.domainCoord = this._scale.unscale(scalePoint.rangeCoord);
            }
        }
    };
    KinematicScale.prototype.rescale = function () {
        var p0 = this._points[0];
        var p1 = this._points[1];
        if (p0 && p1) {
            var x0 = p0.domainCoord;
            var y0 = p0.rangeCoord;
            var x1 = p1.domainCoord;
            var y1 = p1.rangeCoord;
            this._scale = this._scale.solveDomain(x0, y0, x1, y1);
            this.clampScale();
        }
        else if (p0) {
            var x0 = p0.domainCoord;
            var y0 = p0.rangeCoord;
            this._scale = this._scale.solveDomain(x0, y0);
            this.clampScale();
        }
    };
    KinematicScale.prototype.onKinematicStart = function (event) {
        this.scaleStart();
    };
    KinematicScale.prototype.onKinematicUpdate = function (event) {
        this.updatePoints(event.points);
        this.rescale();
        this.scaleUpdate();
    };
    KinematicScale.prototype.onKinematicEnd = function (event) {
        this.scaleEnd();
    };
    KinematicScale.prototype.scaleStart = function () {
        var event = new KinematicScaleEvent('kinematicscalestart', {
            bubbles: true,
            cancelable: true,
            composed: true,
            kinematicScale: this,
            kinematic: this._kinematic,
            ruler: this._ruler,
            scale: this._scale,
        });
        this._ruler.dispatchEvent(event);
    };
    KinematicScale.prototype.scaleUpdate = function () {
        var event = new KinematicScaleEvent('kinematicscaleupdate', {
            bubbles: true,
            cancelable: true,
            composed: true,
            kinematicScale: this,
            kinematic: this._kinematic,
            ruler: this._ruler,
            scale: this._scale,
        });
        this._ruler.dispatchEvent(event);
    };
    KinematicScale.prototype.scaleEnd = function () {
        var event = new KinematicScaleEvent('kinematicscaleend', {
            bubbles: true,
            cancelable: true,
            composed: true,
            kinematicScale: this,
            kinematic: this._kinematic,
            ruler: this._ruler,
            scale: this._scale,
        });
        this._ruler.dispatchEvent(event);
        this._points.length = 0;
    };
    KinematicScale.horizontal = function () {
        return new KinematicScaleHorizontal();
    };
    KinematicScale.vertical = function () {
        return new KinematicScaleVertical();
    };
    return KinematicScale;
}());
var KinematicScaleHorizontal = (function (_super) {
    __extends(KinematicScaleHorizontal, _super);
    function KinematicScaleHorizontal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    KinematicScaleHorizontal.prototype.coords = function (clientX, clientY) {
        var bounds = this._ruler.getBoundingClientRect();
        return {
            domainCoord: this._scale.unscale(clientX - bounds.left),
            rangeCoord: clientX - bounds.left,
        };
    };
    KinematicScaleHorizontal.prototype.rangeCoord = function (clientX, clientY) {
        var bounds = this._ruler.getBoundingClientRect();
        return clientX - bounds.left;
    };
    KinematicScaleHorizontal.prototype.isParallel = function (x0, y0, x1, y1) {
        return Math.abs(x1 - x0) >= Math.abs(y1 - y0);
    };
    return KinematicScaleHorizontal;
}(KinematicScale));
var KinematicScaleVertical = (function (_super) {
    __extends(KinematicScaleVertical, _super);
    function KinematicScaleVertical() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    KinematicScaleVertical.prototype.coords = function (clientX, clientY) {
        var bounds = this._ruler.getBoundingClientRect();
        return {
            domainCoord: this._scale.unscale(clientY - bounds.top),
            rangeCoord: clientY - bounds.top,
        };
    };
    KinematicScaleVertical.prototype.rangeCoord = function (clientX, clientY) {
        var bounds = this._ruler.getBoundingClientRect();
        return clientY - bounds.top;
    };
    KinematicScaleVertical.prototype.isParallel = function (x0, y0, x1, y1) {
        return Math.abs(y1 - y0) >= Math.abs(x1 - x0);
    };
    return KinematicScaleVertical;
}(KinematicScale));

var PI$1 = Math.PI;
var TAU$1 = 2 * PI$1;
var EPSILON = 1e-6;
var Path = (function () {
    function Path() {
        this.x0 = null;
        this.y0 = null;
        this.x1 = null;
        this.y1 = null;
        this.d = '';
    }
    Path.prototype.moveTo = function (x, y) {
        this.d += 'M' + (this.x0 = this.x1 = x) + ',' + (this.y0 = this.y1 = y);
    };
    Path.prototype.closePath = function () {
        if (this.x1 !== undefined) {
            this.x1 = this.x0;
            this.y1 = this.y0;
            this.d += 'Z';
        }
    };
    Path.prototype.lineTo = function (x, y) {
        this.d += 'L' + (this.x1 = x) + ',' + (this.y1 = y);
    };
    Path.prototype.quadraticCurveTo = function (x1, y1, x, y) {
        this.d += 'Q' + x1 + ',' + y1 + ',' + (this.x1 = x) + ',' + (this.y1 = y);
    };
    Path.prototype.bezierCurveTo = function (x1, y1, x2, y2, x, y) {
        this.d += 'C' + x1 + ',' + y1 + ',' + x2 + ',' + y2 + ',' + (this.x1 = x) + ',' + (this.y1 = y);
    };
    Path.prototype.arcTo = function (x1, y1, x2, y2, r) {
        var x0 = +this.x1;
        var y0 = +this.y1;
        var x21 = x2 - x1;
        var y21 = y2 - y1;
        var x01 = x0 - x1;
        var y01 = y0 - y1;
        var l01_2 = x01 * x01 + y01 * y01;
        if (r < 0) {
            throw new Error('negative radius: ' + r);
        }
        else if (this.x1 === null) {
            this.d += 'M' + (this.x1 = x1) + ',' + (this.y1 = y1);
        }
        else if (!(l01_2 > EPSILON)) {
        }
        else if (!(Math.abs(y01 * x21 - y21 * x01) > EPSILON) || !r) {
            this.d += 'L' + (this.x1 = x1) + ',' + (this.y1 = y1);
        }
        else {
            var x20 = x2 - x0;
            var y20 = y2 - y0;
            var l21_2 = x21 * x21 + y21 * y21;
            var l20_2 = x20 * x20 + y20 * y20;
            var l21 = Math.sqrt(l21_2);
            var l01 = Math.sqrt(l01_2);
            var l = r * Math.tan((PI$1 - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2);
            var t01 = l / l01;
            var t21 = l / l21;
            if (Math.abs(t01 - 1) > EPSILON) {
                this.d += 'L' + (x1 + t01 * x01) + ',' + (y1 + t01 * y01);
            }
            this.d += 'A' + r + ',' + r + ',0,0,' + (+(y01 * x20 > x01 * y20)) + ',' +
                (this.x1 = x1 + t21 * x21) + ',' + (this.y1 = y1 + t21 * y21);
        }
    };
    Path.prototype.arc = function (x, y, r, a0, a1, ccw) {
        if (ccw === void 0) { ccw = false; }
        var dx = r * Math.cos(a0);
        var dy = r * Math.sin(a0);
        var x0 = x + dx;
        var y0 = y + dy;
        var cw = 1 ^ +ccw;
        var da = ccw ? a0 - a1 : a1 - a0;
        if (r < 0) {
            throw new Error('negative radius: ' + r);
        }
        else if (this.x1 === null) {
            this.d += 'M' + x0 + ',' + y0;
        }
        else if (Math.abs(+this.x1 - x0) > EPSILON || Math.abs(+this.y1 - y0) > EPSILON) {
            this.d += 'L' + x0 + ',' + y0;
        }
        if (!r) {
            return;
        }
        else if (da < 0) {
            da = da % TAU$1 + TAU$1;
        }
        if (da > TAU$1 - EPSILON) {
            this.d += 'A' + r + ',' + r + ',0,1,' + cw + ',' + (x - dx) + ',' + (y - dy) +
                'A' + r + ',' + r + ',0,1,' + cw + ',' + (this.x1 = x0) + ',' + (this.y1 = y0);
        }
        else if (da > EPSILON) {
            this.d += 'A' + r + ',' + r + ',0,' + (+(da >= PI$1)) + ',' + cw + ',' +
                (this.x1 = x + r * Math.cos(a1)) + ',' + (this.y1 = y + r * Math.sin(a1));
        }
    };
    Path.prototype.rect = function (x, y, w, h) {
        this.d += 'M' + (this.x0 = this.x1 = x) + ',' + (this.y0 = this.y1 = y) + 'h' + w + 'v' + h + 'h' + -w + 'Z';
    };
    Path.prototype.toString = function () {
        return this.d;
    };
    return Path;
}());

var PI$2 = Math.PI;
var PI_OVER_2 = PI$2 / 2;
var TAU$2 = 2 * PI$2;
var EPSILON$1 = 1e-12;
var Arc = (function () {
    function Arc(innerRadius, outerRadius, startAngle, deltaAngle, padAngle, padRadius, cornerRadius) {
        if (innerRadius === void 0) { innerRadius = 0; }
        if (outerRadius === void 0) { outerRadius = 0; }
        if (startAngle === void 0) { startAngle = Angle.zero(); }
        if (deltaAngle === void 0) { deltaAngle = Angle.zero(); }
        if (padAngle === void 0) { padAngle = Angle.zero(); }
        if (padRadius === void 0) { padRadius = null; }
        if (cornerRadius === void 0) { cornerRadius = 0; }
        this._innerRadius = innerRadius;
        this._outerRadius = outerRadius;
        this._startAngle = Angle.fromAny(startAngle);
        this._deltaAngle = Angle.fromAny(deltaAngle);
        this._padAngle = Angle.fromAny(padAngle);
        this._padRadius = padRadius;
        this._cornerRadius = cornerRadius;
        this.dirty = true;
    }
    Arc.prototype.innerRadius = function (innerRadius) {
        if (innerRadius === undefined) {
            return this._innerRadius;
        }
        else {
            if (this._innerRadius !== innerRadius) {
                this._innerRadius = innerRadius;
                this.dirty = true;
            }
            return this;
        }
    };
    Arc.prototype.outerRadius = function (outerRadius) {
        if (outerRadius === undefined) {
            return this._outerRadius;
        }
        else {
            if (this._outerRadius !== outerRadius) {
                this._outerRadius = outerRadius;
                this.dirty = true;
            }
            return this;
        }
    };
    Arc.prototype.startAngle = function (startAngle) {
        if (startAngle === undefined) {
            return this._startAngle;
        }
        else {
            startAngle = Angle.fromAny(startAngle);
            if (!this._startAngle.equals(startAngle)) {
                this._startAngle = startAngle;
                this.dirty = true;
            }
            return this;
        }
    };
    Arc.prototype.deltaAngle = function (deltaAngle) {
        if (deltaAngle === undefined) {
            return this._deltaAngle;
        }
        else {
            deltaAngle = Angle.fromAny(deltaAngle);
            if (!this._deltaAngle.equals(deltaAngle)) {
                this._deltaAngle = deltaAngle;
                this.dirty = true;
            }
            return this;
        }
    };
    Arc.prototype.padAngle = function (padAngle) {
        if (padAngle === undefined) {
            return this._padAngle;
        }
        else {
            padAngle = Angle.fromAny(padAngle);
            if (!this._padAngle.equals(padAngle)) {
                this._padAngle = padAngle;
                this.dirty = true;
            }
            return this;
        }
    };
    Arc.prototype.padRadius = function (padRadius) {
        if (padRadius === undefined) {
            return this._padRadius;
        }
        else {
            if (this._padRadius !== padRadius) {
                this._padRadius = padRadius;
                this.dirty = true;
            }
            return this;
        }
    };
    Arc.prototype.cornerRadius = function (cornerRadius) {
        if (cornerRadius === undefined) {
            return this._cornerRadius;
        }
        else {
            if (this._cornerRadius !== cornerRadius) {
                this._cornerRadius = cornerRadius;
                this.dirty = true;
            }
            return this;
        }
    };
    Arc.prototype.draw = function (context) {
        this.dirty = false;
        context = context || new Path();
        var r0 = this._innerRadius;
        var r1 = this._outerRadius;
        var a0 = (this._startAngle.radValue()) - PI_OVER_2;
        var da = this._deltaAngle.radValue();
        var a1 = a0 + da;
        var cw = da >= 0;
        if (r1 < r0) {
            var r = r1;
            r1 = r0;
            r0 = r;
        }
        if (!(r1 > EPSILON$1)) {
            context.moveTo(0, 0);
        }
        else if (da > TAU$2 - EPSILON$1) {
            context.moveTo(r1 * Math.cos(a0), r1 * Math.sin(a0));
            context.arc(0, 0, r1, a0, a1, !cw);
            if (r0 > EPSILON$1) {
                context.moveTo(r0 * Math.cos(a1), r0 * Math.sin(a1));
                context.arc(0, 0, r0, a1, a0, cw);
            }
        }
        else {
            var a01 = a0;
            var a11 = a1;
            var a00 = a0;
            var a10 = a1;
            var da0 = da;
            var da1 = da;
            var ap = (this._padAngle.radValue()) / 2;
            var rp = +(ap > EPSILON$1) && (this._padRadius !== null ? this._padRadius : Math.sqrt(r0 * r0 + r1 * r1));
            var rc = Math.min(Math.abs(r1 - r0) / 2, this._cornerRadius);
            var rc0 = rc;
            var rc1 = rc;
            if (rp > EPSILON$1) {
                var p0 = Math.asin(rp / r0 * Math.sin(ap));
                var p1 = Math.asin(rp / r1 * Math.sin(ap));
                if ((da0 -= p0 * 2) > EPSILON$1) {
                    p0 *= cw ? 1 : -1;
                    a00 += p0;
                    a10 -= p0;
                }
                else {
                    da0 = 0;
                    a00 = a10 = (a0 + a1) / 2;
                }
                if ((da1 -= p1 * 2) > EPSILON$1) {
                    p1 *= cw ? 1 : -1;
                    a01 += p1;
                    a11 -= p1;
                }
                else {
                    da1 = 0;
                    a01 = a11 = (a0 + a1) / 2;
                }
            }
            var x00 = void 0;
            var y00 = void 0;
            var x01 = r1 * Math.cos(a01);
            var y01 = r1 * Math.sin(a01);
            var x10 = r0 * Math.cos(a10);
            var y10 = r0 * Math.sin(a10);
            var x11 = void 0;
            var y11 = void 0;
            if (rc > EPSILON$1) {
                x11 = r1 * Math.cos(a11);
                y11 = r1 * Math.sin(a11);
                x00 = r0 * Math.cos(a00);
                y00 = r0 * Math.sin(a00);
                if (da < PI$2) {
                    var oc = da0 > EPSILON$1 ? intersect(x01, y01, x00, y00, x11, y11, x10, y10) : [x10, y10];
                    var ax = x01 - oc[0];
                    var ay = y01 - oc[1];
                    var bx = x11 - oc[0];
                    var by = y11 - oc[1];
                    var kc = 1 / Math.sin(0.5 * Math.acos((ax * bx + ay * by) /
                        (Math.sqrt(ax * ax + ay * ay) *
                            Math.sqrt(bx * bx + by * by))));
                    var lc = Math.sqrt(oc[0] * oc[0] + oc[1] * oc[1]);
                    rc0 = Math.min(rc, (r0 - lc) / (kc - 1));
                    rc1 = Math.min(rc, (r1 - lc) / (kc + 1));
                }
            }
            if (!(da1 > EPSILON$1)) {
                context.moveTo(x01, y01);
            }
            else if (rc1 > EPSILON$1) {
                var t0 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);
                var t1 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);
                context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01);
                if (rc1 < rc) {
                    context.arc(t0.cx, t0.cy, rc1, Math.atan2(t0.y01, t0.x01), Math.atan2(t1.y01, t1.x01), !cw);
                }
                else {
                    context.arc(t0.cx, t0.cy, rc1, Math.atan2(t0.y01, t0.x01), Math.atan2(t0.y11, t0.x11), !cw);
                    context.arc(0, 0, r1, Math.atan2(t0.cy + t0.y11, t0.cx + t0.x11), Math.atan2(t1.cy + t1.y11, t1.cx + t1.x11), !cw);
                    context.arc(t1.cx, t1.cy, rc1, Math.atan2(t1.y11, t1.x11), Math.atan2(t1.y01, t1.x01), !cw);
                }
            }
            else {
                context.moveTo(x01, y01);
                context.arc(0, 0, r1, a01, a11, !cw);
            }
            if (!(r0 > EPSILON$1) || !(da0 > EPSILON$1)) {
                context.lineTo(x10, y10);
            }
            else if (rc0 > EPSILON$1) {
                var t0 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);
                var t1 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);
                context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01);
                if (rc0 < rc) {
                    context.arc(t0.cx, t0.cy, rc0, Math.atan2(t0.y01, t0.x01), Math.atan2(t1.y01, t1.x01), !cw);
                }
                else {
                    context.arc(t0.cx, t0.cy, rc0, Math.atan2(t0.y01, t0.x01), Math.atan2(t0.y11, t0.x11), !cw);
                    context.arc(0, 0, r0, Math.atan2(t0.cy + t0.y11, t0.cx + t0.x11), Math.atan2(t1.cy + t1.y11, t1.cx + t1.x11), cw);
                    context.arc(t1.cx, t1.cy, rc0, Math.atan2(t1.y11, t1.x11), Math.atan2(t1.y01, t1.x01), !cw);
                }
            }
            else {
                context.arc(0, 0, r0, a10, a00, cw);
            }
        }
        context.closePath();
        if (!arguments.length) {
            return context.toString();
        }
    };
    return Arc;
}());
function intersect(x0, y0, x1, y1, x2, y2, x3, y3) {
    var x10 = x1 - x0;
    var y10 = y1 - y0;
    var x32 = x3 - x2;
    var y32 = y3 - y2;
    var t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / (y32 * x10 - x32 * y10);
    return [x0 + t * x10, y0 + t * y10];
}
function cornerTangents(x0, y0, x1, y1, r1, rc, cw) {
    var x01 = x0 - x1;
    var y01 = y0 - y1;
    var lo = (cw ? rc : -rc) / Math.sqrt(x01 * x01 + y01 * y01);
    var ox = lo * y01;
    var oy = -lo * x01;
    var x11 = x0 + ox;
    var y11 = y0 + oy;
    var x10 = x1 + ox;
    var y10 = y1 + oy;
    var x00 = (x11 + x10) / 2;
    var y00 = (y11 + y10) / 2;
    var dx = x10 - x11;
    var dy = y10 - y11;
    var d2 = dx * dx + dy * dy;
    var r = r1 - rc;
    var D = x11 * y10 - x10 * y11;
    var d = (dy < 0 ? -1 : 1) * Math.sqrt(Math.max(0, r * r * d2 - D * D));
    var cx0 = (D * dy - dx * d) / d2;
    var cy0 = (-D * dx - dy * d) / d2;
    var cx1 = (D * dy + dx * d) / d2;
    var cy1 = (-D * dx + dy * d) / d2;
    var dx0 = cx0 - x00;
    var dy0 = cy0 - y00;
    var dx1 = cx1 - x00;
    var dy1 = cy1 - y00;
    if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) {
        cx0 = cx1;
        cy0 = cy1;
    }
    return {
        cx: cx0,
        cy: cy0,
        x01: -ox,
        y01: -oy,
        x11: cx0 * (r1 / r - 1),
        y11: cy0 * (r1 / r - 1),
    };
}

var Directive = (function () {
    function Directive() {
        this._model = null;
    }
    Object.defineProperty(Directive.prototype, "model", {
        get: function () {
            return this._model;
        },
        enumerable: true,
        configurable: true
    });
    Directive.prototype.setModel = function (model) {
        var oldModel = this._model;
        if (model) {
            if (oldModel) {
                throw new Error();
            }
            this._model = model;
            this.didSetModel(model);
        }
        else if (oldModel) {
            this._model = null;
            this.didSetModel(null);
        }
    };
    Directive.prototype.didSetModel = function (model) {
    };
    Directive.prototype.didInsertChildModel = function (childModel) {
    };
    Directive.prototype.didRemoveChildModel = function (childModel) {
    };
    Directive.prototype.willRestate = function () {
    };
    Directive.prototype.didRestate = function () {
    };
    Directive.prototype.willRemodel = function (state, stack) {
    };
    Directive.prototype.didRemodel = function (state, stack) {
    };
    Directive.prototype.setData = function (data) {
    };
    Directive.prototype.setStyle = function (style) {
    };
    Directive.prototype.stack = function () {
        if (this._model) {
            return this._model.stack();
        }
        else {
            return EvalStack.of(Model.GlobalScope);
        }
    };
    Directive.prototype.injectStack = function (stack) {
    };
    return Directive;
}());

var ArcAnimator = (function (_super) {
    __extends(ArcAnimator, _super);
    function ArcAnimator(target, arc) {
        var _this = _super.call(this) || this;
        _this.target = target;
        _this.arc = arc;
        _this.innerRadius = undefined;
        _this.outerRadius = undefined;
        _this.startAngle = undefined;
        _this.deltaAngle = undefined;
        _this.padAngle = undefined;
        _this.padRadius = undefined;
        _this.cornerRadius = undefined;
        return _this;
    }
    ArcAnimator.prototype.onFrame = function (t) {
        if (this.innerRadius) {
            this.innerRadius.onFrame(t);
        }
        if (this.outerRadius) {
            this.outerRadius.onFrame(t);
        }
        if (this.startAngle) {
            this.startAngle.onFrame(t);
        }
        if (this.deltaAngle) {
            this.deltaAngle.onFrame(t);
        }
        if (this.padAngle) {
            this.padAngle.onFrame(t);
        }
        if (this.padRadius) {
            this.padRadius.onFrame(t);
        }
        if (this.cornerRadius) {
            this.cornerRadius.onFrame(t);
        }
        this.update();
    };
    ArcAnimator.prototype.update = function () {
        if (this.arc.dirty) {
            this.target.setAttribute('d', this.arc.draw());
        }
    };
    return ArcAnimator;
}(FrameAnimator));
var ArcInnerRadiusAnimator = (function (_super) {
    __extends(ArcInnerRadiusAnimator, _super);
    function ArcInnerRadiusAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    ArcInnerRadiusAnimator.prototype.update = function (value) {
        this.parent.arc.innerRadius(value);
    };
    ArcInnerRadiusAnimator.get = function (self) {
        return self.arc.innerRadius();
    };
    ArcInnerRadiusAnimator.set = function (self, value) {
        if (value === null) {
            self.arcAnimator.innerRadius = undefined;
        }
        else {
            self.arc.innerRadius(value);
            self.arcAnimator.animate();
        }
    };
    ArcInnerRadiusAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.arcAnimator.innerRadius) {
            self.arcAnimator.innerRadius = new ArcInnerRadiusAnimator(self.arcAnimator, value, trans);
        }
        return self.arcAnimator.innerRadius;
    };
    return ArcInnerRadiusAnimator;
}(ChildFrameAnimator));
var ArcOuterRadiusAnimator = (function (_super) {
    __extends(ArcOuterRadiusAnimator, _super);
    function ArcOuterRadiusAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    ArcOuterRadiusAnimator.prototype.update = function (value) {
        this.parent.arc.outerRadius(value);
    };
    ArcOuterRadiusAnimator.get = function (self) {
        return self.arc.outerRadius();
    };
    ArcOuterRadiusAnimator.set = function (self, value) {
        if (value === null) {
            self.arcAnimator.outerRadius = undefined;
        }
        else {
            self.arc.outerRadius(value);
            self.arcAnimator.animate();
        }
    };
    ArcOuterRadiusAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.arcAnimator.outerRadius) {
            self.arcAnimator.outerRadius = new ArcOuterRadiusAnimator(self.arcAnimator, value, trans);
        }
        return self.arcAnimator.outerRadius;
    };
    return ArcOuterRadiusAnimator;
}(ChildFrameAnimator));
var ArcStartAngleAnimator = (function (_super) {
    __extends(ArcStartAngleAnimator, _super);
    function ArcStartAngleAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    ArcStartAngleAnimator.prototype.update = function (value) {
        this.parent.arc.startAngle(value);
    };
    ArcStartAngleAnimator.get = function (self) {
        return self.arc.startAngle();
    };
    ArcStartAngleAnimator.set = function (self, value) {
        if (value === null) {
            self.arcAnimator.startAngle = undefined;
        }
        else {
            self.arc.startAngle(value);
            self.arcAnimator.animate();
        }
    };
    ArcStartAngleAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.arcAnimator.startAngle) {
            self.arcAnimator.startAngle = new ArcStartAngleAnimator(self.arcAnimator, value, trans);
        }
        return self.arcAnimator.startAngle;
    };
    return ArcStartAngleAnimator;
}(ChildFrameAnimator));
var ArcDeltaAngleAnimator = (function (_super) {
    __extends(ArcDeltaAngleAnimator, _super);
    function ArcDeltaAngleAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    ArcDeltaAngleAnimator.prototype.update = function (value) {
        this.parent.arc.deltaAngle(value);
    };
    ArcDeltaAngleAnimator.get = function (self) {
        return self.arc.deltaAngle();
    };
    ArcDeltaAngleAnimator.set = function (self, value) {
        if (value === null) {
            self.arcAnimator.deltaAngle = undefined;
        }
        else {
            self.arc.deltaAngle(value);
            self.arcAnimator.animate();
        }
    };
    ArcDeltaAngleAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.arcAnimator.deltaAngle) {
            self.arcAnimator.deltaAngle = new ArcDeltaAngleAnimator(self.arcAnimator, value, trans);
        }
        return self.arcAnimator.deltaAngle;
    };
    return ArcDeltaAngleAnimator;
}(ChildFrameAnimator));
var ArcPadAngleAnimator = (function (_super) {
    __extends(ArcPadAngleAnimator, _super);
    function ArcPadAngleAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    ArcPadAngleAnimator.prototype.update = function (value) {
        this.parent.arc.padAngle(value);
    };
    ArcPadAngleAnimator.get = function (self) {
        return self.arc.padAngle();
    };
    ArcPadAngleAnimator.set = function (self, value) {
        if (value === null) {
            self.arcAnimator.padAngle = undefined;
        }
        else {
            self.arc.padAngle(value);
            self.arcAnimator.animate();
        }
    };
    ArcPadAngleAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.arcAnimator.padAngle) {
            self.arcAnimator.padAngle = new ArcPadAngleAnimator(self.arcAnimator, value, trans);
        }
        return self.arcAnimator.padAngle;
    };
    return ArcPadAngleAnimator;
}(ChildFrameAnimator));
var ArcPadRadiusAnimator = (function (_super) {
    __extends(ArcPadRadiusAnimator, _super);
    function ArcPadRadiusAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    ArcPadRadiusAnimator.prototype.update = function (value) {
        this.parent.arc.padRadius(value);
    };
    ArcPadRadiusAnimator.get = function (self) {
        return self.arc.padRadius();
    };
    ArcPadRadiusAnimator.set = function (self, value) {
        if (value === null) {
            self.arcAnimator.padRadius = undefined;
        }
        self.arc.padRadius(value);
        self.arcAnimator.animate();
    };
    ArcPadRadiusAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.arcAnimator.padRadius) {
            self.arcAnimator.padRadius = new ArcPadRadiusAnimator(self.arcAnimator, value, trans);
        }
        return self.arcAnimator.padRadius;
    };
    return ArcPadRadiusAnimator;
}(ChildFrameAnimator));
var ArcCornerRadiusAnimator = (function (_super) {
    __extends(ArcCornerRadiusAnimator, _super);
    function ArcCornerRadiusAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    ArcCornerRadiusAnimator.prototype.update = function (value) {
        this.parent.arc.cornerRadius(value);
    };
    ArcCornerRadiusAnimator.get = function (self) {
        return self.arc.cornerRadius();
    };
    ArcCornerRadiusAnimator.set = function (self, value) {
        if (value === null) {
            self.arcAnimator.cornerRadius = undefined;
        }
        else {
            self.arc.cornerRadius(value);
            self.arcAnimator.animate();
        }
    };
    ArcCornerRadiusAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.arcAnimator.cornerRadius) {
            self.arcAnimator.cornerRadius = new ArcCornerRadiusAnimator(self.arcAnimator, value, trans);
        }
        return self.arcAnimator.cornerRadius;
    };
    return ArcCornerRadiusAnimator;
}(ChildFrameAnimator));
var ArcView = (function (_super) {
    __extends(ArcView, _super);
    function ArcView(node, arc) {
        if (arc === void 0) { arc = new Arc(); }
        var _this = _super.call(this, node) || this;
        _this.arc = arc;
        _this.arcAnimator = new ArcAnimator(node, arc);
        return _this;
    }
    ArcView.prototype.innerRadius = function (value, trans) {
        return this.propertyNumber(ArcInnerRadiusAnimator, value, trans);
    };
    ArcView.prototype.outerRadius = function (value, trans) {
        return this.propertyNumber(ArcOuterRadiusAnimator, value, trans);
    };
    ArcView.prototype.startAngle = function (value, trans) {
        return this.propertyAngle(ArcStartAngleAnimator, value, trans);
    };
    ArcView.prototype.deltaAngle = function (value, trans) {
        return this.propertyAngle(ArcDeltaAngleAnimator, value, trans);
    };
    ArcView.prototype.padAngle = function (value, trans) {
        return this.propertyAngle(ArcPadAngleAnimator, value, trans);
    };
    ArcView.prototype.padRadius = function (value, trans) {
        if (value !== undefined && value !== null) {
            value = +value;
        }
        var result = this.property(ArcPadRadiusAnimator, value, trans);
        if (typeof result === 'string') {
            result = +result;
        }
        return result;
    };
    ArcView.prototype.cornerRadius = function (value, trans) {
        return this.propertyNumber(ArcCornerRadiusAnimator, value, trans);
    };
    ArcView.create = function (node, arc) {
        if (node instanceof ArcView) {
            return node;
        }
        else if (node instanceof NodeView) {
            throw new TypeError('' + node);
        }
        else if (typeof node === 'string') {
            return new ArcView(document.createElementNS(SvgView.NS, 'path'), arc);
        }
        else if (node.view instanceof ArcView) {
            return node.view;
        }
        else if (node.view) {
            throw new TypeError('' + node.view);
        }
        else if (node instanceof SVGPathElement) {
            return new ArcView(node, arc);
        }
        else {
            throw new TypeError('' + node);
        }
    };
    return ArcView;
}(SvgView));

var AttrsDirective = (function (_super) {
    __extends(AttrsDirective, _super);
    function AttrsDirective() {
        var _this = _super.call(this) || this;
        _this._bindings = Record.empty();
        _this._attrs = Record.Empty;
        return _this;
    }
    AttrsDirective.prototype.reattr = function (state, stack) {
        var attrs = Record.empty(this._bindings.length);
        this._bindings.forEach(function (item) {
            if (item instanceof Slot && item.key instanceof Text$1) {
                var value = item.value.evaluate(stack).toValue();
                if (value.isDefined()) {
                    attrs.slot(item.key, value);
                }
            }
        }, this);
        if (!this._attrs.equals(attrs)) {
            this._attrs = attrs;
            state.slot('attrs', attrs);
        }
    };
    AttrsDirective.prototype.willRemodel = function (state, stack) {
        this.reattr(state, stack);
    };
    return AttrsDirective;
}(Directive));

var AttrsForm = (function (_super) {
    __extends(AttrsForm, _super);
    function AttrsForm() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(AttrsForm.prototype, "tag", {
        get: function () {
            return 'attrs';
        },
        enumerable: true,
        configurable: true
    });
    AttrsForm.prototype.cast = function (item) {
        if (item.tag === this.tag) {
            var directive_1 = new AttrsDirective();
            item.forEach(function (item) {
                this.materializeDirectiveParam(directive_1, item);
            }, this);
            return directive_1;
        }
        return undefined;
    };
    AttrsForm.prototype.materializeDirectiveParam = function (directive, item) {
        if (item instanceof Attr && item.key.value === this.tag) {
            return;
        }
        else if (item instanceof Field) {
            directive._bindings.push(item);
        }
    };
    AttrsForm.Form = new AttrsForm();
    return AttrsForm;
}(DirectiveForm));
DirectiveForm.addGlobal(AttrsForm.Form);

var StyleDirective = (function (_super) {
    __extends(StyleDirective, _super);
    function StyleDirective() {
        var _this = _super.call(this) || this;
        _this._bindings = Record.empty();
        _this._style = Record.Empty;
        return _this;
    }
    StyleDirective.prototype.restyle = function (state, stack) {
        var style = Record.empty(this._bindings.length);
        this._bindings.forEach(function (item) {
            if (item instanceof Slot && item.key instanceof Text$1) {
                var value = item.value.evaluate(stack).toValue();
                if (value.isDefined()) {
                    style.slot(item.key, value);
                }
            }
        }, this);
        if (!this._style.equals(style)) {
            this._style = style;
            state.slot('style', style);
        }
    };
    StyleDirective.prototype.willRemodel = function (state, stack) {
        this.restyle(state, stack);
    };
    return StyleDirective;
}(Directive));

var StyleForm = (function (_super) {
    __extends(StyleForm, _super);
    function StyleForm() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(StyleForm.prototype, "tag", {
        get: function () {
            return 'style';
        },
        enumerable: true,
        configurable: true
    });
    StyleForm.prototype.cast = function (item) {
        if (item.tag === this.tag) {
            var directive_1 = new StyleDirective();
            item.forEach(function (item) {
                this.materializeDirectiveParam(directive_1, item);
            }, this);
            return directive_1;
        }
        return undefined;
    };
    StyleForm.prototype.materializeDirectiveParam = function (directive, item) {
        if (item instanceof Attr && item.key.value === this.tag) {
            return;
        }
        else if (item instanceof Field) {
            directive._bindings.push(item);
        }
    };
    StyleForm.Form = new StyleForm();
    return StyleForm;
}(DirectiveForm));
DirectiveForm.addGlobal(StyleForm.Form);

var LetDirective = (function (_super) {
    __extends(LetDirective, _super);
    function LetDirective(key, rhs) {
        var _this = _super.call(this) || this;
        _this._key = key;
        _this._rhs = rhs;
        _this._value = Value.Absent;
        return _this;
    }
    LetDirective.prototype.reevaluate = function (stack) {
        if (stack === void 0) { stack = this.stack(); }
        var oldValue = this._value;
        var newValue = this._rhs.evaluate(stack).toValue();
        if (newValue.isDefined()) {
            if (!oldValue.equals(newValue)) {
                this._value = newValue.commit();
                this._model._modelScope._record.set(this._key, newValue);
                this._model.requireRestate();
            }
        }
        else if (oldValue.isDefined()) {
            this._value = newValue.commit();
            this._model._modelScope._record.delete(this._key);
            this._model.requireRestate();
        }
    };
    LetDirective.prototype.willRestate = function () {
        this.reevaluate();
    };
    return LetDirective;
}(Directive));

var LetForm = (function (_super) {
    __extends(LetForm, _super);
    function LetForm() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(LetForm.prototype, "tag", {
        get: function () {
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    LetForm.prototype.cast = function (item) {
        if (item instanceof Field) {
            var key = item.key;
            var rhs = item.value.header('let');
            if (rhs.isDefined()) {
                return new LetDirective(key, rhs);
            }
        }
        return undefined;
    };
    LetForm.Form = new LetForm();
    return LetForm;
}(DirectiveForm));
DirectiveForm.addGlobal(LetForm.Form);

var EachDirective = (function (_super) {
    __extends(EachDirective, _super);
    function EachDirective() {
        var _this = _super.call(this) || this;
        _this._bindings = Record.Empty;
        _this._template = Record.empty();
        _this._keySelector = Selector.Identity;
        _this._childDirectives = new BTree();
        return _this;
    }
    Object.defineProperty(EachDirective.prototype, "bindings", {
        get: function () {
            return this._bindings;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EachDirective.prototype, "template", {
        get: function () {
            return this._template;
        },
        enumerable: true,
        configurable: true
    });
    EachDirective.prototype.createChildDirectives = function (key, scope, stack) {
        var childDirectives = [];
        stack.push(scope);
        this._template.forEach(function (item) {
            var childId = Random.generateId();
            var childDirective = new EachChildDirective(childId);
            scope.forEach(function (item) {
                if (item instanceof Field) {
                    childDirective._scope.set(item.key, item.value);
                }
            }, this);
            this._model.appendChildView(childId, item.toValue().clone());
            childDirectives.push(childDirective);
        }, this);
        stack.pop();
        return childDirectives;
    };
    EachDirective.prototype.updateChildDirectives = function (key, scope, childDirectives, stack) {
        var _loop_1 = function (i) {
            var childDirective = childDirectives[i];
            scope.forEach(function (item) {
                if (item instanceof Field) {
                    childDirective._scope.set(item.key, item.value);
                }
            }, this_1);
            childDirective.updateData();
        };
        var this_1 = this;
        for (var i = 0; i < childDirectives.length; i += 1) {
            _loop_1(i);
        }
    };
    EachDirective.prototype.deleteChildDirectives = function (key, childDirectives) {
        for (var i = 0; i < childDirectives.length; i += 1) {
            var childDirective = childDirectives[i];
            this._model.removeChildView(childDirective._id);
        }
    };
    EachDirective.prototype.instantiate = function (live, scope, rank, stack) {
        if (rank < this._bindings.length) {
            var binding = this._bindings.getItem(rank);
            var bindKey_1 = binding.key.isDefined() ? binding.key : Num.valueOf(rank);
            stack.push(scope);
            var bindValues = binding.toValue().evaluate(stack);
            stack.pop();
            bindValues.forEach(function (item) {
                this.instantiate(live, scope.branch().slot(bindKey_1, item.toValue()), rank + 1, stack);
            }, this);
        }
        else {
            var key = this._keySelector.evaluate(scope).toValue();
            var childDirectives = this._childDirectives.get(key);
            if (childDirectives) {
                this.updateChildDirectives(key, scope, childDirectives, stack);
            }
            else {
                childDirectives = this.createChildDirectives(key, scope, stack);
                if (childDirectives.length) {
                    this._childDirectives.set(key, childDirectives);
                }
            }
            if (childDirectives.length) {
                live.set(key, childDirectives);
            }
        }
    };
    EachDirective.prototype.reinstantiate = function () {
        var live = new BTree();
        this.instantiate(live, Record.empty(), 0, this.stack());
        if (live.size < this._childDirectives.size) {
            this._childDirectives.forEach(function (key, childDirectives) {
                if (!live.has(key)) {
                    this._childDirectives.delete(key);
                    this.deleteChildDirectives(key, childDirectives);
                }
            }, this);
        }
    };
    EachDirective.prototype.willRestate = function () {
        this.reinstantiate();
    };
    EachDirective.prototype.didInsertChildModel = function (childModel) {
        this._childDirectives.forEach(function (key, childDirectives) {
            for (var i = 0; i < childDirectives.length; i += 1) {
                var childDirective = childDirectives[i];
                if (childDirective._id === childModel._id) {
                    childModel.addDirective(childDirective);
                    childDirective.initData();
                }
            }
        });
    };
    return EachDirective;
}(Directive));
var EachChildDirective = (function (_super) {
    __extends(EachChildDirective, _super);
    function EachChildDirective(id) {
        var _this = _super.call(this) || this;
        _this._id = id;
        _this._scope = Record.empty();
        return _this;
    }
    EachChildDirective.prototype.initData = function () {
        if (this._model) {
            this._model._modelScope._record = this._scope.concat(this._model._modelScope._record);
            this._model.requireRestate();
        }
    };
    EachChildDirective.prototype.updateData = function () {
        if (this._model) {
            var record_1 = this._model._modelScope._record;
            var changed_1 = false;
            this._scope.forEach(function (item) {
                if (item instanceof Field) {
                    var oldValue = record_1.get(item.key);
                    var newValue = item.value;
                    if (!oldValue.equals(newValue)) {
                        record_1.set(item.key, item.value);
                        changed_1 = true;
                    }
                }
            }, this);
            if (changed_1) {
                this._model.requireRestate();
            }
        }
    };
    return EachChildDirective;
}(Directive));

var EachForm = (function (_super) {
    __extends(EachForm, _super);
    function EachForm() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(EachForm.prototype, "tag", {
        get: function () {
            return 'each';
        },
        enumerable: true,
        configurable: true
    });
    EachForm.prototype.cast = function (item) {
        if (item.tag === this.tag) {
            var directive_1 = new EachDirective();
            item.forEach(function (item) {
                this.materializeDirectiveParam(directive_1, item);
            }, this);
            return directive_1;
        }
        return undefined;
    };
    EachForm.prototype.materializeDirectiveParam = function (directive, item) {
        if (item instanceof Attr && item.key.value === this.tag) {
            if (item.value instanceof Record) {
                directive._bindings = item.value.commit();
            }
        }
        else if (item.key instanceof Text$1) {
            var key = item.key.value;
            if (key === 'key') {
                directive._keySelector = item.toValue();
            }
        }
        else if (item instanceof Value) {
            directive._template.push(item);
        }
    };
    EachForm.Form = new EachForm();
    return EachForm;
}(DirectiveForm));
DirectiveForm.addGlobal(EachForm.Form);

var InjectDirective = (function (_super) {
    __extends(InjectDirective, _super);
    function InjectDirective() {
        var _this = _super.call(this) || this;
        _this._selector = Selector.literal(Value.Absent);
        _this._bindings = Record.empty();
        return _this;
    }
    Object.defineProperty(InjectDirective.prototype, "selector", {
        get: function () {
            return this._selector;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InjectDirective.prototype, "bindings", {
        get: function () {
            return this._bindings;
        },
        enumerable: true,
        configurable: true
    });
    InjectDirective.prototype.reinject = function (stack) {
        if (stack === void 0) { stack = this.stack(); }
        var scope = this._selector.evaluate(stack);
        if (scope instanceof Record) {
            this._bindings.forEach(function (binding) {
                var key = binding.key.evaluate(stack).toValue();
                if (key.isDefined()) {
                    var oldValue = scope.get(key);
                    var newValue = binding.toValue().evaluate(stack).toValue();
                    if (newValue.isDefined()) {
                        if (!oldValue.equals(newValue)) {
                            scope.set(key, newValue);
                        }
                    }
                    else if (oldValue.isDefined()) {
                        scope.delete(key);
                    }
                }
            }, this);
        }
    };
    InjectDirective.prototype.willRestate = function () {
        this.reinject();
    };
    return InjectDirective;
}(Directive));

var InjectForm = (function (_super) {
    __extends(InjectForm, _super);
    function InjectForm() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(InjectForm.prototype, "tag", {
        get: function () {
            return 'inject';
        },
        enumerable: true,
        configurable: true
    });
    InjectForm.prototype.cast = function (item) {
        if (item.tag === this.tag) {
            var directive_1 = new InjectDirective();
            item.forEach(function (item) {
                this.materializeDirectiveParam(directive_1, item);
            }, this);
            return directive_1;
        }
        return undefined;
    };
    InjectForm.prototype.materializeDirectiveParam = function (directive, item) {
        if (item instanceof Attr && item.key.value === this.tag && item.value instanceof Selector) {
            directive._selector = item.value;
        }
        else if (item instanceof Field) {
            directive._bindings.push(item);
        }
    };
    InjectForm.Form = new InjectForm();
    return InjectForm;
}(DirectiveForm));
DirectiveForm.addGlobal(InjectForm.Form);

var TickDirective = (function (_super) {
    __extends(TickDirective, _super);
    function TickDirective(timeout) {
        var _this = _super.call(this) || this;
        _this._timeout = timeout;
        _this._deadline = 0;
        _this._timer = 0;
        _this.onTick = _this.onTick.bind(_this);
        return _this;
    }
    TickDirective.prototype.reschedule = function (stack) {
        var timeout = this._timeout.evaluate(stack).numberValue();
        if (timeout) {
            var deadline = Date.now() + timeout;
            if (Math.abs(this._deadline - deadline) > 16) {
                if (this._timer) {
                    clearTimeout(this._timer);
                }
                this._deadline = deadline;
                this._timer = setTimeout(this.onTick, timeout);
            }
        }
        else if (this._timer) {
            clearTimeout(this._timer);
            this._deadline = 0;
            this._timer = 0;
        }
    };
    TickDirective.prototype.onTick = function () {
        this._deadline = 0;
        this._timer = 0;
        this._model.requireRestate();
        this.reschedule(this.stack());
    };
    TickDirective.prototype.didRemodel = function (state, stack) {
        _super.prototype.didRemodel.call(this, state, stack);
        this.reschedule(stack);
    };
    return TickDirective;
}(Directive));

var TickForm = (function (_super) {
    __extends(TickForm, _super);
    function TickForm() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(TickForm.prototype, "tag", {
        get: function () {
            return 'tick';
        },
        enumerable: true,
        configurable: true
    });
    TickForm.prototype.cast = function (item) {
        var timeout = item.header(this.tag);
        if (timeout.isDefined()) {
            return new TickDirective(timeout);
        }
        return undefined;
    };
    TickForm.Form = new TickForm();
    return TickForm;
}(DirectiveForm));
DirectiveForm.addGlobal(TickForm.Form);

var AuthenticatedView = (function (_super) {
    __extends(AuthenticatedView, _super);
    function AuthenticatedView(node, id) {
        var _this = _super.call(this, node, id) || this;
        _this._deauthedTemplate = Value.Absent;
        _this._authedTemplate = Value.Absent;
        _this.onGoogleAuth2Loaded = _this.onGoogleAuth2Loaded.bind(_this);
        _this.onGoogleUserChanged = _this.onGoogleUserChanged.bind(_this);
        _this.display('flex')
            .flexGrow(1);
        return _this;
    }
    AuthenticatedView.prototype.isAuthenticated = function () {
        return this._auth2 ? this._auth2.isSignedIn.get() : false;
    };
    AuthenticatedView.prototype.didSetAppView = function (appView) {
        if (appView && typeof gapi !== 'undefined' && this._googleClientId !== undefined) {
            gapi.load('auth2', this.onGoogleAuth2Loaded);
        }
    };
    AuthenticatedView.prototype.onGoogleAuth2Loaded = function () {
        this._auth2 = gapi.auth2.init({
            client_id: this._googleClientId,
            scope: 'profile email',
        });
        this._auth2.currentUser.listen(this.onGoogleUserChanged);
        if (this._auth2.isSignedIn.get()) {
            this._auth2.signIn();
        }
    };
    AuthenticatedView.prototype.onGoogleUserChanged = function (user) {
        if (user.isSignedIn()) {
            var openIDToken = user.getAuthResponse().id_token;
            this.setModel(this._model.withSlot('openIDToken', openIDToken));
        }
        else {
            this.setModel(this._model.withoutKey('openIDToken').toValue());
        }
    };
    AuthenticatedView.create = function () {
        var node = document.createElement('div');
        return new AuthenticatedView(node).className('authenticated');
    };
    AuthenticatedView.applyTheme = function (theme) {
        var popover = Record.empty()
            .slot('width', '180px')
            .slot('height', '240px');
        var button = Record.empty()
            .slot('baseColor', Selector.get('primaryColor'));
        var account = Record.empty()
            .slot('popover', popover)
            .slot('button', button);
        theme.set('account', account);
    };
    return AuthenticatedView;
}(HtmlView));
AuthenticatedView.applyTheme(AuthenticatedView.Theme);

var AuthenticatedModel = (function (_super) {
    __extends(AuthenticatedModel, _super);
    function AuthenticatedModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AuthenticatedModel.prototype.remodel = function (stack) {
        if (stack === void 0) { stack = this.stack(); }
        var oldOpenIDToken = this._openIDToken;
        var newOpenIDToken = OPENID_TOKEN_SELECTOR.evaluate(stack).stringValue();
        if (oldOpenIDToken !== newOpenIDToken) {
            this._openIDToken = newOpenIDToken;
            var credentials_1;
            if (newOpenIDToken !== undefined) {
                credentials_1 = Record.empty().attr('idToken', newOpenIDToken);
            }
            else {
                credentials_1 = Value.Absent;
            }
            client._options.credentials = credentials_1;
            client._hosts.forEach(function (hostUri, host) {
                host.authenticate(credentials_1);
            }, this);
        }
        _super.prototype.remodel.call(this, stack);
    };
    return AuthenticatedModel;
}(HtmlModel));
var OPENID_TOKEN_SELECTOR = Selector.get('openIDToken');

var AuthenticatedForm = (function (_super) {
    __extends(AuthenticatedForm, _super);
    function AuthenticatedForm() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(AuthenticatedForm.prototype, "tag", {
        get: function () {
            return 'authenticated';
        },
        enumerable: true,
        configurable: true
    });
    AuthenticatedForm.prototype.castView = function (value, stack, factory) {
        if (value.tag === this.tag) {
            var view = AuthenticatedView.create();
            var modelDef = this.materializeView(view, value, stack, factory);
            view.setModel(modelDef);
            return view;
        }
        return undefined;
    };
    AuthenticatedForm.prototype.castModel = function (value, stack, factory) {
        if (value.tag === this.tag) {
            var model = new AuthenticatedModel();
            var dataDef = this.materializeModel(model, value, stack, factory);
            model.setData(dataDef);
            return model;
        }
        return undefined;
    };
    AuthenticatedForm.prototype.materializeViewParam = function (view, param, stack, factory) {
        if (param.key instanceof Text$1) {
            var key = param.key.value;
            if (key === 'googleClientId') {
                view._googleClientId = param.toValue().stringValue();
            }
        }
        var childView = factory.castView(param.toValue(), stack, factory);
        if (childView instanceof NodeView) {
            view.append(childView);
        }
        return _super.prototype.materializeViewParam.call(this, view, param, stack, factory);
    };
    AuthenticatedForm.prototype.materializeModelParam = function (model, param, stack, factory) {
        if (param instanceof Attr && param.key.value === this.tag) {
            return Item.Absent;
        }
        return _super.prototype.materializeModelParam.call(this, model, param, stack, factory);
    };
    AuthenticatedForm.Form = new AuthenticatedForm();
    return AuthenticatedForm;
}(HtmlForm));
UiForm.addGlobal(AuthenticatedForm.Form);

var AccountPopoverView = (function (_super) {
    __extends(AccountPopoverView, _super);
    function AccountPopoverView(popover) {
        var _this = _super.call(this, popover) || this;
        _this.onGoogleUserChanged = _this.onGoogleUserChanged.bind(_this);
        _this.onSignOut = _this.onSignOut.bind(_this);
        _this.display('flex')
            .position('absolute')
            .justifyContent('center')
            .alignItems('center')
            .placement(['top', 'bottom'])
            .boxShadow('0 2px 4px 0 rgba(0, 0, 0, 0.12), 0 0 4px 0 rgba(0, 0, 0, 0.08)')
            .borderRadius(3);
        _this._googleSignInButton = HtmlView.create('div');
        _this._googleSignInButton.elemId(_this._googleSignInButton._id);
        _this._signOutButton = HtmlView.create('button').text('Sign Out');
        _this._signOutButton.on('click', _this.onSignOut);
        return _this;
    }
    Object.defineProperty(AccountPopoverView.prototype, "authenticatedView", {
        get: function () {
            var view = this._parentView;
            while (view) {
                if (view instanceof AuthenticatedView) {
                    return view;
                }
                view = view._parentView;
            }
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AccountPopoverView.prototype, "auth2", {
        get: function () {
            var authenticatedView = this.authenticatedView;
            if (authenticatedView) {
                var auth2 = authenticatedView._auth2;
                if (auth2) {
                    return auth2;
                }
            }
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    AccountPopoverView.prototype.onGoogleUserChanged = function (user) {
        if (user.isSignedIn()) {
            this._googleSignInButton.remove();
            this.append(this._signOutButton);
        }
        else if (!this._googleSignInButton._parentView) {
            this._signOutButton.remove();
            this.append(this._googleSignInButton);
            gapi.signin2.render(this._googleSignInButton._id, {
                scope: 'profile email',
            });
        }
        this.hide();
    };
    AccountPopoverView.prototype.onSignOut = function (event) {
        var auth2 = this.auth2;
        if (auth2) {
            auth2.disconnect();
        }
    };
    AccountPopoverView.prototype.didSetState = function (newState, oldState) {
        _super.prototype.didSetState.call(this, newState, oldState);
        var width = newState.get('popoverWidth').cast(Length.Form);
        if (width) {
            this.width(width);
            this.requireResize();
        }
        var height = newState.get('popoverHeight').cast(Length.Form);
        if (height) {
            this.height(height);
            this.requireResize();
        }
    };
    AccountPopoverView.prototype.popoverWillShow = function (popover) {
        _super.prototype.popoverWillShow.call(this, popover);
        var auth2 = this.auth2;
        if (auth2) {
            auth2.currentUser.listen(this.onGoogleUserChanged);
            this.onGoogleUserChanged(auth2.currentUser.get());
        }
    };
    AccountPopoverView.create = function (node) {
        if (node instanceof AccountPopoverView) {
            return node;
        }
        else if (node instanceof NodeView) {
            throw new TypeError('' + node);
        }
        else if (node === undefined || typeof node === 'string') {
            return new AccountPopoverView(Popover.create(node)).className('account-popover');
        }
        else if (node.view instanceof AccountPopoverView) {
            return node.view;
        }
        else if (node.view) {
            throw new TypeError('' + node.view);
        }
        else if (node instanceof HTMLElement) {
            return new AccountPopoverView(new Popover(node));
        }
        else {
            throw new TypeError('' + node);
        }
    };
    return AccountPopoverView;
}(PopoverView));

var AccountPopoverModel = (function (_super) {
    __extends(AccountPopoverModel, _super);
    function AccountPopoverModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AccountPopoverModel.Params = PopoverModel.Params.concat([
        new ModelParam('popoverWidth', Selector.get('popoverWidth').or(Selector.get('account').get('popover').get('width'))),
        new ModelParam('popoverHeight', Selector.get('popoverHeight').or(Selector.get('account').get('popover').get('height'))),
    ]);
    return AccountPopoverModel;
}(PopoverModel));

var AccountPopoverForm = (function (_super) {
    __extends(AccountPopoverForm, _super);
    function AccountPopoverForm() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(AccountPopoverForm.prototype, "tag", {
        get: function () {
            return 'accountPopover';
        },
        enumerable: true,
        configurable: true
    });
    AccountPopoverForm.prototype.castView = function (value, stack, factory) {
        if (value.tag === this.tag) {
            var view = AccountPopoverView.create();
            var modelDef = this.materializeView(view, value, stack, factory);
            view.setModel(modelDef);
            return view;
        }
        return undefined;
    };
    AccountPopoverForm.prototype.castModel = function (value, stack, factory) {
        if (value.tag === this.tag) {
            var model = new AccountPopoverModel();
            var dataDef = this.materializeModel(model, value, stack, factory);
            model.setData(dataDef);
            return model;
        }
        return undefined;
    };
    AccountPopoverForm.prototype.materializeViewParam = function (view, param, stack, factory) {
        return _super.prototype.materializeViewParam.call(this, view, param, stack, factory);
    };
    AccountPopoverForm.prototype.materializeModelParam = function (model, param, stack, factory) {
        if (param instanceof Attr && param.key.value === this.tag) {
            return Item.Absent;
        }
        return _super.prototype.materializeModelParam.call(this, model, param, stack, factory);
    };
    AccountPopoverForm.Form = new AccountPopoverForm();
    return AccountPopoverForm;
}(HtmlForm));
UiForm.addGlobal(AccountPopoverForm.Form);

var AccountButtonView = (function (_super) {
    __extends(AccountButtonView, _super);
    function AccountButtonView(node) {
        var _this = _super.call(this, node) || this;
        _this._autoPrompt = false;
        _this._accountPopoverTemplate = Record.empty().attr('accountPopover');
        _this.onClick = _this.onClick.bind(_this);
        _this.display('flex')
            .visibility('hidden')
            .flexGrow(1)
            .flexShrink(0)
            .justifyContent('center')
            .alignItems('center');
        _this._iconBox = _this.append('div')
            .cursor('pointer');
        _this._iconView = SvgView.create('svg')
            .width(32)
            .height(32)
            .viewBox('0 0 32 32');
        _this._iconBox.append(_this._iconView);
        _this._baseView = _this._iconView.append('circle')
            .cx(16)
            .cy(16)
            .r(16);
        _this._headView = _this._iconView.append('path')
            .d('M7.24,24.22 L8.99,24.22 C10.91,24.22 12.48,22.65 12.48,20.72 L12.48,19.56 C11.79,18.73 11.24,17.78 10.91,16.75 C10.84,16.54 10.80,16.29 10.61,16.16 C9.85,15.54 9.64,14.37 10.11,13.51 C10.207,13.34 10.37,13.20 10.35,12.99 C10.35,11.94 10.34,10.90 10.36,9.86 C10.40,8.88 10.64,7.90 11.19,7.09 C11.82,6.16 12.83,5.53 13.91,5.25 C15.14,4.94 16.45,4.93 17.70,5.17 C18.70,5.35 19.66,5.79 20.36,6.53 C21.22,7.45 21.58,8.73 21.60,9.97 C21.61,10.99 21.60,12.02 21.60,13.05 C21.60,13.20 21.72,13.30 21.79,13.42 C22.29,14.23 22.16,15.36 21.49,16.03 C21.37,16.16 21.18,16.25 21.14,16.45 C20.80,17.60 20.24,18.68 19.47,19.60 L19.47,20.72 C19.47,22.65 21.04,24.22 22.97,24.22 L24.71,24.22 C24.71,24.22 26.35,24.67 28.04,26.54 C25.10,29.89 20.80,32 16,32 C11.19,32 6.87,29.88 3.94,26.52 C5.62,24.67 7.24,24.22 7.24,24.22 Z')
            .fill(Color.white());
        _this._iconBox.on('click', _this.onClick);
        return _this;
    }
    Object.defineProperty(AccountButtonView.prototype, "authenticatedView", {
        get: function () {
            var view = this._parentView;
            while (view) {
                if (view instanceof AuthenticatedView) {
                    return view;
                }
                view = view._parentView;
            }
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    AccountButtonView.prototype.autoPrompt = function (autoPrompt) {
        if (autoPrompt === undefined) {
            return this._autoPrompt;
        }
        else {
            if (this._autoPrompt !== autoPrompt) {
                this._autoPrompt = autoPrompt;
                if (autoPrompt) {
                    var authenticatedView = this.authenticatedView;
                    if (authenticatedView && !authenticatedView.isAuthenticated()) {
                        this.showAccountPopover();
                    }
                }
            }
            return this;
        }
    };
    AccountButtonView.prototype.showAccountPopover = function () {
        var appView = this.appView;
        if (appView) {
            this._accountPopover = AccountPopoverForm.Form.castView(this._accountPopoverTemplate, this.stack(), UiForm.Global);
            if (this._accountPopover) {
                this._accountPopover.addObserver(this);
                this._accountPopover.source(this._iconView.node);
                this.appendChildView(this._accountPopover);
                appView.showPopover(this._accountPopover);
            }
        }
    };
    AccountButtonView.prototype.hideAccountPopover = function () {
        if (this._accountPopover) {
            this._accountPopover.hide();
        }
    };
    AccountButtonView.prototype.toggleAccountPopover = function () {
        if (this._accountPopover) {
            this.hideAccountPopover();
        }
        else {
            this.showAccountPopover();
        }
    };
    AccountButtonView.prototype.didSetAppView = function (appView) {
        if (appView && this._autoPrompt) {
            var authenticatedView = this.authenticatedView;
            if (authenticatedView && !authenticatedView.isAuthenticated()) {
                this.showAccountPopover();
            }
        }
    };
    AccountButtonView.prototype.didSetState = function (newState, oldState) {
        _super.prototype.didSetState.call(this, newState, oldState);
        var autoPrompt = newState.get('autoPrompt').booleanValue();
        if (autoPrompt !== undefined) {
            this.autoPrompt(autoPrompt);
        }
        var baseColor = newState.get('baseColor').cast(Color.Form);
        if (baseColor) {
            this._baseView.fill(baseColor);
        }
        if (!oldState.isDefined()) {
            this.visibility(null);
        }
    };
    AccountButtonView.prototype.onClick = function (event) {
        event.stopPropagation();
        this.toggleAccountPopover();
    };
    AccountButtonView.prototype.popoverDidHide = function (popover) {
        if (this._accountPopover && this._accountPopover.popover === popover) {
            this._accountPopover = undefined;
        }
    };
    AccountButtonView.create = function () {
        var node = document.createElement('div');
        return new AccountButtonView(node).className('account-button');
    };
    return AccountButtonView;
}(HtmlView));

var AccountButtonModel = (function (_super) {
    __extends(AccountButtonModel, _super);
    function AccountButtonModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AccountButtonModel.Params = HtmlModel.Params.concat([
        new ModelParam('autoPrompt', Selector.get('autoPrompt').or(Selector.get('account').get('autoPrompt'))),
        new ModelParam('baseColor', Selector.get('baseColor').or(Selector.get('account').get('button').get('baseColor'))),
    ]);
    return AccountButtonModel;
}(HtmlModel));

var AccountButtonForm = (function (_super) {
    __extends(AccountButtonForm, _super);
    function AccountButtonForm() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(AccountButtonForm.prototype, "tag", {
        get: function () {
            return 'accountButton';
        },
        enumerable: true,
        configurable: true
    });
    AccountButtonForm.prototype.castView = function (value, stack, factory) {
        if (value.tag === this.tag) {
            var view = AccountButtonView.create();
            var modelDef = this.materializeView(view, value, stack, factory);
            view.setModel(modelDef);
            return view;
        }
        return undefined;
    };
    AccountButtonForm.prototype.castModel = function (value, stack, factory) {
        if (value.tag === this.tag) {
            var model = new AccountButtonModel();
            var dataDef = this.materializeModel(model, value, stack, factory);
            model.setData(dataDef);
            return model;
        }
        return undefined;
    };
    AccountButtonForm.prototype.materializeViewParam = function (view, param, stack, factory) {
        return _super.prototype.materializeViewParam.call(this, view, param, stack, factory);
    };
    AccountButtonForm.prototype.materializeModelParam = function (model, param, stack, factory) {
        if (param instanceof Attr && param.key.value === this.tag) {
            return Item.Absent;
        }
        return _super.prototype.materializeModelParam.call(this, model, param, stack, factory);
    };
    AccountButtonForm.Form = new AccountButtonForm();
    return AccountButtonForm;
}(HtmlForm));
UiForm.addGlobal(AccountButtonForm.Form);

var BoardView = (function (_super) {
    __extends(BoardView, _super);
    function BoardView(node) {
        var _this = _super.call(this, node) || this;
        _this.position('relative')
            .flexGrow(1)
            .flexBasis(0);
        _this._surfaceView = null;
        _this._overlayView = _this.append('div')
            .display('flex')
            .position('absolute')
            .top(0)
            .right(0)
            .bottom(0)
            .left(0)
            .pointerEvents('none');
        _this._middleView = _this._overlayView.append('div')
            .display('flex')
            .flexDirection('column')
            .flexGrow(1)
            .flexBasis(0);
        _this._centerView = _this._middleView.append('div')
            .display('flex')
            .flexGrow(1)
            .flexBasis(0);
        _this._leftView = null;
        _this._rightView = null;
        _this._topView = null;
        _this._bottomView = null;
        return _this;
    }
    BoardView.prototype.surfaceView = function (surfaceView) {
        if (surfaceView === undefined) {
            return this._surfaceView;
        }
        else {
            if (this._surfaceView !== surfaceView) {
                if (this._surfaceView) {
                    this._surfaceView.remove();
                }
                this._surfaceView = surfaceView;
                if (this._surfaceView) {
                    this._surfaceView.position('absolute')
                        .top(0)
                        .right(0)
                        .bottom(0)
                        .left(0);
                    this.insertBefore(this._surfaceView, this._overlayView);
                }
            }
            return this;
        }
    };
    BoardView.prototype.leftView = function (leftView) {
        if (leftView === undefined) {
            return this._leftView;
        }
        else {
            if (this._leftView !== leftView) {
                if (this._leftView) {
                    this._leftView.remove();
                }
                this._leftView = leftView;
                if (this._leftView) {
                    this._leftView.pointerEvents('auto');
                    this._overlayView.insertBefore(this._leftView, this._middleView);
                }
            }
            return this;
        }
    };
    BoardView.prototype.rightView = function (rightView) {
        if (rightView === undefined) {
            return this._rightView;
        }
        else {
            if (this._rightView !== rightView) {
                if (this._rightView) {
                    this._rightView.remove();
                }
                this._rightView = rightView;
                if (this._rightView) {
                    this._rightView.pointerEvents('auto');
                    this._overlayView.append(this._rightView);
                }
            }
            return this;
        }
    };
    BoardView.prototype.topView = function (topView) {
        if (topView === undefined) {
            return this._topView;
        }
        else {
            if (this._topView !== topView) {
                if (this._topView) {
                    this._topView.remove();
                }
                this._topView = topView;
                if (this._topView) {
                    this._topView.pointerEvents('auto');
                    this._middleView.insertBefore(this._topView, this._centerView);
                }
            }
            return this;
        }
    };
    BoardView.prototype.bottomView = function (bottomView) {
        if (bottomView === undefined) {
            return this._bottomView;
        }
        else {
            if (this._bottomView !== bottomView) {
                if (this._bottomView) {
                    this._bottomView.remove();
                }
                this._bottomView = bottomView;
                if (this._bottomView) {
                    this._bottomView.pointerEvents('auto');
                    this._middleView.append(this._bottomView);
                }
            }
            return this;
        }
    };
    BoardView.create = function () {
        var node = document.createElement('div');
        return new BoardView(node).className('board');
    };
    return BoardView;
}(HtmlView));

var BoardModel = (function (_super) {
    __extends(BoardModel, _super);
    function BoardModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return BoardModel;
}(HtmlModel));

var BoardForm = (function (_super) {
    __extends(BoardForm, _super);
    function BoardForm() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(BoardForm.prototype, "tag", {
        get: function () {
            return 'board';
        },
        enumerable: true,
        configurable: true
    });
    BoardForm.prototype.castView = function (value, stack, factory) {
        if (value.tag === this.tag) {
            var view = BoardView.create();
            var modelDef = this.materializeView(view, value, stack, factory);
            view.setModel(modelDef);
            return view;
        }
        return undefined;
    };
    BoardForm.prototype.castModel = function (value, stack, factory) {
        if (value.tag === this.tag) {
            var model = new BoardModel();
            var dataDef = this.materializeModel(model, value, stack, factory);
            model.setData(dataDef);
            return model;
        }
        return undefined;
    };
    BoardForm.prototype.materializeViewParam = function (view, param, stack, factory) {
        if (param.key instanceof Text$1) {
            var key = param.key.value;
            if (key === 'surface') {
                var surfaceView = factory.castView(param.toValue(), stack, factory);
                if (surfaceView) {
                    view.surfaceView(surfaceView);
                    return view.surfaceView();
                }
            }
            else if (key === 'left') {
                var leftView = factory.castView(param.toValue(), stack, factory);
                if (leftView) {
                    view.leftView(leftView);
                    return view.leftView();
                }
            }
            else if (key === 'right') {
                var rightView = factory.castView(param.toValue(), stack, factory);
                if (rightView) {
                    view.rightView(rightView);
                    return view.rightView();
                }
            }
            else if (key === 'top') {
                var topView = factory.castView(param.toValue(), stack, factory);
                if (topView) {
                    view.topView(topView);
                    return view.topView();
                }
            }
            else if (key === 'bottom') {
                var bottomView = factory.castView(param.toValue(), stack, factory);
                if (bottomView) {
                    view.bottomView(bottomView);
                    return view.bottomView();
                }
            }
        }
        return _super.prototype.materializeViewParam.call(this, view, param, stack, factory);
    };
    BoardForm.prototype.materializeModelParam = function (model, param, stack, factory) {
        if (param instanceof Attr && param.key.value === this.tag) {
            return Item.Absent;
        }
        return _super.prototype.materializeModelParam.call(this, model, param, stack, factory);
    };
    BoardForm.Form = new BoardForm();
    return BoardForm;
}(HtmlForm));
UiForm.addGlobal(BoardForm.Form);

var Axis = (function () {
    function Axis(node, scale) {
        this.node = node;
        this.ticks = new BTree();
        this._frame = null;
        this._scale = scale;
        this._domainColor = Color.transparent();
        this._domainWidth = 1;
        this._domainSerif = 6;
        this._tickMarkColor = Color.transparent();
        this._tickMarkWidth = 1;
        this._tickMarkLength = 6;
        this._tickLabelColor = Color.transparent();
        this._tickLabelPadding = 0;
        this.dirty = true;
        this.observers = [];
        this.domainPath = document.createElementNS('http://www.w3.org/2000/svg', 'path');
        this.domainPath.setAttribute('class', 'domain');
        this.domainPath.setAttribute('fill', 'none');
        this.node.appendChild(this.domainPath);
    }
    Axis.prototype.frame = function (frame) {
        if (frame === undefined) {
            return this._frame;
        }
        else {
            this._frame = frame;
            for (var i = 0; i < this.observers.length; i += 1) {
                var observer = this.observers[i];
                if (observer.axisDidScale) {
                    observer.axisDidScale(this._scale, this);
                }
            }
            return this;
        }
    };
    Axis.prototype.scale = function (scale) {
        if (scale === undefined) {
            return this._scale;
        }
        else {
            scale = Axis.scale(scale);
            if (!this._scale.equals(scale)) {
                this._scale = scale;
                this.dirty = true;
                for (var i = 0; i < this.observers.length; i += 1) {
                    var observer = this.observers[i];
                    if (observer.axisDidScale) {
                        observer.axisDidScale(this._scale, this);
                    }
                }
            }
            return this;
        }
    };
    Axis.prototype.domain = function (x0, x1) {
        if (x0 === undefined) {
            return this._scale.domain();
        }
        else {
            if (typeof x0 === 'string') {
                x0 = Axis.scale(x0).domain();
            }
            var scale = this._scale.domain(x0, x1);
            if (!this._scale.equals(scale)) {
                this._scale = scale;
                this.dirty = true;
                for (var i = 0; i < this.observers.length; i += 1) {
                    var observer = this.observers[i];
                    if (observer.axisDidScale) {
                        observer.axisDidScale(this._scale, this);
                    }
                }
            }
            return this;
        }
    };
    Axis.prototype.range = function (y0, y1) {
        if (y0 === undefined) {
            return this._scale.range();
        }
        else {
            var scale = this._scale.range(y0, y1);
            if (!this._scale.equals(scale)) {
                this._scale = scale;
                this.dirty = true;
                for (var i = 0; i < this.observers.length; i += 1) {
                    var observer = this.observers[i];
                    if (observer.axisDidScale) {
                        observer.axisDidScale(this._scale, this);
                    }
                }
            }
            return this;
        }
    };
    Axis.prototype.transformFrameX = function () {
        if (this._frame) {
            var frameDomain = this._frame.domain();
            var scaleDomain = this._scale.domain();
            var y00 = this._frame.scale(frameDomain[0]);
            var y01 = this._frame.scale(frameDomain[1]);
            var y10 = this._frame.scale(scaleDomain[0]);
            var y11 = this._frame.scale(scaleDomain[1]);
            var dy0 = y00 - y10;
            var dy1 = y01 - y11;
            var k = Math.abs(dy0 - dy1) > 0.5 && Math.abs(y01 - y00) > 0.5 ? (y01 - y00) / (y11 - y10) : 1;
            var transform = Transform.translateX(k * dy0);
            if (k !== 1) {
                transform = transform.scaleX(k);
            }
            return transform;
        }
        else {
            return null;
        }
    };
    Axis.prototype.transformFrameY = function () {
        if (this._frame) {
            var frameDomain = this._frame.domain();
            var scaleDomain = this._scale.domain();
            var y00 = this._frame.scale(frameDomain[0]);
            var y01 = this._frame.scale(frameDomain[1]);
            var y10 = this._frame.scale(scaleDomain[0]);
            var y11 = this._frame.scale(scaleDomain[1]);
            var dy0 = y00 - y10;
            var dy1 = y01 - y11;
            var k = Math.abs(dy0 - dy1) > 0.5 && Math.abs(y01 - y00) > 0.5 ? (y01 - y00) / (y11 - y10) : 1;
            var transform = Transform.translateY(k * dy0);
            if (k !== 1) {
                transform = transform.scaleY(k);
            }
            return transform;
        }
        else {
            return null;
        }
    };
    Axis.prototype.domainColor = function (domainColor) {
        if (domainColor === undefined) {
            return this._domainColor;
        }
        else {
            domainColor = Color.fromAny(domainColor);
            if (!this._domainColor.equals(domainColor)) {
                this._domainColor = domainColor;
                this.dirty = true;
            }
            return this;
        }
    };
    Axis.prototype.domainWidth = function (domainWidth) {
        if (domainWidth === undefined) {
            return this._domainWidth;
        }
        else {
            if (this._domainWidth !== domainWidth) {
                this._domainWidth = domainWidth;
                this.dirty = true;
            }
            return this;
        }
    };
    Axis.prototype.domainSerif = function (domainSerif) {
        if (domainSerif === undefined) {
            return this._domainSerif;
        }
        else {
            if (this._domainSerif !== domainSerif) {
                this._domainSerif = domainSerif;
                this.dirty = true;
            }
            return this;
        }
    };
    Axis.prototype.tickMarkColor = function (tickMarkColor) {
        if (tickMarkColor === undefined) {
            return this._tickMarkColor;
        }
        else {
            tickMarkColor = Color.fromAny(tickMarkColor);
            if (!this._tickMarkColor.equals(tickMarkColor)) {
                this._tickMarkColor = tickMarkColor;
                this.dirty = true;
            }
            return this;
        }
    };
    Axis.prototype.tickMarkWidth = function (tickMarkWidth) {
        if (tickMarkWidth === undefined) {
            return this._tickMarkWidth;
        }
        else {
            if (this._tickMarkWidth !== tickMarkWidth) {
                this._tickMarkWidth = tickMarkWidth;
                this.dirty = true;
            }
            return this;
        }
    };
    Axis.prototype.tickMarkLength = function (tickMarkLength) {
        if (tickMarkLength === undefined) {
            return this._tickMarkLength;
        }
        else {
            if (this._tickMarkLength !== tickMarkLength) {
                this._tickMarkLength = tickMarkLength;
                this.dirty = true;
            }
            return this;
        }
    };
    Axis.prototype.tickLabelColor = function (tickLabelColor) {
        if (tickLabelColor === undefined) {
            return this._tickLabelColor;
        }
        else {
            tickLabelColor = Color.fromAny(tickLabelColor);
            if (!this._tickLabelColor.equals(tickLabelColor)) {
                this._tickLabelColor = tickLabelColor;
                this.dirty = true;
            }
            return this;
        }
    };
    Axis.prototype.tickLabelPadding = function (tickLabelPadding) {
        if (tickLabelPadding === undefined) {
            return this._tickLabelPadding;
        }
        else {
            if (this._tickLabelPadding !== tickLabelPadding) {
                this._tickLabelPadding = tickLabelPadding;
                this.dirty = true;
            }
            return this;
        }
    };
    Axis.prototype.getTick = function (tickValue) {
        return this.ticks.get(tickValue);
    };
    Axis.prototype.insertTick = function (newTick) {
        for (var i = 0; i < this.observers.length; i += 1) {
            var observer = this.observers[i];
            if (observer.axisWillInsertTick) {
                var tick = observer.axisWillInsertTick(newTick, this);
                if (tick) {
                    newTick = tick;
                }
                else if (tick === null) {
                    return;
                }
            }
        }
        this.ticks.set(newTick.tickValue, newTick);
        this.node.insertBefore(newTick, this.ticks.nextValue(newTick.tickValue) || null);
        this.renderTick(newTick);
        for (var i = 0; i < this.observers.length; i += 1) {
            var observer = this.observers[i];
            if (observer.axisDidInsertTick) {
                observer.axisDidInsertTick(newTick, this);
            }
        }
    };
    Axis.prototype.removeTick = function (oldTick) {
        if (oldTick.parentNode === this.node) {
            for (var i = 0; i < this.observers.length; i += 1) {
                var observer = this.observers[i];
                if (observer.axisWillRemoveTick) {
                    observer.axisWillRemoveTick(oldTick, this);
                }
            }
            this.node.removeChild(oldTick);
            this.ticks.delete(oldTick.tickValue);
            for (var i = 0; i < this.observers.length; i += 1) {
                var observer = this.observers[i];
                if (observer.axisDidRemoveTick) {
                    observer.axisDidRemoveTick(oldTick, this);
                }
            }
        }
    };
    Axis.prototype.addObserver = function (observer) {
        if (this.observers.indexOf(observer) < 0) {
            this.observers.push(observer);
        }
    };
    Axis.prototype.removeObserver = function (observer) {
        var i = this.observers.indexOf(observer);
        if (i >= 0) {
            this.observers.splice(i, 1);
        }
    };
    Axis.prototype.render = function () {
        if (this.dirty) {
            this.dirty = false;
            this.renderDomainPath();
            this.renderTicks();
        }
    };
    Axis.prototype.renderDomainPath = function () {
        this.domainPath.setAttribute('stroke', '' + this._domainColor);
        this.domainPath.setAttribute('stroke-width', '' + this._domainWidth);
    };
    Axis.prototype.renderTicks = function () {
        this.ticks.forEach(function (tickValue, tick) {
            this.renderTick(tick);
        }, this);
    };
    Axis.prototype.renderTick = function (tick) {
        for (var i = 0; i < tick.childNodes.length; i += 1) {
            var child = tick.childNodes[i];
            if (child instanceof Element) {
                if (child.getAttribute('slot') === 'tick-mark') {
                    this.renderTickMark(child, tick);
                }
                else if (child.getAttribute('slot') === 'tick-label') {
                    this.renderTickLabel(child, tick);
                }
            }
        }
    };
    Axis.prototype.renderTickMark = function (tickMark, tick) {
        tickMark.setAttribute('stroke', '' + this._tickMarkColor);
        tickMark.setAttribute('stroke-width', '' + this._tickMarkWidth);
    };
    Axis.prototype.renderTickLabel = function (tickLabel, tick) {
        tickLabel.setAttribute('fill', '' + this._tickLabelColor);
    };
    Axis.top = function (scale) {
        var node = document.createElementNS('http://www.w3.org/2000/svg', 'g');
        node.setAttribute('pointer-events', 'all');
        node.setAttribute('class', 'axis axis-top');
        return new TopAxis(node, Axis.scale(scale));
    };
    Axis.right = function (scale) {
        var node = document.createElementNS('http://www.w3.org/2000/svg', 'g');
        node.setAttribute('pointer-events', 'all');
        node.setAttribute('class', 'axis axis-right');
        return new RightAxis(node, Axis.scale(scale));
    };
    Axis.bottom = function (scale) {
        var node = document.createElementNS('http://www.w3.org/2000/svg', 'g');
        node.setAttribute('pointer-events', 'all');
        node.setAttribute('class', 'axis axis-bottom');
        return new BottomAxis(node, Axis.scale(scale));
    };
    Axis.left = function (scale) {
        var node = document.createElementNS('http://www.w3.org/2000/svg', 'g');
        node.setAttribute('pointer-events', 'all');
        node.setAttribute('class', 'axis axis-left');
        return new LeftAxis(node, Axis.scale(scale));
    };
    Axis.scale = function (value) {
        if (value instanceof ContinuousScale) {
            return value;
        }
        else if (typeof value === 'string') {
            if (value === 'linear') {
                return new LinearScale(0, 1, new NumberInterpolator(0, 0));
            }
            else if (value === 'time') {
                var d1 = DateTime.current();
                var d0 = new DateTime(+d1, d1.zone());
                d0.day(d0.day() - 1);
                return new TimeScale(d0, d1, new NumberInterpolator(0, 0));
            }
            else {
                var domain = value.split('...');
                var x0 = UiValue.parse(domain[0]);
                var x1 = UiValue.parse(domain[1]);
                if (typeof x0 === 'number' && typeof x1 === 'number') {
                    return new LinearScale(x0, x1, new NumberInterpolator(0, 0));
                }
                else if (x0 instanceof DateTime && x1 instanceof DateTime) {
                    return new TimeScale(x0, x1, new NumberInterpolator(0, 0));
                }
            }
        }
        throw new TypeError(value);
    };
    return Axis;
}());
var TopAxis = (function (_super) {
    __extends(TopAxis, _super);
    function TopAxis(node, scale) {
        var _this = _super.call(this, node, scale) || this;
        _this._tickLabelPadding = 2;
        return _this;
    }
    Object.defineProperty(TopAxis.prototype, "orientation", {
        get: function () {
            return 'top';
        },
        enumerable: true,
        configurable: true
    });
    TopAxis.prototype.transformFrame = function () {
        return this.transformFrameX();
    };
    TopAxis.prototype.renderDomainPath = function () {
        var f = this._scale.interpolate();
        var x0 = f.map(0);
        var x1 = f.map(1);
        var domainSerif = this._domainSerif;
        var path = new Path();
        if (domainSerif) {
            path.moveTo(x0, -domainSerif);
            path.lineTo(x0, 0);
            path.lineTo(x1, 0);
            path.lineTo(x1, -domainSerif);
        }
        else {
            path.moveTo(x0, 0);
            path.lineTo(x1, 0);
        }
        this.domainPath.setAttribute('d', path.toString());
        _super.prototype.renderDomainPath.call(this);
    };
    TopAxis.prototype.renderTick = function (tick) {
        var x = this._scale.scale(tick.tickValue);
        tick.tickCoord = x;
        var transform = Transform.translateX(x);
        tick.setAttribute('transform', transform.toAttributeString());
        _super.prototype.renderTick.call(this, tick);
    };
    TopAxis.prototype.renderTickMark = function (tickMark, tick) {
        if (tickMark.tagName === 'line') {
            tickMark.setAttribute('x1', '0');
            tickMark.setAttribute('y1', '0');
            tickMark.setAttribute('x2', '0');
            tickMark.setAttribute('y2', '' + (-this._tickMarkLength));
        }
        _super.prototype.renderTickMark.call(this, tickMark, tick);
    };
    TopAxis.prototype.renderTickLabel = function (tickLabel, tick) {
        var y = -(this._tickMarkLength + this._tickLabelPadding);
        if (tickLabel.tagName === 'g') {
            var transform = Transform.translateY(y);
            tickLabel.setAttribute('transform', transform.toAttributeString());
        }
        else if (tickLabel.tagName === 'text') {
            tickLabel.setAttribute('y', '' + y);
            tickLabel.setAttribute('text-anchor', 'middle');
            tickLabel.setAttribute('dominant-baseline', 'text-after-edge');
        }
        _super.prototype.renderTickLabel.call(this, tickLabel, tick);
    };
    return TopAxis;
}(Axis));
var RightAxis = (function (_super) {
    __extends(RightAxis, _super);
    function RightAxis(node, scale) {
        var _this = _super.call(this, node, scale) || this;
        _this._tickLabelPadding = 4;
        return _this;
    }
    Object.defineProperty(RightAxis.prototype, "orientation", {
        get: function () {
            return 'right';
        },
        enumerable: true,
        configurable: true
    });
    RightAxis.prototype.transformFrame = function () {
        return this.transformFrameY();
    };
    RightAxis.prototype.renderDomainPath = function () {
        var f = this._scale.interpolate();
        var y0 = f.map(0);
        var y1 = f.map(1);
        var domainSerif = this._domainSerif;
        var path = new Path();
        if (domainSerif) {
            path.moveTo(domainSerif, y0);
            path.lineTo(0, y0);
            path.lineTo(0, y1);
            path.lineTo(domainSerif, y1);
        }
        else {
            path.moveTo(0, y0);
            path.lineTo(0, y1);
        }
        this.domainPath.setAttribute('d', path.toString());
        _super.prototype.renderDomainPath.call(this);
    };
    RightAxis.prototype.renderTick = function (tick) {
        var y = this._scale.scale(tick.tickValue);
        tick.tickCoord = y;
        var transform = Transform.translateY(y);
        tick.setAttribute('transform', transform.toAttributeString());
        _super.prototype.renderTick.call(this, tick);
    };
    RightAxis.prototype.renderTickMark = function (tickMark, tick) {
        if (tickMark.tagName === 'line') {
            tickMark.setAttribute('x1', '0');
            tickMark.setAttribute('y1', '0');
            tickMark.setAttribute('x2', '' + this._tickMarkLength);
            tickMark.setAttribute('y2', '0');
        }
        _super.prototype.renderTickMark.call(this, tickMark, tick);
    };
    RightAxis.prototype.renderTickLabel = function (tickLabel, tick) {
        var x = this._tickMarkLength + this._tickLabelPadding;
        if (tickLabel.tagName === 'g') {
            var transform = Transform.translateX(x);
            tickLabel.setAttribute('transform', transform.toAttributeString());
        }
        else if (tickLabel.tagName === 'text') {
            tickLabel.setAttribute('x', '' + x);
            tickLabel.setAttribute('text-anchor', 'start');
            tickLabel.setAttribute('dominant-baseline', 'central');
        }
        _super.prototype.renderTickLabel.call(this, tickLabel, tick);
    };
    return RightAxis;
}(Axis));
var BottomAxis = (function (_super) {
    __extends(BottomAxis, _super);
    function BottomAxis(node, scale) {
        var _this = _super.call(this, node, scale) || this;
        _this._tickLabelPadding = 2;
        return _this;
    }
    Object.defineProperty(BottomAxis.prototype, "orientation", {
        get: function () {
            return 'bottom';
        },
        enumerable: true,
        configurable: true
    });
    BottomAxis.prototype.transformFrame = function () {
        return this.transformFrameX();
    };
    BottomAxis.prototype.renderDomainPath = function () {
        var f = this._scale.interpolate();
        var x0 = f.map(0);
        var x1 = f.map(1);
        var domainSerif = this._domainSerif;
        var path = new Path();
        if (domainSerif) {
            path.moveTo(x0, domainSerif);
            path.lineTo(x0, 0);
            path.lineTo(x1, 0);
            path.lineTo(x1, domainSerif);
        }
        else {
            path.moveTo(x0, 0);
            path.lineTo(x1, 0);
        }
        this.domainPath.setAttribute('d', path.toString());
        _super.prototype.renderDomainPath.call(this);
    };
    BottomAxis.prototype.renderTick = function (tick) {
        var x = this._scale.scale(tick.tickValue);
        tick.tickCoord = x;
        var transform = Transform.translateX(x);
        tick.setAttribute('transform', transform.toAttributeString());
        _super.prototype.renderTick.call(this, tick);
    };
    BottomAxis.prototype.renderTickMark = function (tickMark, tick) {
        if (tickMark.tagName === 'line') {
            tickMark.setAttribute('x1', '0');
            tickMark.setAttribute('y1', '0');
            tickMark.setAttribute('x2', '0');
            tickMark.setAttribute('y2', '' + this._tickMarkLength);
        }
        _super.prototype.renderTickMark.call(this, tickMark, tick);
    };
    BottomAxis.prototype.renderTickLabel = function (tickLabel, tick) {
        var y = this._tickMarkLength + this._tickLabelPadding;
        if (tickLabel.tagName === 'g') {
            var transform = Transform.translateY(y);
            tickLabel.setAttribute('transform', transform.toAttributeString());
        }
        else if (tickLabel.tagName === 'text') {
            tickLabel.setAttribute('y', '' + y);
            tickLabel.setAttribute('text-anchor', 'middle');
            tickLabel.setAttribute('dominant-baseline', 'text-before-edge');
        }
        _super.prototype.renderTickLabel.call(this, tickLabel, tick);
    };
    return BottomAxis;
}(Axis));
var LeftAxis = (function (_super) {
    __extends(LeftAxis, _super);
    function LeftAxis(node, scale) {
        var _this = _super.call(this, node, scale) || this;
        _this._tickLabelPadding = 4;
        return _this;
    }
    Object.defineProperty(LeftAxis.prototype, "orientation", {
        get: function () {
            return 'left';
        },
        enumerable: true,
        configurable: true
    });
    LeftAxis.prototype.transformFrame = function () {
        return this.transformFrameY();
    };
    LeftAxis.prototype.renderDomainPath = function () {
        var f = this._scale.interpolate();
        var y0 = f.map(0);
        var y1 = f.map(1);
        var domainSerif = this._domainSerif;
        var path = new Path();
        if (domainSerif) {
            path.moveTo(-domainSerif, y0);
            path.lineTo(0, y0);
            path.lineTo(0, y1);
            path.lineTo(-domainSerif, y1);
        }
        else {
            path.moveTo(0, y0);
            path.lineTo(0, y1);
        }
        this.domainPath.setAttribute('d', path.toString());
        _super.prototype.renderDomainPath.call(this);
    };
    LeftAxis.prototype.renderTick = function (tick) {
        var y = this._scale.scale(tick.tickValue);
        tick.tickCoord = y;
        var transform = Transform.translateY(y);
        tick.setAttribute('transform', transform.toAttributeString());
        _super.prototype.renderTick.call(this, tick);
    };
    LeftAxis.prototype.renderTickMark = function (tickMark, tick) {
        if (tickMark.tagName === 'line') {
            tickMark.setAttribute('x1', '0');
            tickMark.setAttribute('y1', '0');
            tickMark.setAttribute('x2', '' + (-this._tickMarkLength));
            tickMark.setAttribute('y2', '0');
        }
        _super.prototype.renderTickMark.call(this, tickMark, tick);
    };
    LeftAxis.prototype.renderTickLabel = function (tickLabel, tick) {
        var x = -(this._tickMarkLength + this._tickLabelPadding);
        if (tickLabel.tagName === 'g') {
            var transform = Transform.translateX(x);
            tickLabel.setAttribute('transform', transform.toAttributeString());
        }
        else if (tickLabel.tagName === 'text') {
            tickLabel.setAttribute('x', '' + x);
            tickLabel.setAttribute('text-anchor', 'end');
            tickLabel.setAttribute('dominant-baseline', 'central');
        }
        _super.prototype.renderTickLabel.call(this, tickLabel, tick);
    };
    return LeftAxis;
}(Axis));

var ERROR_10 = Math.sqrt(50);
var ERROR_5 = Math.sqrt(10);
var ERROR_2 = Math.sqrt(2);
var SECOND$2 = 1000;
var MINUTE$2 = 60 * SECOND$2;
var HOUR$2 = 60 * MINUTE$2;
var DAY$1 = 24 * HOUR$2;
var WEEK$1 = 7 * DAY$1;
var MONTH = 30 * DAY$1;
var YEAR = 365 * DAY$1;
var TIME_TICK_INTERVALS = new BTree()
    .set(SECOND$2, TimeInterval.seconds())
    .set(5 * SECOND$2, TimeInterval.seconds(5))
    .set(15 * SECOND$2, TimeInterval.seconds(15))
    .set(30 * SECOND$2, TimeInterval.seconds(30))
    .set(MINUTE$2, TimeInterval.minutes(1))
    .set(5 * MINUTE$2, TimeInterval.minutes(5))
    .set(15 * MINUTE$2, TimeInterval.minutes(15))
    .set(30 * MINUTE$2, TimeInterval.minutes(30))
    .set(HOUR$2, TimeInterval.hours())
    .set(3 * HOUR$2, TimeInterval.hours(3))
    .set(6 * HOUR$2, TimeInterval.hours(6))
    .set(12 * HOUR$2, TimeInterval.hours(12))
    .set(DAY$1, TimeInterval.days())
    .set(2 * DAY$1, TimeInterval.days(2))
    .set(WEEK$1, TimeInterval.weeks())
    .set(MONTH, TimeInterval.months())
    .set(3 * MONTH, TimeInterval.months(3))
    .set(YEAR, TimeInterval.years());
var MILLISECOND_FORMAT = DateTimeFormat.pattern('.%L');
var SECOND_FORMAT = DateTimeFormat.pattern(':%S');
var MINUTE_FORMAT = DateTimeFormat.pattern('%I:%M');
var HOUR_FORMAT = DateTimeFormat.pattern('%I %p');
var WEEKDAY_FORMAT = DateTimeFormat.pattern('%a %d');
var MONTHDAY_FORMAT = DateTimeFormat.pattern('%b %d');
var MONTH_FORMAT = DateTimeFormat.pattern('%B');
var YEAR_FORMAT = DateTimeFormat.pattern('%Y');
var TickGenerator = (function () {
    function TickGenerator() {
    }
    TickGenerator.prototype.format = function (tickValue) {
        return '' + tickValue;
    };
    TickGenerator.prototype.createElement = function (tickValue) {
        var tick = document.createElementNS('http://www.w3.org/2000/svg', 'g');
        tick.setAttribute('class', 'tick');
        tick.tickValue = tickValue;
        var tickMark = document.createElementNS('http://www.w3.org/2000/svg', 'line');
        tickMark.setAttribute('slot', 'tick-mark');
        tickMark.setAttribute('class', 'tick-mark');
        tick.appendChild(tickMark);
        var tickLabel = document.createElementNS('http://www.w3.org/2000/svg', 'text');
        tickLabel.setAttribute('slot', 'tick-label');
        tickLabel.setAttribute('class', 'tick-label');
        tickLabel.textContent = this.format(tickValue);
        tick.appendChild(tickLabel);
        return tick;
    };
    TickGenerator.scale = function (fx, n) {
        if (n === undefined) {
            n = 10;
        }
        if (fx instanceof TimeScale) {
            var domain = fx.domain();
            return new TimeTickGenerator(domain[0], domain[1], n);
        }
        else {
            var domain = fx.domain();
            return new NumberTickGenerator(domain[0], domain[1], n);
        }
    };
    TickGenerator.step = function (dx, n) {
        var step0 = Math.abs(dx) / n;
        var step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10));
        var error = step0 / step1;
        if (error >= ERROR_10) {
            step1 *= 10;
        }
        else if (error >= ERROR_5) {
            step1 *= 5;
        }
        else if (error >= ERROR_2) {
            step1 *= 2;
        }
        return dx < 0 ? -step1 : step1;
    };
    return TickGenerator;
}());
var NumberTickGenerator = (function (_super) {
    __extends(NumberTickGenerator, _super);
    function NumberTickGenerator(x0, x1, n) {
        var _this = _super.call(this) || this;
        _this.x0 = x0;
        _this.dx = x1 - _this.x0;
        _this.n = Math.max(0, n);
        return _this;
    }
    NumberTickGenerator.prototype.count = function (n) {
        if (n === undefined) {
            return this.n;
        }
        else {
            this.n = Math.max(0, n);
            return this;
        }
    };
    NumberTickGenerator.prototype.domain = function (x0, x1) {
        if (x0 === undefined) {
            return [this.x0, this.x0 + this.dx];
        }
        else if (x1 === undefined) {
            x0 = x0;
            this.x0 = x0[0];
            this.dx = x0[1] - this.x0;
            return this;
        }
        else {
            this.x0 = x0;
            this.dx = x1 - this.x0;
            return this;
        }
    };
    NumberTickGenerator.prototype.generate = function () {
        var x0;
        var x1;
        if (this.dx < 0) {
            x1 = this.x0;
            x0 = x1 + this.dx;
        }
        else {
            x0 = this.x0;
            x1 = x0 + this.dx;
        }
        var step = NumberTickGenerator.interval(x1 - x0, this.n);
        if (step === 0 || !isFinite(step)) {
            return [];
        }
        var ticks;
        if (step > 0) {
            x0 = Math.ceil(x0 / step);
            x1 = Math.floor(x1 / step);
            var n = Math.ceil(x1 - x0 + 1);
            ticks = new Array(n);
            for (var i = 0; i < n; i += 1) {
                ticks[i] = (x0 + i) * step;
            }
        }
        else {
            x0 = Math.floor(x0 * step);
            x1 = Math.ceil(x1 * step);
            var n = Math.ceil(x0 - x1 + 1);
            ticks = new Array(n);
            for (var i = 0; i < n; i += 1) {
                ticks[i] = (x0 - i) / step;
            }
        }
        if (this.dx < 0) {
            ticks.reverse();
        }
        return ticks;
    };
    NumberTickGenerator.interval = function (dx, n) {
        if (n === void 0) { n = 10; }
        var step = dx / n;
        var power = Math.floor(Math.log(step) / Math.LN10);
        var power10 = Math.pow(10, power);
        var error = step / power10;
        var base = error >= ERROR_10 ? 10 : error >= ERROR_5 ? 5 : error >= ERROR_2 ? 2 : 1;
        return power >= 0 ? power10 * base : -Math.pow(10, -power) / base;
    };
    return NumberTickGenerator;
}(TickGenerator));
var TimeTickGenerator = (function (_super) {
    __extends(TimeTickGenerator, _super);
    function TimeTickGenerator(d0, d1, n, zone) {
        var _this = _super.call(this) || this;
        d0 = DateTime.fromAny(d0);
        d1 = DateTime.fromAny(d1);
        _this.t0 = d0.time();
        _this.dt = d1.time() - _this.t0;
        _this.zone = zone || d0.zone();
        _this.n = Math.max(0, n);
        return _this;
    }
    TimeTickGenerator.prototype.count = function (n) {
        if (n === undefined) {
            return this.n;
        }
        else {
            this.n = Math.max(0, n);
            return this;
        }
    };
    TimeTickGenerator.prototype.domain = function (d0, d1) {
        if (d0 === undefined) {
            return [new DateTime(this.t0, this.zone), new DateTime(this.t0 + this.dt, this.zone)];
        }
        else {
            if (d1 === undefined) {
                d0 = d0;
                d1 = d0[1];
                d0 = d0[0];
            }
            else {
                d0 = d0;
            }
            d0 = DateTime.fromAny(d0);
            d1 = DateTime.fromAny(d1);
            this.t0 = d0.time();
            this.dt = d1.time() - this.t0;
            return this;
        }
    };
    TimeTickGenerator.prototype.generate = function (interval) {
        var t0;
        var t1;
        if (this.dt < 0) {
            t1 = this.t0;
            t0 = t1 + this.dt;
        }
        else {
            t0 = this.t0;
            t1 = t0 + this.dt;
        }
        if (interval === undefined) {
            interval = this.n;
        }
        interval = TimeTickGenerator.interval(t1 - t0, interval);
        var ticks = interval.range(new DateTime(t0, this.zone), new DateTime(t1 + 1, this.zone));
        if (this.dt < 0) {
            ticks.reverse();
        }
        return ticks;
    };
    TimeTickGenerator.prototype.format = function (tickValue) {
        if (TimeInterval.seconds().floor(tickValue) < tickValue) {
            return MILLISECOND_FORMAT.format(tickValue);
        }
        else if (TimeInterval.minutes().floor(tickValue) < tickValue) {
            return SECOND_FORMAT.format(tickValue);
        }
        else if (TimeInterval.hours().floor(tickValue) < tickValue) {
            return MINUTE_FORMAT.format(tickValue);
        }
        else if (TimeInterval.days().floor(tickValue) < tickValue) {
            return HOUR_FORMAT.format(tickValue);
        }
        else if (TimeInterval.months().floor(tickValue) < tickValue) {
            if (TimeInterval.weeks().floor(tickValue) < tickValue) {
                return WEEKDAY_FORMAT.format(tickValue);
            }
            else {
                return MONTHDAY_FORMAT.format(tickValue);
            }
        }
        else if (TimeInterval.years().floor(tickValue) < tickValue) {
            return MONTH_FORMAT.format(tickValue);
        }
        else {
            return YEAR_FORMAT.format(tickValue);
        }
    };
    TimeTickGenerator.interval = function (dt, interval) {
        if (interval === void 0) { interval = 10; }
        if (typeof interval === 'number') {
            var t = Math.abs(dt) / interval;
            var duration = TIME_TICK_INTERVALS.nextKey(t);
            if (duration === undefined) {
                var k = TickGenerator.step(dt / YEAR, interval);
                interval = TimeInterval.years(k);
            }
            else if (duration > SECOND$2) {
                if (t / TIME_TICK_INTERVALS.previousKey(t) < duration / t) {
                    interval = TIME_TICK_INTERVALS.previousValue(t);
                }
                else {
                    interval = TIME_TICK_INTERVALS.nextValue(t);
                }
            }
            else {
                var k = Math.max(1, TickGenerator.step(dt, interval));
                interval = TimeInterval.milliseconds(k);
            }
        }
        return interval;
    };
    return TimeTickGenerator;
}(TickGenerator));

var AxisAnimator = (function (_super) {
    __extends(AxisAnimator, _super);
    function AxisAnimator(axis, tickGenerator, tickSpacing, tickTransition) {
        var _this = _super.call(this) || this;
        _this.axis = axis;
        _this.tickGenerator = tickGenerator;
        _this.tickSpacing = tickSpacing;
        _this.tickTransition = tickTransition;
        _this.scale = undefined;
        _this.domain = undefined;
        _this.range = undefined;
        _this.domainColor = undefined;
        _this.domainWidth = undefined;
        _this.domainSerif = undefined;
        _this.tickMarkColor = undefined;
        _this.tickMarkWidth = undefined;
        _this.tickMarkLength = undefined;
        _this.tickLabelColor = undefined;
        _this.tickLabelPadding = undefined;
        _this.dirtyScale = false;
        _this.ticks = new BTree();
        return _this;
    }
    AxisAnimator.prototype.onFrame = function (t) {
        if (this.scale) {
            this.scale.onFrame(t);
        }
        if (this.domain) {
            this.domain.onFrame(t);
        }
        if (this.range) {
            this.range.onFrame(t);
        }
        if (this.domainColor) {
            this.domainColor.onFrame(t);
        }
        if (this.domainWidth) {
            this.domainWidth.onFrame(t);
        }
        if (this.domainSerif) {
            this.domainSerif.onFrame(t);
        }
        if (this.tickMarkColor) {
            this.tickMarkColor.onFrame(t);
        }
        if (this.tickMarkWidth) {
            this.tickMarkWidth.onFrame(t);
        }
        if (this.tickMarkLength) {
            this.tickMarkLength.onFrame(t);
        }
        if (this.tickLabelColor) {
            this.tickLabelColor.onFrame(t);
        }
        if (this.tickLabelPadding) {
            this.tickLabelPadding.onFrame(t);
        }
        if (this.dirtyScale) {
            this.updateTicks();
        }
        this.update();
        this.ticks.forEach(function (tickValue, tick) {
            tick.onFrame(t);
        }, this);
    };
    AxisAnimator.prototype.updateTicks = function () {
        this.dirtyScale = false;
        var scale = this.axis.scale();
        if (this.tickSpacing) {
            var range = scale.range();
            var dy = Math.abs(range[1] - range[0]);
            var n = Math.max(1, Math.floor(dy / this.tickSpacing));
            this.tickGenerator.count(n);
        }
        this.tickGenerator.domain(scale.domain());
        var oldTicks = this.ticks.clone();
        var newTickValues = this.tickGenerator.generate();
        var i = 0;
        outer: while (i < newTickValues.length) {
            var newTickValue = newTickValues[i];
            var oldTickValue = oldTicks.firstKey();
            while (oldTickValue !== undefined) {
                if (+newTickValue === +oldTickValue) {
                    var oldTick = oldTicks.get(oldTickValue);
                    oldTicks.delete(oldTickValue);
                    oldTick.fadeIn(this.tickTransition);
                    newTickValues.splice(i, 1);
                    continue outer;
                }
                oldTickValue = oldTicks.nextKey(oldTickValue);
            }
            var newTick = this.insertTick(newTickValue);
            if (newTick) {
                newTick.fadeIn(this.tickTransition);
            }
            i += 1;
        }
        oldTicks.forEach(function (tickValue, oldTick) {
            oldTick.fadeOut(this.tickTransition);
        }, this);
    };
    AxisAnimator.prototype.insertTick = function (newTickValue) {
        var newTick = this.tickGenerator.createElement(newTickValue);
        if (newTick) {
            newTick.style.setProperty('opacity', '0');
            var newTickAnimator = new TickAnimator(this, newTick, newTickValue);
            this.axis.insertTick(newTick);
            this.ticks.set(newTickValue, newTickAnimator);
            return newTickAnimator;
        }
        else {
            return null;
        }
    };
    AxisAnimator.prototype.removeTick = function (oldTick) {
        this.axis.removeTick(oldTick.node);
        this.ticks.delete(oldTick.tickValue);
    };
    AxisAnimator.prototype.update = function () {
        this.axis.render();
    };
    return AxisAnimator;
}(FrameAnimator));
var AxisScaleAnimator = (function (_super) {
    __extends(AxisScaleAnimator, _super);
    function AxisScaleAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    AxisScaleAnimator.prototype.update = function (value) {
        this.parent.axis.scale(value);
        this.parent.dirtyScale = true;
    };
    AxisScaleAnimator.get = function (self) {
        return self.axis.scale();
    };
    AxisScaleAnimator.set = function (self, value) {
        if (value === null) {
            self.axisAnimator.scale = undefined;
        }
        else {
            self.axis.scale(value);
            self.axisAnimator.updateTicks();
            self.axisAnimator.update();
            self.axisAnimator.animate();
        }
    };
    AxisScaleAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.axisAnimator.scale) {
            self.axisAnimator.scale = new AxisScaleAnimator(self.axisAnimator, value, trans);
        }
        return self.axisAnimator.scale;
    };
    return AxisScaleAnimator;
}(ChildFrameAnimator));
var AxisDomainAnimator = (function (_super) {
    __extends(AxisDomainAnimator, _super);
    function AxisDomainAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    AxisDomainAnimator.prototype.update = function (value) {
        this.parent.axis.domain(value.domain());
        this.parent.dirtyScale = true;
    };
    AxisDomainAnimator.get = function (self) {
        return self.axis.scale();
    };
    AxisDomainAnimator.set = function (self, value) {
        if (value === null) {
            self.axisAnimator.domain = undefined;
        }
        else {
            self.axis.scale(value);
            self.axisAnimator.updateTicks();
            self.axisAnimator.update();
            self.axisAnimator.animate();
        }
    };
    AxisDomainAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.axisAnimator.domain) {
            self.axisAnimator.domain = new AxisDomainAnimator(self.axisAnimator, value, trans);
        }
        return self.axisAnimator.domain;
    };
    return AxisDomainAnimator;
}(ChildFrameAnimator));
var AxisRangeAnimator = (function (_super) {
    __extends(AxisRangeAnimator, _super);
    function AxisRangeAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    AxisRangeAnimator.prototype.update = function (value) {
        this.parent.axis.range(value.range());
        this.parent.dirtyScale = true;
    };
    AxisRangeAnimator.get = function (self) {
        return self.axis.scale();
    };
    AxisRangeAnimator.set = function (self, value) {
        if (value === null) {
            self.axisAnimator.range = undefined;
        }
        else {
            self.axis.scale(value);
            self.axisAnimator.updateTicks();
            self.axisAnimator.update();
            self.axisAnimator.animate();
        }
    };
    AxisRangeAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.axisAnimator.range) {
            self.axisAnimator.range = new AxisRangeAnimator(self.axisAnimator, value, trans);
        }
        return self.axisAnimator.range;
    };
    return AxisRangeAnimator;
}(ChildFrameAnimator));
var AxisDomainColorAnimator = (function (_super) {
    __extends(AxisDomainColorAnimator, _super);
    function AxisDomainColorAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    AxisDomainColorAnimator.prototype.update = function (value) {
        this.parent.axis.domainColor(value);
    };
    AxisDomainColorAnimator.get = function (self) {
        return self.axis.domainColor();
    };
    AxisDomainColorAnimator.set = function (self, value) {
        if (value === null) {
            self.axisAnimator.domainColor = undefined;
        }
        else {
            self.axis.domainColor(value);
        }
    };
    AxisDomainColorAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.axisAnimator.domainColor) {
            self.axisAnimator.domainColor = new AxisDomainColorAnimator(self.axisAnimator, value, trans);
        }
        return self.axisAnimator.domainColor;
    };
    return AxisDomainColorAnimator;
}(ChildFrameAnimator));
var AxisDomainWidthAnimator = (function (_super) {
    __extends(AxisDomainWidthAnimator, _super);
    function AxisDomainWidthAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    AxisDomainWidthAnimator.prototype.update = function (value) {
        this.parent.axis.domainWidth(value);
    };
    AxisDomainWidthAnimator.get = function (self) {
        return self.axis.domainWidth();
    };
    AxisDomainWidthAnimator.set = function (self, value) {
        if (value === null) {
            self.axisAnimator.domainWidth = undefined;
        }
        else {
            self.axis.domainWidth(value);
        }
    };
    AxisDomainWidthAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.axisAnimator.domainWidth) {
            self.axisAnimator.domainWidth = new AxisDomainWidthAnimator(self.axisAnimator, value, trans);
        }
        return self.axisAnimator.domainWidth;
    };
    return AxisDomainWidthAnimator;
}(ChildFrameAnimator));
var AxisDomainSerifAnimator = (function (_super) {
    __extends(AxisDomainSerifAnimator, _super);
    function AxisDomainSerifAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    AxisDomainSerifAnimator.prototype.update = function (value) {
        this.parent.axis.domainSerif(value);
    };
    AxisDomainSerifAnimator.get = function (self) {
        return self.axis.domainSerif();
    };
    AxisDomainSerifAnimator.set = function (self, value) {
        if (value === null) {
            self.axisAnimator.domainSerif = undefined;
        }
        else {
            self.axis.domainSerif(value);
        }
    };
    AxisDomainSerifAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.axisAnimator.domainSerif) {
            self.axisAnimator.domainSerif = new AxisDomainSerifAnimator(self.axisAnimator, value, trans);
        }
        return self.axisAnimator.domainSerif;
    };
    return AxisDomainSerifAnimator;
}(ChildFrameAnimator));
var AxisTickMarkColorAnimator = (function (_super) {
    __extends(AxisTickMarkColorAnimator, _super);
    function AxisTickMarkColorAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    AxisTickMarkColorAnimator.prototype.update = function (value) {
        this.parent.axis.tickMarkColor(value);
    };
    AxisTickMarkColorAnimator.get = function (self) {
        return self.axis.tickMarkColor();
    };
    AxisTickMarkColorAnimator.set = function (self, value) {
        if (value === null) {
            self.axisAnimator.tickMarkColor = undefined;
        }
        else {
            self.axis.tickMarkColor(value);
        }
    };
    AxisTickMarkColorAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.axisAnimator.tickMarkColor) {
            self.axisAnimator.tickMarkColor = new AxisTickMarkColorAnimator(self.axisAnimator, value, trans);
        }
        return self.axisAnimator.tickMarkColor;
    };
    return AxisTickMarkColorAnimator;
}(ChildFrameAnimator));
var AxisTickMarkWidthAnimator = (function (_super) {
    __extends(AxisTickMarkWidthAnimator, _super);
    function AxisTickMarkWidthAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    AxisTickMarkWidthAnimator.prototype.update = function (value) {
        this.parent.axis.tickMarkWidth(value);
    };
    AxisTickMarkWidthAnimator.get = function (self) {
        return self.axis.tickMarkWidth();
    };
    AxisTickMarkWidthAnimator.set = function (self, value) {
        if (value === null) {
            self.axisAnimator.tickMarkWidth = undefined;
        }
        else {
            self.axis.tickMarkWidth(value);
        }
    };
    AxisTickMarkWidthAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.axisAnimator.tickMarkWidth) {
            self.axisAnimator.tickMarkWidth = new AxisTickMarkWidthAnimator(self.axisAnimator, value, trans);
        }
        return self.axisAnimator.tickMarkWidth;
    };
    return AxisTickMarkWidthAnimator;
}(ChildFrameAnimator));
var AxisTickMarkLengthAnimator = (function (_super) {
    __extends(AxisTickMarkLengthAnimator, _super);
    function AxisTickMarkLengthAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    AxisTickMarkLengthAnimator.prototype.update = function (value) {
        this.parent.axis.tickMarkLength(value);
    };
    AxisTickMarkLengthAnimator.get = function (self) {
        return self.axis.tickMarkLength();
    };
    AxisTickMarkLengthAnimator.set = function (self, value) {
        if (value === null) {
            self.axisAnimator.tickMarkLength = undefined;
        }
        else {
            self.axis.tickMarkLength(value);
        }
    };
    AxisTickMarkLengthAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.axisAnimator.tickMarkLength) {
            self.axisAnimator.tickMarkLength = new AxisTickMarkLengthAnimator(self.axisAnimator, value, trans);
        }
        return self.axisAnimator.tickMarkLength;
    };
    return AxisTickMarkLengthAnimator;
}(ChildFrameAnimator));
var AxisTickLabelColorAnimator = (function (_super) {
    __extends(AxisTickLabelColorAnimator, _super);
    function AxisTickLabelColorAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    AxisTickLabelColorAnimator.prototype.update = function (value) {
        this.parent.axis.tickLabelColor(value);
    };
    AxisTickLabelColorAnimator.get = function (self) {
        return self.axis.tickLabelColor();
    };
    AxisTickLabelColorAnimator.set = function (self, value) {
        if (value === null) {
            self.axisAnimator.tickLabelColor = undefined;
        }
        else {
            self.axis.tickLabelColor(value);
        }
    };
    AxisTickLabelColorAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.axisAnimator.tickLabelColor) {
            self.axisAnimator.tickLabelColor = new AxisTickLabelColorAnimator(self.axisAnimator, value, trans);
        }
        return self.axisAnimator.tickLabelColor;
    };
    return AxisTickLabelColorAnimator;
}(ChildFrameAnimator));
var AxisTickLabelPaddingAnimator = (function (_super) {
    __extends(AxisTickLabelPaddingAnimator, _super);
    function AxisTickLabelPaddingAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    AxisTickLabelPaddingAnimator.prototype.update = function (value) {
        this.parent.axis.tickLabelPadding(value);
    };
    AxisTickLabelPaddingAnimator.get = function (self) {
        return self.axis.tickLabelPadding();
    };
    AxisTickLabelPaddingAnimator.set = function (self, value) {
        if (value === null) {
            self.axisAnimator.tickLabelPadding = undefined;
        }
        else {
            self.axis.tickLabelPadding(value);
        }
    };
    AxisTickLabelPaddingAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.axisAnimator.tickLabelPadding) {
            self.axisAnimator.tickLabelPadding = new AxisTickLabelPaddingAnimator(self.axisAnimator, value, trans);
        }
        return self.axisAnimator.tickLabelPadding;
    };
    return AxisTickLabelPaddingAnimator;
}(ChildFrameAnimator));
var TickState;
(function (TickState) {
    TickState[TickState["Excluded"] = 0] = "Excluded";
    TickState[TickState["Entering"] = 1] = "Entering";
    TickState[TickState["Included"] = 2] = "Included";
    TickState[TickState["Leaving"] = 3] = "Leaving";
})(TickState || (TickState = {}));
var TickAnimator = (function (_super) {
    __extends(TickAnimator, _super);
    function TickAnimator(parent, node, tickValue) {
        var _this = _super.call(this, parent) || this;
        _this.node = node;
        _this.tickValue = tickValue;
        _this.tickState = 0;
        _this.opacity = null;
        _this.coord0 = NaN;
        return _this;
    }
    TickAnimator.prototype.onFrame = function (t) {
        if (this.opacity) {
            this.opacity.onFrame(t);
        }
    };
    TickAnimator.prototype.remove = function () {
        this.parent.removeTick(this);
    };
    TickAnimator.prototype.fadeIn = function (trans) {
        if (this.tickState === 0 || this.tickState === 3) {
            this.coord0 = NaN;
            var animator = this.opacity;
            if (!animator) {
                if (!trans.f) {
                    trans = trans.range(0);
                }
                animator = new TickOpacityAnimator(this, 0, trans);
                this.opacity = animator;
            }
            this.tickState = 1;
            animator.set(1, trans);
        }
    };
    TickAnimator.prototype.fadeOut = function (trans) {
        if (this.tickState === 1 || this.tickState === 2) {
            this.coord0 = NaN;
            var animator = this.opacity;
            if (!animator) {
                if (!trans.f) {
                    trans = trans.range(1);
                }
                animator = new TickOpacityAnimator(this, 1, trans);
                this.opacity = animator;
            }
            this.tickState = 3;
            animator.set(0, trans);
        }
    };
    return TickAnimator;
}(ChildAnimator));
var TickOpacityAnimator = (function (_super) {
    __extends(TickOpacityAnimator, _super);
    function TickOpacityAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    TickOpacityAnimator.prototype.map = function (u) {
        var coord = +this.parent.node.tickCoord;
        if (isNaN(this.parent.coord0)) {
            this.parent.coord0 = coord;
        }
        var tickSpacing = this.parent.parent.tickSpacing / 2;
        var v = Math.min(Math.abs(coord - this.parent.coord0) / tickSpacing, 1) || 0;
        return this.f.map(Math.max(u, v));
    };
    TickOpacityAnimator.prototype.update = function (value) {
        this.parent.node.style.setProperty('opacity', '' + value);
    };
    TickOpacityAnimator.prototype.onEnd = function (value) {
        this.parent.coord0 = NaN;
        if (value === 0) {
            this.parent.tickState = 0;
            this.parent.remove();
        }
        else if (value === 1) {
            this.parent.tickState = 2;
        }
    };
    return TickOpacityAnimator;
}(ChildFrameAnimator));
var AxisView = (function (_super) {
    __extends(AxisView, _super);
    function AxisView(axis, tickGenerator, tickSpacing, tickTransition) {
        if (tickGenerator === void 0) { tickGenerator = TickGenerator.scale(axis.scale()); }
        if (tickSpacing === void 0) { tickSpacing = axis.orientation === 'left' || axis.orientation === 'right' ? 40 : 80; }
        if (tickTransition === void 0) { tickTransition = new Transition(200, 'linear'); }
        var _this = _super.call(this, axis.node) || this;
        _this.axis = axis;
        _this._tickGenerator = tickGenerator;
        _this._tickSpacing = tickSpacing;
        _this._tickTransition = tickTransition;
        _this.axisAnimator = new AxisAnimator(_this.axis, _this._tickGenerator, _this._tickSpacing, _this._tickTransition);
        return _this;
    }
    Object.defineProperty(AxisView.prototype, "orientation", {
        get: function () {
            return this.axis.orientation;
        },
        enumerable: true,
        configurable: true
    });
    AxisView.prototype.frame = function (frame) {
        if (frame === undefined) {
            return this.axis.frame();
        }
        else {
            this.axis.frame(frame);
            return this;
        }
    };
    AxisView.prototype.scale = function (value, trans) {
        if (value !== undefined) {
            value = Axis.scale(value);
        }
        return this.property(AxisScaleAnimator, value, trans);
    };
    AxisView.prototype.domain = function (x0, x1, trans) {
        var value = this.axis.scale();
        if (typeof x0 === 'string') {
            value = value.domain(Axis.scale(x0).domain());
        }
        else if (x0 !== undefined) {
            value = value.domain(x0, x1);
        }
        var result = this.property(AxisDomainAnimator, value, trans);
        if (result instanceof ContinuousScale) {
            result = result.domain();
        }
        return result;
    };
    AxisView.prototype.range = function (y0, y1, trans) {
        var value = this.axis.scale();
        if (typeof y0 === 'string') {
            value = value.range(Axis.scale(y0).range());
        }
        else if (y0 !== undefined) {
            value = value.range(y0, y1);
        }
        var result = this.property(AxisRangeAnimator, value, trans);
        if (result instanceof ContinuousScale) {
            result = result.range();
        }
        return result;
    };
    AxisView.prototype.transformFrame = function () {
        return this.axis.transformFrame();
    };
    AxisView.prototype.domainColor = function (value, trans) {
        return this.propertyColor(AxisDomainColorAnimator, value, trans);
    };
    AxisView.prototype.domainWidth = function (value, trans) {
        return this.propertyNumber(AxisDomainWidthAnimator, value, trans);
    };
    AxisView.prototype.domainSerif = function (value, trans) {
        return this.propertyNumber(AxisDomainSerifAnimator, value, trans);
    };
    AxisView.prototype.tickGenerator = function (tickGenerator) {
        if (tickGenerator === undefined) {
            return this._tickGenerator;
        }
        else {
            this._tickGenerator = tickGenerator;
            this.axisAnimator.tickGenerator = tickGenerator;
            this.axisAnimator.animate();
            return this;
        }
    };
    AxisView.prototype.tickSpacing = function (tickSpacing) {
        if (tickSpacing === undefined) {
            return this._tickSpacing;
        }
        else {
            this._tickSpacing = tickSpacing;
            this.axisAnimator.tickSpacing = tickSpacing;
            this.axisAnimator.animate();
            return this;
        }
    };
    AxisView.prototype.tickTransition = function (tickTransition) {
        if (tickTransition === undefined) {
            return this._tickTransition;
        }
        else {
            this._tickTransition = tickTransition;
            this.axisAnimator.tickTransition = tickTransition;
            return this;
        }
    };
    AxisView.prototype.tickMarkColor = function (value, trans) {
        return this.propertyColor(AxisTickMarkColorAnimator, value, trans);
    };
    AxisView.prototype.tickMarkWidth = function (value, trans) {
        return this.propertyNumber(AxisTickMarkWidthAnimator, value, trans);
    };
    AxisView.prototype.tickMarkLength = function (value, trans) {
        return this.propertyNumber(AxisTickMarkLengthAnimator, value, trans);
    };
    AxisView.prototype.tickLabelColor = function (value, trans) {
        return this.propertyColor(AxisTickLabelColorAnimator, value, trans);
    };
    AxisView.prototype.tickLabelPadding = function (value, trans) {
        return this.propertyNumber(AxisTickLabelPaddingAnimator, value, trans);
    };
    AxisView.prototype.render = function () {
        this.axisAnimator.updateTicks();
        this.axisAnimator.update();
    };
    AxisView.prototype.didReview = function (viewable) {
        _super.prototype.didReview.call(this, viewable);
        this.axisAnimator.enabled(viewable);
    };
    AxisView.prototype.didSetState = function (newState, oldState) {
        _super.prototype.didSetState.call(this, newState, oldState);
        var trans = newState.get('transition').cast(Transition.Form);
        var hidden = newState.get('hidden').booleanValue();
        if (hidden) {
            this.node.setAttribute('visibility', 'hidden');
        }
        else {
            this.node.removeAttribute('visibility');
        }
        var domainColor = newState.get('domainColor').cast(Color.Form);
        if (domainColor) {
            this.domainColor(domainColor, trans);
        }
        var domainWidth = newState.get('domainWidth').numberValue();
        if (domainWidth !== undefined) {
            this.domainWidth(domainWidth, trans);
        }
        var domainSerif = newState.get('domainSerif').numberValue();
        if (domainSerif !== undefined) {
            this.domainSerif(domainSerif, trans);
        }
        var tickSpacing = newState.get('tickSpacing').numberValue();
        if (tickSpacing !== undefined) {
            this.tickSpacing(tickSpacing);
        }
        var tickTransition = newState.get('tickTransition').cast(Transition.Form);
        if (tickTransition !== undefined) {
            this.tickTransition(tickTransition);
        }
        var tickMarkColor = newState.get('tickMarkColor').cast(Color.Form);
        if (tickMarkColor) {
            this.tickMarkColor(tickMarkColor, trans);
        }
        var tickMarkWidth = newState.get('tickMarkWidth').numberValue();
        if (tickMarkWidth !== undefined) {
            this.tickMarkWidth(tickMarkWidth, trans);
        }
        var tickMarkLength = newState.get('tickMarkLength').numberValue();
        if (tickMarkLength !== undefined) {
            this.tickMarkLength(tickMarkLength, trans);
        }
        var tickLabelColor = newState.get('tickLabelColor').cast(Color.Form);
        if (tickLabelColor) {
            this.tickLabelColor(tickLabelColor, trans);
        }
        var tickLabelPadding = newState.get('tickLabelPadding').numberValue();
        if (tickLabelPadding !== undefined) {
            this.tickLabelPadding(tickLabelPadding, trans);
        }
        var tickLabelWeight = newState.get('tickLabelWeight').numberValue();
        if (tickLabelWeight !== undefined) {
            this.node.setAttribute('font-weight', '' + tickLabelWeight);
        }
    };
    AxisView.prototype.addObserver = function (observer) {
        this.axis.addObserver(observer);
    };
    AxisView.prototype.removeObserver = function (observer) {
        this.axis.removeObserver(observer);
    };
    AxisView.top = function (scale, tickGenerator, tickSpacing, tickTransition) {
        var axis = Axis.top(scale);
        return new AxisView(axis, tickGenerator, tickSpacing, tickTransition);
    };
    AxisView.right = function (scale, tickGenerator, tickSpacing, tickTransition) {
        var axis = Axis.right(scale);
        return new AxisView(axis, tickGenerator, tickSpacing, tickTransition);
    };
    AxisView.bottom = function (scale, tickGenerator, tickSpacing, tickTransition) {
        var axis = Axis.bottom(scale);
        return new AxisView(axis, tickGenerator, tickSpacing, tickTransition);
    };
    AxisView.left = function (scale, tickGenerator, tickSpacing, tickTransition) {
        var axis = Axis.left(scale);
        return new AxisView(axis, tickGenerator, tickSpacing, tickTransition);
    };
    AxisView.applyTheme = function (theme) {
        var axis = Record.empty()
            .slot('domainColor', '#ececec')
            .slot('tickMarkColor', '#ececec')
            .slot('tickLabelColor', Selector.get('textColor'))
            .slot('tickLabelWeight', 300);
        theme.set('axis', axis);
    };
    return AxisView;
}(SvgView));
AxisView.applyTheme(AxisView.Theme);

var AxisModel = (function (_super) {
    __extends(AxisModel, _super);
    function AxisModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AxisModel.Params = SvgModel.Params.concat([
        new ModelParam('transition', Selector.get('transition').or(Selector.get('axis').get('transition'))),
        new ModelParam('hidden', Selector.get('hidden')),
        new ModelParam('domainColor', Selector.get('domainColor').or(Selector.get('axis').get('domainColor'))),
        new ModelParam('domainWidth', Selector.get('domainWidth').or(Selector.get('axis').get('domainWidth'))),
        new ModelParam('domainSerif', Selector.get('domainSerif').or(Selector.get('axis').get('domainSerif'))),
        new ModelParam('tickSpacing', Selector.get('tickSpacing').or(Selector.get('axis').get('tickSpacing'))),
        new ModelParam('tickTransition', Selector.get('tickTransition').or(Selector.get('axis').get('tickTransition'))),
        new ModelParam('tickMarkColor', Selector.get('tickMarkColor').or(Selector.get('axis').get('tickMarkColor'))),
        new ModelParam('tickMarkWidth', Selector.get('tickMarkWidth').or(Selector.get('axis').get('tickMarkWidth'))),
        new ModelParam('tickMarkLength', Selector.get('tickMarkLength').or(Selector.get('axis').get('tickMarkLength'))),
        new ModelParam('tickLabelColor', Selector.get('tickLabelColor').or(Selector.get('axis').get('tickLabelColor'))),
        new ModelParam('tickLabelPadding', Selector.get('tickLabelPadding').or(Selector.get('axis').get('tickLabelPadding'))),
        new ModelParam('tickLabelWeight', Selector.get('tickLabelWeight').or(Selector.get('axis').get('tickLabelWeight'))),
    ]);
    return AxisModel;
}(SvgModel));

var AxisForm = (function (_super) {
    __extends(AxisForm, _super);
    function AxisForm() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(AxisForm.prototype, "tag", {
        get: function () {
            return 'axis';
        },
        enumerable: true,
        configurable: true
    });
    AxisForm.prototype.castView = function (value, stack, factory) {
        return undefined;
    };
    AxisForm.prototype.castModel = function (value, stack, factory) {
        if (value.tag === this.tag) {
            var model = new AxisModel();
            var dataDef = this.materializeModel(model, value, stack, factory);
            model.setData(dataDef);
            return model;
        }
        return undefined;
    };
    AxisForm.prototype.materializeViewParam = function (view, param, stack, factory) {
        if (param.key instanceof Text$1) {
            var key = param.key.value;
            if (key === 'domain') {
                var xMin = param.toValue().getItem(0).cast(UiValue.Form);
                var xMax = param.toValue().getItem(1).cast(UiValue.Form);
                if (xMin !== undefined && xMax !== undefined) {
                    view.domain([xMin, xMax]);
                }
            }
        }
        return _super.prototype.materializeViewParam.call(this, view, param, stack, factory);
    };
    AxisForm.prototype.materializeModelParam = function (model, param, stack, factory) {
        if (param instanceof Attr && param.key.value === this.tag) {
            return Item.Absent;
        }
        return _super.prototype.materializeModelParam.call(this, model, param, stack, factory);
    };
    AxisForm.Form = new AxisForm();
    return AxisForm;
}(SvgForm));
UiForm.addGlobal(AxisForm.Form);

var PlotView = (function (_super) {
    __extends(PlotView, _super);
    function PlotView(plot) {
        var _this = _super.call(this, plot.node) || this;
        _this.plot = plot;
        _this._axisX = null;
        _this._axisY = null;
        _this.plot.addObserver(_this);
        return _this;
    }
    PlotView.prototype.getPoint = function (x) {
        return this.plot.getPoint(x);
    };
    PlotView.prototype.insertPoint = function (newPoint) {
        this.plot.insertPoint(newPoint);
    };
    PlotView.prototype.removePoint = function (x) {
        this.plot.removePoint(x);
    };
    PlotView.prototype.axisX = function (axisX) {
        if (axisX === undefined) {
            return this._axisX;
        }
        else {
            this._axisX = axisX;
            this.plot.axisX(axisX ? axisX.axis : null);
            return this;
        }
    };
    PlotView.prototype.scaleX = function (value, trans) {
        if (!this._axisX) {
            throw new Error();
        }
        if (value === undefined) {
            return this._axisX.scale();
        }
        else {
            this._axisX.scale(value, trans);
            return this;
        }
    };
    PlotView.prototype.domainX = function (x0, x1, trans) {
        if (!this._axisX) {
            throw new Error();
        }
        if (x0 === undefined) {
            return this._axisX.domain();
        }
        else {
            this._axisX.domain(x0, x1, trans);
            return this;
        }
    };
    PlotView.prototype.rangeX = function (r0, r1, trans) {
        if (!this._axisX) {
            throw new Error();
        }
        if (r0 === undefined) {
            return this._axisX.range();
        }
        else {
            this._axisX.range(r0, r1, trans);
            return this;
        }
    };
    PlotView.prototype.axisY = function (axisY) {
        if (axisY === undefined) {
            return this._axisY;
        }
        else {
            this._axisY = axisY;
            this.plot.axisY(axisY ? axisY.axis : null);
            return this;
        }
    };
    PlotView.prototype.scaleY = function (value, trans) {
        if (!this._axisY) {
            throw new Error();
        }
        if (value === undefined) {
            return this._axisY.scale();
        }
        else {
            this._axisY.scale(value, trans);
            return this;
        }
    };
    PlotView.prototype.domainY = function (y0, y1, trans) {
        if (!this._axisY) {
            throw new Error();
        }
        if (y0 === undefined) {
            return this._axisY.domain();
        }
        else {
            this._axisY.domain(y0, y1, trans);
            return this;
        }
    };
    PlotView.prototype.rangeY = function (r0, r1, trans) {
        if (!this._axisY) {
            throw new Error();
        }
        if (r0 === undefined) {
            return this._axisY.range();
        }
        else {
            this._axisY.range(r0, r1, trans);
            return this;
        }
    };
    PlotView.prototype.transformX = function (transformX) {
        if (transformX === undefined) {
            return this.plot.transformX();
        }
        else {
            this.plot.transformX(transformX);
            return this;
        }
    };
    PlotView.prototype.transformY = function (transformY) {
        if (transformY === undefined) {
            return this.plot.transformY();
        }
        else {
            this.plot.transformY(transformY);
            return this;
        }
    };
    PlotView.prototype.plotDidScaleX = function (scale, axis, plot) {
    };
    PlotView.prototype.plotDidScaleY = function (scale, axis, plot) {
    };
    PlotView.prototype.plotDidInsertPoint = function (point, plot) {
    };
    PlotView.prototype.plotDidRemovePoint = function (point, plot) {
    };
    PlotView.prototype.insertPlotPointViews = function () {
        for (var i = 0; i < this._childViews.length; i += 1) {
            var point = this._childViews[i];
            if (point instanceof PlotPointView && point.x !== undefined) {
                this.insertPoint(point);
            }
        }
    };
    PlotView.prototype.render = function () {
    };
    PlotView.prototype.addObserver = function (observer) {
        this.plot.addObserver(observer);
    };
    PlotView.prototype.removeObserver = function (observer) {
        this.plot.removeObserver(observer);
    };
    return PlotView;
}(SvgView));

var PlotPointAnimator = (function (_super) {
    __extends(PlotPointAnimator, _super);
    function PlotPointAnimator(parentView) {
        var _this = _super.call(this) || this;
        _this._parentView = parentView;
        _this.plotY = undefined;
        _this.plotDy = undefined;
        _this.plotR = undefined;
        _this.plotColor = undefined;
        _this.plotOpacity = undefined;
        return _this;
    }
    Object.defineProperty(PlotPointAnimator.prototype, "parentView", {
        get: function () {
            return this._parentView;
        },
        set: function (view) {
            this._parentView = view;
        },
        enumerable: true,
        configurable: true
    });
    PlotPointAnimator.prototype.onFrame = function (t) {
        if (this.plotY) {
            this.plotY.onFrame(t);
        }
        if (this.plotDy) {
            this.plotDy.onFrame(t);
        }
        if (this.plotR) {
            this.plotR.onFrame(t);
        }
        if (this.plotColor) {
            this.plotColor.onFrame(t);
        }
        if (this.plotOpacity) {
            this.plotOpacity.onFrame(t);
        }
        this.update();
    };
    PlotPointAnimator.prototype.update = function () {
        if (this._parentView) {
            this._parentView.render();
        }
    };
    return PlotPointAnimator;
}(FrameAnimator));
var PlotPointPlotYAnimator = (function (_super) {
    __extends(PlotPointPlotYAnimator, _super);
    function PlotPointPlotYAnimator(parent, value, transition, self) {
        var _this = _super.call(this, parent, value, transition) || this;
        _this.update(value);
        _this.self = self;
        return _this;
    }
    PlotPointPlotYAnimator.prototype.update = function (value) {
        if (this.self instanceof PlotPointView) {
            this.self.y = value;
            if (this.parent._parentView instanceof PlotView) {
                this.parent._parentView.plot._dirty = true;
            }
        }
    };
    PlotPointPlotYAnimator.get = function (self) {
        return self.y;
    };
    PlotPointPlotYAnimator.set = function (self, value) {
        if (value === null) {
            self.plotAnimator.plotY = undefined;
        }
        else {
            self.y = value;
            if (self.parentView instanceof PlotView) {
                self.parentView.plot._dirty = true;
                self.parentView.render();
            }
        }
    };
    PlotPointPlotYAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.plotAnimator.plotY) {
            self.plotAnimator.plotY = new PlotPointPlotYAnimator(self.plotAnimator, value, trans, self);
        }
        return self.plotAnimator.plotY;
    };
    return PlotPointPlotYAnimator;
}(ChildFrameAnimator));
var PlotPointPlotDyAnimator = (function (_super) {
    __extends(PlotPointPlotDyAnimator, _super);
    function PlotPointPlotDyAnimator(parent, value, transition, self) {
        var _this = _super.call(this, parent, value, transition) || this;
        _this.update(value);
        _this.self = self;
        return _this;
    }
    PlotPointPlotDyAnimator.prototype.update = function (value) {
        if (this.self instanceof PlotPointView) {
            this.self.dy = value;
            if (this.parent._parentView instanceof PlotView) {
                this.parent._parentView.plot._dirty = true;
            }
        }
    };
    PlotPointPlotDyAnimator.get = function (self) {
        return self.dy;
    };
    PlotPointPlotDyAnimator.set = function (self, value) {
        if (value === null) {
            self.plotAnimator.plotDy = undefined;
        }
        else {
            self.dy = value;
            if (self.parentView instanceof PlotView) {
                self.parentView.plot._dirty = true;
                self.parentView.render();
            }
        }
    };
    PlotPointPlotDyAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.plotAnimator.plotDy) {
            self.plotAnimator.plotDy = new PlotPointPlotDyAnimator(self.plotAnimator, value, trans, self);
        }
        return self.plotAnimator.plotDy;
    };
    return PlotPointPlotDyAnimator;
}(ChildFrameAnimator));
var PlotPointPlotRAnimator = (function (_super) {
    __extends(PlotPointPlotRAnimator, _super);
    function PlotPointPlotRAnimator(parent, value, transition, self) {
        var _this = _super.call(this, parent, value, transition) || this;
        _this.update(value);
        _this.self = self;
        return _this;
    }
    PlotPointPlotRAnimator.prototype.update = function (value) {
        if (this.self instanceof PlotPointView) {
            this.self.r = value;
            if (this.parent._parentView instanceof PlotView) {
                this.parent._parentView.plot._dirty = true;
            }
        }
    };
    PlotPointPlotRAnimator.get = function (self) {
        return self.r || 0;
    };
    PlotPointPlotRAnimator.set = function (self, value) {
        if (value === null) {
            self.plotAnimator.plotDy = undefined;
        }
        else {
            self.r = value;
            if (self.parentView instanceof PlotView) {
                self.parentView.plot._dirty = true;
                self.parentView.render();
            }
        }
    };
    PlotPointPlotRAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.plotAnimator.plotR) {
            self.plotAnimator.plotR = new PlotPointPlotRAnimator(self.plotAnimator, value, trans, self);
        }
        return self.plotAnimator.plotR;
    };
    return PlotPointPlotRAnimator;
}(ChildFrameAnimator));
var PlotPointPlotColorAnimator = (function (_super) {
    __extends(PlotPointPlotColorAnimator, _super);
    function PlotPointPlotColorAnimator(parent, value, transition, self) {
        var _this = _super.call(this, parent, value, transition) || this;
        _this.update(value);
        _this.self = self;
        return _this;
    }
    PlotPointPlotColorAnimator.prototype.update = function (value) {
        if (this.self instanceof PlotPointView) {
            this.self.color = value;
            if (this.parent._parentView instanceof PlotView) {
                this.parent._parentView.plot._dirty = true;
            }
        }
    };
    PlotPointPlotColorAnimator.get = function (self) {
        return self.color || Color.transparent();
    };
    PlotPointPlotColorAnimator.set = function (self, value) {
        if (value === null) {
            self.plotAnimator.plotY = undefined;
        }
        else {
            self.color = value;
            if (self.parentView instanceof PlotView) {
                self.parentView.plot._dirty = true;
                self.parentView.render();
            }
        }
    };
    PlotPointPlotColorAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.plotAnimator.plotColor) {
            self.plotAnimator.plotColor = new PlotPointPlotColorAnimator(self.plotAnimator, value, trans, self);
        }
        return self.plotAnimator.plotColor;
    };
    return PlotPointPlotColorAnimator;
}(ChildFrameAnimator));
var PlotPointPlotOpacityAnimator = (function (_super) {
    __extends(PlotPointPlotOpacityAnimator, _super);
    function PlotPointPlotOpacityAnimator(parent, value, transition, self) {
        var _this = _super.call(this, parent, value, transition) || this;
        _this.update(value);
        _this.self = self;
        return _this;
    }
    PlotPointPlotOpacityAnimator.prototype.update = function (value) {
        if (this.self instanceof PlotPointView) {
            this.self.opacity = value;
            if (this.parent._parentView instanceof PlotView) {
                this.parent._parentView.plot._dirty = true;
            }
        }
    };
    PlotPointPlotOpacityAnimator.get = function (self) {
        return self.opacity || 0;
    };
    PlotPointPlotOpacityAnimator.set = function (self, value) {
        if (value === null) {
            self.plotAnimator.plotY = undefined;
        }
        else {
            self.opacity = value;
            if (self.parentView instanceof PlotView) {
                self.parentView.plot._dirty = true;
                self.parentView.render();
            }
        }
    };
    PlotPointPlotOpacityAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.plotAnimator.plotOpacity) {
            self.plotAnimator.plotOpacity = new PlotPointPlotOpacityAnimator(self.plotAnimator, value, trans, self);
        }
        return self.plotAnimator.plotOpacity;
    };
    return PlotPointPlotOpacityAnimator;
}(ChildFrameAnimator));
var PlotPointView = (function (_super) {
    __extends(PlotPointView, _super);
    function PlotPointView() {
        var _this = _super.call(this) || this;
        _this.plotAnimator = new PlotPointAnimator();
        _this.y = 0;
        return _this;
    }
    PlotPointView.prototype.plotY = function (value, trans) {
        return this.propertyNumber(PlotPointPlotYAnimator, value, trans);
    };
    PlotPointView.prototype.plotDy = function (value, trans) {
        return this.propertyNumber(PlotPointPlotDyAnimator, value, trans);
    };
    PlotPointView.prototype.plotR = function (value, trans) {
        return this.propertyNumber(PlotPointPlotRAnimator, value, trans);
    };
    PlotPointView.prototype.plotColor = function (value, trans) {
        return this.propertyColor(PlotPointPlotColorAnimator, value, trans);
    };
    PlotPointView.prototype.plotOpacity = function (value, trans) {
        return this.propertyNumber(PlotPointPlotOpacityAnimator, value, trans);
    };
    PlotPointView.prototype.didSetState = function (newState, oldState) {
        _super.prototype.didSetState.call(this, newState, oldState);
        var trans = newState.get('transition').cast(Transition.Form);
        var x = newState.get('x').cast(UiValue.Form);
        if (x !== undefined) {
            this.x = x;
        }
        var y = newState.get('y').cast(UiValue.Form);
        if (y !== undefined) {
            this.plotY(y, trans);
        }
        var dy = newState.get('dy').cast(UiValue.Form);
        if (dy !== undefined) {
            this.plotDy(dy, trans);
        }
        var r = newState.get('r').numberValue();
        if (r !== undefined) {
            this.plotR(r, trans);
        }
        var color = newState.get('color').cast(Color.Form);
        if (color) {
            this.plotColor(color, trans);
        }
        var opacity = newState.get('opacity').numberValue();
        if (opacity !== undefined) {
            this.plotOpacity(opacity, trans);
        }
        var offsetX = newState.get('offsetX').numberValue();
        if (offsetX !== undefined) {
            this.offsetX = offsetX;
        }
        var offsetY = newState.get('offsetY').numberValue();
        if (offsetY !== undefined) {
            this.offsetY = offsetY;
        }
        var offsetDY = newState.get('offsetDY').numberValue();
        if (offsetDY !== undefined) {
            this.offsetDY = offsetDY;
        }
        if (this.parentView instanceof PlotView) {
            this.plotAnimator.parentView = this.parentView;
        }
    };
    return PlotPointView;
}(View));

var PlotPointModel = (function (_super) {
    __extends(PlotPointModel, _super);
    function PlotPointModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PlotPointModel.Params = Model.Params.concat([
        new ModelParam('transition', Selector.get('transition')),
        new ModelParam('x', Selector.get('x')),
        new ModelParam('y', Selector.get('y')),
        new ModelParam('dy', Selector.get('dy')),
        new ModelParam('r', Selector.get('r')),
        new ModelParam('color', Selector.get('color')),
        new ModelParam('opacity', Selector.get('opacity')),
        new ModelParam('offsetX', Selector.get('offsetX')),
        new ModelParam('offsetY', Selector.get('offsetY')),
        new ModelParam('offsetDY', Selector.get('offsetDY')),
    ]);
    return PlotPointModel;
}(Model));

var PlotPointForm = (function (_super) {
    __extends(PlotPointForm, _super);
    function PlotPointForm() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(PlotPointForm.prototype, "tag", {
        get: function () {
            return 'plotPoint';
        },
        enumerable: true,
        configurable: true
    });
    PlotPointForm.prototype.castView = function (value, stack, factory) {
        if (value.tag === this.tag) {
            var view = new PlotPointView();
            var modelDef = this.materializeView(view, value, stack, factory);
            view.setModel(modelDef);
            return view;
        }
        return undefined;
    };
    PlotPointForm.prototype.castModel = function (value, stack, factory) {
        if (value.tag === this.tag) {
            var model = new PlotPointModel();
            var dataDef = this.materializeModel(model, value, stack, factory);
            model.setData(dataDef);
            return model;
        }
        return undefined;
    };
    PlotPointForm.prototype.materializeViewParam = function (view, param, stack, factory) {
        return _super.prototype.materializeViewParam.call(this, view, param, stack, factory);
    };
    PlotPointForm.prototype.materializeModelParam = function (model, param, stack, factory) {
        if (param instanceof Attr && param.key.value === this.tag) {
            return Item.Absent;
        }
        return _super.prototype.materializeModelParam.call(this, model, param, stack, factory);
    };
    PlotPointForm.Form = new PlotPointForm();
    return PlotPointForm;
}(UiForm));
UiForm.addGlobal(PlotPointForm.Form);

var Plot = (function () {
    function Plot(node) {
        this.node = node;
        this._axisX = null;
        this._axisY = null;
        this._scaleX = null;
        this._scaleY = null;
        this._transformX = null;
        this._transformY = null;
        this._points = new BTree();
        this._dirty = true;
        this._observers = [];
        this._parentView = null;
    }
    Plot.prototype.getPoint = function (x) {
        return this._points.get(x);
    };
    Plot.prototype.willInsertPoint = function (newPoint) {
    };
    Plot.prototype.didInsertPoint = function (newPoint) {
    };
    Plot.prototype.willRemovePoint = function (oldPoint) {
    };
    Plot.prototype.didRemovePoint = function (oldPoint) {
    };
    Plot.prototype.insertPoint = function (newPoint) {
        if (!this._points.has(newPoint.x)) {
            for (var i = 0; i < this._observers.length; i += 1) {
                var observer = this._observers[i];
                if (observer.plotWillInsertPoint) {
                    observer.plotWillInsertPoint(newPoint, this);
                }
            }
            this.willInsertPoint(newPoint);
            this._points.set(newPoint.x, newPoint);
            this._dirty = true;
            this.didInsertPoint(newPoint);
            for (var i = 0; i < this._observers.length; i += 1) {
                var observer = this._observers[i];
                if (observer.plotDidInsertPoint) {
                    observer.plotDidInsertPoint(newPoint, this);
                }
            }
        }
    };
    Plot.prototype.removePoint = function (x) {
        var oldPoint = this._points.get(x);
        if (oldPoint) {
            for (var i = 0; i < this._observers.length; i += 1) {
                var observer = this._observers[i];
                if (observer.plotWillRemovePoint) {
                    observer.plotWillRemovePoint(oldPoint, this);
                }
            }
            this.willRemovePoint(oldPoint);
            this._points.delete(x);
            this._dirty = true;
            this.didRemovePoint(oldPoint);
            for (var i = 0; i < this._observers.length; i += 1) {
                var observer = this._observers[i];
                if (observer.plotDidRemovePoint) {
                    observer.plotDidRemovePoint(oldPoint, this);
                }
            }
        }
    };
    Plot.prototype.dataDomainX = function () {
        if (!this._points.isEmpty()) {
            return [this._points.firstKey(), this._points.lastKey()];
        }
        return undefined;
    };
    Plot.prototype.dataRangeX = function () {
        if (!this._points.isEmpty()) {
            var scaleX = this._scaleX;
            return [scaleX.scale(this._points.firstKey()), scaleX.scale(this._points.lastKey())];
        }
        return undefined;
    };
    Plot.prototype.dataDomainY = function () {
        if (!this._points.isEmpty()) {
            var minY_1;
            var maxY_1;
            this._points.forEach(function (x, point) {
                var y = point.y;
                if (y !== undefined) {
                    if (minY_1 === undefined || compare(minY_1, y) > 0) {
                        minY_1 = y;
                    }
                    if (maxY_1 === undefined || compare(maxY_1, y) < 0) {
                        maxY_1 = y;
                    }
                }
            }, this);
            if (minY_1 !== undefined && maxY_1 !== undefined) {
                return [minY_1, maxY_1];
            }
        }
        return undefined;
    };
    Plot.prototype.dataRangeY = function () {
        if (!this._points.isEmpty()) {
            var scaleY_1 = this._scaleY;
            var minY_2;
            var maxY_2;
            this._points.forEach(function (x, point) {
                if (point.y !== undefined) {
                    var y = scaleY_1.scale(point.y);
                    if (minY_2 === undefined || minY_2 > y) {
                        minY_2 = y;
                    }
                    if (maxY_2 === undefined || maxY_2 < y) {
                        maxY_2 = y;
                    }
                }
            }, this);
            if (minY_2 !== undefined && maxY_2 !== undefined) {
                return [minY_2, maxY_2];
            }
        }
        return undefined;
    };
    Plot.prototype.parentView = function (view) {
        if (view === undefined) {
            return this._parentView;
        }
        else {
            this._parentView = (view) ? view : null;
            return this;
        }
    };
    Plot.prototype.axisX = function (axisX) {
        if (axisX === undefined) {
            return this._axisX;
        }
        else {
            if (this._axisX) {
                this._axisX.removeObserver(this);
            }
            this._axisX = axisX;
            if (this._axisX) {
                this._scaleX = this._axisX.scale();
                this._axisX.addObserver(this);
                this._dirty = true;
            }
            return this;
        }
    };
    Plot.prototype.scaleX = function (fx) {
        if (!this._axisX) {
            throw new Error();
        }
        if (fx === undefined) {
            return this._axisX.scale();
        }
        else {
            this._axisX.scale(fx);
            this._dirty = true;
            return this;
        }
    };
    Plot.prototype.domainX = function (x0, x1) {
        if (!this._axisX) {
            throw new Error();
        }
        if (x0 === undefined) {
            return this._axisX.domain();
        }
        else {
            this._axisX.domain(x0, x1);
            this._dirty = true;
            return this;
        }
    };
    Plot.prototype.rangeX = function (r0, r1) {
        if (!this._axisX) {
            throw new Error();
        }
        if (r0 === undefined) {
            return this._axisX.range();
        }
        else {
            this._axisX.range(r0, r1);
            this._dirty = true;
            return this;
        }
    };
    Plot.prototype.axisY = function (axisY) {
        if (axisY === undefined) {
            return this._axisY;
        }
        else {
            if (this._axisY) {
                this._axisY.removeObserver(this);
            }
            this._axisY = axisY;
            if (this._axisY) {
                this._scaleY = this._axisY.scale();
                this._axisY.addObserver(this);
                this._dirty = true;
            }
            return this;
        }
    };
    Plot.prototype.scaleY = function (fy) {
        if (!this._axisY) {
            throw new Error();
        }
        if (fy === undefined) {
            return this._axisY.scale();
        }
        else {
            this._axisY.scale(fy);
            this._dirty = true;
            return this;
        }
    };
    Plot.prototype.domainY = function (y0, y1) {
        if (!this._axisY) {
            throw new Error();
        }
        if (y0 === undefined) {
            return this._axisY.domain();
        }
        else {
            this._axisY.domain(y0, y1);
            this._dirty = true;
            return this;
        }
    };
    Plot.prototype.rangeY = function (r0, r1) {
        if (!this._axisY) {
            throw new Error();
        }
        if (r0 === undefined) {
            return this._axisY.range();
        }
        else {
            this._axisY.range(r0, r1);
            this._dirty = true;
            return this;
        }
    };
    Plot.prototype.transformX = function (transformX) {
        if (transformX === undefined) {
            return this._transformX;
        }
        else {
            this._transformX = transformX;
            if (transformX) {
                this.retransform();
            }
            else {
                this._dirty = true;
            }
            return this;
        }
    };
    Plot.prototype.transformY = function (transformY) {
        if (transformY === undefined) {
            return this._transformY;
        }
        else {
            this._transformY = transformY;
            if (transformY) {
                this.retransform();
            }
            else {
                this._dirty = true;
            }
            return this;
        }
    };
    Plot.prototype.transform = function () {
        if (this._transformX && this._transformY) {
            return this._transformX.transform(this._transformY);
        }
        else if (this._transformX) {
            return this._transformX;
        }
        else if (this._transformY) {
            return this._transformY;
        }
        else {
            return null;
        }
    };
    Plot.prototype.retransform = function () {
        var transform = this.transform();
        if (transform) {
            this.node.setAttribute('transform', transform.toAttributeString());
        }
        else {
            this.node.removeAttribute('transform');
        }
    };
    Plot.prototype.addObserver = function (observer) {
        if (this._observers.indexOf(observer) < 0) {
            this._observers.push(observer);
        }
    };
    Plot.prototype.removeObserver = function (observer) {
        var i = this._observers.indexOf(observer);
        if (i >= 0) {
            this._observers.splice(i, 1);
        }
    };
    Plot.prototype.axisDidScale = function (scale, axis) {
        if (axis === this._axisX) {
            this.axisXDidScale(scale);
        }
        else if (axis === this._axisY) {
            this.axisYDidScale(scale);
        }
    };
    Plot.prototype.axisXDidScale = function (scale) {
        this._transformX = this._axisX.transformFrame();
        if (this._transformX) {
            this.retransform();
        }
        else {
            this._scaleX = scale;
            this._dirty = true;
        }
        for (var i = 0; i < this._observers.length; i += 1) {
            var observer = this._observers[i];
            if (observer.plotDidScaleX) {
                observer.plotDidScaleX(scale, this._axisX, this);
            }
        }
    };
    Plot.prototype.axisYDidScale = function (scale) {
        this._transformY = this._axisY.transformFrame();
        if (this._transformY) {
            this.retransform();
        }
        else {
            this._scaleY = scale;
            this._dirty = true;
        }
        for (var i = 0; i < this._observers.length; i += 1) {
            var observer = this._observers[i];
            if (observer.plotDidScaleY) {
                observer.plotDidScaleY(scale, this._axisY, this);
            }
        }
    };
    return Plot;
}());

var PlotModel = (function (_super) {
    __extends(PlotModel, _super);
    function PlotModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return PlotModel;
}(SvgModel));

var PlotForm = (function (_super) {
    __extends(PlotForm, _super);
    function PlotForm() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PlotForm.addGlobal = function (plotForm) {
        PlotForm.Global = PlotForm.Global.withUiForm(plotForm);
    };
    PlotForm.removeGlobal = function (plotForm) {
        PlotForm.Global = PlotForm.Global.withoutUiForm(plotForm);
    };
    PlotForm.Global = new PolyUiForm([]);
    return PlotForm;
}(SvgForm));

var AreaPlot = (function (_super) {
    __extends(AreaPlot, _super);
    function AreaPlot(node) {
        var _this = _super.call(this, node) || this;
        _this._stops = new BTree();
        _this._areaFill = Color.transparent(0.5);
        _this.areaPath = document.createElementNS('http://www.w3.org/2000/svg', 'path');
        _this.areaPath.setAttribute('class', 'area');
        _this.areaPath.setAttribute('stroke', 'none');
        _this.node.appendChild(_this.areaPath);
        _this.gradient = document.createElementNS('http://www.w3.org/2000/svg', 'linearGradient');
        _this.gradient.setAttribute('id', Random.generateId());
        _this.gradient.setAttribute('gradientUnits', 'userSpaceOnUse');
        _this.gradient.setAttribute('x1', '0');
        _this.gradient.setAttribute('y1', '0');
        _this.gradient.setAttribute('x2', '0');
        _this.gradient.setAttribute('y2', '0');
        return _this;
    }
    AreaPlot.prototype.areaFill = function (areaFill) {
        if (areaFill === undefined) {
            return this._areaFill;
        }
        else {
            areaFill = Color.fromAny(areaFill);
            if (!this._areaFill.equals(areaFill)) {
                this._areaFill = areaFill;
                this._dirty = true;
            }
            return this;
        }
    };
    AreaPlot.prototype.didInsertPoint = function (newPoint) {
        var oldStop = this._stops.get(newPoint.x);
        if (oldStop) {
            this._stops.delete(newPoint.x);
            this.gradient.removeChild(oldStop);
        }
        if (newPoint.color || newPoint.opacity !== undefined) {
            var newStop = document.createElementNS('http://www.w3.org/2000/svg', 'stop');
            if (newPoint.color) {
                newStop.setAttribute('stop-color', newPoint.color.toString());
            }
            if (newPoint.opacity !== undefined) {
                newStop.setAttribute('stop-opacity', '' + newPoint.opacity);
            }
            this._stops.set(newPoint.x, newStop);
            this.gradient.insertBefore(newStop, this._stops.nextValue(newPoint.x) || null);
        }
    };
    AreaPlot.prototype.willRemovePoint = function (oldPoint) {
        var oldStop = this._stops.get(oldPoint.x);
        if (oldStop) {
            this._stops.delete(oldPoint.x);
            this.gradient.removeChild(oldStop);
        }
    };
    AreaPlot.prototype.render = function () {
        if (this._dirty && this._axisX && this._axisY) {
            this._dirty = false;
            this.renderPlot();
        }
    };
    AreaPlot.prototype.renderPlot = function () {
        var scaleX = this._scaleX;
        var scaleY = this._scaleY;
        var area = new Path();
        var n = this._points.size;
        var x0;
        var x1;
        var dx;
        if (n > 0) {
            var p0 = this._points.firstValue();
            var p1 = this._points.lastValue();
            x0 = scaleX.scale(p0.x);
            x1 = scaleX.scale(p1.x);
            dx = x1 - x0;
            p0.offsetX = x0;
            p0.offsetY = scaleY.scale(p0.y);
            area.moveTo(p0.offsetX, p0.offsetY);
            var stop_1 = this._stops.get(p0.x);
            if (stop_1) {
                if (!p0.color) {
                    stop_1.setAttribute('stop-color', this._areaFill.toString());
                }
                if (dx) {
                    var offset = (p0.offsetX - x0) / dx;
                    stop_1.setAttribute('offset', '' + offset);
                }
            }
        }
        else {
            x0 = NaN;
            x1 = NaN;
            dx = NaN;
        }
        var cursor = this._points.entries();
        cursor.next();
        while (cursor.hasNext()) {
            var _a = cursor.next().value, x = _a[0], point = _a[1];
            point.offsetX = scaleX.scale(point.x);
            point.offsetY = scaleY.scale(point.y);
            area.lineTo(point.offsetX, point.offsetY);
            var stop_2 = this._stops.get(x);
            if (stop_2) {
                if (!point.color) {
                    stop_2.setAttribute('stop-color', this._areaFill.toString());
                }
                if (dx) {
                    var offset = (point.offsetX - x0) / dx;
                    stop_2.setAttribute('offset', '' + offset);
                }
            }
        }
        while (cursor.hasPrevious()) {
            var point = cursor.previous().value[1];
            point.offsetDY = point.dy !== undefined ? scaleY.scale(point.dy) : point.offsetY;
            area.lineTo(point.offsetX, point.offsetDY);
        }
        if (n > 0) {
            area.closePath();
        }
        this.retransform();
        if (isFinite(x0) && isFinite(x1)) {
            this.gradient.setAttribute('x1', '' + x0);
            this.gradient.setAttribute('x2', '' + x1);
            if (this._stops.size) {
                if (!this.gradient.parentNode) {
                    this.node.insertBefore(this.gradient, this.node.firstChild);
                }
                this.areaPath.setAttribute('fill', 'url(#' + this.gradient.getAttribute('id') + ')');
            }
            else {
                if (this.gradient.parentNode) {
                    this.node.removeChild(this.gradient);
                }
                this.areaPath.setAttribute('fill', this._areaFill.toString());
            }
        }
        this.areaPath.setAttribute('d', area.toString());
    };
    AreaPlot.create = function () {
        var node = document.createElementNS('http://www.w3.org/2000/svg', 'g');
        node.setAttribute('pointer-events', 'none');
        node.setAttribute('class', 'plot area-plot');
        return new AreaPlot(node);
    };
    return AreaPlot;
}(Plot));

var AreaPlotAnimator = (function (_super) {
    __extends(AreaPlotAnimator, _super);
    function AreaPlotAnimator(plot) {
        var _this = _super.call(this) || this;
        _this.plot = plot;
        _this.areaFill = undefined;
        return _this;
    }
    AreaPlotAnimator.prototype.onFrame = function (t) {
        if (this.areaFill) {
            this.areaFill.onFrame(t);
        }
        this.update();
    };
    AreaPlotAnimator.prototype.update = function () {
        var node = this.plot.node;
        if (node.view instanceof AreaPlotView) {
            node.view.insertPlotPointViews();
        }
        this.plot.render();
    };
    return AreaPlotAnimator;
}(FrameAnimator));
var AreaPlotAreaFillAnimator = (function (_super) {
    __extends(AreaPlotAreaFillAnimator, _super);
    function AreaPlotAreaFillAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    AreaPlotAreaFillAnimator.prototype.update = function (value) {
        this.parent.plot.areaFill(value);
    };
    AreaPlotAreaFillAnimator.get = function (self) {
        return self.plot.areaFill();
    };
    AreaPlotAreaFillAnimator.set = function (self, value) {
        if (value === null) {
            self.plotAnimator.areaFill = undefined;
        }
        else {
            self.plot.areaFill(value);
        }
    };
    AreaPlotAreaFillAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.plotAnimator.areaFill) {
            self.plotAnimator.areaFill = new AreaPlotAreaFillAnimator(self.plotAnimator, value, trans);
        }
        return self.plotAnimator.areaFill;
    };
    return AreaPlotAreaFillAnimator;
}(ChildFrameAnimator));
var AreaPlotView = (function (_super) {
    __extends(AreaPlotView, _super);
    function AreaPlotView(plot) {
        var _this = _super.call(this, plot) || this;
        _this.plotAnimator = new AreaPlotAnimator(_this.plot);
        return _this;
    }
    AreaPlotView.prototype.areaFill = function (value, trans) {
        return this.propertyColor(AreaPlotAreaFillAnimator, value, trans);
    };
    AreaPlotView.prototype.didRemoveChildView = function (childView) {
        _super.prototype.didRemoveChildView.call(this, childView);
        if (childView instanceof PlotPointView) {
            this.removePoint(childView.x);
        }
    };
    AreaPlotView.prototype.plotDidScaleX = function (scale, axis, plot) {
        this.plotAnimator.animate();
    };
    AreaPlotView.prototype.plotDidScaleY = function (scale, axis, plot) {
        this.plotAnimator.animate();
    };
    AreaPlotView.prototype.plotDidInsertPoint = function (point, plot) {
        this.plotAnimator.animate();
    };
    AreaPlotView.prototype.plotDidRemovePoint = function (point, plot) {
        this.plotAnimator.animate();
    };
    AreaPlotView.prototype.render = function () {
        this.plotAnimator.update();
    };
    AreaPlotView.prototype.didReview = function (viewable) {
        _super.prototype.didReview.call(this, viewable);
        this.plotAnimator.enabled(viewable);
    };
    AreaPlotView.prototype.didSetState = function (newState, oldState) {
        _super.prototype.didSetState.call(this, newState, oldState);
        var trans = newState.get('transition').cast(Transition.Form);
        var areaFill = newState.get('areaFill').cast(Color.Form);
        if (areaFill) {
            this.areaFill(areaFill, trans);
        }
    };
    AreaPlotView.create = function () {
        var plot = AreaPlot.create();
        return new AreaPlotView(plot);
    };
    AreaPlotView.applyTheme = function (theme) {
        var sectorRatio = Selector.get('value');
        var sectorColor = Selector.get('primaryHue').invoke(sectorRatio).or(Selector.get('primaryColor'));
        var plotArea = Record.empty()
            .slot('areaFill', sectorColor);
        theme.set('plotArea', plotArea);
    };
    return AreaPlotView;
}(PlotView));
AreaPlotView.applyTheme(AreaPlotView.Theme);

var AreaPlotModel = (function (_super) {
    __extends(AreaPlotModel, _super);
    function AreaPlotModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AreaPlotModel.Params = PlotModel.Params.concat([
        new ModelParam('transition', Selector.get('transition').or(Selector.get('plotCircle').get('transition'))),
        new ModelParam('areaFill', Selector.get('areaFill').or(Selector.get('plotCircle').get('areaFill'))),
    ]);
    return AreaPlotModel;
}(PlotModel));

var AreaPlotForm = (function (_super) {
    __extends(AreaPlotForm, _super);
    function AreaPlotForm() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(AreaPlotForm.prototype, "tag", {
        get: function () {
            return 'plot';
        },
        enumerable: true,
        configurable: true
    });
    AreaPlotForm.prototype.castView = function (value, stack, factory) {
        var header = value.header(this.tag);
        var type;
        header.forEach(function (item, index) {
            var key = item.key.stringValue();
            if (key !== undefined) {
                if (key === 'type') {
                    type = item.toValue().stringValue(type);
                }
            }
            else if (item instanceof Value) {
                if (index === 0) {
                    type = item.stringValue(type);
                }
            }
        });
        if (type === 'area') {
            var view = AreaPlotView.create();
            var modelDef = this.materializeView(view, value, stack, factory);
            view.setModel(modelDef);
            return view;
        }
        return undefined;
    };
    AreaPlotForm.prototype.castModel = function (value, stack, factory) {
        var header = value.header(this.tag);
        var type;
        header.forEach(function (item, index) {
            var key = item.key.stringValue();
            if (key !== undefined) {
                if (key === 'type') {
                    type = item.toValue().stringValue(type);
                }
            }
            else if (item instanceof Value) {
                if (index === 0) {
                    type = item.stringValue(type);
                }
            }
        });
        if (type === 'area') {
            var model = new AreaPlotModel();
            var dataDef = this.materializeModel(model, value, stack, factory);
            model.setData(dataDef);
            return model;
        }
        return undefined;
    };
    AreaPlotForm.prototype.materializeViewParam = function (view, param, stack, factory) {
        var childView = factory.castView(param.toValue(), stack, factory);
        if (childView instanceof View) {
            view.appendChildView(childView);
            return childView;
        }
        return _super.prototype.materializeViewParam.call(this, view, param, stack, factory);
    };
    AreaPlotForm.prototype.materializeModelParam = function (model, param, stack, factory) {
        if (param instanceof Attr && param.key.value === this.tag) {
            return Item.Absent;
        }
        return _super.prototype.materializeModelParam.call(this, model, param, stack, factory);
    };
    AreaPlotForm.Form = new AreaPlotForm();
    return AreaPlotForm;
}(PlotForm));
UiForm.addGlobal(AreaPlotForm.Form);
PlotForm.addGlobal(AreaPlotForm.Form);

var CirclePlot = (function (_super) {
    __extends(CirclePlot, _super);
    function CirclePlot(node) {
        var _this = _super.call(this, node) || this;
        _this._areaFill = Color.black();
        _this._lineColor = null;
        _this._lineWidth = 1;
        _this._circleRadius = 5;
        _this._circleOpacity = 1;
        _this.circlePath = new BTree();
        return _this;
    }
    CirclePlot.prototype.areaFill = function (value) {
        if (value === undefined) {
            return this._areaFill;
        }
        else {
            value = Color.fromAny(value);
            if (!this._areaFill.equals(value)) {
                this._areaFill = value;
                this._dirty = true;
            }
            return this;
        }
    };
    CirclePlot.prototype.lineColor = function (value) {
        if (value === undefined) {
            return this._lineColor;
        }
        else if (value === null) {
            if (this._lineColor !== null) {
                this._lineColor = null;
                this._dirty = true;
            }
            return this;
        }
        else {
            value = Color.fromAny(value);
            if (!this._lineColor || !this._lineColor.equals(value)) {
                this._lineColor = value;
                this._dirty = true;
            }
            return this;
        }
    };
    CirclePlot.prototype.lineWidth = function (value) {
        if (value === undefined) {
            return this._lineWidth;
        }
        else {
            if (this._lineWidth !== value) {
                this._lineWidth = value;
                this._dirty = true;
            }
            return this;
        }
    };
    CirclePlot.prototype.circleRadius = function (value) {
        if (value === undefined) {
            return this._circleRadius;
        }
        else {
            if (this._circleRadius !== value) {
                this._circleRadius = value;
                this._dirty = true;
            }
            return this;
        }
    };
    CirclePlot.prototype.circleOpacity = function (value) {
        if (value === undefined) {
            return this._circleOpacity;
        }
        else {
            if (this._circleOpacity !== value) {
                this._circleOpacity = value;
                this._dirty = true;
            }
            return this;
        }
    };
    CirclePlot.prototype.render = function () {
        if (this._dirty && this._axisX && this._axisY) {
            this._dirty = false;
            this.renderPlot();
        }
    };
    CirclePlot.prototype.didInsertPoint = function (newPoint) {
        var circle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
        circle.setAttribute('data-index', "" + newPoint.x);
        this.node.appendChild(circle);
        this.circlePath.set(newPoint.x, circle);
    };
    CirclePlot.prototype.didRemovePoint = function (oldPoint) {
        var circle = this.circlePath.get(oldPoint.x);
        if (circle) {
            this.node.removeChild(circle);
            this.circlePath.delete(oldPoint.x);
        }
    };
    CirclePlot.prototype.renderPlot = function () {
        var scaleX = this._scaleX;
        var scaleY = this._scaleY;
        var cursor = this._points.entries();
        cursor.next();
        while (cursor.hasNext()) {
            var _a = cursor.next().value, x = _a[0], point = _a[1];
            var radius = (point.r) ? point.r : this._circleRadius;
            var color = (point.color) ? point.color : this._areaFill;
            var opacity = (point.opacity !== null && point.opacity !== undefined) ? point.opacity : this._circleOpacity;
            point.offsetX = scaleX.scale(point.x);
            point.offsetY = scaleY.scale(point.y);
            var circlePath = this.circlePath.get(x);
            if (circlePath) {
                circlePath.setAttribute('r', "" + radius);
                circlePath.setAttribute('cx', "" + point.offsetX);
                circlePath.setAttribute('cy', "" + point.offsetY);
                circlePath.setAttribute('fill', "" + color);
                circlePath.setAttribute('opacity', "" + opacity);
                circlePath.setAttribute('stroke', "" + ((this._lineColor) ? this._lineColor : 'none'));
            }
            this.retransform();
        }
    };
    CirclePlot.create = function () {
        var node = document.createElementNS('http://www.w3.org/2000/svg', 'g');
        node.setAttribute('pointer-events', 'none');
        node.setAttribute('class', 'plot circle-plot');
        return new CirclePlot(node);
    };
    return CirclePlot;
}(Plot));

var CirclePlotAnimator = (function (_super) {
    __extends(CirclePlotAnimator, _super);
    function CirclePlotAnimator(plot) {
        var _this = _super.call(this) || this;
        _this.plot = plot;
        _this.areaFill = undefined;
        _this.lineColor = undefined;
        _this.lineWidth = undefined;
        return _this;
    }
    CirclePlotAnimator.prototype.onFrame = function (t) {
        if (this.areaFill) {
            this.areaFill.onFrame(t);
        }
        if (this.lineColor) {
            this.lineColor.onFrame(t);
        }
        if (this.lineWidth) {
            this.lineWidth.onFrame(t);
        }
        this.update();
    };
    CirclePlotAnimator.prototype.update = function () {
        var node = this.plot.node;
        if (node.view instanceof CirclePlotView) {
            node.view.insertPlotPointViews();
        }
        this.plot.render();
    };
    return CirclePlotAnimator;
}(FrameAnimator));
var CirclePlotAreaFillAnimator = (function (_super) {
    __extends(CirclePlotAreaFillAnimator, _super);
    function CirclePlotAreaFillAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    CirclePlotAreaFillAnimator.prototype.update = function (value) {
        this.parent.plot.areaFill(value);
    };
    CirclePlotAreaFillAnimator.get = function (self) {
        return self.plot.areaFill();
    };
    CirclePlotAreaFillAnimator.set = function (self, value) {
        if (value === null) {
            self.plotAnimator.areaFill = undefined;
        }
        else {
            self.plot.areaFill(value);
        }
    };
    CirclePlotAreaFillAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.plotAnimator.areaFill) {
            self.plotAnimator.areaFill = new CirclePlotAreaFillAnimator(self.plotAnimator, value, trans);
        }
        return self.plotAnimator.areaFill;
    };
    return CirclePlotAreaFillAnimator;
}(ChildFrameAnimator));
var CirclePlotLineColorAnimator = (function (_super) {
    __extends(CirclePlotLineColorAnimator, _super);
    function CirclePlotLineColorAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    CirclePlotLineColorAnimator.prototype.update = function (value) {
        this.parent.plot.lineColor(value);
    };
    CirclePlotLineColorAnimator.get = function (self) {
        return self.plot.lineColor() || Color.transparent();
    };
    CirclePlotLineColorAnimator.set = function (self, value) {
        if (value === null) {
            self.plotAnimator.lineColor = undefined;
        }
        else {
            self.plot.lineColor(value);
        }
    };
    CirclePlotLineColorAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.plotAnimator.lineColor) {
            self.plotAnimator.lineColor = new CirclePlotLineColorAnimator(self.plotAnimator, value, trans);
        }
        return self.plotAnimator.lineColor;
    };
    return CirclePlotLineColorAnimator;
}(ChildFrameAnimator));
var CirclePlotLineWidthAnimator = (function (_super) {
    __extends(CirclePlotLineWidthAnimator, _super);
    function CirclePlotLineWidthAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    CirclePlotLineWidthAnimator.prototype.update = function (value) {
        this.parent.plot.lineWidth(value);
    };
    CirclePlotLineWidthAnimator.get = function (self) {
        return self.plot.lineWidth();
    };
    CirclePlotLineWidthAnimator.set = function (self, value) {
        if (value === null) {
            self.plotAnimator.lineWidth = undefined;
        }
        else {
            self.plot.lineWidth(value);
        }
    };
    CirclePlotLineWidthAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.plotAnimator.lineWidth) {
            self.plotAnimator.lineWidth = new CirclePlotLineWidthAnimator(self.plotAnimator, value, trans);
        }
        return self.plotAnimator.lineWidth;
    };
    return CirclePlotLineWidthAnimator;
}(ChildFrameAnimator));
var CirclePlotView = (function (_super) {
    __extends(CirclePlotView, _super);
    function CirclePlotView(plot) {
        var _this = _super.call(this, plot) || this;
        _this.plotAnimator = new CirclePlotAnimator(_this.plot);
        return _this;
    }
    CirclePlotView.prototype.areaFill = function (value, trans) {
        return this.propertyColor(CirclePlotAreaFillAnimator, value, trans);
    };
    CirclePlotView.prototype.lineColor = function (value, trans) {
        return this.propertyColor(CirclePlotLineColorAnimator, value, trans);
    };
    CirclePlotView.prototype.lineWidth = function (value, trans) {
        return this.propertyNumber(CirclePlotLineWidthAnimator, value, trans);
    };
    CirclePlotView.prototype.didRemoveChildView = function (childView) {
        _super.prototype.didRemoveChildView.call(this, childView);
        if (childView instanceof PlotPointView) {
            this.removePoint(childView.x);
        }
    };
    CirclePlotView.prototype.plotDidScaleX = function (scale, axis, plot) {
        this.plotAnimator.animate();
    };
    CirclePlotView.prototype.plotDidScaleY = function (scale, axis, plot) {
        this.plotAnimator.animate();
    };
    CirclePlotView.prototype.plotDidInsertPoint = function (point, plot) {
        this.plotAnimator.animate();
    };
    CirclePlotView.prototype.plotDidRemovePoint = function (point, plot) {
        this.plotAnimator.animate();
    };
    CirclePlotView.prototype.render = function () {
        this.plotAnimator.update();
    };
    CirclePlotView.prototype.didReview = function (viewable) {
        _super.prototype.didReview.call(this, viewable);
        this.plotAnimator.enabled(viewable);
    };
    CirclePlotView.prototype.didSetState = function (newState, oldState) {
        _super.prototype.didSetState.call(this, newState, oldState);
        var trans = newState.get('transition').cast(Transition.Form);
        var areaFill = newState.get('areaFill').cast(Color.Form);
        if (areaFill) {
            this.areaFill(areaFill, trans);
        }
        var lineColor = newState.get('lineColor').cast(Color.Form);
        if (lineColor) {
            this.lineColor(lineColor, trans);
        }
        var lineWidth = newState.get('lineWidth').numberValue();
        if (lineWidth) {
            this.lineWidth(lineWidth, trans);
        }
    };
    CirclePlotView.create = function () {
        var plot = CirclePlot.create();
        return new CirclePlotView(plot);
    };
    CirclePlotView.applyTheme = function (theme) {
        var sectorRatio = Selector.get('value');
        var sectorColor = Selector.get('primaryHue').invoke(sectorRatio).or(Selector.get('primaryColor'));
        var plotCircle = Record.empty()
            .slot('areaFill', sectorColor);
        theme.set('plotCircle', plotCircle);
    };
    return CirclePlotView;
}(PlotView));
CirclePlotView.applyTheme(CirclePlotView.Theme);

var CirclePlotModel = (function (_super) {
    __extends(CirclePlotModel, _super);
    function CirclePlotModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CirclePlotModel.Params = PlotModel.Params.concat([
        new ModelParam('transition', Selector.get('transition').or(Selector.get('plotCircle').get('transition'))),
        new ModelParam('areaFill', Selector.get('areaFill').or(Selector.get('plotCircle').get('areaFill'))),
        new ModelParam('lineColor', Selector.get('lineColor')),
        new ModelParam('lineWidth', Selector.get('lineWidth')),
    ]);
    return CirclePlotModel;
}(PlotModel));

var CirclePlotForm = (function (_super) {
    __extends(CirclePlotForm, _super);
    function CirclePlotForm() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(CirclePlotForm.prototype, "tag", {
        get: function () {
            return 'plot';
        },
        enumerable: true,
        configurable: true
    });
    CirclePlotForm.prototype.castView = function (value, stack, factory) {
        var header = value.header(this.tag);
        var type;
        header.forEach(function (item, index) {
            var key = item.key.stringValue();
            if (key !== undefined) {
                if (key === 'type') {
                    type = item.toValue().stringValue(type);
                }
            }
            else if (item instanceof Value) {
                if (index === 0) {
                    type = item.stringValue(type);
                }
            }
        });
        if (type === 'circle') {
            var view = CirclePlotView.create();
            var modelDef = this.materializeView(view, value, stack, factory);
            view.setModel(modelDef);
            return view;
        }
        return undefined;
    };
    CirclePlotForm.prototype.castModel = function (value, stack, factory) {
        var header = value.header(this.tag);
        var type;
        header.forEach(function (item, index) {
            var key = item.key.stringValue();
            if (key !== undefined) {
                if (key === 'type') {
                    type = item.toValue().stringValue(type);
                }
            }
            else if (item instanceof Value) {
                if (index === 0) {
                    type = item.stringValue(type);
                }
            }
        });
        if (type === 'circle') {
            var model = new CirclePlotModel();
            var dataDef = this.materializeModel(model, value, stack, factory);
            model.setData(dataDef);
            return model;
        }
        return undefined;
    };
    CirclePlotForm.prototype.materializeViewParam = function (view, param, stack, factory) {
        var childView = factory.castView(param.toValue(), stack, factory);
        if (childView instanceof View) {
            view.appendChildView(childView);
            return childView;
        }
        return _super.prototype.materializeViewParam.call(this, view, param, stack, factory);
    };
    CirclePlotForm.prototype.materializeModelParam = function (model, param, stack, factory) {
        if (param instanceof Attr && param.key.value === this.tag) {
            return Item.Absent;
        }
        return _super.prototype.materializeModelParam.call(this, model, param, stack, factory);
    };
    CirclePlotForm.Form = new CirclePlotForm();
    return CirclePlotForm;
}(PlotForm));
UiForm.addGlobal(CirclePlotForm.Form);
PlotForm.addGlobal(CirclePlotForm.Form);

var LinePlot = (function (_super) {
    __extends(LinePlot, _super);
    function LinePlot(node) {
        var _this = _super.call(this, node) || this;
        _this._areaFill = null;
        _this._lineColor = Color.black();
        _this._lineWidth = 1;
        _this._lineDashArray = [];
        _this._legend = null;
        _this._legendSize = null;
        _this._legendColor = Color.black();
        _this.areaPath = document.createElementNS('http://www.w3.org/2000/svg', 'path');
        _this.areaPath.setAttribute('class', 'area');
        _this.areaPath.setAttribute('stroke', 'none');
        _this.linePath = document.createElementNS('http://www.w3.org/2000/svg', 'path');
        _this.linePath.setAttribute('class', 'line');
        _this.linePath.setAttribute('fill', 'none');
        _this.linePath.setAttribute('vector-effect', 'non-scaling-stroke');
        _this.node.appendChild(_this.linePath);
        return _this;
    }
    LinePlot.prototype.areaFill = function (areaFill) {
        if (areaFill === undefined) {
            return this._areaFill;
        }
        else if (areaFill === null) {
            if (this._areaFill !== null) {
                this._areaFill = null;
                this._dirty = true;
            }
            return this;
        }
        else {
            areaFill = Color.fromAny(areaFill);
            if (!this._areaFill || !this._areaFill.equals(areaFill)) {
                this._areaFill = areaFill;
                this._dirty = true;
            }
            return this;
        }
    };
    LinePlot.prototype.lineColor = function (lineColor) {
        if (lineColor === undefined) {
            return this._lineColor;
        }
        else {
            lineColor = Color.fromAny(lineColor);
            if (!this._lineColor.equals(lineColor)) {
                this._lineColor = lineColor;
                this._dirty = true;
            }
            return this;
        }
    };
    LinePlot.prototype.lineWidth = function (lineWidth) {
        if (lineWidth === undefined) {
            return this._lineWidth;
        }
        else {
            if (this._lineWidth !== lineWidth) {
                this._lineWidth = lineWidth;
                this._dirty = true;
            }
            return this;
        }
    };
    LinePlot.prototype.lineDashArray = function (lineDashArray) {
        if (lineDashArray === undefined) {
            return this._lineDashArray;
        }
        else {
            if (this._lineDashArray !== lineDashArray) {
                this._lineDashArray = lineDashArray;
                this._dirty = true;
            }
            return this;
        }
    };
    LinePlot.prototype.legend = function (view) {
        if (view === undefined) {
            return this._legend;
        }
        else {
            this._dirty = true;
            if (this._legend !== view) {
                if (this._legend) {
                    this.node.removeChild(this._legend);
                }
                this._legend = view;
                if (this._legend) {
                    this.node.appendChild(this._legend);
                }
                this.render();
            }
            return this;
        }
    };
    LinePlot.prototype.legendSize = function (value) {
        if (value === undefined) {
            return this._legendSize;
        }
        else {
            if (value !== null) {
                value = Length.fromAny(value);
            }
            if (this._legendSize ? !this._legendSize.equals(value) : this._legendSize !== value) {
                this._legendSize = value;
                this._dirty = true;
            }
            return this;
        }
    };
    LinePlot.prototype.legendColor = function (value) {
        if (value === undefined) {
            return this._legendColor;
        }
        else {
            value = Color.fromAny(value);
            if (!this._legendColor.equals(value)) {
                this._legendColor = value;
                this._dirty = true;
            }
            return this;
        }
    };
    LinePlot.prototype.render = function () {
        if (this._dirty && this._axisX && this._axisY) {
            this._dirty = false;
            this.renderPlot();
        }
    };
    LinePlot.prototype.renderPlot = function () {
        var scaleX = this._scaleX;
        var scaleY = this._scaleY;
        var area = this._areaFill ? new Path() : null;
        var line = new Path();
        var n = this._points.size;
        var y0 = scaleY.scale(0);
        var counterY = 0;
        var textY = 0;
        var x1;
        if (n > 0) {
            var p0 = this._points.firstValue();
            p0.offsetX = scaleX.scale(p0.x);
            p0.offsetY = scaleY.scale(p0.y);
            if (area) {
                area.moveTo(p0.offsetX, y0);
                area.lineTo(p0.offsetX, p0.offsetY);
            }
            line.moveTo(p0.offsetX, p0.offsetY);
            var p1 = this._points.lastValue();
            x1 = scaleX.scale(p1.x);
        }
        else {
            x1 = NaN;
        }
        var cursor = this._points.entries();
        cursor.next();
        while (cursor.hasNext()) {
            var point = cursor.next().value[1];
            point.offsetX = scaleX.scale(point.x);
            point.offsetY = scaleY.scale(point.y);
            if (point.y > counterY) {
                counterY = point.y;
                textY = point.offsetY;
            }
            if (area) {
                area.lineTo(point.offsetX, point.offsetY);
            }
            line.lineTo(point.offsetX, point.offsetY);
        }
        if (n > 0 && area) {
            area.lineTo(x1, y0);
            area.closePath();
        }
        this.retransform();
        if (area) {
            if (!this.areaPath.parentNode) {
                this.node.insertBefore(this.areaPath, this.node.firstChild);
            }
            this.areaPath.setAttribute('fill', this._areaFill.toString());
            this.areaPath.setAttribute('d', area.toString());
        }
        else if (this.areaPath.parentNode) {
            this.node.removeChild(this.areaPath);
        }
        this.linePath.setAttribute('stroke', this._lineColor.toString());
        this.linePath.setAttribute('stroke-width', '' + this._lineWidth);
        var dashArray = this._lineDashArray;
        var dashCount = dashArray.length;
        if (dashCount > 0) {
            var s = '' + dashArray[0];
            for (var i = 1; i < dashCount; i += 1) {
                s += ',' + dashArray[i];
            }
            this.linePath.setAttribute('stroke-dasharray', s);
        }
        else {
            this.linePath.removeAttribute('stroke-dasharray');
        }
        this.linePath.setAttribute('d', line.toString());
        var legend = this._legend;
        if (legend) {
            legend.setAttribute('x', "" + 1000);
            legend.setAttribute('y', "" + textY);
            legend.setAttribute('fill', "" + this._legendColor);
            legend.setAttribute('font-size', "" + this._legendSize);
            legend.setAttribute('text-anchor', "end");
            legend.setAttribute('text-valign', 'bottom');
        }
    };
    LinePlot.create = function () {
        var node = document.createElementNS('http://www.w3.org/2000/svg', 'g');
        node.setAttribute('pointer-events', 'none');
        node.setAttribute('class', 'plot line-plot');
        return new LinePlot(node);
    };
    return LinePlot;
}(Plot));

var LinePlotAnimator = (function (_super) {
    __extends(LinePlotAnimator, _super);
    function LinePlotAnimator(plot) {
        var _this = _super.call(this) || this;
        _this.plot = plot;
        _this.areaFill = undefined;
        _this.lineColor = undefined;
        _this.lineWidth = undefined;
        _this.lineDashArray = undefined;
        _this.legendSize = undefined;
        _this.legendColor = undefined;
        return _this;
    }
    LinePlotAnimator.prototype.onFrame = function (t) {
        if (this.areaFill) {
            this.areaFill.onFrame(t);
        }
        if (this.lineColor) {
            this.lineColor.onFrame(t);
        }
        if (this.lineWidth) {
            this.lineWidth.onFrame(t);
        }
        if (this.lineDashArray) {
            this.lineDashArray.onFrame(t);
        }
        if (this.legendSize) {
            this.legendSize.onFrame(t);
        }
        if (this.legendColor) {
            this.legendColor.onFrame(t);
        }
        this.update();
    };
    LinePlotAnimator.prototype.update = function () {
        var node = this.plot.node;
        if (node.view instanceof LinePlotView) {
            node.view.insertPlotPointViews();
        }
        this.plot.render();
    };
    return LinePlotAnimator;
}(FrameAnimator));
var LinePlotAreaFillAnimator = (function (_super) {
    __extends(LinePlotAreaFillAnimator, _super);
    function LinePlotAreaFillAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    LinePlotAreaFillAnimator.prototype.update = function (value) {
        this.parent.plot.areaFill(value);
    };
    LinePlotAreaFillAnimator.get = function (self) {
        return self.plot.areaFill() || Color.transparent();
    };
    LinePlotAreaFillAnimator.set = function (self, value) {
        if (value === null) {
            self.plotAnimator.areaFill = undefined;
        }
        else {
            self.plot.areaFill(value);
        }
    };
    LinePlotAreaFillAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.plotAnimator.areaFill) {
            self.plotAnimator.areaFill = new LinePlotAreaFillAnimator(self.plotAnimator, value, trans);
        }
        return self.plotAnimator.areaFill;
    };
    return LinePlotAreaFillAnimator;
}(ChildFrameAnimator));
var LinePlotLineColorAnimator = (function (_super) {
    __extends(LinePlotLineColorAnimator, _super);
    function LinePlotLineColorAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    LinePlotLineColorAnimator.prototype.update = function (value) {
        this.parent.plot.lineColor(value);
    };
    LinePlotLineColorAnimator.get = function (self) {
        return self.plot.lineColor();
    };
    LinePlotLineColorAnimator.set = function (self, value) {
        if (value === null) {
            self.plotAnimator.lineColor = undefined;
        }
        else {
            self.plot.lineColor(value);
        }
    };
    LinePlotLineColorAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.plotAnimator.lineColor) {
            self.plotAnimator.lineColor = new LinePlotLineColorAnimator(self.plotAnimator, value, trans);
        }
        return self.plotAnimator.lineColor;
    };
    return LinePlotLineColorAnimator;
}(ChildFrameAnimator));
var LinePlotLineWidthAnimator = (function (_super) {
    __extends(LinePlotLineWidthAnimator, _super);
    function LinePlotLineWidthAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    LinePlotLineWidthAnimator.prototype.update = function (value) {
        this.parent.plot.lineWidth(value);
    };
    LinePlotLineWidthAnimator.get = function (self) {
        return self.plot.lineWidth();
    };
    LinePlotLineWidthAnimator.set = function (self, value) {
        if (value === null) {
            self.plotAnimator.lineWidth = undefined;
        }
        else {
            self.plot.lineWidth(value);
        }
    };
    LinePlotLineWidthAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.plotAnimator.lineWidth) {
            self.plotAnimator.lineWidth = new LinePlotLineWidthAnimator(self.plotAnimator, value, trans);
        }
        return self.plotAnimator.lineWidth;
    };
    return LinePlotLineWidthAnimator;
}(ChildFrameAnimator));
var LinePlotLineDashArrayAnimator = (function (_super) {
    __extends(LinePlotLineDashArrayAnimator, _super);
    function LinePlotLineDashArrayAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    LinePlotLineDashArrayAnimator.prototype.update = function (value) {
        this.parent.plot.lineDashArray(value);
    };
    LinePlotLineDashArrayAnimator.get = function (self) {
        return self.plot.lineDashArray();
    };
    LinePlotLineDashArrayAnimator.set = function (self, value) {
        if (value === null) {
            self.plotAnimator.lineDashArray = undefined;
        }
        else {
            self.plot.lineDashArray(value);
        }
    };
    LinePlotLineDashArrayAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.plotAnimator.lineDashArray) {
            self.plotAnimator.lineDashArray = new LinePlotLineDashArrayAnimator(self.plotAnimator, value, trans);
        }
        return self.plotAnimator.lineDashArray;
    };
    return LinePlotLineDashArrayAnimator;
}(ChildFrameAnimator));
var LinePlotLegendSizeAnimator = (function (_super) {
    __extends(LinePlotLegendSizeAnimator, _super);
    function LinePlotLegendSizeAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    LinePlotLegendSizeAnimator.prototype.update = function (value) {
        this.parent.plot.legendSize(value);
    };
    LinePlotLegendSizeAnimator.get = function (self) {
        return self.plot.legendSize();
    };
    LinePlotLegendSizeAnimator.set = function (self, value) {
        if (value === null) {
            self.plotAnimator.legendSize = undefined;
        }
        else {
            self.plot.legendSize(value);
        }
    };
    LinePlotLegendSizeAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.plotAnimator.legendSize) {
            self.plotAnimator.legendSize = new LinePlotLegendSizeAnimator(self.plotAnimator, value, trans);
        }
        return self.plotAnimator.legendSize;
    };
    return LinePlotLegendSizeAnimator;
}(ChildFrameAnimator));
var LinePlotLegendColorAnimator = (function (_super) {
    __extends(LinePlotLegendColorAnimator, _super);
    function LinePlotLegendColorAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    LinePlotLegendColorAnimator.prototype.update = function (value) {
        this.parent.plot.legendColor(value);
    };
    LinePlotLegendColorAnimator.get = function (self) {
        return self.plot.legendColor();
    };
    LinePlotLegendColorAnimator.set = function (self, value) {
        if (value === null) {
            self.plotAnimator.legendColor = undefined;
        }
        else {
            self.plot.legendColor(value);
        }
    };
    LinePlotLegendColorAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.plotAnimator.legendColor) {
            self.plotAnimator.legendColor = new LinePlotLegendColorAnimator(self.plotAnimator, value, trans);
        }
        return self.plotAnimator.legendColor;
    };
    return LinePlotLegendColorAnimator;
}(ChildFrameAnimator));
var LinePlotView = (function (_super) {
    __extends(LinePlotView, _super);
    function LinePlotView(plot) {
        var _this = _super.call(this, plot) || this;
        _this.plotAnimator = new LinePlotAnimator(_this.plot);
        return _this;
    }
    LinePlotView.prototype.areaFill = function (value, trans) {
        return this.propertyColor(LinePlotAreaFillAnimator, value, trans);
    };
    LinePlotView.prototype.lineColor = function (value, trans) {
        return this.propertyColor(LinePlotLineColorAnimator, value, trans);
    };
    LinePlotView.prototype.lineWidth = function (value, trans) {
        return this.propertyNumber(LinePlotLineWidthAnimator, value, trans);
    };
    LinePlotView.prototype.lineDashArray = function (value, trans) {
        return this.property(LinePlotLineDashArrayAnimator, value, trans);
    };
    LinePlotView.prototype.legend = function (newValue) {
        var oldValue = this.plot.legend();
        if (newValue === undefined) {
            return oldValue;
        }
        else {
            if (typeof newValue === 'string') {
                newValue = document.createTextNode(newValue);
            }
            else if (newValue instanceof SvgView || newValue instanceof TextView) {
                newValue = newValue.node;
            }
            if (newValue instanceof Text) {
                if (oldValue) {
                    while (oldValue.firstChild) {
                        oldValue.removeChild(oldValue.firstChild);
                    }
                    oldValue.appendChild(newValue);
                    newValue = oldValue;
                }
                else {
                    var value = SvgView.create('text').className('value');
                    value.append(newValue);
                    newValue = value.node;
                }
            }
            if (oldValue) {
                var oldView = oldValue.view;
                if (oldValue !== newValue && oldView) {
                    this.removeChildView(oldView);
                }
            }
            this.plot.legend(newValue);
            if (newValue) {
                var newView = newValue.view;
                if (oldValue !== newValue && newView) {
                    this.appendChildView(newView);
                }
            }
            this.plotAnimator.animate();
            return this;
        }
    };
    LinePlotView.prototype.legendSize = function (value, trans) {
        return this.propertyLength(LinePlotLegendSizeAnimator, value, trans);
    };
    LinePlotView.prototype.legendColor = function (value, trans) {
        return this.propertyColor(LinePlotLegendColorAnimator, value, trans);
    };
    LinePlotView.prototype.didRemoveChildView = function (childView) {
        _super.prototype.didRemoveChildView.call(this, childView);
        if (childView instanceof PlotPointView) {
            this.removePoint(childView.x);
        }
    };
    LinePlotView.prototype.plotDidScaleX = function (scale, axis, plot) {
        this.plotAnimator.animate();
    };
    LinePlotView.prototype.plotDidScaleY = function (scale, axis, plot) {
        this.plotAnimator.animate();
    };
    LinePlotView.prototype.plotDidInsertPoint = function (point, plot) {
        this.plotAnimator.animate();
    };
    LinePlotView.prototype.plotDidRemovePoint = function (point, plot) {
        this.plotAnimator.animate();
    };
    LinePlotView.prototype.render = function () {
        this.plotAnimator.update();
    };
    LinePlotView.prototype.didReview = function (viewable) {
        _super.prototype.didReview.call(this, viewable);
        this.plotAnimator.enabled(viewable);
    };
    LinePlotView.prototype.didSetState = function (newState, oldState) {
        _super.prototype.didSetState.call(this, newState, oldState);
        var trans = newState.get('transition').cast(Transition.Form);
        var lineColor = newState.get('lineColor').cast(Color.Form);
        if (lineColor) {
            this.lineColor(lineColor, trans);
        }
        var lineWidth = newState.get('lineWidth').numberValue();
        if (lineWidth) {
            this.lineWidth(lineWidth, trans);
        }
        var lineDashArray = newState.get('lineDashArray');
        if (lineDashArray.isDefined()) {
            var dashArray_1 = [];
            lineDashArray.forEach(function (item) {
                var dash = item.numberValue();
                if (dash !== undefined) {
                    dashArray_1.push(dash);
                }
            }, this);
            this.lineDashArray(dashArray_1, trans);
        }
        var legendSize = newState.get('legendSize').cast(Length.Form);
        if (legendSize) {
            this.legendSize(legendSize, trans);
        }
        var legendColor = newState.get('legendColor').cast(Color.Form);
        if (legendColor) {
            this.legendColor(legendColor, trans);
        }
        var legendView = this.legend();
        if (legendView) {
            var legendWeight = newState.get('legendWeight').numberValue();
            if (legendWeight) {
                legendView.style.fontWeight = "" + legendWeight;
            }
        }
    };
    LinePlotView.create = function () {
        var plot = LinePlot.create();
        return new LinePlotView(plot);
    };
    LinePlotView.applyTheme = function (theme) {
        var sectorRatio = Selector.get('value');
        var sectorColor = Selector.get('primaryHue').invoke(sectorRatio).or(Selector.get('primaryColor'));
        var plotLine = Record.empty()
            .slot('lineColor', sectorColor)
            .slot('lineWidth', '0')
            .slot('lineDashArray', '0')
            .slot('legendSize', '10px')
            .slot('legendWeight', 400);
        theme.set('plotLine', plotLine);
    };
    return LinePlotView;
}(PlotView));
LinePlotView.applyTheme(LinePlotView.Theme);

var LinePlotModel = (function (_super) {
    __extends(LinePlotModel, _super);
    function LinePlotModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LinePlotModel.Params = PlotModel.Params.concat([
        new ModelParam('transition', Selector.get('transition').or(Selector.get('plotLine').get('transition'))),
        new ModelParam('lineColor', Selector.get('lineColor').or(Selector.get('plotLine').get('lineColor'))),
        new ModelParam('lineWidth', Selector.get('lineWidth').or(Selector.get('plotLine').get('lineWidth'))),
        new ModelParam('lineDashArray', Selector.get('lineDashArray').or(Selector.get('plotLine').get('lineDashArray'))),
        new ModelParam('legendSize', Selector.get('valueSize').or(Selector.get('gauge').get('valueSize'))),
        new ModelParam('legendColor', Selector.get('legendColor').or(Selector.get('plotLine').get('legendColor'))),
        new ModelParam('legendWeight', Selector.get('legendWeight').or(Selector.get('plotLine').get('legendWeight'))),
    ]);
    return LinePlotModel;
}(PlotModel));

var LinePlotForm = (function (_super) {
    __extends(LinePlotForm, _super);
    function LinePlotForm() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(LinePlotForm.prototype, "tag", {
        get: function () {
            return 'plot';
        },
        enumerable: true,
        configurable: true
    });
    LinePlotForm.prototype.castView = function (value, stack, factory) {
        var header = value.header(this.tag);
        var type;
        header.forEach(function (item, index) {
            var key = item.key.stringValue();
            if (key !== undefined && key === 'type') {
                type = item.toValue().stringValue(type);
            }
            else if (item instanceof Value) {
                if (index === 0) {
                    type = item.stringValue(type);
                }
            }
        });
        if (type === 'line') {
            var view = LinePlotView.create();
            var modelDef = this.materializeView(view, value, stack, factory);
            view.setModel(modelDef);
            return view;
        }
        return undefined;
    };
    LinePlotForm.prototype.castModel = function (value, stack, factory) {
        var header = value.header(this.tag);
        var type;
        header.forEach(function (item, index) {
            var key = item.key.stringValue();
            if (key !== undefined && key === 'type') {
                type = item.toValue().stringValue(type);
            }
            else if (item instanceof Value) {
                if (index === 0) {
                    type = item.stringValue(type);
                }
            }
        });
        if (type === 'line') {
            var model = new LinePlotModel();
            var dataDef = this.materializeModel(model, value, stack, factory);
            model.setData(dataDef);
            return model;
        }
        return undefined;
    };
    LinePlotForm.prototype.materializeViewParam = function (view, param, stack, factory) {
        if (param.key instanceof Text$1) {
            var key = param.key.value;
            if (key === 'legend') {
                var legend = factory.castView(param.toValue(), stack, factory);
                if (legend === undefined) {
                    legend = param.toValue().stringValue();
                }
                if (legend !== undefined) {
                    view.legend(legend);
                    return Item.Absent;
                }
            }
        }
        var childView = factory.castView(param.toValue(), stack, factory);
        if (childView instanceof View) {
            view.appendChildView(childView);
            return childView;
        }
        return _super.prototype.materializeViewParam.call(this, view, param, stack, factory);
    };
    LinePlotForm.prototype.materializeModelParam = function (model, param, stack, factory) {
        if (param instanceof Attr && param.key.value === this.tag) {
            return Item.Absent;
        }
        return _super.prototype.materializeModelParam.call(this, model, param, stack, factory);
    };
    LinePlotForm.Form = new LinePlotForm();
    return LinePlotForm;
}(PlotForm));
UiForm.addGlobal(LinePlotForm.Form);
PlotForm.addGlobal(LinePlotForm.Form);

var Chart = (function () {
    function Chart(node) {
        this.node = node;
        this._plots = [];
        this._axisTop = null;
        this._axisRight = null;
        this._axisBottom = null;
        this._axisLeft = null;
        this._gutterTop = Length.px(20, node);
        this._gutterRight = Length.px(40, node);
        this._gutterBottom = Length.px(20, node);
        this._gutterLeft = Length.px(40, node);
        this._width = Length.zero(node);
        this._height = Length.zero(node);
        this._dirty = true;
        this._observers = [];
        this.defs = document.createElementNS('http://www.w3.org/2000/svg', 'defs');
        this.node.appendChild(this.defs);
        this.clipPath = document.createElementNS('http://www.w3.org/2000/svg', 'clipPath');
        this.clipPath.setAttribute('id', Random.generateId());
        this.defs.appendChild(this.clipPath);
        this.clipRect = document.createElementNS('http://www.w3.org/2000/svg', 'rect');
        this.clipPath.appendChild(this.clipRect);
        this.surfaceRect = document.createElementNS('http://www.w3.org/2000/svg', 'rect');
        this.surfaceRect.setAttribute('fill', 'none');
        this.surfaceRect.setAttribute('stroke', 'none');
        this.surfaceRect.setAttribute('pointer-events', 'all');
        this.surfaceRect.setAttribute('class', 'surfaceRect');
        this.node.appendChild(this.surfaceRect);
        this.plotsGroup = document.createElementNS('http://www.w3.org/2000/svg', 'g');
        this.plotsGroup.setAttribute('clip-path', 'url(#' + this.clipPath.getAttribute('id') + ')');
        this.plotsGroup.setAttribute('class', 'plots');
        this.node.appendChild(this.plotsGroup);
        this.axesGroup = document.createElementNS('http://www.w3.org/2000/svg', 'g');
        this.axesGroup.setAttribute('class', 'axes');
        this.node.appendChild(this.axesGroup);
    }
    Chart.prototype.plots = function () {
        return this._plots.slice(0);
    };
    Chart.prototype.addPlot = function (newPlot) {
        if (this._plots.indexOf(newPlot) < 0) {
            for (var i = 0; i < this._observers.length; i += 1) {
                var observer = this._observers[i];
                if (observer.chartWillAddPlot) {
                    var plot = observer.chartWillAddPlot(newPlot, this);
                    if (plot) {
                        newPlot = plot;
                    }
                    else if (plot === null) {
                        return;
                    }
                }
            }
            this._plots.push(newPlot);
            this.plotsGroup.appendChild(newPlot.node);
            newPlot.addObserver(this);
            if (!newPlot.axisX()) {
                if (this._axisBottom) {
                    newPlot.axisX(this._axisBottom);
                }
                else if (this._axisTop) {
                    newPlot.axisX(this._axisTop);
                }
            }
            if (!newPlot.axisY()) {
                if (this._axisLeft) {
                    newPlot.axisY(this._axisLeft);
                }
                else if (this._axisRight) {
                    newPlot.axisY(this._axisRight);
                }
            }
            this._dirty = true;
            for (var i = 0; i < this._observers.length; i += 1) {
                var observer = this._observers[i];
                if (observer.chartDidAddPlot) {
                    observer.chartDidAddPlot(newPlot, this);
                }
            }
        }
    };
    Chart.prototype.removePlot = function (oldPlot) {
        var i = this._plots.indexOf(oldPlot);
        if (i >= 0) {
            for (var i_1 = 0; i_1 < this._observers.length; i_1 += 1) {
                var observer = this._observers[i_1];
                if (observer.chartWillRemovePlot) {
                    observer.chartWillRemovePlot(oldPlot, this);
                }
            }
            oldPlot.removeObserver(this);
            this.plotsGroup.removeChild(oldPlot.node);
            this._plots.splice(i, 1);
            for (var i_2 = 0; i_2 < this._observers.length; i_2 += 1) {
                var observer = this._observers[i_2];
                if (observer.chartDidRemovePlot) {
                    observer.chartDidRemovePlot(oldPlot, this);
                }
            }
        }
    };
    Chart.prototype.axisTop = function (axisTop) {
        if (axisTop === undefined) {
            return this._axisTop;
        }
        else if (axisTop === null) {
            if (this._axisTop) {
                this._axisTop.removeObserver(this);
                this.axesGroup.removeChild(this._axisTop.node);
            }
            this._axisTop = null;
            return this;
        }
        else {
            if (this._axisTop) {
                this._axisTop.removeObserver(this);
                this.axesGroup.replaceChild(axisTop.node, this._axisTop.node);
            }
            else {
                this.axesGroup.appendChild(axisTop.node);
            }
            this._axisTop = axisTop;
            this._axisTop.addObserver(this);
            for (var i = 0; i < this._plots.length; i += 1) {
                var plot = this._plots[i];
                if (!plot.axisX()) {
                    plot.axisX(this._axisTop);
                }
            }
            this._dirty = true;
            return this;
        }
    };
    Chart.prototype.axisRight = function (axisRight) {
        if (axisRight === undefined) {
            return this._axisRight;
        }
        else if (axisRight === null) {
            if (this._axisRight) {
                this._axisRight.removeObserver(this);
                this.axesGroup.removeChild(this._axisRight.node);
            }
            this._axisRight = null;
            return this;
        }
        else {
            if (this._axisRight) {
                this._axisRight.removeObserver(this);
                this.axesGroup.replaceChild(axisRight.node, this._axisRight.node);
            }
            else {
                this.axesGroup.appendChild(axisRight.node);
            }
            this._axisRight = axisRight;
            this._axisRight.addObserver(this);
            for (var i = 0; i < this._plots.length; i += 1) {
                var plot = this._plots[i];
                if (!plot.axisY()) {
                    plot.axisY(this._axisRight);
                }
            }
            this._dirty = true;
            return this;
        }
    };
    Chart.prototype.axisBottom = function (axisBottom) {
        if (axisBottom === undefined) {
            return this._axisBottom;
        }
        else if (axisBottom === null) {
            if (this._axisBottom) {
                this._axisBottom.removeObserver(this);
                this.axesGroup.removeChild(this._axisBottom.node);
            }
            this._axisBottom = null;
            return this;
        }
        else {
            if (this._axisBottom) {
                this._axisBottom.removeObserver(this);
                this.axesGroup.replaceChild(axisBottom.node, this._axisBottom.node);
            }
            else {
                this.axesGroup.appendChild(axisBottom.node);
            }
            this._axisBottom = axisBottom;
            this._axisBottom.addObserver(this);
            for (var i = 0; i < this._plots.length; i += 1) {
                var plot = this._plots[i];
                if (!plot.axisX()) {
                    plot.axisX(this._axisBottom);
                }
            }
            this._dirty = true;
            return this;
        }
    };
    Chart.prototype.axisLeft = function (axisLeft) {
        if (axisLeft === undefined) {
            return this._axisLeft;
        }
        else if (axisLeft === null) {
            if (this._axisLeft) {
                this._axisLeft.removeObserver(this);
                this.axesGroup.removeChild(this._axisLeft.node);
            }
            this._axisLeft = null;
            return this;
        }
        else {
            if (this._axisLeft) {
                this._axisLeft.removeObserver(this);
                this.axesGroup.replaceChild(axisLeft.node, this._axisLeft.node);
            }
            else {
                this.axesGroup.appendChild(axisLeft.node);
            }
            this._axisLeft = axisLeft;
            this._axisLeft.addObserver(this);
            for (var i = 0; i < this._plots.length; i += 1) {
                var plot = this._plots[i];
                if (!plot.axisY()) {
                    plot.axisY(this._axisLeft);
                }
            }
            this._dirty = true;
            return this;
        }
    };
    Chart.prototype.gutterTop = function (gutterTop) {
        if (gutterTop === undefined) {
            return this._gutterTop;
        }
        else {
            gutterTop = Length.fromAny(gutterTop, this.node);
            if (!this._gutterTop.equals(gutterTop)) {
                this._gutterTop = gutterTop;
                this._dirty = true;
            }
            return this;
        }
    };
    Chart.prototype.gutterRight = function (gutterRight) {
        if (gutterRight === undefined) {
            return this._gutterRight;
        }
        else {
            gutterRight = Length.fromAny(gutterRight, this.node);
            if (!this._gutterRight.equals(gutterRight)) {
                this._gutterRight = gutterRight;
                this._dirty = true;
            }
            return this;
        }
    };
    Chart.prototype.gutterBottom = function (gutterBottom) {
        if (gutterBottom === undefined) {
            return this._gutterBottom;
        }
        else {
            gutterBottom = Length.fromAny(gutterBottom, this.node);
            if (!this._gutterBottom.equals(gutterBottom)) {
                this._gutterBottom = gutterBottom;
                this._dirty = true;
            }
            return this;
        }
    };
    Chart.prototype.gutterLeft = function (gutterLeft) {
        if (gutterLeft === undefined) {
            return this._gutterLeft;
        }
        else {
            gutterLeft = Length.fromAny(gutterLeft, this.node);
            if (!this._gutterLeft.equals(gutterLeft)) {
                this._gutterLeft = gutterLeft;
                this._dirty = true;
            }
            return this;
        }
    };
    Chart.prototype.width = function (width) {
        if (width === undefined) {
            return this._width;
        }
        else {
            width = Length.fromAny(width, this.node);
            if (!this._width.equals(width)) {
                this._width = width;
                this._dirty = true;
            }
            return this;
        }
    };
    Chart.prototype.height = function (height) {
        if (height === undefined) {
            return this._height;
        }
        else {
            height = Length.fromAny(height, this.node);
            if (!this._height.equals(height)) {
                this._height = height;
                this._dirty = true;
            }
            return this;
        }
    };
    Chart.prototype.dataDomainX = function () {
        var n = this._plots.length;
        if (n) {
            var minX = void 0;
            var maxX = void 0;
            for (var i = 0; i < n; i += 1) {
                var domain = this._plots[i].dataDomainX();
                if (domain) {
                    if (minX === undefined || compare(minX, domain[0]) > 0) {
                        minX = domain[0];
                    }
                    if (maxX === undefined || compare(maxX, domain[1]) < 0) {
                        maxX = domain[1];
                    }
                }
            }
            if (minX !== undefined && maxX !== undefined) {
                return [minX, maxX];
            }
        }
        return undefined;
    };
    Chart.prototype.dataRangeX = function () {
        var n = this._plots.length;
        if (n) {
            var minX = void 0;
            var maxX = void 0;
            for (var i = 0; i < n; i += 1) {
                var range = this._plots[i].dataRangeX();
                if (range) {
                    if (minX === undefined || minX > range[0]) {
                        minX = range[0];
                    }
                    if (maxX === undefined || maxX < range[1]) {
                        maxX = range[1];
                    }
                }
            }
            if (minX !== undefined && maxX !== undefined) {
                return [minX, maxX];
            }
        }
        return undefined;
    };
    Chart.prototype.dataDomainY = function () {
        var n = this._plots.length;
        if (n) {
            var minY = void 0;
            var maxY = void 0;
            for (var i = 0; i < n; i += 1) {
                var domain = this._plots[i].dataDomainY();
                if (domain) {
                    if (minY === undefined || compare(minY, domain[0]) > 0) {
                        minY = domain[0];
                    }
                    if (maxY === undefined || compare(maxY, domain[1]) < 0) {
                        maxY = domain[1];
                    }
                }
            }
            if (minY !== undefined && maxY !== undefined) {
                return [minY, maxY];
            }
        }
        return undefined;
    };
    Chart.prototype.dataRangeY = function () {
        var n = this._plots.length;
        if (n) {
            var minY = void 0;
            var maxY = void 0;
            for (var i = 0; i < n; i += 1) {
                var range = this._plots[i].dataRangeY();
                if (range) {
                    if (minY === undefined || minY > range[0]) {
                        minY = range[0];
                    }
                    if (maxY === undefined || maxY < range[1]) {
                        maxY = range[1];
                    }
                }
            }
            if (minY !== undefined && maxY !== undefined) {
                return [minY, maxY];
            }
        }
        return undefined;
    };
    Chart.prototype.update = function () {
        if (this._dirty) {
            this._dirty = false;
            this.updateClipPath();
            this.updateSurface();
            this.updatePlots();
            this.updateAxes();
        }
    };
    Chart.prototype.updateClipPath = function () {
        var width = Math.max(0, this._width.pxValue() - this._gutterLeft.pxValue() - this._gutterRight.pxValue());
        var height = Math.max(0, this._height.pxValue() - this._gutterTop.pxValue() - this._gutterBottom.pxValue());
        this.clipRect.setAttribute('x', '0');
        this.clipRect.setAttribute('y', '0');
        this.clipRect.setAttribute('width', '' + width);
        this.clipRect.setAttribute('height', '' + height);
    };
    Chart.prototype.updateSurface = function () {
        var x = this._gutterLeft.pxValue();
        var y = this._gutterTop.pxValue();
        var width = Math.max(0, this._width.pxValue() - x - this._gutterRight.pxValue());
        var height = Math.max(0, this._height.pxValue() - y - this._gutterBottom.pxValue());
        this.surfaceRect.setAttribute('x', '' + x);
        this.surfaceRect.setAttribute('y', '' + y);
        this.surfaceRect.setAttribute('width', '' + width);
        this.surfaceRect.setAttribute('height', '' + height);
    };
    Chart.prototype.updatePlots = function () {
        var transform = Transform.translate(this._gutterLeft.pxValue(), this._gutterTop.pxValue());
        this.plotsGroup.setAttribute('transform', transform.toAttributeString());
        for (var i = 0; i < this._plots.length; i += 1) {
            this.updatePlot(this._plots[i]);
        }
    };
    Chart.prototype.updatePlot = function (plot) {
        var ax = plot.axisX();
        if (ax) {
            if (ax === this._axisBottom) {
                ax.scale(this._axisBottom.scale());
            }
            else if (ax === this._axisTop) {
                ax.scale(this._axisTop.scale());
            }
        }
        var ay = plot.axisY();
        if (ay) {
            if (ay === this._axisLeft) {
                ay.scale(this._axisLeft.scale());
            }
            else if (ay === this._axisRight) {
                ay.scale(this._axisRight.scale());
            }
        }
    };
    Chart.prototype.updateAxes = function () {
        this.updateAxisTop();
        this.updateAxisRight();
        this.updateAxisBottom();
        this.updateAxisLeft();
    };
    Chart.prototype.updateAxisTop = function () {
        if (this._axisTop) {
            var dx = this._gutterLeft.pxValue();
            var dy = this._gutterTop.pxValue();
            var transform = Transform.translate(dx, dy);
            this._axisTop.node.setAttribute('transform', transform.toAttributeString());
            this._axisTop.range(0, Math.max(0, this._width.pxValue() - dx - this._gutterRight.pxValue()));
        }
    };
    Chart.prototype.updateAxisRight = function () {
        if (this._axisRight) {
            var dx = Math.max(this._gutterLeft.pxValue(), this._width.pxValue() - this._gutterRight.pxValue());
            var dy = this._gutterTop.pxValue();
            var transform = Transform.translate(dx, dy);
            this._axisRight.node.setAttribute('transform', transform.toAttributeString());
            this._axisRight.range(Math.max(this._height.pxValue() - dy - this._gutterBottom.pxValue()), 0);
        }
    };
    Chart.prototype.updateAxisBottom = function () {
        if (this._axisBottom) {
            var dx = this._gutterLeft.pxValue();
            var dy = Math.max(this._gutterTop.pxValue(), this._height.pxValue() - this._gutterBottom.pxValue());
            var transform = Transform.translate(dx, dy);
            this._axisBottom.node.setAttribute('transform', transform.toAttributeString());
            this._axisBottom.range(0, Math.max(this._width.pxValue() - dx - this._gutterRight.pxValue()));
        }
    };
    Chart.prototype.updateAxisLeft = function () {
        if (this._axisLeft) {
            var dx = this._gutterLeft.pxValue();
            var dy = this._gutterTop.pxValue();
            var transform = Transform.translate(dx, dy);
            this._axisLeft.node.setAttribute('transform', transform.toAttributeString());
            this._axisLeft.range(Math.max(0, this._height.pxValue() - dy - this._gutterBottom.pxValue()), 0);
        }
    };
    Chart.prototype.render = function () {
        this.renderSurface();
        this.renderPlots();
        this.renderAxes();
    };
    Chart.prototype.renderSurface = function () {
        this.updateSurface();
    };
    Chart.prototype.renderPlots = function () {
        this.updatePlots();
        for (var i = 0; i < this._plots.length; i += 1) {
            this._plots[i].render();
        }
    };
    Chart.prototype.renderAxes = function () {
        this.updateAxes();
        if (this._axisTop) {
            this._axisTop.render();
        }
        if (this._axisRight) {
            this._axisRight.render();
        }
        if (this._axisBottom) {
            this._axisBottom.render();
        }
        if (this._axisLeft) {
            this._axisLeft.render();
        }
    };
    Chart.prototype.addObserver = function (observer) {
        if (this._observers.indexOf(observer) < 0) {
            this._observers.push(observer);
        }
    };
    Chart.prototype.removeObserver = function (observer) {
        var i = this._observers.indexOf(observer);
        if (i >= 0) {
            this._observers.splice(i, 1);
        }
    };
    Chart.prototype.plotDidScaleX = function (scale, axis, plot) {
        if (axis === this._axisBottom) {
            this.axisDidScaleBottom(scale);
        }
        else if (axis === this._axisTop) {
            this.axisDidScaleTop(scale);
        }
    };
    Chart.prototype.plotDidScaleY = function (scale, axis, plot) {
        if (axis === this._axisLeft) {
            this.axisDidScaleLeft(scale);
        }
        else if (axis === this._axisRight) {
            this.axisDidScaleRight(scale);
        }
    };
    Chart.prototype.plotDidInsertPoint = function (point, plot) {
        for (var i = 0; i < this._observers.length; i += 1) {
            var observer = this._observers[i];
            if (observer.chartDidInsertPoint) {
                observer.chartDidInsertPoint(point, plot, this);
            }
        }
    };
    Chart.prototype.plotDidRemovePoint = function (point, plot) {
        for (var i = 0; i < this._observers.length; i += 1) {
            var observer = this._observers[i];
            if (observer.chartDidRemovePoint) {
                observer.chartDidRemovePoint(point, plot, this);
            }
        }
    };
    Chart.prototype.axisDidScale = function (scale, axis) {
        if (axis === this._axisTop) {
            this.axisDidScaleTop(scale);
        }
        else if (axis === this._axisRight) {
            this.axisDidScaleRight(scale);
        }
        else if (axis === this._axisBottom) {
            this.axisDidScaleBottom(scale);
        }
        else if (axis === this._axisLeft) {
            this.axisDidScaleLeft(scale);
        }
    };
    Chart.prototype.axisDidScaleTop = function (scale) {
        for (var i = 0; i < this._observers.length; i += 1) {
            var observer = this._observers[i];
            if (observer.chartDidScaleTop) {
                observer.chartDidScaleTop(scale, this._axisTop, this);
            }
        }
    };
    Chart.prototype.axisDidScaleRight = function (scale) {
        for (var i = 0; i < this._observers.length; i += 1) {
            var observer = this._observers[i];
            if (observer.chartDidScaleRight) {
                observer.chartDidScaleRight(scale, this._axisRight, this);
            }
        }
    };
    Chart.prototype.axisDidScaleBottom = function (scale) {
        for (var i = 0; i < this._observers.length; i += 1) {
            var observer = this._observers[i];
            if (observer.chartDidScaleBottom) {
                observer.chartDidScaleBottom(scale, this._axisBottom, this);
            }
        }
    };
    Chart.prototype.axisDidScaleLeft = function (scale) {
        for (var i = 0; i < this._observers.length; i += 1) {
            var observer = this._observers[i];
            if (observer.chartDidScaleLeft) {
                observer.chartDidScaleLeft(scale, this._axisLeft, this);
            }
        }
    };
    Chart.create = function (tag) {
        if (tag === void 0) { tag = 'svg'; }
        var node = document.createElementNS('http://www.w3.org/2000/svg', tag);
        node.setAttribute('class', 'chart');
        node.style.setProperty('-webkit-user-select', 'none');
        node.style.setProperty('-moz-user-select', 'none');
        node.style.setProperty('-ms-user-select', 'none');
        node.style.setProperty('user-select', 'none');
        node.style.setProperty('cursor', 'default');
        return new Chart(node);
    };
    return Chart;
}());

var ChartAnimator = (function (_super) {
    __extends(ChartAnimator, _super);
    function ChartAnimator(chart, childViews) {
        var _this = _super.call(this) || this;
        _this.chart = chart;
        _this.childViews = childViews;
        _this.axisTop = null;
        _this.axisRight = null;
        _this.axisBottom = null;
        _this.axisLeft = null;
        _this.gutterTop = undefined;
        _this.gutterRight = undefined;
        _this.gutterBottom = undefined;
        _this.gutterLeft = undefined;
        _this.width = undefined;
        _this.height = undefined;
        return _this;
    }
    ChartAnimator.prototype.onFrame = function (t) {
        if (this.gutterTop) {
            this.gutterTop.onFrame(t);
        }
        if (this.gutterRight) {
            this.gutterRight.onFrame(t);
        }
        if (this.gutterBottom) {
            this.gutterBottom.onFrame(t);
        }
        if (this.gutterLeft) {
            this.gutterLeft.onFrame(t);
        }
        if (this.width) {
            this.width.onFrame(t);
        }
        if (this.height) {
            this.height.onFrame(t);
        }
        this.update();
    };
    ChartAnimator.prototype.updatePlots = function () {
        for (var i = 0; i < this.childViews.length; i += 1) {
            var child = this.childViews[i];
            if (child instanceof PlotView) {
                child.render();
            }
        }
    };
    ChartAnimator.prototype.updateAxes = function () {
        if (this.axisTop) {
            this.axisTop.render();
        }
        if (this.axisRight) {
            this.axisRight.render();
        }
        if (this.axisBottom) {
            this.axisBottom.render();
        }
        if (this.axisLeft) {
            this.axisLeft.render();
        }
    };
    ChartAnimator.prototype.update = function () {
        var node = this.chart.node;
        if (node.view instanceof ChartView) {
            node.view.autoscale();
            node.view.rebound();
        }
        this.chart.update();
        this.updatePlots();
        this.updateAxes();
    };
    return ChartAnimator;
}(FrameAnimator));
var ChartGutterTopAnimator = (function (_super) {
    __extends(ChartGutterTopAnimator, _super);
    function ChartGutterTopAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    ChartGutterTopAnimator.prototype.update = function (value) {
        this.parent.chart.gutterTop(value);
    };
    ChartGutterTopAnimator.get = function (self) {
        return self.chart.gutterTop();
    };
    ChartGutterTopAnimator.set = function (self, value) {
        if (value === null) {
            self.chartAnimator.gutterTop = undefined;
        }
        else if (!self.chart.gutterTop().equals(value)) {
            self.chart.gutterTop(value);
            self.requireResize();
        }
    };
    ChartGutterTopAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.chartAnimator.gutterTop) {
            self.chartAnimator.gutterTop = new ChartGutterTopAnimator(self.chartAnimator, value, trans);
        }
        return self.chartAnimator.gutterTop;
    };
    return ChartGutterTopAnimator;
}(ChildFrameAnimator));
var ChartGutterRightAnimator = (function (_super) {
    __extends(ChartGutterRightAnimator, _super);
    function ChartGutterRightAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    ChartGutterRightAnimator.prototype.update = function (value) {
        this.parent.chart.gutterRight(value);
    };
    ChartGutterRightAnimator.get = function (self) {
        return self.chart.gutterRight();
    };
    ChartGutterRightAnimator.set = function (self, value) {
        if (value === null) {
            self.chartAnimator.gutterRight = undefined;
        }
        else if (!self.chart.gutterRight().equals(value)) {
            self.chart.gutterRight(value);
            self.requireResize();
        }
    };
    ChartGutterRightAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.chartAnimator.gutterRight) {
            self.chartAnimator.gutterRight = new ChartGutterRightAnimator(self.chartAnimator, value, trans);
        }
        return self.chartAnimator.gutterRight;
    };
    return ChartGutterRightAnimator;
}(ChildFrameAnimator));
var ChartGutterBottomAnimator = (function (_super) {
    __extends(ChartGutterBottomAnimator, _super);
    function ChartGutterBottomAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    ChartGutterBottomAnimator.prototype.update = function (value) {
        this.parent.chart.gutterBottom(value);
    };
    ChartGutterBottomAnimator.get = function (self) {
        return self.chart.gutterBottom();
    };
    ChartGutterBottomAnimator.set = function (self, value) {
        if (value === null) {
            self.chartAnimator.gutterBottom = undefined;
        }
        else if (!self.chart.gutterBottom().equals(value)) {
            self.chart.gutterBottom(value);
            self.requireResize();
        }
    };
    ChartGutterBottomAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.chartAnimator.gutterBottom) {
            self.chartAnimator.gutterBottom = new ChartGutterBottomAnimator(self.chartAnimator, value, trans);
        }
        return self.chartAnimator.gutterBottom;
    };
    return ChartGutterBottomAnimator;
}(ChildFrameAnimator));
var ChartGutterLeftAnimator = (function (_super) {
    __extends(ChartGutterLeftAnimator, _super);
    function ChartGutterLeftAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    ChartGutterLeftAnimator.prototype.update = function (value) {
        this.parent.chart.gutterLeft(value);
    };
    ChartGutterLeftAnimator.get = function (self) {
        return self.chart.gutterLeft();
    };
    ChartGutterLeftAnimator.set = function (self, value) {
        if (value === null) {
            self.chartAnimator.gutterLeft = undefined;
        }
        else if (!self.chart.gutterLeft().equals(value)) {
            self.chart.gutterLeft(value);
            self.requireResize();
        }
    };
    ChartGutterLeftAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.chartAnimator.gutterLeft) {
            self.chartAnimator.gutterLeft = new ChartGutterLeftAnimator(self.chartAnimator, value, trans);
        }
        return self.chartAnimator.gutterLeft;
    };
    return ChartGutterLeftAnimator;
}(ChildFrameAnimator));
var ChartWidthAnimator = (function (_super) {
    __extends(ChartWidthAnimator, _super);
    function ChartWidthAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition, Animator.REQUIRES_RESIZE) || this;
    }
    ChartWidthAnimator.prototype.update = function (value) {
        this.parent.chart.width(value);
        this.updateTarget(this.parent.chart.node);
    };
    ChartWidthAnimator.get = function (self) {
        return self.chart.width();
    };
    ChartWidthAnimator.set = function (self, value) {
        if (value === null) {
            self.chartAnimator.width = undefined;
            self.chart.node.removeAttribute('width');
        }
        else {
            self.chart.width(value);
            var oldValue = self.chart.node.getAttribute('width');
            var newValue = '' + value.pxValue();
            if (oldValue !== newValue) {
                self.chart.node.setAttribute('width', newValue);
                self.requireResize();
            }
        }
    };
    ChartWidthAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.chartAnimator.width) {
            self.chartAnimator.width = new ChartWidthAnimator(self.chartAnimator, value, trans);
        }
        return self.chartAnimator.width;
    };
    return ChartWidthAnimator;
}(ChildFrameAnimator));
var ChartHeightAnimator = (function (_super) {
    __extends(ChartHeightAnimator, _super);
    function ChartHeightAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition, Animator.REQUIRES_RESIZE) || this;
    }
    ChartHeightAnimator.prototype.update = function (value) {
        this.parent.chart.height(value);
        this.updateTarget(this.parent.chart.node);
    };
    ChartHeightAnimator.get = function (self) {
        return self.chart.height();
    };
    ChartHeightAnimator.set = function (self, value) {
        if (value === null) {
            self.chartAnimator.height = undefined;
            self.chart.node.removeAttribute('height');
        }
        else {
            self.chart.height(value);
            var oldValue = self.chart.node.getAttribute('height');
            var newValue = '' + value.pxValue();
            if (oldValue !== newValue) {
                self.chart.node.setAttribute('height', newValue);
                self.requireResize();
            }
        }
    };
    ChartHeightAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.chartAnimator.height) {
            self.chartAnimator.height = new ChartHeightAnimator(self.chartAnimator, value, trans);
        }
        return self.chartAnimator.height;
    };
    return ChartHeightAnimator;
}(ChildFrameAnimator));
var ChartView = (function (_super) {
    __extends(ChartView, _super);
    function ChartView(chart) {
        var _this = _super.call(this, chart.node) || this;
        _this.chart = chart;
        _this._axisTop = null;
        _this._axisRight = null;
        _this._axisBottom = null;
        _this._axisLeft = null;
        _this._kinematic = null;
        _this._kinematicScaleTop = null;
        _this._kinematicScaleRight = null;
        _this._kinematicScaleBottom = null;
        _this._kinematicScaleLeft = null;
        _this._domainBoundTop = null;
        _this._domainBoundRight = null;
        _this._domainBoundBottom = null;
        _this._domainBoundLeft = null;
        _this._domainPaddingTop = null;
        _this._domainPaddingRight = null;
        _this._domainPaddingBottom = null;
        _this._domainPaddingLeft = null;
        _this._scaleTransition = null;
        _this._flags = _this._flags | (ChartView.FitX | ChartView.TrackX | ChartView.FitY | ChartView.TrackY);
        _this.chartAnimator = new ChartAnimator(_this.chart, _this._childViews);
        _this.chart.addObserver(_this);
        chart.node.addEventListener('kinematicscalestart', _this.onKinematicScaleStart.bind(_this));
        chart.node.addEventListener('kinematicscaleupdate', _this.onKinematicScaleUpdate.bind(_this));
        chart.node.addEventListener('kinematicscaleend', _this.onKinematicScaleEnd.bind(_this));
        return _this;
    }
    ChartView.prototype.plots = function () {
        var plots = [];
        for (var i = 0; i < this._childViews.length; i += 1) {
            var child = this._childViews[i];
            if (child instanceof PlotView) {
                plots.push(child);
            }
        }
        return plots;
    };
    ChartView.prototype.addPlot = function (newPlot) {
        this.appendChildView(newPlot);
    };
    ChartView.prototype.removePlot = function (oldPlot) {
        this.removeChildView(oldPlot);
    };
    ChartView.prototype.didInsertChildView = function (childView) {
        if (childView instanceof PlotView) {
            if (!childView.axisX()) {
                if (this._axisBottom) {
                    childView.axisX(this._axisBottom);
                }
                else if (this._axisTop) {
                    childView.axisX(this._axisTop);
                }
            }
            if (!childView.axisY()) {
                if (this._axisLeft) {
                    childView.axisY(this._axisLeft);
                }
                else if (this._axisRight) {
                    childView.axisY(this._axisRight);
                }
            }
            if (childView.parentView) {
                childView.plot.parentView(childView.parentView.chart);
            }
            this.chart.addPlot(childView.plot);
        }
        _super.prototype.didInsertChildView.call(this, childView);
    };
    ChartView.prototype.didRemoveChildView = function (childView) {
        if (childView instanceof PlotView) {
            this.chart.removePlot(childView.plot);
        }
        _super.prototype.didRemoveChildView.call(this, childView);
    };
    ChartView.prototype.axisTop = function (axisTop) {
        if (axisTop === undefined) {
            return this._axisTop;
        }
        else {
            if (this._axisTop) {
                this.removeChildView(this._axisTop);
            }
            this._axisTop = axisTop;
            if (this._axisTop) {
                this.appendChildView(this._axisTop);
            }
            this.chartAnimator.axisTop = axisTop;
            this.chart.axisTop(axisTop ? axisTop.axis : null);
            return this;
        }
    };
    ChartView.prototype.axisRight = function (axisRight) {
        if (axisRight === undefined) {
            return this._axisRight;
        }
        else {
            if (this._axisRight) {
                this.removeChildView(this._axisRight);
            }
            this._axisRight = axisRight;
            if (this._axisRight) {
                this.appendChildView(this._axisRight);
            }
            this.chartAnimator.axisRight = axisRight;
            this.chart.axisRight(axisRight ? axisRight.axis : null);
            return this;
        }
    };
    ChartView.prototype.axisBottom = function (axisBottom) {
        if (axisBottom === undefined) {
            return this._axisBottom;
        }
        else {
            if (this._axisBottom) {
                this.removeChildView(this._axisBottom);
            }
            this._axisBottom = axisBottom;
            if (this._axisBottom) {
                this.appendChildView(this._axisBottom);
            }
            this.chartAnimator.axisBottom = axisBottom;
            this.chart.axisBottom(axisBottom ? axisBottom.axis : null);
            return this;
        }
    };
    ChartView.prototype.axisLeft = function (axisLeft) {
        if (axisLeft === undefined) {
            return this._axisLeft;
        }
        else {
            if (this._axisLeft) {
                this.removeChildView(this._axisLeft);
            }
            this._axisLeft = axisLeft;
            if (this._axisLeft) {
                this.appendChildView(this._axisLeft);
            }
            this.chartAnimator.axisLeft = axisLeft;
            this.chart.axisLeft(axisLeft ? axisLeft.axis : null);
            return this;
        }
    };
    ChartView.prototype.kinematic = function (kinematic) {
        if (kinematic === undefined) {
            return this._kinematic;
        }
        else {
            if (kinematic === true) {
                kinematic = Kinematic.create();
            }
            else if (kinematic === false) {
                kinematic = null;
            }
            if (this._kinematic) {
                this._kinematic.surface(null);
            }
            this._kinematic = kinematic;
            if (this._kinematic) {
                this._kinematic.surface(this.chart.surfaceRect);
            }
            return this;
        }
    };
    ChartView.prototype.kinematicScaleTop = function (kinematicScaleTop) {
        if (kinematicScaleTop === undefined) {
            return this._kinematicScaleTop;
        }
        else {
            if (kinematicScaleTop === true) {
                kinematicScaleTop = KinematicScale.horizontal();
            }
            else if (kinematicScaleTop === false) {
                kinematicScaleTop = null;
            }
            if (this._kinematicScaleTop) {
                this._kinematicScaleTop.kinematic(null).ruler(null).scale(null);
            }
            this._kinematicScaleTop = kinematicScaleTop;
            if (this._kinematicScaleTop) {
                if (!this._kinematic) {
                    this.kinematic(true);
                }
                this._kinematicScaleTop.kinematic(this._kinematic)
                    .ruler(this.chart.surfaceRect)
                    .scale(this.chart.axisTop().scale());
                this.reboundX();
            }
            return this;
        }
    };
    ChartView.prototype.kinematicScaleRight = function (kinematicScaleRight) {
        if (kinematicScaleRight === undefined) {
            return this._kinematicScaleRight;
        }
        else {
            if (kinematicScaleRight === true) {
                kinematicScaleRight = KinematicScale.vertical();
            }
            else if (kinematicScaleRight === false) {
                kinematicScaleRight = null;
            }
            if (this._kinematicScaleRight) {
                this._kinematicScaleRight.kinematic(null).ruler(null).scale(null);
            }
            this._kinematicScaleRight = kinematicScaleRight;
            if (this._kinematicScaleRight) {
                if (!this._kinematic) {
                    this.kinematic(true);
                }
                this._kinematicScaleRight.kinematic(this._kinematic)
                    .ruler(this.chart.surfaceRect)
                    .scale(this.chart.axisRight().scale());
                this.reboundY();
            }
            return this;
        }
    };
    ChartView.prototype.kinematicScaleBottom = function (kinematicScaleBottom) {
        if (kinematicScaleBottom === undefined) {
            return this._kinematicScaleBottom;
        }
        else {
            if (kinematicScaleBottom === true) {
                kinematicScaleBottom = KinematicScale.horizontal();
            }
            else if (kinematicScaleBottom === false) {
                kinematicScaleBottom = null;
            }
            if (this._kinematicScaleBottom) {
                this._kinematicScaleBottom.kinematic(null).ruler(null).scale(null);
            }
            this._kinematicScaleBottom = kinematicScaleBottom;
            if (this._kinematicScaleBottom) {
                if (!this._kinematic) {
                    this.kinematic(true);
                }
                this._kinematicScaleBottom.kinematic(this._kinematic)
                    .ruler(this.chart.surfaceRect)
                    .scale(this.chart.axisBottom().scale());
                this.reboundX();
            }
            return this;
        }
    };
    ChartView.prototype.kinematicScaleLeft = function (kinematicScaleLeft) {
        if (kinematicScaleLeft === undefined) {
            return this._kinematicScaleLeft;
        }
        else {
            if (kinematicScaleLeft === true) {
                kinematicScaleLeft = KinematicScale.vertical();
            }
            else if (kinematicScaleLeft === false) {
                kinematicScaleLeft = null;
            }
            if (this._kinematicScaleLeft) {
                this._kinematicScaleLeft.kinematic(null).ruler(null).scale(null);
            }
            this._kinematicScaleLeft = kinematicScaleLeft;
            if (this._kinematicScaleLeft) {
                if (!this._kinematic) {
                    this.kinematic(true);
                }
                this._kinematicScaleLeft.kinematic(this._kinematic)
                    .ruler(this.chart.surfaceRect)
                    .scale(this.chart.axisLeft().scale());
                this.reboundY();
            }
            return this;
        }
    };
    ChartView.prototype.gutterTop = function (value, trans) {
        return this.propertyLength(ChartGutterTopAnimator, value, trans);
    };
    ChartView.prototype.gutterRight = function (value, trans) {
        return this.propertyLength(ChartGutterRightAnimator, value, trans);
    };
    ChartView.prototype.gutterBottom = function (value, trans) {
        return this.propertyLength(ChartGutterBottomAnimator, value, trans);
    };
    ChartView.prototype.gutterLeft = function (value, trans) {
        return this.propertyLength(ChartGutterLeftAnimator, value, trans);
    };
    ChartView.prototype.width = function (value, trans) {
        return this.propertyLength(ChartWidthAnimator, value, trans);
    };
    ChartView.prototype.height = function (value, trans) {
        return this.propertyLength(ChartHeightAnimator, value, trans);
    };
    ChartView.prototype.domainBoundTop = function (value) {
        if (value === undefined) {
            return this._domainBoundTop;
        }
        else {
            if (!equal(this._domainBoundTop, value)) {
                this._domainBoundTop = value;
                this.reboundY();
            }
            return this;
        }
    };
    ChartView.prototype.domainBoundRight = function (value) {
        if (value === undefined) {
            return this._domainBoundRight;
        }
        else {
            if (!equal(this._domainBoundRight, value)) {
                this._domainBoundRight = value;
                this.reboundX();
            }
            return this;
        }
    };
    ChartView.prototype.domainBoundBottom = function (value) {
        if (value === undefined) {
            return this._domainBoundBottom;
        }
        else {
            if (!equal(this._domainBoundBottom, value)) {
                this._domainBoundBottom = value;
                this.reboundY();
            }
            return this;
        }
    };
    ChartView.prototype.domainBoundLeft = function (value) {
        if (value === undefined) {
            return this._domainBoundLeft;
        }
        else {
            if (!equal(this._domainBoundLeft, value)) {
                this._domainBoundLeft = value;
                this.reboundX();
            }
            return this;
        }
    };
    ChartView.prototype.domainPaddingTop = function (value) {
        if (value === undefined) {
            return this._domainPaddingTop;
        }
        else {
            if (!equal(this._domainPaddingTop, value)) {
                this._domainPaddingTop = value;
                this.chartAnimator.animate();
            }
            return this;
        }
    };
    ChartView.prototype.domainPaddingRight = function (value) {
        if (value === undefined) {
            return this._domainPaddingRight;
        }
        else {
            if (!equal(this._domainPaddingRight, value)) {
                this._domainPaddingRight = value;
                this.chartAnimator.animate();
            }
            return this;
        }
    };
    ChartView.prototype.domainPaddingBottom = function (value) {
        if (value === undefined) {
            return this._domainPaddingBottom;
        }
        else {
            if (!equal(this._domainPaddingBottom, value)) {
                this._domainPaddingBottom = value;
                this.chartAnimator.animate();
            }
            return this;
        }
    };
    ChartView.prototype.domainPaddingLeft = function (value) {
        if (value === undefined) {
            return this._domainPaddingLeft;
        }
        else {
            if (!equal(this._domainPaddingLeft, value)) {
                this._domainPaddingLeft = value;
                this.chartAnimator.animate();
            }
            return this;
        }
    };
    ChartView.prototype.scaleTransition = function (trans) {
        if (trans === undefined) {
            return this._scaleTransition;
        }
        else {
            if (trans !== null) {
                trans = Transition.fromAny(trans);
            }
            this._scaleTransition = trans;
            return this;
        }
    };
    ChartView.prototype.fitX = function (fitX) {
        if (fitX === undefined) {
            return (this._flags & ChartView.FitX) !== 0;
        }
        else {
            var oldFlags = this._flags;
            var newFlags = void 0;
            if (fitX) {
                newFlags = oldFlags | (ChartView.FitX | ChartView.TrackX);
            }
            else {
                newFlags = oldFlags & ~(ChartView.FitX | ChartView.TrackX);
            }
            if (oldFlags !== newFlags) {
                this._flags = newFlags;
                this.chartAnimator.animate();
            }
            return this;
        }
    };
    ChartView.prototype.fitY = function (fitY) {
        if (fitY === undefined) {
            return (this._flags & ChartView.FitY) !== 0;
        }
        else {
            var oldFlags = this._flags;
            var newFlags = void 0;
            if (fitY) {
                newFlags = oldFlags | (ChartView.FitY | ChartView.TrackY);
            }
            else {
                newFlags = oldFlags & ~(ChartView.FitY | ChartView.TrackY);
            }
            if (oldFlags !== newFlags) {
                this._flags = newFlags;
                this.chartAnimator.animate();
            }
            return this;
        }
    };
    ChartView.prototype.dataDomainX = function () {
        var domain = this.chart.dataDomainX();
        if (domain) {
            if (this._domainPaddingLeft) {
                domain[0] = (+domain[0] - +this._domainPaddingLeft);
            }
            if (this._domainPaddingRight) {
                domain[1] = (+domain[1] + +this._domainPaddingRight);
            }
        }
        return domain;
    };
    ChartView.prototype.dataRangeX = function () {
        return this.chart.dataRangeX();
    };
    ChartView.prototype.dataDomainY = function () {
        var domain = this.chart.dataDomainY();
        if (domain) {
            if (this._domainPaddingBottom) {
                domain[0] = (+domain[0] - +this._domainPaddingBottom);
            }
            if (this._domainPaddingTop) {
                domain[1] = (+domain[1] + +this._domainPaddingTop);
            }
        }
        return domain;
    };
    ChartView.prototype.dataRangeY = function () {
        return this.chart.dataRangeY();
    };
    ChartView.prototype.domainColor = function (domainColor, trans) {
        domainColor = Color.fromAny(domainColor);
        if (this._axisTop) {
            this._axisTop.domainColor(domainColor, trans);
        }
        if (this._axisRight) {
            this._axisRight.domainColor(domainColor, trans);
        }
        if (this._axisBottom) {
            this._axisBottom.domainColor(domainColor, trans);
        }
        if (this._axisLeft) {
            this._axisLeft.domainColor(domainColor, trans);
        }
        return this;
    };
    ChartView.prototype.domainWidth = function (domainWidth, trans) {
        if (this._axisTop) {
            this._axisTop.domainWidth(domainWidth, trans);
        }
        if (this._axisRight) {
            this._axisRight.domainWidth(domainWidth, trans);
        }
        if (this._axisBottom) {
            this._axisBottom.domainWidth(domainWidth, trans);
        }
        if (this._axisLeft) {
            this._axisLeft.domainWidth(domainWidth, trans);
        }
        return this;
    };
    ChartView.prototype.domainSerif = function (domainSerif, trans) {
        if (this._axisTop) {
            this._axisTop.domainSerif(domainSerif, trans);
        }
        if (this._axisRight) {
            this._axisRight.domainSerif(domainSerif, trans);
        }
        if (this._axisBottom) {
            this._axisBottom.domainSerif(domainSerif, trans);
        }
        if (this._axisLeft) {
            this._axisLeft.domainSerif(domainSerif, trans);
        }
        return this;
    };
    ChartView.prototype.tickTransition = function (tickTransition) {
        if (this._axisTop) {
            this._axisTop.tickTransition(tickTransition);
        }
        if (this._axisRight) {
            this._axisRight.tickTransition(tickTransition);
        }
        if (this._axisBottom) {
            this._axisBottom.tickTransition(tickTransition);
        }
        if (this._axisLeft) {
            this._axisLeft.tickTransition(tickTransition);
        }
        return this;
    };
    ChartView.prototype.tickMarkColor = function (tickMarkColor, trans) {
        tickMarkColor = Color.fromAny(tickMarkColor);
        if (this._axisTop) {
            this._axisTop.tickMarkColor(tickMarkColor, trans);
        }
        if (this._axisRight) {
            this._axisRight.tickMarkColor(tickMarkColor, trans);
        }
        if (this._axisBottom) {
            this._axisBottom.tickMarkColor(tickMarkColor, trans);
        }
        if (this._axisLeft) {
            this._axisLeft.tickMarkColor(tickMarkColor, trans);
        }
        return this;
    };
    ChartView.prototype.tickMarkWidth = function (tickMarkWidth, trans) {
        if (this._axisTop) {
            this._axisTop.tickMarkWidth(tickMarkWidth, trans);
        }
        if (this._axisRight) {
            this._axisRight.tickMarkWidth(tickMarkWidth, trans);
        }
        if (this._axisBottom) {
            this._axisBottom.tickMarkWidth(tickMarkWidth, trans);
        }
        if (this._axisLeft) {
            this._axisLeft.tickMarkWidth(tickMarkWidth, trans);
        }
        return this;
    };
    ChartView.prototype.tickMarkLength = function (tickMarkLength, trans) {
        if (this._axisTop) {
            this._axisTop.tickMarkLength(tickMarkLength, trans);
        }
        if (this._axisRight) {
            this._axisRight.tickMarkLength(tickMarkLength, trans);
        }
        if (this._axisBottom) {
            this._axisBottom.tickMarkLength(tickMarkLength, trans);
        }
        if (this._axisLeft) {
            this._axisLeft.tickMarkLength(tickMarkLength, trans);
        }
        return this;
    };
    ChartView.prototype.tickLabelColor = function (tickLabelColor, trans) {
        tickLabelColor = Color.fromAny(tickLabelColor);
        if (this._axisTop) {
            this._axisTop.tickLabelColor(tickLabelColor, trans);
        }
        if (this._axisRight) {
            this._axisRight.tickLabelColor(tickLabelColor, trans);
        }
        if (this._axisBottom) {
            this._axisBottom.tickLabelColor(tickLabelColor, trans);
        }
        if (this._axisLeft) {
            this._axisLeft.tickLabelColor(tickLabelColor, trans);
        }
        return this;
    };
    ChartView.prototype.tickLabelPadding = function (tickLabelPadding, trans) {
        if (this._axisTop) {
            this._axisTop.tickLabelPadding(tickLabelPadding, trans);
        }
        if (this._axisRight) {
            this._axisRight.tickLabelPadding(tickLabelPadding, trans);
        }
        if (this._axisBottom) {
            this._axisBottom.tickLabelPadding(tickLabelPadding, trans);
        }
        if (this._axisLeft) {
            this._axisLeft.tickLabelPadding(tickLabelPadding, trans);
        }
        return this;
    };
    ChartView.prototype.render = function () {
        this.chartAnimator.update();
    };
    ChartView.prototype.reboundX = function () {
        var kinematicScaleBottom = this._kinematicScaleBottom;
        var kinematicScaleTop = this._kinematicScaleTop;
        var domainBoundLeft = this._domainBoundLeft;
        var domainBoundRight = this._domainBoundRight;
        if ((kinematicScaleBottom || kinematicScaleTop)
            && (domainBoundLeft !== null || domainBoundRight !== null)) {
            var domain = this.dataDomainX();
            if (domain) {
                var xMin = domain[0];
                if (domainBoundLeft !== null && typeof domainBoundLeft !== 'boolean') {
                    xMin = (+xMin - +domainBoundLeft);
                }
                var xMax = domain[1];
                if (domainBoundRight !== null && typeof domainBoundRight !== 'boolean') {
                    xMax = (+xMax + +domainBoundRight);
                }
                if (kinematicScaleBottom) {
                    if (domainBoundLeft !== null) {
                        kinematicScaleBottom.domainMin(xMin);
                    }
                    if (domainBoundRight !== null) {
                        kinematicScaleBottom.domainMax(xMax);
                    }
                }
                if (kinematicScaleTop) {
                    if (domainBoundLeft !== null) {
                        kinematicScaleTop.domainMin(xMin);
                    }
                    if (domainBoundRight !== null) {
                        kinematicScaleTop.domainMax(xMax);
                    }
                }
            }
        }
    };
    ChartView.prototype.reboundY = function () {
        var kinematicScaleLeft = this._kinematicScaleLeft;
        var kinematicScaleRight = this._kinematicScaleRight;
        var domainBoundBottom = this._domainBoundBottom;
        var domainBoundTop = this._domainBoundTop;
        if ((kinematicScaleLeft || kinematicScaleRight)
            && (domainBoundBottom !== null && domainBoundTop !== null)) {
            var domain = this.dataDomainY();
            if (domain) {
                var yMin = domain[0];
                if (typeof domainBoundBottom !== 'boolean') {
                    yMin = (+yMin - +domainBoundBottom);
                }
                var yMax = domain[1];
                if (typeof domainBoundTop !== 'boolean') {
                    yMax = (+yMax + +domainBoundTop);
                }
                if (kinematicScaleLeft) {
                    if (domainBoundBottom !== null) {
                        kinematicScaleLeft.domainMin(yMin);
                    }
                    if (domainBoundTop !== null) {
                        kinematicScaleLeft.domainMax(yMax);
                    }
                }
                if (kinematicScaleRight) {
                    if (domainBoundBottom !== null) {
                        kinematicScaleRight.domainMin(yMin);
                    }
                    if (domainBoundTop !== null) {
                        kinematicScaleRight.domainMax(yMax);
                    }
                }
            }
        }
    };
    ChartView.prototype.rebound = function () {
        this.reboundX();
        this.reboundY();
    };
    ChartView.prototype.autoscaleX = function (trans) {
        if ((this._flags & ChartView.TrackX) !== 0) {
            var axisBottom = this._axisBottom;
            var axisTop = this._axisTop;
            if (axisBottom || axisTop) {
                var domain = this.dataDomainX();
                if (domain) {
                    if (axisBottom) {
                        axisBottom.domain(domain, undefined, trans);
                    }
                    if (axisTop) {
                        axisTop.domain(domain, undefined, trans);
                    }
                }
            }
        }
    };
    ChartView.prototype.autoscaleY = function (trans) {
        if ((this._flags & ChartView.TrackY) !== 0) {
            var axisLeft = this._axisLeft;
            var axisRight = this._axisRight;
            if (axisLeft || axisRight) {
                var domain = this.dataDomainY();
                if (domain) {
                    if (axisLeft) {
                        axisLeft.domain(domain, undefined, trans);
                    }
                    if (axisRight) {
                        axisRight.domain(domain, undefined, trans);
                    }
                }
            }
        }
    };
    ChartView.prototype.autoscale = function (trans) {
        if (trans === void 0) { trans = this._scaleTransition || undefined; }
        this.autoscaleX(trans);
        this.autoscaleY(trans);
    };
    ChartView.prototype.autosize = function () {
        var node = this.node;
        do {
            var parentNode = node.parentNode;
            if (parentNode) {
                if (parentNode instanceof HTMLElement) {
                    this.width(parentNode.offsetWidth)
                        .height(parentNode.offsetHeight);
                    return;
                }
                node = parentNode;
                continue;
            }
            return;
        } while (true);
    };
    ChartView.prototype.didResize = function () {
        _super.prototype.didResize.call(this);
        this.autosize();
        this.render();
    };
    ChartView.prototype.didReview = function (viewable) {
        _super.prototype.didReview.call(this, viewable);
        this.chartAnimator.enabled(viewable);
    };
    ChartView.prototype.didSetState = function (newState, oldState) {
        _super.prototype.didSetState.call(this, newState, oldState);
        var trans = newState.get('transition').cast(Transition.Form);
        var scaleTransition = newState.get('scaleTransition').cast(Transition.Form);
        if (scaleTransition) {
            this.scaleTransition(scaleTransition);
        }
        var domainBoundTop = newState.get('domainBoundTop').cast(UiValue.Form);
        if (domainBoundTop !== undefined) {
            this.domainBoundTop(domainBoundTop);
        }
        var domainBoundRight = newState.get('domainBoundRight').cast(UiValue.Form);
        if (domainBoundRight !== undefined) {
            this.domainBoundRight(domainBoundRight);
        }
        var domainBoundBottom = newState.get('domainBoundBottom').cast(UiValue.Form);
        if (domainBoundBottom !== undefined) {
            this.domainBoundBottom(domainBoundBottom);
        }
        var domainBoundLeft = newState.get('domainBoundLeft').cast(UiValue.Form);
        if (domainBoundLeft !== undefined) {
            this.domainBoundLeft(domainBoundLeft);
        }
        var domainPaddingTop = newState.get('domainPaddingTop').cast(UiValue.Form);
        if (domainPaddingTop !== undefined) {
            this.domainPaddingTop(domainPaddingTop);
        }
        var domainPaddingRight = newState.get('domainPaddingRight').cast(UiValue.Form);
        if (domainPaddingRight !== undefined) {
            this.domainPaddingRight(domainPaddingRight);
        }
        var domainPaddingBottom = newState.get('domainPaddingBottom').cast(UiValue.Form);
        if (domainPaddingBottom !== undefined) {
            this.domainPaddingBottom(domainPaddingBottom);
        }
        var domainPaddingLeft = newState.get('domainPaddingLeft').cast(UiValue.Form);
        if (domainPaddingLeft !== undefined) {
            this.domainPaddingLeft(domainPaddingLeft);
        }
        var gutterTop = newState.get('gutterTop').cast(Length.Form);
        if (gutterTop) {
            this.gutterTop(gutterTop, trans);
        }
        var gutterRight = newState.get('gutterRight').cast(Length.Form);
        if (gutterRight) {
            this.gutterRight(gutterRight, trans);
        }
        var gutterBottom = newState.get('gutterBottom').cast(Length.Form);
        if (gutterBottom) {
            this.gutterBottom(gutterBottom, trans);
        }
        var gutterLeft = newState.get('gutterLeft').cast(Length.Form);
        if (gutterLeft) {
            this.gutterLeft(gutterLeft, trans);
        }
    };
    ChartView.prototype.addObserver = function (observer) {
        this.chart.addObserver(observer);
    };
    ChartView.prototype.removeObserver = function (observer) {
        this.chart.removeObserver(observer);
    };
    ChartView.prototype.chartDidInsertPoint = function (point, plot, chart) {
        this.chartAnimator.animate();
    };
    ChartView.prototype.chartDidRemovePoint = function (point, plot, chart) {
        this.chartAnimator.animate();
    };
    ChartView.prototype.chartDidScaleTop = function (scale, axis, chart) {
        if (this._kinematicScaleTop) {
            this._kinematicScaleTop.scale(scale);
        }
        for (var i = 0; i < this._childViews.length; i += 1) {
            var child = this._childViews[i];
            if (child instanceof PlotView && child.axisX() === this._axisTop) {
                child.scaleX(scale);
            }
        }
    };
    ChartView.prototype.chartDidScaleRight = function (scale, axis, chart) {
        if (this._kinematicScaleRight) {
            this._kinematicScaleRight.scale(scale);
        }
        for (var i = 0; i < this._childViews.length; i += 1) {
            var child = this._childViews[i];
            if (child instanceof PlotView && child.axisY() === this._axisRight) {
                child.scaleY(scale);
            }
        }
    };
    ChartView.prototype.chartDidScaleBottom = function (scale, axis, chart) {
        if (this._kinematicScaleBottom) {
            this._kinematicScaleBottom.scale(scale);
        }
        for (var i = 0; i < this._childViews.length; i += 1) {
            var child = this._childViews[i];
            if (child instanceof PlotView && child.axisX() === this._axisBottom) {
                child.scaleX(scale);
            }
        }
    };
    ChartView.prototype.chartDidScaleLeft = function (scale, axis, chart) {
        if (this._kinematicScaleLeft) {
            this._kinematicScaleLeft.scale(scale);
        }
        for (var i = 0; i < this._childViews.length; i += 1) {
            var child = this._childViews[i];
            if (child instanceof PlotView && child.axisY() === this._axisLeft) {
                child.scaleY(scale);
            }
        }
    };
    ChartView.prototype.xScaleDidStart = function (kinematicScale) {
        this._flags &= ~ChartView.TrackX;
    };
    ChartView.prototype.yScaleDidStart = function (kinematicScale) {
        this._flags &= ~ChartView.TrackY;
    };
    ChartView.prototype.xScaleDidEnd = function (kinematicScale) {
        if ((this._flags & ChartView.FitX) !== 0) {
            var domain = kinematicScale.scale().domain();
            var xMin = kinematicScale.domainMin();
            var xMax = kinematicScale.domainMax();
            if (domain && xMin !== null && xMax !== null) {
                var x0 = domain[0];
                var x1 = domain[1];
                var order = compare(x0, x1);
                if (order < 0) {
                    if (compare(x0, xMin) <= 0 && compare(x1, xMax) >= 0) {
                        this._flags |= ChartView.TrackX;
                    }
                }
                else if (order > 0) {
                    if (compare(x1, xMin) <= 0 && compare(x0, xMax) >= 0) {
                        this._flags |= ChartView.TrackX;
                    }
                }
            }
        }
    };
    ChartView.prototype.yScaleDidEnd = function (kinematicScale) {
        if ((this._flags & ChartView.FitY) !== 0) {
            var domain = kinematicScale.scale().domain();
            var yMin = kinematicScale.domainMin();
            var yMax = kinematicScale.domainMax();
            if (domain && yMin !== null && yMax !== null) {
                var y0 = domain[0];
                var y1 = domain[1];
                var order = compare(y0, y1);
                if (order < 0) {
                    if (compare(y0, yMin) <= 0 && compare(y1, yMax) >= 0) {
                        this._flags |= ChartView.TrackX;
                    }
                }
                else if (order > 0) {
                    if (compare(y1, yMin) <= 0 && compare(y0, yMax) >= 0) {
                        this._flags |= ChartView.TrackX;
                    }
                }
            }
        }
    };
    ChartView.prototype.onKinematicScaleStart = function (event) {
        if (this._axisTop && event.kinematicScale === this._kinematicScaleTop) {
            this._axisTop.frame(this._axisTop.scale());
            this._axisTop.domain(event.scale.domain());
            this.xScaleDidStart(event.kinematicScale);
        }
        else if (this._axisRight && event.kinematicScale === this._kinematicScaleRight) {
            this._axisRight.frame(this._axisRight.scale());
            this._axisRight.domain(event.scale.domain());
            this.yScaleDidStart(event.kinematicScale);
        }
        else if (this._axisBottom && event.kinematicScale === this._kinematicScaleBottom) {
            this._axisBottom.frame(this._axisBottom.scale());
            this._axisBottom.domain(event.scale.domain());
            this.xScaleDidStart(event.kinematicScale);
        }
        else if (this._axisLeft && event.kinematicScale === this._kinematicScaleLeft) {
            this._axisLeft.frame(this._axisLeft.scale());
            this._axisLeft.domain(event.scale.domain());
            this.yScaleDidStart(event.kinematicScale);
        }
    };
    ChartView.prototype.onKinematicScaleUpdate = function (event) {
        if (this._axisTop && event.kinematicScale === this._kinematicScaleTop) {
            this._axisTop.domain(event.scale.domain());
        }
        else if (this._axisRight && event.kinematicScale === this._kinematicScaleRight) {
            this._axisRight.domain(event.scale.domain());
        }
        else if (this._axisBottom && event.kinematicScale === this._kinematicScaleBottom) {
            this._axisBottom.domain(event.scale.domain());
        }
        else if (this._axisLeft && event.kinematicScale === this._kinematicScaleLeft) {
            this._axisLeft.domain(event.scale.domain());
        }
    };
    ChartView.prototype.onKinematicScaleEnd = function (event) {
        if (this._axisTop && event.kinematicScale === this._kinematicScaleTop) {
            this._axisTop.frame(null);
            this._axisTop.domain(event.scale.domain());
            this.xScaleDidEnd(event.kinematicScale);
        }
        else if (this._axisRight && event.kinematicScale === this._kinematicScaleRight) {
            this._axisRight.frame(null);
            this._axisRight.domain(event.scale.domain());
            this.yScaleDidEnd(event.kinematicScale);
        }
        else if (this._axisBottom && event.kinematicScale === this._kinematicScaleBottom) {
            this._axisBottom.frame(null);
            this._axisBottom.domain(event.scale.domain());
            this.xScaleDidEnd(event.kinematicScale);
        }
        else if (this._axisLeft && event.kinematicScale === this._kinematicScaleLeft) {
            this._axisLeft.frame(null);
            this._axisLeft.domain(event.scale.domain());
            this.yScaleDidEnd(event.kinematicScale);
        }
    };
    ChartView.create = function (node) {
        if (node instanceof ChartView) {
            return node;
        }
        else if (node instanceof NodeView) {
            throw new TypeError('' + node);
        }
        else if (node === undefined || typeof node === 'string') {
            return new ChartView(Chart.create(node));
        }
        else if (node.view instanceof ChartView) {
            return node.view;
        }
        else if (node.view) {
            throw new TypeError('' + node.view);
        }
        else if (node instanceof SVGElement) {
            return new ChartView(new Chart(node));
        }
        else {
            throw new TypeError('' + node);
        }
    };
    ChartView.FitX = 1 << 16;
    ChartView.TrackX = 1 << 17;
    ChartView.FitY = 1 << 18;
    ChartView.TrackY = 1 << 19;
    return ChartView;
}(SvgView));

var ChartModel = (function (_super) {
    __extends(ChartModel, _super);
    function ChartModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ChartModel.Params = SvgModel.Params.concat([
        new ModelParam('transition', Selector.get('transition').or(Selector.get('chart').get('transition'))),
        new ModelParam('scaleTransition', Selector.get('scaleTransition').or(Selector.get('chart').get('scaleTransition'))),
        new ModelParam('domainBoundTop', Selector.get('domainBoundTop')),
        new ModelParam('domainBoundRight', Selector.get('domainBoundRight')),
        new ModelParam('domainBoundBottom', Selector.get('domainBoundBottom')),
        new ModelParam('domainBoundLeft', Selector.get('domainBoundLeft')),
        new ModelParam('domainPaddingTop', Selector.get('domainPaddingTop').or(Selector.get('chart').get('domainPaddingTop'))),
        new ModelParam('domainPaddingRight', Selector.get('domainPaddingRight').or(Selector.get('chart').get('domainPaddingRight'))),
        new ModelParam('domainPaddingBottom', Selector.get('domainPaddingBottom').or(Selector.get('chart').get('domainPaddingBottom'))),
        new ModelParam('domainPaddingLeft', Selector.get('domainPaddingLeft').or(Selector.get('chart').get('domainPaddingLeft'))),
        new ModelParam('gutterTop', Selector.get('top').get('gutter').or(Selector.get('chart').get('top').get('gutter'))),
        new ModelParam('gutterRight', Selector.get('right').get('gutter').or(Selector.get('chart').get('right').get('gutter'))),
        new ModelParam('gutterBottom', Selector.get('bottom').get('gutter').or(Selector.get('chart').get('bottom').get('gutter'))),
        new ModelParam('gutterLeft', Selector.get('left').get('gutter').or(Selector.get('chart').get('left').get('gutter'))),
    ]);
    return ChartModel;
}(SvgModel));

var ChartForm = (function (_super) {
    __extends(ChartForm, _super);
    function ChartForm() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(ChartForm.prototype, "tag", {
        get: function () {
            return 'chart';
        },
        enumerable: true,
        configurable: true
    });
    ChartForm.prototype.castView = function (value, stack, factory) {
        if (value.tag === this.tag) {
            var view = ChartView.create();
            var modelDef = this.materializeView(view, value, stack, factory);
            view.setModel(modelDef);
            return view;
        }
        return undefined;
    };
    ChartForm.prototype.castModel = function (value, stack, factory) {
        if (value.tag === this.tag) {
            var model = new ChartModel();
            var dataDef = this.materializeModel(model, value, stack, factory);
            model.setData(dataDef);
            return model;
        }
        return undefined;
    };
    ChartForm.prototype.materializeKinematic = function (kinematicScale, kinematicDef) {
        var wheel = kinematicDef.get('wheel');
        if (wheel.isDefined()) {
            kinematicScale.wheel(wheel.booleanValue(false));
        }
    };
    ChartForm.prototype.materializeAxisTop = function (view, type, axisDef, stack, factory) {
        var axisTop = AxisView.top(type);
        axisTop.setModel(AxisForm.Form.materializeView(axisTop, axisDef, stack, factory));
        view.axisTop(axisTop);
        var kinematicDef = axisDef.get('kinematic');
        if (kinematicDef.isDefined() && kinematicDef.booleanValue() !== false) {
            view.kinematicScaleTop(true);
            this.materializeKinematic(view.kinematicScaleTop(), kinematicDef);
        }
        return axisTop;
    };
    ChartForm.prototype.materializeAxisRight = function (view, type, axisDef, stack, factory) {
        var axisRight = AxisView.right(type);
        axisRight.setModel(AxisForm.Form.materializeView(axisRight, axisDef, stack, factory));
        view.axisRight(axisRight);
        var kinematicDef = axisDef.get('kinematic');
        if (kinematicDef.isDefined() && kinematicDef.booleanValue() !== false) {
            view.kinematicScaleRight(true);
            this.materializeKinematic(view.kinematicScaleRight(), kinematicDef);
        }
        return axisRight;
    };
    ChartForm.prototype.materializeAxisBottom = function (view, type, axisDef, stack, factory) {
        var axisBottom = AxisView.bottom(type);
        axisBottom.setModel(AxisForm.Form.materializeView(axisBottom, axisDef, stack, factory));
        view.axisBottom(axisBottom);
        var kinematicDef = axisDef.get('kinematic');
        if (kinematicDef.isDefined() && kinematicDef.booleanValue() !== false) {
            view.kinematicScaleBottom(true);
            this.materializeKinematic(view.kinematicScaleBottom(), kinematicDef);
        }
        return axisBottom;
    };
    ChartForm.prototype.materializeAxisLeft = function (view, type, axisDef, stack, factory) {
        var axisLeft = AxisView.left(type);
        axisLeft.setModel(AxisForm.Form.materializeView(axisLeft, axisDef, stack, factory));
        view.axisLeft(axisLeft);
        var kinematicDef = axisDef.get('kinematic');
        if (kinematicDef.isDefined() && kinematicDef.booleanValue() !== false) {
            view.kinematicScaleLeft(true);
            this.materializeKinematic(view.kinematicScaleLeft(), kinematicDef);
        }
        return axisLeft;
    };
    ChartForm.prototype.materializeViewParam = function (view, param, stack, factory) {
        if (param.key instanceof Text$1) {
            var key = param.key.value;
            if (key === 'top') {
                var axisTopHeader = param.toValue().header('axis');
                if (axisTopHeader.isDefined()) {
                    var type = axisTopHeader.get('type').stringValue('linear');
                    this.materializeAxisTop(view, type, param.toValue(), stack, factory);
                }
            }
            else if (key === 'right') {
                var axisRightHeader = param.toValue().header('axis');
                if (axisRightHeader.isDefined()) {
                    var type = axisRightHeader.get('type').stringValue('linear');
                    this.materializeAxisRight(view, type, param.toValue(), stack, factory);
                }
            }
            else if (key === 'bottom') {
                var axisBottomHeader = param.toValue().header('axis');
                if (axisBottomHeader.isDefined()) {
                    var type = axisBottomHeader.get('type').stringValue('linear');
                    this.materializeAxisBottom(view, type, param.toValue(), stack, factory);
                }
            }
            else if (key === 'left') {
                var axisLeftHeader = param.toValue().header('axis');
                if (axisLeftHeader.isDefined()) {
                    var type = axisLeftHeader.get('type').stringValue('linear');
                    this.materializeAxisLeft(view, type, param.toValue(), stack, factory);
                }
            }
        }
        else {
            var plot = PlotForm.Global.castView(param.toValue(), stack, factory);
            if (plot) {
                view.addPlot(plot);
                return plot;
            }
        }
        return _super.prototype.materializeViewParam.call(this, view, param, stack, factory);
    };
    ChartForm.prototype.materializeModelParam = function (model, param, stack, factory) {
        if (param instanceof Attr && param.key.value === this.tag) {
            return Item.Absent;
        }
        return _super.prototype.materializeModelParam.call(this, model, param, stack, factory);
    };
    ChartForm.Form = new ChartForm();
    return ChartForm;
}(SvgForm));
UiForm.addGlobal(ChartForm.Form);

var Gauge = (function () {
    function Gauge(node) {
        this.node = node;
        this._meter = 0;
        this._width = Length.zero(node);
        this._height = Length.zero(node);
        this._innerRadius = Length.zero();
        this._outerRadius = Length.zero();
        this._faceColor = Color.black();
        this._dialColor = Color.black();
        this._dialCornerRadius = Length.zero();
        this._value = null;
        this._valueSize = null;
        this._valueColor = Color.black();
        this.dirty = true;
        this.observers = [];
        this.gaugeBox = document.createElementNS('http://www.w3.org/2000/svg', 'g');
        this.gaugeBox.setAttribute('class', 'gauge-box');
        this.node.appendChild(this.gaugeBox);
        this.arcGroup = document.createElementNS('http://www.w3.org/2000/svg', 'g');
        this.arcGroup.setAttribute('class', 'arc-group');
        this.gaugeBox.appendChild(this.arcGroup);
        this.face = ArcView.create('face');
        this.face.node.setAttribute('class', 'face');
        this.face.deltaAngle(2 * Math.PI * 1, undefined);
        this.arcGroup.appendChild(this.face.node);
        this.dial = ArcView.create('dial');
        this.dial.node.setAttribute('class', 'dial');
        this.dial.deltaAngle(2 * Math.PI * 0, undefined);
        this.arcGroup.appendChild(this.dial.node);
    }
    Gauge.prototype.meter = function (newValue) {
        if (newValue === undefined) {
            return this._meter;
        }
        else {
            var oldValue = this._meter;
            if (oldValue !== newValue) {
                this._meter = newValue;
                this.dirty = true;
                for (var i = 0; i < this.observers.length; i += 1) {
                    var observer = this.observers[i];
                    if (observer.gaugeDidSetMeter) {
                        observer.gaugeDidSetMeter(newValue, oldValue, this);
                    }
                }
            }
            return this;
        }
    };
    Gauge.prototype.width = function (value) {
        if (value === undefined) {
            return this._width;
        }
        else {
            value = Length.fromAny(value, this.node);
            if (!this._width.equals(value)) {
                this._width = value;
                this.dirty = true;
            }
            return this;
        }
    };
    Gauge.prototype.height = function (value) {
        if (value === undefined) {
            return this._height;
        }
        else {
            value = Length.fromAny(value, this.node);
            if (!this._height.equals(value)) {
                this._height = value;
                this.dirty = true;
            }
            return this;
        }
    };
    Gauge.prototype.innerRadius = function (value) {
        if (value === undefined) {
            return this._innerRadius;
        }
        else {
            value = Length.fromAny(value);
            if (!this._innerRadius.equals(value)) {
                this._innerRadius = value;
                this.dirty = true;
            }
            return this;
        }
    };
    Gauge.prototype.outerRadius = function (value) {
        if (value === undefined) {
            return this._outerRadius;
        }
        else {
            value = Length.fromAny(value);
            if (!this._outerRadius.equals(value)) {
                this._outerRadius = value;
                this.dirty = true;
            }
            return this;
        }
    };
    Gauge.prototype.faceColor = function (value) {
        if (value === undefined) {
            return this._faceColor;
        }
        else {
            value = Color.fromAny(value);
            if (!this._faceColor.equals(value)) {
                this._faceColor = value;
                this.dirty = true;
            }
            return this;
        }
    };
    Gauge.prototype.dialColor = function (value) {
        if (value === undefined) {
            return this._dialColor;
        }
        else {
            value = Color.fromAny(value);
            if (!this._dialColor.equals(value)) {
                this._dialColor = value;
                this.dirty = true;
            }
            return this;
        }
    };
    Gauge.prototype.dialCornerRadius = function (value) {
        if (value === undefined) {
            return this._dialCornerRadius;
        }
        else {
            value = Length.fromAny(value);
            if (!this._dialCornerRadius.equals(value)) {
                this._dialCornerRadius = value;
                this.dirty = true;
            }
            return this;
        }
    };
    Gauge.prototype.value = function (value) {
        if (value === undefined) {
            return this._value;
        }
        else {
            if (this._value !== value) {
                if (this._value) {
                    this.arcGroup.removeChild(this._value);
                }
                this._value = value;
                if (this._value) {
                    this.arcGroup.appendChild(this._value);
                }
                this.dirty = true;
                this.render();
            }
            else {
                this.dirty = true;
            }
            return this;
        }
    };
    Gauge.prototype.valueSize = function (value) {
        if (value === undefined) {
            return this._valueSize;
        }
        else {
            if (value !== null) {
                value = Length.fromAny(value);
            }
            if (this._valueSize ? !this._valueSize.equals(value) : this._valueSize !== value) {
                this._valueSize = value;
                this.dirty = true;
            }
            return this;
        }
    };
    Gauge.prototype.valueColor = function (value) {
        if (value === undefined) {
            return this._valueColor;
        }
        else {
            value = Color.fromAny(value);
            if (!this._valueColor.equals(value)) {
                this._valueColor = value;
                this.dirty = true;
            }
            return this;
        }
    };
    Gauge.prototype.render = function (trans) {
        if (this.dirty) {
            this.dirty = false;
            this.renderLayout();
            this.renderMeter(trans);
            this.renderStyle();
        }
    };
    Gauge.prototype.renderStyle = function () {
        if (this._faceColor) {
            this.face.node.setAttribute('fill', this._faceColor.toString());
        }
        if (this._dialColor) {
            this.dial.node.setAttribute('fill', this._dialColor.toString());
        }
    };
    Gauge.prototype.renderLayout = function () {
        var width = this._width.pxValue();
        var height = this._height.pxValue();
        var diameter = Math.min(width, height);
        if (!diameter) {
            return;
        }
        var r0 = this._outerRadius.pxValue(diameter / 2);
        var r1 = this._innerRadius.pxValue(r0);
        var gaugeBoxTransform = Transform.translate(width / 2 - r0, height / 2 - r0);
        this.gaugeBox.setAttribute('transform', gaugeBoxTransform.toAttributeString());
        var arcTransform = Transform.translate(r0, r0);
        this.arcGroup.setAttribute('transform', arcTransform.toAttributeString());
        this.face.innerRadius(r1).outerRadius(r0);
        this.dial.innerRadius(r1).outerRadius(r0);
        if (this._dialCornerRadius !== null || this._dialCornerRadius !== undefined) {
            this.dial.cornerRadius(this._dialCornerRadius.pxValue(r0 - r1 / 2));
        }
        var value = this._value;
        if (value) {
            if (value instanceof SVGGElement) {
                var transform = Transform.translate(r0, r0);
                value.setAttribute('transform', transform.toAttributeString());
                value.setAttribute('width', "" + r1);
            }
            else if (value instanceof SVGTextElement) {
                value.removeAttribute('visibility');
                value.setAttribute('text-anchor', 'middle');
                value.setAttribute('alignment-baseline', 'middle');
                if (this._valueSize) {
                    value.setAttribute('font-size', '' + Math.ceil(this._valueSize.pxValue(r1)));
                }
            }
            if (this._valueColor) {
                value.setAttribute('fill', this._valueColor.toString());
            }
        }
    };
    Gauge.prototype.renderMeter = function (trans) {
        var value = Math.min(Math.max(0, this._meter), 1) || 0;
        this.dial.deltaAngle(2 * Math.PI * value, (trans) ? trans : undefined);
    };
    Gauge.prototype.addObserver = function (observer) {
        if (this.observers.indexOf(observer) < 0) {
            this.observers.push(observer);
        }
    };
    Gauge.prototype.removeObserver = function (observer) {
        var i = this.observers.indexOf(observer);
        if (i >= 0) {
            this.observers.splice(i, 1);
        }
    };
    Gauge.create = function (tag) {
        if (tag === void 0) { tag = 'svg'; }
        var node = document.createElementNS('http://www.w3.org/2000/svg', tag);
        node.setAttribute('class', 'gauge');
        node.style.setProperty('-webkit-user-select', 'none');
        node.style.setProperty('-moz-user-select', 'none');
        node.style.setProperty('-ms-user-select', 'none');
        node.style.setProperty('user-select', 'none');
        node.style.setProperty('cursor', 'default');
        return new Gauge(node);
    };
    return Gauge;
}());

var GaugeAnimator = (function (_super) {
    __extends(GaugeAnimator, _super);
    function GaugeAnimator(gauge) {
        var _this = _super.call(this) || this;
        _this.gauge = gauge;
        _this.meter = undefined;
        _this.width = undefined;
        _this.height = undefined;
        _this.innerRadius = undefined;
        _this.outerRadius = undefined;
        _this.faceColor = undefined;
        _this.dialColor = undefined;
        _this.dialCornerRadius = undefined;
        _this.valueSize = undefined;
        _this.valueColor = undefined;
        return _this;
    }
    GaugeAnimator.prototype.onFrame = function (t) {
        if (this.meter) {
            this.meter.onFrame(t);
        }
        if (this.width) {
            this.width.onFrame(t);
        }
        if (this.height) {
            this.height.onFrame(t);
        }
        if (this.innerRadius) {
            this.innerRadius.onFrame(t);
        }
        if (this.outerRadius) {
            this.outerRadius.onFrame(t);
        }
        if (this.faceColor) {
            this.faceColor.onFrame(t);
        }
        if (this.dialColor) {
            this.dialColor.onFrame(t);
        }
        if (this.dialCornerRadius) {
            this.dialCornerRadius.onFrame(t);
        }
        if (this.valueSize) {
            this.valueSize.onFrame(t);
        }
        if (this.valueColor) {
            this.valueColor.onFrame(t);
        }
        this.update();
    };
    GaugeAnimator.prototype.update = function () {
        this.gauge.render();
    };
    return GaugeAnimator;
}(FrameAnimator));
var GaugeMeterAnimator = (function (_super) {
    __extends(GaugeMeterAnimator, _super);
    function GaugeMeterAnimator(parent, value, transition) {
        var _this = _super.call(this, parent, value, transition) || this;
        _this.update(value);
        return _this;
    }
    GaugeMeterAnimator.prototype.update = function (value) {
        this.parent.gauge.meter(value);
    };
    GaugeMeterAnimator.get = function (self) {
        return self.gauge.meter();
    };
    GaugeMeterAnimator.set = function (self, value) {
        if (value === null) {
            self.gaugeAnimator.meter = undefined;
        }
        else {
            self.gauge.meter(value);
            self.gaugeAnimator.animate();
        }
    };
    GaugeMeterAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.gaugeAnimator.meter) {
            self.gaugeAnimator.meter = new GaugeMeterAnimator(self.gaugeAnimator, value, trans);
        }
        return self.gaugeAnimator.meter;
    };
    return GaugeMeterAnimator;
}(ChildFrameAnimator));
var GaugeWidthAnimator = (function (_super) {
    __extends(GaugeWidthAnimator, _super);
    function GaugeWidthAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    GaugeWidthAnimator.prototype.update = function (value) {
        this.parent.gauge.width(value);
    };
    GaugeWidthAnimator.get = function (self) {
        return self.gauge.width();
    };
    GaugeWidthAnimator.set = function (self, value) {
        if (value === null) {
            self.gaugeAnimator.width = undefined;
            self.gauge.node.removeAttribute('width');
        }
        else {
            self.gauge.width(value);
            var oldValue = self.gauge.node.getAttribute('width');
            var newValue = "" + value.pxValue();
            if (oldValue !== newValue) {
                self.gauge.node.setAttribute('width', newValue);
                self.requireResize();
            }
        }
    };
    GaugeWidthAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.gaugeAnimator.width) {
            self.gaugeAnimator.width = new GaugeWidthAnimator(self.gaugeAnimator, value, trans);
        }
        return self.gaugeAnimator.width;
    };
    return GaugeWidthAnimator;
}(ChildFrameAnimator));
var GaugeHeightAnimator = (function (_super) {
    __extends(GaugeHeightAnimator, _super);
    function GaugeHeightAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    GaugeHeightAnimator.prototype.update = function (value) {
        this.parent.gauge.height(value);
    };
    GaugeHeightAnimator.get = function (self) {
        return self.gauge.height();
    };
    GaugeHeightAnimator.set = function (self, value) {
        if (value === null) {
            self.gaugeAnimator.height = undefined;
            self.gauge.node.removeAttribute('height');
        }
        else {
            self.gauge.height(value);
            var oldValue = self.gauge.node.getAttribute('height');
            var newValue = "" + value.pxValue();
            if (oldValue !== newValue) {
                self.gauge.node.setAttribute('height', newValue);
                self.requireResize();
            }
        }
    };
    GaugeHeightAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.gaugeAnimator.height) {
            self.gaugeAnimator.height = new GaugeHeightAnimator(self.gaugeAnimator, value, trans);
        }
        return self.gaugeAnimator.height;
    };
    return GaugeHeightAnimator;
}(ChildFrameAnimator));
var GuageInnerRadiusAnimator = (function (_super) {
    __extends(GuageInnerRadiusAnimator, _super);
    function GuageInnerRadiusAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    GuageInnerRadiusAnimator.prototype.update = function (value) {
        this.parent.gauge.innerRadius(value);
    };
    GuageInnerRadiusAnimator.get = function (self) {
        return self.gauge.innerRadius();
    };
    GuageInnerRadiusAnimator.set = function (self, value) {
        if (value === null) {
            self.gaugeAnimator.innerRadius = undefined;
        }
        else {
            self.gauge.innerRadius(value);
            self.gaugeAnimator.animate();
        }
    };
    GuageInnerRadiusAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.gaugeAnimator.innerRadius) {
            self.gaugeAnimator.innerRadius = new GuageInnerRadiusAnimator(self.gaugeAnimator, value, trans);
        }
        return self.gaugeAnimator.innerRadius;
    };
    return GuageInnerRadiusAnimator;
}(ChildFrameAnimator));
var GaugeOuterRadiusAnimator = (function (_super) {
    __extends(GaugeOuterRadiusAnimator, _super);
    function GaugeOuterRadiusAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    GaugeOuterRadiusAnimator.prototype.update = function (value) {
        this.parent.gauge.outerRadius(value);
    };
    GaugeOuterRadiusAnimator.get = function (self) {
        return self.gauge.outerRadius();
    };
    GaugeOuterRadiusAnimator.set = function (self, value) {
        if (value === null) {
            self.gaugeAnimator.outerRadius = undefined;
        }
        else {
            self.gauge.outerRadius(value);
            self.gaugeAnimator.animate();
        }
    };
    GaugeOuterRadiusAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.gaugeAnimator.outerRadius) {
            self.gaugeAnimator.outerRadius = new GaugeOuterRadiusAnimator(self.gaugeAnimator, value, trans);
        }
        return self.gaugeAnimator.outerRadius;
    };
    return GaugeOuterRadiusAnimator;
}(ChildFrameAnimator));
var GuageFaceColorAnimator = (function (_super) {
    __extends(GuageFaceColorAnimator, _super);
    function GuageFaceColorAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    GuageFaceColorAnimator.prototype.update = function (value) {
        this.parent.gauge.faceColor(value);
    };
    GuageFaceColorAnimator.get = function (self) {
        return self.gauge.faceColor();
    };
    GuageFaceColorAnimator.set = function (self, value) {
        if (value === null) {
            self.gaugeAnimator.faceColor = undefined;
        }
        else {
            self.gauge.faceColor(value);
        }
    };
    GuageFaceColorAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.gaugeAnimator.faceColor) {
            self.gaugeAnimator.faceColor = new GuageFaceColorAnimator(self.gaugeAnimator, value, trans);
        }
        return self.gaugeAnimator.faceColor;
    };
    return GuageFaceColorAnimator;
}(ChildFrameAnimator));
var GaugeDialColorAnimator = (function (_super) {
    __extends(GaugeDialColorAnimator, _super);
    function GaugeDialColorAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    GaugeDialColorAnimator.prototype.update = function (value) {
        this.parent.gauge.dialColor(value);
    };
    GaugeDialColorAnimator.get = function (self) {
        return self.gauge.dialColor();
    };
    GaugeDialColorAnimator.set = function (self, value) {
        if (value === null) {
            self.gaugeAnimator.dialColor = undefined;
        }
        else {
            self.gauge.dialColor(value);
        }
    };
    GaugeDialColorAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.gaugeAnimator.dialColor) {
            self.gaugeAnimator.dialColor = new GaugeDialColorAnimator(self.gaugeAnimator, value, trans);
        }
        return self.gaugeAnimator.dialColor;
    };
    return GaugeDialColorAnimator;
}(ChildFrameAnimator));
var GaugeDialCornerRadiusAnimator = (function (_super) {
    __extends(GaugeDialCornerRadiusAnimator, _super);
    function GaugeDialCornerRadiusAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    GaugeDialCornerRadiusAnimator.prototype.update = function (value) {
        this.parent.gauge.dialCornerRadius(value);
    };
    GaugeDialCornerRadiusAnimator.get = function (self) {
        return self.gauge.dialCornerRadius();
    };
    GaugeDialCornerRadiusAnimator.set = function (self, value) {
        if (value === null) {
            self.gaugeAnimator.dialCornerRadius = undefined;
        }
        else {
            self.gauge.dialCornerRadius(value);
            self.gaugeAnimator.animate();
        }
    };
    GaugeDialCornerRadiusAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.gaugeAnimator.dialCornerRadius) {
            self.gaugeAnimator.dialCornerRadius = new GaugeDialCornerRadiusAnimator(self.gaugeAnimator, value, trans);
        }
        return self.gaugeAnimator.dialCornerRadius;
    };
    return GaugeDialCornerRadiusAnimator;
}(ChildFrameAnimator));
var GaugeValueSizeAnimator = (function (_super) {
    __extends(GaugeValueSizeAnimator, _super);
    function GaugeValueSizeAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    GaugeValueSizeAnimator.prototype.update = function (value) {
        this.parent.gauge.valueSize(value);
    };
    GaugeValueSizeAnimator.get = function (self) {
        return self.gauge.valueSize();
    };
    GaugeValueSizeAnimator.set = function (self, value) {
        if (value === null) {
            self.gaugeAnimator.valueSize = undefined;
        }
        else {
            self.gauge.valueSize(value);
            self.gaugeAnimator.animate();
        }
    };
    GaugeValueSizeAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.gaugeAnimator.valueSize) {
            self.gaugeAnimator.valueSize = new GaugeValueSizeAnimator(self.gaugeAnimator, value, trans);
        }
        return self.gaugeAnimator.valueSize;
    };
    return GaugeValueSizeAnimator;
}(ChildFrameAnimator));
var GaugeValueColorAnimator = (function (_super) {
    __extends(GaugeValueColorAnimator, _super);
    function GaugeValueColorAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    GaugeValueColorAnimator.prototype.update = function (value) {
        this.parent.gauge.valueColor(value);
    };
    GaugeValueColorAnimator.get = function (self) {
        return self.gauge.valueColor();
    };
    GaugeValueColorAnimator.set = function (self, value) {
        if (value === null) {
            self.gaugeAnimator.valueColor = undefined;
        }
        else {
            self.gauge.valueColor(value);
        }
    };
    GaugeValueColorAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.gaugeAnimator.valueColor) {
            self.gaugeAnimator.valueColor = new GaugeValueColorAnimator(self.gaugeAnimator, value, trans);
        }
        return self.gaugeAnimator.valueColor;
    };
    return GaugeValueColorAnimator;
}(ChildFrameAnimator));
var GaugeView = (function (_super) {
    __extends(GaugeView, _super);
    function GaugeView(gauge) {
        var _this = _super.call(this, gauge.node) || this;
        _this.gauge = gauge;
        _this.gaugeAnimator = new GaugeAnimator(_this.gauge);
        return _this;
    }
    GaugeView.prototype.meter = function (value, trans) {
        return this.propertyNumber(GaugeMeterAnimator, value, trans);
    };
    GaugeView.prototype.width = function (value, trans) {
        return this.propertyLength(GaugeWidthAnimator, value, trans);
    };
    GaugeView.prototype.height = function (value, trans) {
        return this.propertyLength(GaugeHeightAnimator, value, trans);
    };
    GaugeView.prototype.innerRadius = function (value, trans) {
        return this.propertyLength(GuageInnerRadiusAnimator, value, trans);
    };
    GaugeView.prototype.outerRadius = function (value, trans) {
        return this.propertyLength(GaugeOuterRadiusAnimator, value, trans);
    };
    GaugeView.prototype.faceColor = function (value, trans) {
        return this.propertyColor(GuageFaceColorAnimator, value, trans);
    };
    GaugeView.prototype.dialColor = function (value, trans) {
        return this.propertyColor(GaugeDialColorAnimator, value, trans);
    };
    GaugeView.prototype.dialCornerRadius = function (value, trans) {
        return this.propertyLength(GaugeDialCornerRadiusAnimator, value, trans);
    };
    GaugeView.prototype.gaugeValue = function (newValue) {
        var oldValue = this.gauge.value();
        if (newValue === undefined) {
            return oldValue;
        }
        else {
            if (typeof newValue === 'string') {
                newValue = document.createTextNode(newValue);
            }
            else if (newValue instanceof SvgView || newValue instanceof TextView) {
                newValue = newValue.node;
            }
            if (newValue instanceof Text) {
                if (oldValue) {
                    while (oldValue.firstChild) {
                        oldValue.removeChild(oldValue.firstChild);
                    }
                    oldValue.appendChild(newValue);
                    newValue = oldValue;
                }
                else {
                    var value = SvgView.create('text').className('value');
                    value.append(newValue);
                    newValue = value.node;
                }
            }
            if (oldValue) {
                var oldView = oldValue.view;
                if (oldValue !== newValue && oldView) {
                    this.removeChildView(oldView);
                }
            }
            this.gauge.value(newValue);
            if (newValue) {
                var newView = newValue.view;
                if (oldValue !== newValue && newView) {
                    this.appendChildView(newView);
                }
            }
            this.gaugeAnimator.animate();
            return this;
        }
    };
    GaugeView.prototype.valueSize = function (value, trans) {
        return this.propertyLength(GaugeValueSizeAnimator, value, trans);
    };
    GaugeView.prototype.valueColor = function (value, trans) {
        return this.propertyColor(GaugeValueColorAnimator, value, trans);
    };
    GaugeView.prototype.render = function () {
        this.gaugeAnimator.update();
    };
    GaugeView.prototype.didReview = function (viewable) {
        _super.prototype.didReview.call(this, viewable);
        this.gaugeAnimator.enabled(viewable);
    };
    GaugeView.prototype.autosize = function () {
        var node = this.node;
        do {
            var parentNode = node.parentNode;
            if (parentNode) {
                if (parentNode instanceof HTMLElement) {
                    this.width(parentNode.offsetWidth)
                        .height(parentNode.offsetHeight);
                    return;
                }
                node = parentNode;
                continue;
            }
            return;
        } while (true);
    };
    GaugeView.prototype.didResize = function () {
        _super.prototype.didResize.call(this);
        this.autosize();
        this.render();
    };
    GaugeView.prototype.didSetState = function (newState, oldState) {
        _super.prototype.didSetState.call(this, newState, oldState);
        var trans = newState.get('transition').cast(Transition.Form);
        var meter = newState.get('meter').numberValue();
        if (meter !== undefined) {
            this.meter(meter, trans);
        }
        var width = newState.get('gaugeWidth').cast(Length.Form);
        if (width) {
            this.width(width);
        }
        var height = newState.get('gaugeHeight').cast(Length.Form);
        if (height) {
            this.height(height);
        }
        var innerRadius = newState.get('innerRadius').cast(Length.Form);
        if (innerRadius) {
            this.innerRadius(innerRadius, trans);
        }
        var outerRadius = newState.get('outerRadius').cast(Length.Form);
        if (outerRadius) {
            this.outerRadius(outerRadius, trans);
        }
        var faceColor = newState.get('faceColor').cast(Color.Form);
        if (faceColor) {
            this.faceColor(faceColor, trans);
        }
        var dialColor = newState.get('dialColor').cast(Color.Form);
        if (dialColor) {
            this.dialColor(dialColor, trans);
        }
        var dialCornerRadius = newState.get('dialCornerRadius').cast(Length.Form);
        if (dialCornerRadius) {
            this.dialCornerRadius(dialCornerRadius, trans);
        }
        var valueSize = newState.get('valueSize').cast(Length.Form);
        if (valueSize) {
            this.valueSize(valueSize, trans);
        }
        var valueColor = newState.get('valueColor').cast(Color.Form);
        if (valueColor) {
            this.valueColor(valueColor, trans);
        }
        var valueView = this.gaugeValue();
        if (valueView) {
            var valueWeight = newState.get('valueWeight').numberValue();
            if (valueWeight) {
                valueView.style.fontWeight = "" + valueWeight;
            }
        }
    };
    GaugeView.create = function () {
        var gauge = Gauge.create();
        return new GaugeView(gauge);
    };
    GaugeView.applyTheme = function (theme) {
        var sectorRatio = Selector.get('value').divide(Selector.get('total').or(Num.One));
        var sectorColor = Selector.get('primaryHue').invoke(sectorRatio).or(Selector.get('primaryColor'));
        var labelColor = Selector.get('contrast').invoke(Record.of(sectorColor, Num.valueOf(2)));
        var gauge = Record.empty()
            .slot('meter', '0')
            .slot('innerRadius', '80%')
            .slot('outerRadius', '100%')
            .slot('faceColor', sectorColor)
            .slot('dialColor', sectorColor)
            .slot('dialCornerRadius', '0')
            .slot('valueColor', labelColor)
            .slot('valueSize', '13px')
            .slot('valueWeight', 300);
        theme.set('gauge', gauge);
    };
    return GaugeView;
}(SvgView));
GaugeView.applyTheme(GaugeView.Theme);

var GaugeModel = (function (_super) {
    __extends(GaugeModel, _super);
    function GaugeModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GaugeModel.prototype.updateValue = function (stack) {
        if (stack === void 0) { stack = this.stack(); }
        var value = GaugeModel.ValueSelector.evaluate(stack).toValue().numberValue(NaN);
        if (isFinite(value)) {
            for (var i = 0; i < this._childModels.length; i += 1) {
                this._childModels[i]._modelScope._record.set('value', value);
            }
        }
        return value;
    };
    GaugeModel.ValueSelector = Selector.get('value');
    GaugeModel.Params = SvgModel.Params.concat([
        new ModelParam('transition', Selector.get('transition').or(Selector.get('gauge').get('transition'))),
        new ModelParam('meter', Selector.get('meter').or(Selector.get('gauge').get('meter'))),
        new ModelParam('gaugeWidth', Selector.get('gaugeWidth').or(Selector.get('gauge').get('width'))),
        new ModelParam('gaugeHeight', Selector.get('gaugeHeight').or(Selector.get('gauge').get('height'))),
        new ModelParam('innerRadius', Selector.get('innerRadius').or(Selector.get('gauge').get('innerRadius'))),
        new ModelParam('outerRadius', Selector.get('outerRadius').or(Selector.get('gauge').get('outerRadius'))),
        new ModelParam('faceColor', Selector.get('faceColor').or(Selector.get('gauge').get('faceColor'))),
        new ModelParam('dialColor', Selector.get('dialColor').or(Selector.get('gauge').get('dialColor'))),
        new ModelParam('dialCornerRadius', Selector.get('dialCornerRadius').or(Selector.get('gauge').get('dialCornerRadius'))),
        new ModelParam('valueSize', Selector.get('valueSize').or(Selector.get('gauge').get('valueSize'))),
        new ModelParam('valueColor', Selector.get('valueColor').or(Selector.get('gauge').get('valueColor'))),
        new ModelParam('valueWeight', Selector.get('valueWeight').or(Selector.get('gauge').get('valueWeight'))),
    ]);
    return GaugeModel;
}(SvgModel));

var GaugeForm = (function (_super) {
    __extends(GaugeForm, _super);
    function GaugeForm() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(GaugeForm.prototype, "tag", {
        get: function () {
            return 'gauge';
        },
        enumerable: true,
        configurable: true
    });
    GaugeForm.prototype.castView = function (value, stack, factory) {
        if (value.tag === this.tag) {
            var view = GaugeView.create();
            var modelDef = this.materializeView(view, value, stack, factory);
            view.setModel(modelDef);
            return view;
        }
        return undefined;
    };
    GaugeForm.prototype.castModel = function (value, stack, factory) {
        if (value.tag === this.tag) {
            var model = new GaugeModel();
            var dataDef = this.materializeModel(model, value, stack, factory);
            model.setData(dataDef);
            return model;
        }
        return undefined;
    };
    GaugeForm.prototype.materializeViewParam = function (view, param, stack, factory) {
        if (param.key instanceof Text$1) {
            var key = param.key.value;
            if (key === 'value') {
                var value = factory.castView(param.toValue(), stack, factory);
                if (value === undefined) {
                    value = param.toValue().stringValue();
                }
                if (value !== undefined) {
                    view.gaugeValue(value);
                    return Item.Absent;
                }
            }
        }
        return _super.prototype.materializeViewParam.call(this, view, param, stack, factory);
    };
    GaugeForm.prototype.materializeModelParam = function (model, param, stack, factory) {
        if (param instanceof Attr && param.key.value === this.tag) {
            return Item.Absent;
        }
        return _super.prototype.materializeModelParam.call(this, model, param, stack, factory);
    };
    GaugeForm.Form = new GaugeForm();
    return GaugeForm;
}(SvgForm));
UiForm.addGlobal(GaugeForm.Form);

var Kpi = (function () {
    function Kpi(box) {
        this.box = box;
        this.node = box.node;
        this._width = Length.zero(box.node);
        this._height = Length.zero(box.node);
        this._backgroundColor = null;
        this._ledColor = Color.transparent();
        this._title = null;
        this._titleSize = null;
        this._titleColor = null;
        this._subtitle = null;
        this._subtitleSize = null;
        this._subtitleColor = null;
        this._value = null;
        this._valueSize = null;
        this._valueColor = null;
        this._label = null;
        this._labelSize = null;
        this._labelColor = null;
        this._notice = null;
        this._noticeSize = null;
        this._noticeColor = null;
        this._meter = 0;
        this._cylinderHeight = Length.zero(box.node);
        this._cylinderColor = Color.transparent();
        this._pistonColor = Color.transparent();
        this.dirty = true;
        this.observers = [];
        this._gauge = null;
        this._chart = null;
        this.kpiBox = this.box.append('article')
            .className('kpi-box')
            .display('flex')
            .flexDirection('column')
            .flexGrow(1);
        this.header = this.kpiBox.append('header')
            .className('header')
            .display('flex');
        this.ledBox = this.header.append('div')
            .className('led-box')
            .display('flex')
            .justifyContent('center')
            .alignItems('center');
        this.led = this.ledBox.append('div')
            .className('led')
            .borderRadius('50%')
            .width('100%')
            .height('100%');
        this.titleBox = this.header.append('div')
            .className('title-box')
            .display('flex')
            .flexGrow(1)
            .alignItems('center');
        this.subtitleBox = this.header.append('div')
            .className('subtitle-box')
            .display('flex')
            .flexShrink(1)
            .alignItems('center');
        this.body = this.kpiBox.append('div')
            .className('body')
            .display('flex')
            .flexGrow(1)
            .justifyContent('center')
            .alignItems('center')
            .flexDirection('column');
        this.point = this.body.append('div')
            .className('point')
            .minWidth('67%')
            .display('flex')
            .flexDirection('column')
            .justifyContent('center');
        this.valueBox = this.point.append('div')
            .className('value-box')
            .lineHeight(1)
            .textAlign('center');
        this.labelbox = this.point.append('div')
            .className('label-box')
            .lineHeight(1)
            .textAlign('right');
        this.guageBox = this.body.append('div')
            .className('gauge-box')
            .width('100%');
        this.chartBox = this.body.append('div')
            .className('chart-box')
            .width('100%');
        this.belt = this.kpiBox.append('div')
            .className('belt')
            .display('flex')
            .marginBottom(5);
        this.noticeSpan = this.belt.append('span')
            .className('notice')
            .display('block')
            .lineHeight(1);
        this.footer = this.kpiBox.append('div')
            .className('footer')
            .display('flex')
            .alignItems('flex-end');
        this.cylinder = this.footer.append('div')
            .className('cylinder')
            .position('relative')
            .width('100%')
            .height('100%');
        this.piston = this.cylinder.append('div')
            .className('piston')
            .width(0)
            .height('100%');
    }
    Kpi.prototype.gauge = function () {
        return this._gauge;
    };
    Kpi.prototype.addGauge = function (newGauge) {
        for (var i = 0; i < this.observers.length; i += 1) {
            var observer = this.observers[i];
            if (observer.kpiWillAddGauge) {
                var gauge = observer.kpiWillAddGauge(newGauge, this);
                if (gauge) {
                    newGauge = gauge;
                }
                else if (gauge === null) {
                    return;
                }
            }
        }
        this._gauge = newGauge;
        this.guageBox.removeAll();
        this.guageBox.node.appendChild(newGauge.node);
        newGauge.addObserver(this);
        this.dirty = true;
        for (var i = 0; i < this.observers.length; i += 1) {
            var observer = this.observers[i];
            if (observer.kpiDidAddGauge) {
                observer.kpiDidAddGauge(newGauge, this);
            }
        }
    };
    Kpi.prototype.removeGauge = function (oldGauge) {
        for (var i = 0; i < this.observers.length; i += 1) {
            var observer = this.observers[i];
            if (observer.kpiWillRemoveGauge) {
                observer.kpiWillRemoveGauge(oldGauge, this);
            }
        }
        oldGauge.removeObserver(this);
        this.guageBox.node.removeChild(oldGauge.node);
        this._gauge = null;
        this.dirty = true;
        for (var i = 0; i < this.observers.length; i += 1) {
            var observer = this.observers[i];
            if (observer.kpiDidRemoveGauge) {
                observer.kpiDidRemoveGauge(oldGauge, this);
            }
        }
    };
    Kpi.prototype.chart = function () {
        return this._chart;
    };
    Kpi.prototype.addChart = function (newChart) {
        for (var i = 0; i < this.observers.length; i += 1) {
            var observer = this.observers[i];
            if (observer.kpiWillAddChart) {
                var chart = observer.kpiWillAddChart(newChart, this);
                if (chart) {
                    newChart = chart;
                }
                else if (chart === null) {
                    return;
                }
            }
        }
        this._chart = newChart;
        this.chartBox.removeAll();
        this.chartBox.node.appendChild(newChart.node);
        this.dirty = true;
        for (var i = 0; i < this.observers.length; i += 1) {
            var observer = this.observers[i];
            if (observer.kpiDidAddChart) {
                observer.kpiDidAddChart(newChart, this);
            }
        }
    };
    Kpi.prototype.removeChart = function (oldChart) {
        for (var i = 0; i < this.observers.length; i += 1) {
            var observer = this.observers[i];
            if (observer.kpiWillRemoveChart) {
                observer.kpiWillRemoveChart(oldChart, this);
            }
        }
        this.guageBox.node.removeChild(oldChart.node);
        this._gauge = null;
        this.dirty = true;
        for (var i = 0; i < this.observers.length; i += 1) {
            var observer = this.observers[i];
            if (observer.kpiDidRemoveChart) {
                observer.kpiDidRemoveChart(oldChart, this);
            }
        }
    };
    Kpi.prototype.width = function (value) {
        if (value === undefined) {
            return this._width;
        }
        else {
            value = Length.fromAny(value, this.node);
            if (!this._width.equals(value)) {
                this._width = value;
                this.dirty = true;
            }
            return this;
        }
    };
    Kpi.prototype.height = function (value) {
        if (value === undefined) {
            return this._height;
        }
        else {
            value = Length.fromAny(value, this.node);
            if (!this._height.equals(value)) {
                this._height = value;
                this.dirty = true;
            }
            return this;
        }
    };
    Kpi.prototype.backgroundColor = function (value) {
        if (value === undefined) {
            return this._backgroundColor;
        }
        else {
            if (value === null) {
                if (this._backgroundColor !== null) {
                    this._backgroundColor = value;
                    this.dirty = true;
                }
            }
            else {
                value = Color.fromAny(value);
                if (this._backgroundColor === null || !this._backgroundColor.equals(value)) {
                    this._backgroundColor = value;
                    this.dirty = true;
                }
            }
            return this;
        }
    };
    Kpi.prototype.ledColor = function (value) {
        if (value === undefined) {
            return this._ledColor;
        }
        else {
            value = Color.fromAny(value);
            if (!this._ledColor.equals(value)) {
                this._ledColor = value;
                this.dirty = true;
            }
            return this;
        }
    };
    Kpi.prototype.title = function (value) {
        if (value === undefined) {
            return this._title;
        }
        else {
            if (this._title !== value) {
                if (this._title) {
                    this.titleBox.node.removeChild(this._title);
                }
                this._title = value;
                if (this._title) {
                    this.titleBox.node.appendChild(this._title);
                }
                this.dirty = true;
                this.render();
            }
            else {
                this.dirty = true;
            }
            return this;
        }
    };
    Kpi.prototype.titleSize = function (value) {
        if (value === undefined) {
            return this._titleSize;
        }
        else {
            if (value !== null) {
                value = Length.fromAny(value);
            }
            if (this._titleSize ? !this._titleSize.equals(value) : this._titleSize !== value) {
                this._titleSize = value;
                this.dirty = true;
            }
            return this;
        }
    };
    Kpi.prototype.titleColor = function (value) {
        if (value === undefined) {
            return this._titleColor;
        }
        else {
            if (value !== null) {
                value = Color.fromAny(value);
            }
            if (this._titleColor ? !this._titleColor.equals(value) : this._titleColor !== value) {
                this._titleColor = value;
                this.dirty = true;
            }
            return this;
        }
    };
    Kpi.prototype.subtitle = function (value) {
        if (value === undefined) {
            return this._subtitle;
        }
        else {
            if (this._subtitle !== value) {
                if (this._subtitle) {
                    this.subtitleBox.node.removeChild(this._subtitle);
                }
                this._subtitle = value;
                if (this._subtitle) {
                    this.subtitleBox.node.appendChild(this._subtitle);
                }
                this.dirty = true;
                this.render();
            }
            else {
                this.dirty = true;
            }
            return this;
        }
    };
    Kpi.prototype.subtitleSize = function (value) {
        if (value === undefined) {
            return this._subtitleSize;
        }
        else {
            if (value !== null) {
                value = Length.fromAny(value);
            }
            if (this._subtitleSize ? !this._subtitleSize.equals(value) : this._subtitleSize !== value) {
                this._subtitleSize = value;
                this.dirty = true;
            }
            return this;
        }
    };
    Kpi.prototype.subtitleColor = function (value) {
        if (value === undefined) {
            return this._subtitleColor;
        }
        else {
            if (value !== null) {
                value = Color.fromAny(value);
            }
            if (this._subtitleColor ? !this._subtitleColor.equals(value) : this._subtitleColor !== value) {
                this._subtitleColor = value;
                this.dirty = true;
            }
            return this;
        }
    };
    Kpi.prototype.value = function (value) {
        if (value === undefined) {
            return this._value;
        }
        else {
            if (this._value !== value) {
                if (this._value) {
                    this.valueBox.node.removeChild(this._value);
                }
                this._value = value;
                if (this._value) {
                    this.valueBox.node.appendChild(this._value);
                }
                this.dirty = true;
                this.render();
            }
            else {
                this.dirty = true;
            }
            return this;
        }
    };
    Kpi.prototype.valueSize = function (value) {
        if (value === undefined) {
            return this._valueSize;
        }
        else {
            if (value !== null) {
                value = Length.fromAny(value);
            }
            if (this._valueSize ? !this._valueSize.equals(value) : this._valueSize !== value) {
                this._valueSize = value;
                this.dirty = true;
            }
            return this;
        }
    };
    Kpi.prototype.valueColor = function (value) {
        if (value === undefined) {
            return this._valueColor;
        }
        else {
            if (value !== null) {
                value = Color.fromAny(value);
            }
            if (this._valueColor ? !this._valueColor.equals(value) : this._valueColor !== value) {
                this._valueColor = value;
                this.dirty = true;
            }
            return this;
        }
    };
    Kpi.prototype.label = function (value) {
        if (value === undefined) {
            return this._label;
        }
        else {
            if (this._label !== value) {
                if (this._label) {
                    this.labelbox.node.removeChild(this._label);
                }
                this._label = value;
                if (this._label) {
                    this.labelbox.node.appendChild(this._label);
                }
                this.dirty = true;
                this.render();
            }
            else {
                this.dirty = true;
            }
            return this;
        }
    };
    Kpi.prototype.labelSize = function (value) {
        if (value === undefined) {
            return this._labelSize;
        }
        else {
            if (value !== null) {
                value = Length.fromAny(value);
            }
            if (this._labelSize ? !this._labelSize.equals(value) : this._labelSize !== value) {
                this._labelSize = value;
                this.dirty = true;
            }
            return this;
        }
    };
    Kpi.prototype.labelColor = function (value) {
        if (value === undefined) {
            return this._labelColor;
        }
        else {
            if (value !== null) {
                value = Color.fromAny(value);
            }
            if (this._labelColor ? !this._labelColor.equals(value) : this._labelColor !== value) {
                this._labelColor = value;
                this.dirty = true;
            }
            return this;
        }
    };
    Kpi.prototype.notice = function (value) {
        if (value === undefined) {
            return this._notice;
        }
        else {
            if (this._notice !== value) {
                if (this._notice) {
                    this.noticeSpan.node.removeChild(this._notice);
                }
                this._notice = value;
                if (this._notice) {
                    this.noticeSpan.node.appendChild(this._notice);
                }
                this.dirty = true;
                this.render();
            }
            else {
                this.dirty = true;
            }
            return this;
        }
    };
    Kpi.prototype.noticeSize = function (value) {
        if (value === undefined) {
            return this._noticeSize;
        }
        else {
            if (value !== null) {
                value = Length.fromAny(value);
            }
            if (this._noticeSize ? !this._noticeSize.equals(value) : this._noticeSize !== value) {
                this._noticeSize = value;
                this.dirty = true;
            }
            return this;
        }
    };
    Kpi.prototype.noticeColor = function (value) {
        if (value === undefined) {
            return this._noticeColor;
        }
        else {
            if (value !== null) {
                value = Color.fromAny(value);
            }
            if (this._noticeColor ? !this._noticeColor.equals(value) : this._noticeColor !== value) {
                this._noticeColor = value;
                this.dirty = true;
            }
            return this;
        }
    };
    Kpi.prototype.meter = function (newValue) {
        if (newValue === undefined) {
            return this._meter;
        }
        else {
            var oldValue = this._meter;
            if (oldValue !== newValue) {
                this._meter = newValue;
                this.dirty = true;
                for (var i = 0; i < this.observers.length; i += 1) {
                    var observer = this.observers[i];
                    if (observer.kpiDidSetMeter) {
                        observer.kpiDidSetMeter(newValue, oldValue, this);
                    }
                }
            }
            return this;
        }
    };
    Kpi.prototype.cylinderHeight = function (value) {
        if (value === undefined) {
            return this._cylinderHeight;
        }
        else {
            value = Length.fromAny(value);
            if (!this._cylinderHeight.equals(value)) {
                this._cylinderHeight = value;
                this.dirty = true;
            }
            return this;
        }
    };
    Kpi.prototype.cylinderColor = function (value) {
        if (value === undefined) {
            return this._cylinderColor;
        }
        else {
            value = Color.fromAny(value);
            if (!this._cylinderColor.equals(value)) {
                this._cylinderColor = value;
                this.dirty = true;
            }
            return this;
        }
    };
    Kpi.prototype.pistonColor = function (value) {
        if (value === undefined) {
            return this._pistonColor;
        }
        else {
            value = Color.fromAny(value);
            if (!this._pistonColor.equals(value)) {
                this._pistonColor = value;
                this.dirty = true;
            }
            return this;
        }
    };
    Kpi.prototype.update = function () {
        if (this.dirty) {
            this.dirty = false;
        }
    };
    Kpi.prototype.render = function (trans) {
        if (this.dirty) {
            this.dirty = false;
            this.renderMeter(trans);
            this.renderStyle(trans);
        }
    };
    Kpi.prototype.renderStyle = function (trans) {
        var width = this._width.pxValue();
        var height = this._height.pxValue();
        var size = Math.min(width, height);
        if (!size) {
            return;
        }
        var cylinderHeight = this._cylinderHeight.pxValue(this._height.pxValue());
        if (cylinderHeight) {
            this.footer.height(cylinderHeight, trans);
            this.cylinder.backgroundColor(this._cylinderColor);
            this.piston.backgroundColor(this._pistonColor);
        }
        if (this._backgroundColor) {
            this.header.padding(10);
            this.belt.paddingLeft(10);
            this.kpiBox.backgroundColor(this._backgroundColor);
        }
        this.led.backgroundColor(this._ledColor);
        if (this._titleSize !== null || this._subtitleSize !== null) {
            var ledSize = this._titleSize || this._subtitleSize;
            ledSize = ledSize.pxValue();
            this.ledBox.width(ledSize).height(ledSize).marginRight(5).marginTop(3);
        }
        else {
            this.ledBox.width(15).height(15).marginRight(5).marginTop(3);
        }
        if (this._title) {
            this._title.style.color = (this._titleColor) ? "" + this._titleColor : '';
            this._title.style.fontSize = (this._titleSize) ? "" + this._titleSize : '';
        }
        if (this._subtitle) {
            this._subtitle.style.color = (this._subtitleColor) ? "" + this._subtitleColor : '';
            this._subtitle.style.fontSize = (this._subtitleSize) ? "" + this._subtitleSize : '';
        }
        if (this._value) {
            this._value.style.color = (this._valueColor) ? "" + this._valueColor : '';
            this._value.style.fontSize = (this._valueSize) ? "" + this._valueSize : '';
        }
        if (this._label) {
            this._label.style.color = (this._labelColor) ? "" + this._labelColor : '';
            this._label.style.fontSize = (this._labelSize) ? "" + this._labelSize : '';
        }
        if (this._notice) {
            this._notice.style.color = (this._noticeColor) ? "" + this._noticeColor : '';
            this._notice.style.fontSize = (this._noticeSize) ? "" + this._noticeSize : '';
        }
        else {
            this.belt.display('none');
        }
        var column = 0 + ((this._gauge) ? 1 : 0) + ((this._value && this._label) ? 1 : 0) + ((this._chart) ? 1 : 0);
        if (!this._value && !this._label) {
            this.point.display('none');
        }
        else {
            this.point.height(this.body.node.offsetHeight * ((column === 1) ? column : (column === 2) ? 0.66 : 0.33));
        }
        if (this._gauge) {
            var gaugeHeight = this.body.node.offsetHeight * ((column === 1) ? column : 0.33);
            this.guageBox.height(gaugeHeight);
            this._gauge.node.setAttribute('height', "" + gaugeHeight);
            this._gauge.height(gaugeHeight);
            this._gauge.renderLayout();
        }
        else {
            this.guageBox.display('none');
        }
        if (this._chart) {
            var chartHeight = this.body.node.offsetHeight * ((column === 1) ? column : 0.33);
            this.chartBox.height(chartHeight);
            this._chart.node.setAttribute('height', "" + chartHeight);
            this._chart.height(chartHeight);
            this._chart.update();
        }
        else {
            this.chartBox.display('none');
        }
    };
    Kpi.prototype.renderMeter = function (trans) {
        var width = this._width.pxValue();
        var height = this._height.pxValue();
        var size = Math.min(width, height);
        if (!size) {
            return;
        }
        this.kpiBox.width(width).height(height).marginLeft('auto').marginRight('auto');
        var pistonWidth = Math.min(Math.max(0, this._meter), 1) || 0;
        this.piston.width(pistonWidth * 100, trans);
    };
    Kpi.prototype.gaugeDidSetMeter = function (newValue, oldValue, gauge) {
        for (var i = 0; i < this.observers.length; i += 1) {
            var observer = this.observers[i];
            if (observer.kpiGaugeDidSetMeter) {
                observer.kpiGaugeDidSetMeter(newValue, oldValue, gauge, this);
            }
        }
    };
    Kpi.prototype.addObserver = function (observer) {
        if (this.observers.indexOf(observer) < 0) {
            this.observers.push(observer);
        }
    };
    Kpi.prototype.removeObserver = function (observer) {
        var i = this.observers.indexOf(observer);
        if (i >= 0) {
            this.observers.splice(i, 1);
        }
    };
    Kpi.create = function (tag) {
        if (tag === void 0) { tag = 'div'; }
        var element = HtmlView.create(tag);
        element.className('kpi-card');
        element.style('-webkit-user-select', 'none');
        element.style('-moz-user-select', 'none');
        element.style('-ms-user-select', 'none');
        element.style('user-select', 'none');
        element.style('cursor', 'default');
        return new Kpi(element);
    };
    return Kpi;
}());

var KpiAnimator = (function (_super) {
    __extends(KpiAnimator, _super);
    function KpiAnimator(kpi, childViews) {
        var _this = _super.call(this) || this;
        _this.kpi = kpi;
        _this.childViews = childViews;
        _this.value = undefined;
        _this.width = undefined;
        _this.height = undefined;
        _this.backgroundColor = undefined;
        _this.ledColor = undefined;
        _this.titleSize = undefined;
        _this.titleColor = undefined;
        _this.subtitleSize = undefined;
        _this.subtitleColor = undefined;
        _this.valueSize = undefined;
        _this.valueColor = undefined;
        _this.labelSize = undefined;
        _this.labelColor = undefined;
        _this.noticeSize = undefined;
        _this.noticeColor = undefined;
        _this.meter = undefined;
        _this.cylinderHeight = undefined;
        _this.cylinderColor = undefined;
        _this.pistonColor = undefined;
        return _this;
    }
    KpiAnimator.prototype.onFrame = function (t) {
        if (this.value) {
            this.value.onFrame(t);
        }
        if (this.width) {
            this.width.onFrame(t);
        }
        if (this.height) {
            this.height.onFrame(t);
        }
        if (this.backgroundColor) {
            this.backgroundColor.onFrame(t);
        }
        if (this.ledColor) {
            this.ledColor.onFrame(t);
        }
        if (this.titleSize) {
            this.titleSize.onFrame(t);
        }
        if (this.titleColor) {
            this.titleColor.onFrame(t);
        }
        if (this.subtitleSize) {
            this.subtitleSize.onFrame(t);
        }
        if (this.subtitleColor) {
            this.subtitleColor.onFrame(t);
        }
        if (this.valueSize) {
            this.valueSize.onFrame(t);
        }
        if (this.valueColor) {
            this.valueColor.onFrame(t);
        }
        if (this.labelSize) {
            this.labelSize.onFrame(t);
        }
        if (this.labelColor) {
            this.labelColor.onFrame(t);
        }
        if (this.noticeSize) {
            this.noticeSize.onFrame(t);
        }
        if (this.noticeColor) {
            this.noticeColor.onFrame(t);
        }
        if (this.meter) {
            this.meter.onFrame(t);
        }
        if (this.cylinderHeight) {
            this.cylinderHeight.onFrame(t);
        }
        if (this.cylinderColor) {
            this.cylinderColor.onFrame(t);
        }
        if (this.pistonColor) {
            this.pistonColor.onFrame(t);
        }
        this.update();
    };
    KpiAnimator.prototype.renderChildView = function () {
        for (var i = 0; i < this.childViews.length; i += 1) {
            var child = this.childViews[i];
            if (child instanceof GaugeView) {
                child.render();
            }
            else if (child instanceof ChartView) {
                child.render();
            }
        }
    };
    KpiAnimator.prototype.update = function () {
        this.kpi.render();
        this.renderChildView();
    };
    return KpiAnimator;
}(FrameAnimator));
var KpiWidthAnimator = (function (_super) {
    __extends(KpiWidthAnimator, _super);
    function KpiWidthAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    KpiWidthAnimator.prototype.update = function (value) {
        this.parent.kpi.width(value);
    };
    KpiWidthAnimator.get = function (self) {
        return self.kpi.width();
    };
    KpiWidthAnimator.set = function (self, value) {
        if (value === null) {
            self.kpiAnimator.width = undefined;
            self.kpi.node.removeAttribute('width');
        }
        else {
            self.kpi.width(value);
            var oldValue = self.kpi.node.getAttribute('width');
            var newValue = "" + value.pxValue();
            if (oldValue !== newValue) {
                self.kpi.node.setAttribute('width', newValue);
                self.requireResize();
            }
        }
    };
    KpiWidthAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.kpiAnimator.width) {
            self.kpiAnimator.width = new KpiWidthAnimator(self.kpiAnimator, value, trans);
        }
        return self.kpiAnimator.width;
    };
    return KpiWidthAnimator;
}(ChildFrameAnimator));
var KpiHeightAnimator = (function (_super) {
    __extends(KpiHeightAnimator, _super);
    function KpiHeightAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    KpiHeightAnimator.prototype.update = function (value) {
        this.parent.kpi.height(value);
    };
    KpiHeightAnimator.get = function (self) {
        return self.kpi.height();
    };
    KpiHeightAnimator.set = function (self, value) {
        if (value === null) {
            self.kpiAnimator.height = undefined;
            self.kpi.node.removeAttribute('height');
        }
        else {
            self.kpi.height(value);
            var oldValue = self.kpi.node.getAttribute('height');
            var newValue = "" + value.pxValue();
            if (oldValue !== newValue) {
                self.kpi.node.setAttribute('height', newValue);
                self.requireResize();
            }
        }
    };
    KpiHeightAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.kpiAnimator.height) {
            self.kpiAnimator.height = new KpiHeightAnimator(self.kpiAnimator, value, trans);
        }
        return self.kpiAnimator.height;
    };
    return KpiHeightAnimator;
}(ChildFrameAnimator));
var KpiBackgroundColorAnimator = (function (_super) {
    __extends(KpiBackgroundColorAnimator, _super);
    function KpiBackgroundColorAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    KpiBackgroundColorAnimator.prototype.update = function (value) {
        this.parent.kpi.backgroundColor(value);
    };
    KpiBackgroundColorAnimator.get = function (self) {
        return self.kpi.backgroundColor();
    };
    KpiBackgroundColorAnimator.set = function (self, value) {
        if (value === null) {
            self.kpiAnimator.backgroundColor = undefined;
        }
        else {
            self.kpi.backgroundColor(value);
        }
    };
    KpiBackgroundColorAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.kpiAnimator.backgroundColor) {
            self.kpiAnimator.backgroundColor = new KpiBackgroundColorAnimator(self.kpiAnimator, value, trans);
        }
        return self.kpiAnimator.backgroundColor;
    };
    return KpiBackgroundColorAnimator;
}(ChildFrameAnimator));
var KpiLedColorAnimator = (function (_super) {
    __extends(KpiLedColorAnimator, _super);
    function KpiLedColorAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    KpiLedColorAnimator.prototype.update = function (value) {
        this.parent.kpi.ledColor(value);
    };
    KpiLedColorAnimator.get = function (self) {
        return self.kpi.ledColor();
    };
    KpiLedColorAnimator.set = function (self, value) {
        if (value === null) {
            self.kpiAnimator.ledColor = undefined;
        }
        else {
            self.kpi.ledColor(value);
        }
    };
    KpiLedColorAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.kpiAnimator.ledColor) {
            self.kpiAnimator.ledColor = new KpiLedColorAnimator(self.kpiAnimator, value, trans);
        }
        return self.kpiAnimator.ledColor;
    };
    return KpiLedColorAnimator;
}(ChildFrameAnimator));
var KpiTitleSizeAnimator = (function (_super) {
    __extends(KpiTitleSizeAnimator, _super);
    function KpiTitleSizeAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    KpiTitleSizeAnimator.prototype.update = function (value) {
        this.parent.kpi.titleSize(value);
    };
    KpiTitleSizeAnimator.get = function (self) {
        return self.kpi.titleSize();
    };
    KpiTitleSizeAnimator.set = function (self, value) {
        if (value === null) {
            self.kpiAnimator.titleSize = undefined;
        }
        else {
            self.kpi.titleSize(value);
            self.kpiAnimator.animate();
        }
    };
    KpiTitleSizeAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.kpiAnimator.titleSize) {
            self.kpiAnimator.titleSize = new KpiTitleSizeAnimator(self.kpiAnimator, value, trans);
        }
        return self.kpiAnimator.titleSize;
    };
    return KpiTitleSizeAnimator;
}(ChildFrameAnimator));
var KpiTitleColorAnimator = (function (_super) {
    __extends(KpiTitleColorAnimator, _super);
    function KpiTitleColorAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    KpiTitleColorAnimator.prototype.update = function (value) {
        this.parent.kpi.titleColor(value);
    };
    KpiTitleColorAnimator.get = function (self) {
        return self.kpi.titleColor();
    };
    KpiTitleColorAnimator.set = function (self, value) {
        if (value === null) {
            self.kpiAnimator.titleColor = undefined;
        }
        else {
            self.kpi.titleColor(value);
        }
    };
    KpiTitleColorAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.kpiAnimator.titleColor) {
            self.kpiAnimator.titleColor = new KpiTitleColorAnimator(self.kpiAnimator, value, trans);
        }
        return self.kpiAnimator.titleColor;
    };
    return KpiTitleColorAnimator;
}(ChildFrameAnimator));
var KpiSubtitleSizeAnimator = (function (_super) {
    __extends(KpiSubtitleSizeAnimator, _super);
    function KpiSubtitleSizeAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    KpiSubtitleSizeAnimator.prototype.update = function (value) {
        this.parent.kpi.subtitleSize(value);
    };
    KpiSubtitleSizeAnimator.get = function (self) {
        return self.kpi.subtitleSize();
    };
    KpiSubtitleSizeAnimator.set = function (self, value) {
        if (value === null) {
            self.kpiAnimator.subtitleSize = undefined;
        }
        else {
            self.kpi.subtitleSize(value);
            self.kpiAnimator.animate();
        }
    };
    KpiSubtitleSizeAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.kpiAnimator.subtitleSize) {
            self.kpiAnimator.subtitleSize = new KpiSubtitleSizeAnimator(self.kpiAnimator, value, trans);
        }
        return self.kpiAnimator.subtitleSize;
    };
    return KpiSubtitleSizeAnimator;
}(ChildFrameAnimator));
var KpiSubtitleColorAnimator = (function (_super) {
    __extends(KpiSubtitleColorAnimator, _super);
    function KpiSubtitleColorAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    KpiSubtitleColorAnimator.prototype.update = function (value) {
        this.parent.kpi.subtitleColor(value);
    };
    KpiSubtitleColorAnimator.get = function (self) {
        return self.kpi.subtitleColor();
    };
    KpiSubtitleColorAnimator.set = function (self, value) {
        if (value === null) {
            self.kpiAnimator.subtitleColor = undefined;
        }
        else {
            self.kpi.subtitleColor(value);
        }
    };
    KpiSubtitleColorAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.kpiAnimator.subtitleColor) {
            self.kpiAnimator.subtitleColor = new KpiSubtitleColorAnimator(self.kpiAnimator, value, trans);
        }
        return self.kpiAnimator.subtitleColor;
    };
    return KpiSubtitleColorAnimator;
}(ChildFrameAnimator));
var KpiValueSizeAnimator = (function (_super) {
    __extends(KpiValueSizeAnimator, _super);
    function KpiValueSizeAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    KpiValueSizeAnimator.prototype.update = function (value) {
        this.parent.kpi.valueSize(value);
    };
    KpiValueSizeAnimator.get = function (self) {
        return self.kpi.valueSize();
    };
    KpiValueSizeAnimator.set = function (self, value) {
        if (value === null) {
            self.kpiAnimator.valueSize = undefined;
        }
        else {
            self.kpi.valueSize(value);
            self.kpiAnimator.animate();
        }
    };
    KpiValueSizeAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.kpiAnimator.valueSize) {
            self.kpiAnimator.valueSize = new KpiValueSizeAnimator(self.kpiAnimator, value, trans);
        }
        return self.kpiAnimator.valueSize;
    };
    return KpiValueSizeAnimator;
}(ChildFrameAnimator));
var KpiValueColorAnimator = (function (_super) {
    __extends(KpiValueColorAnimator, _super);
    function KpiValueColorAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    KpiValueColorAnimator.prototype.update = function (value) {
        this.parent.kpi.valueColor(value);
    };
    KpiValueColorAnimator.get = function (self) {
        return self.kpi.valueColor();
    };
    KpiValueColorAnimator.set = function (self, value) {
        if (value === null) {
            self.kpiAnimator.valueColor = undefined;
        }
        else {
            self.kpi.valueColor(value);
        }
    };
    KpiValueColorAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.kpiAnimator.valueColor) {
            self.kpiAnimator.valueColor = new KpiValueColorAnimator(self.kpiAnimator, value, trans);
        }
        return self.kpiAnimator.valueColor;
    };
    return KpiValueColorAnimator;
}(ChildFrameAnimator));
var KpiLabelSizeAnimator = (function (_super) {
    __extends(KpiLabelSizeAnimator, _super);
    function KpiLabelSizeAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    KpiLabelSizeAnimator.prototype.update = function (value) {
        this.parent.kpi.labelSize(value);
    };
    KpiLabelSizeAnimator.get = function (self) {
        return self.kpi.labelSize();
    };
    KpiLabelSizeAnimator.set = function (self, value) {
        if (value === null) {
            self.kpiAnimator.labelSize = undefined;
        }
        else {
            self.kpi.labelSize(value);
            self.kpiAnimator.animate();
        }
    };
    KpiLabelSizeAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.kpiAnimator.labelSize) {
            self.kpiAnimator.labelSize = new KpiLabelSizeAnimator(self.kpiAnimator, value, trans);
        }
        return self.kpiAnimator.labelSize;
    };
    return KpiLabelSizeAnimator;
}(ChildFrameAnimator));
var KpiLabelColorAnimator = (function (_super) {
    __extends(KpiLabelColorAnimator, _super);
    function KpiLabelColorAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    KpiLabelColorAnimator.prototype.update = function (value) {
        this.parent.kpi.labelColor(value);
    };
    KpiLabelColorAnimator.get = function (self) {
        return self.kpi.labelColor();
    };
    KpiLabelColorAnimator.set = function (self, value) {
        if (value === null) {
            self.kpiAnimator.labelColor = undefined;
        }
        else {
            self.kpi.labelColor(value);
        }
    };
    KpiLabelColorAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.kpiAnimator.labelColor) {
            self.kpiAnimator.labelColor = new KpiLabelColorAnimator(self.kpiAnimator, value, trans);
        }
        return self.kpiAnimator.labelColor;
    };
    return KpiLabelColorAnimator;
}(ChildFrameAnimator));
var KpiNoticeSizeAnimator = (function (_super) {
    __extends(KpiNoticeSizeAnimator, _super);
    function KpiNoticeSizeAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    KpiNoticeSizeAnimator.prototype.update = function (value) {
        this.parent.kpi.noticeSize(value);
    };
    KpiNoticeSizeAnimator.get = function (self) {
        return self.kpi.noticeSize();
    };
    KpiNoticeSizeAnimator.set = function (self, value) {
        if (value === null) {
            self.kpiAnimator.noticeSize = undefined;
        }
        else {
            self.kpi.noticeSize(value);
            self.kpiAnimator.animate();
        }
    };
    KpiNoticeSizeAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.kpiAnimator.noticeSize) {
            self.kpiAnimator.noticeSize = new KpiNoticeSizeAnimator(self.kpiAnimator, value, trans);
        }
        return self.kpiAnimator.noticeSize;
    };
    return KpiNoticeSizeAnimator;
}(ChildFrameAnimator));
var KpiNoticeColorAnimator = (function (_super) {
    __extends(KpiNoticeColorAnimator, _super);
    function KpiNoticeColorAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    KpiNoticeColorAnimator.prototype.update = function (value) {
        this.parent.kpi.noticeColor(value);
    };
    KpiNoticeColorAnimator.get = function (self) {
        return self.kpi.noticeColor();
    };
    KpiNoticeColorAnimator.set = function (self, value) {
        if (value === null) {
            self.kpiAnimator.noticeColor = undefined;
        }
        else {
            self.kpi.noticeColor(value);
        }
    };
    KpiNoticeColorAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.kpiAnimator.noticeColor) {
            self.kpiAnimator.noticeColor = new KpiNoticeColorAnimator(self.kpiAnimator, value, trans);
        }
        return self.kpiAnimator.noticeColor;
    };
    return KpiNoticeColorAnimator;
}(ChildFrameAnimator));
var KpiMeterAnimator = (function (_super) {
    __extends(KpiMeterAnimator, _super);
    function KpiMeterAnimator(parent, value, transition) {
        var _this = _super.call(this, parent, value, transition) || this;
        _this.update(value);
        return _this;
    }
    KpiMeterAnimator.prototype.update = function (value) {
        this.parent.kpi.meter(value);
    };
    KpiMeterAnimator.get = function (self) {
        return self.kpi.meter();
    };
    KpiMeterAnimator.set = function (self, value) {
        if (value === null) {
            self.kpiAnimator.meter = undefined;
        }
        else {
            self.kpi.meter(value);
            self.kpiAnimator.animate();
        }
    };
    KpiMeterAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.kpiAnimator.meter) {
            self.kpiAnimator.meter = new KpiMeterAnimator(self.kpiAnimator, value, trans);
        }
        return self.kpiAnimator.meter;
    };
    return KpiMeterAnimator;
}(ChildFrameAnimator));
var KpiCylinderHeightAnimator = (function (_super) {
    __extends(KpiCylinderHeightAnimator, _super);
    function KpiCylinderHeightAnimator(parent, value, transition) {
        var _this = _super.call(this, parent, value, transition) || this;
        _this.update(value);
        return _this;
    }
    KpiCylinderHeightAnimator.prototype.update = function (value) {
        this.parent.kpi.cylinderHeight(value);
    };
    KpiCylinderHeightAnimator.get = function (self) {
        return self.kpi.cylinderHeight();
    };
    KpiCylinderHeightAnimator.set = function (self, value) {
        if (value === null) {
            self.kpiAnimator.cylinderHeight = undefined;
        }
        else {
            self.kpi.cylinderHeight(value);
            self.kpiAnimator.animate();
        }
    };
    KpiCylinderHeightAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.kpiAnimator.cylinderHeight) {
            self.kpiAnimator.cylinderHeight = new KpiCylinderHeightAnimator(self.kpiAnimator, value, trans);
        }
        return self.kpiAnimator.cylinderHeight;
    };
    return KpiCylinderHeightAnimator;
}(ChildFrameAnimator));
var KpiCylinderColorAnimator = (function (_super) {
    __extends(KpiCylinderColorAnimator, _super);
    function KpiCylinderColorAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    KpiCylinderColorAnimator.prototype.update = function (value) {
        this.parent.kpi.cylinderColor(value);
    };
    KpiCylinderColorAnimator.get = function (self) {
        return self.kpi.cylinderColor();
    };
    KpiCylinderColorAnimator.set = function (self, value) {
        if (value === null) {
            self.kpiAnimator.cylinderColor = undefined;
        }
        else {
            self.kpi.cylinderColor(value);
        }
    };
    KpiCylinderColorAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.kpiAnimator.cylinderColor) {
            self.kpiAnimator.cylinderColor = new KpiCylinderColorAnimator(self.kpiAnimator, value, trans);
        }
        return self.kpiAnimator.cylinderColor;
    };
    return KpiCylinderColorAnimator;
}(ChildFrameAnimator));
var KpiPistonColorAnimator = (function (_super) {
    __extends(KpiPistonColorAnimator, _super);
    function KpiPistonColorAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    KpiPistonColorAnimator.prototype.update = function (value) {
        this.parent.kpi.pistonColor(value);
    };
    KpiPistonColorAnimator.get = function (self) {
        return self.kpi.pistonColor();
    };
    KpiPistonColorAnimator.set = function (self, value) {
        if (value === null) {
            self.kpiAnimator.pistonColor = undefined;
        }
        else {
            self.kpi.pistonColor(value);
        }
    };
    KpiPistonColorAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.kpiAnimator.pistonColor) {
            self.kpiAnimator.pistonColor = new KpiPistonColorAnimator(self.kpiAnimator, value, trans);
        }
        return self.kpiAnimator.pistonColor;
    };
    return KpiPistonColorAnimator;
}(ChildFrameAnimator));
var KpiView = (function (_super) {
    __extends(KpiView, _super);
    function KpiView(kpi) {
        var _this = _super.call(this, kpi.node) || this;
        _this.kpi = kpi;
        _this.kpiAnimator = new KpiAnimator(_this.kpi, _this._childViews);
        _this.kpi.addObserver(_this);
        return _this;
    }
    KpiView.prototype.gauge = function () {
        var gauge = null;
        for (var i = 0; i < this._childViews.length; i += 1) {
            var child = this._childViews[i];
            if (child instanceof GaugeView) {
                gauge = child;
            }
        }
        return gauge;
    };
    KpiView.prototype.addGauge = function (view) {
        this.appendChildView(view);
    };
    KpiView.prototype.removeGauge = function (view) {
        this.removeChildView(view);
    };
    KpiView.prototype.chart = function () {
        var chart = null;
        for (var i = 0; i < this._childViews.length; i += 1) {
            var child = this._childViews[i];
            if (child instanceof ChartView) {
                chart = child;
            }
        }
        return chart;
    };
    KpiView.prototype.addChart = function (view) {
        this.appendChildView(view);
    };
    KpiView.prototype.removeChart = function (view) {
        this.removeChildView(view);
    };
    KpiView.prototype.didInsertChildView = function (childView) {
        if (childView instanceof GaugeView) {
            this.kpi.addGauge(childView.gauge);
        }
        else if (childView instanceof ChartView) {
            this.kpi.addChart(childView.chart);
        }
        _super.prototype.didInsertChildView.call(this, childView);
    };
    KpiView.prototype.didRemoveChildView = function (childView) {
        if (childView instanceof GaugeView) {
            this.kpi.removeGauge(childView.gauge);
        }
        else if (childView instanceof ChartView) {
            this.kpi.removeChart(childView.chart);
        }
        _super.prototype.didRemoveChildView.call(this, childView);
    };
    KpiView.prototype.kpiWidth = function (value, trans) {
        return this.propertyLength(KpiWidthAnimator, value, trans);
    };
    KpiView.prototype.kpiHeight = function (value, trans) {
        return this.propertyLength(KpiHeightAnimator, value, trans);
    };
    KpiView.prototype.backgroundColor = function (value, trans) {
        return this.propertyColor(KpiBackgroundColorAnimator, value, trans);
    };
    KpiView.prototype.ledColor = function (value, trans) {
        return this.propertyColor(KpiLedColorAnimator, value, trans);
    };
    KpiView.prototype.kpiTitle = function (newTitle) {
        var oldTitle = this.kpi.title();
        if (newTitle === undefined) {
            return oldTitle;
        }
        else {
            if (typeof newTitle === 'string') {
                newTitle = document.createTextNode(newTitle);
            }
            else if (newTitle instanceof HtmlView || newTitle instanceof TextView) {
                newTitle = newTitle.node;
            }
            if (newTitle instanceof Text) {
                if (oldTitle) {
                    while (oldTitle.firstChild) {
                        oldTitle.removeChild(oldTitle.firstChild);
                    }
                    oldTitle.appendChild(newTitle);
                    newTitle = oldTitle;
                }
                else {
                    var title = HtmlView.create('span').className('title');
                    title.append(newTitle);
                    newTitle = title.node;
                }
            }
            if (oldTitle) {
                var oldView = oldTitle.view;
                if (oldTitle !== newTitle && oldView) {
                    this.removeChildView(oldView);
                }
            }
            this.kpi.title(newTitle);
            if (newTitle) {
                var newView = newTitle.view;
                if (oldTitle !== newTitle && newView) {
                    this.appendChildView(newView);
                }
            }
            this.kpiAnimator.animate();
            return this;
        }
    };
    KpiView.prototype.titleSize = function (value, trans) {
        return this.propertyLength(KpiTitleSizeAnimator, value, trans);
    };
    KpiView.prototype.titleColor = function (value, trans) {
        return this.propertyColor(KpiTitleColorAnimator, value, trans);
    };
    KpiView.prototype.subtitle = function (newSubtitle) {
        var oldSubtitle = this.kpi.subtitle();
        if (newSubtitle === undefined) {
            return oldSubtitle;
        }
        else {
            if (typeof newSubtitle === 'string') {
                newSubtitle = document.createTextNode(newSubtitle);
            }
            else if (newSubtitle instanceof HtmlView || newSubtitle instanceof TextView) {
                newSubtitle = newSubtitle.node;
            }
            if (newSubtitle instanceof Text) {
                if (oldSubtitle) {
                    while (oldSubtitle.firstChild) {
                        oldSubtitle.removeChild(oldSubtitle.firstChild);
                    }
                    oldSubtitle.appendChild(newSubtitle);
                    newSubtitle = oldSubtitle;
                }
                else {
                    var subtitle = HtmlView.create('span').className('subtitle');
                    subtitle.append(newSubtitle);
                    newSubtitle = subtitle.node;
                }
            }
            if (oldSubtitle) {
                var oldView = oldSubtitle.view;
                if (oldSubtitle !== newSubtitle && oldView) {
                    this.removeChildView(oldView);
                }
            }
            this.kpi.subtitle(newSubtitle);
            if (newSubtitle) {
                var newView = newSubtitle.view;
                if (oldSubtitle !== newSubtitle && newView) {
                    this.appendChildView(newView);
                }
            }
            this.kpiAnimator.animate();
            return this;
        }
    };
    KpiView.prototype.subtitleSize = function (value, trans) {
        return this.propertyLength(KpiSubtitleSizeAnimator, value, trans);
    };
    KpiView.prototype.subtitleColor = function (value, trans) {
        return this.propertyColor(KpiSubtitleColorAnimator, value, trans);
    };
    KpiView.prototype.kpiValue = function (newValue) {
        var oldValue = this.kpi.value();
        if (newValue === undefined) {
            return oldValue;
        }
        else {
            if (typeof newValue === 'string') {
                newValue = document.createTextNode(newValue);
            }
            else if (newValue instanceof HtmlView || newValue instanceof TextView) {
                newValue = newValue.node;
            }
            if (newValue instanceof Text) {
                if (oldValue) {
                    while (oldValue.firstChild) {
                        oldValue.removeChild(oldValue.firstChild);
                    }
                    oldValue.appendChild(newValue);
                    newValue = oldValue;
                }
                else {
                    var value = HtmlView.create('span').className('value');
                    value.append(newValue);
                    newValue = value.node;
                }
            }
            if (oldValue) {
                var oldView = oldValue.view;
                if (oldValue !== newValue && oldView) {
                    this.removeChildView(oldView);
                }
            }
            this.kpi.value(newValue);
            if (newValue) {
                var newView = newValue.view;
                if (oldValue !== newValue && newView) {
                    this.appendChildView(newView);
                }
            }
            this.kpiAnimator.animate();
            return this;
        }
    };
    KpiView.prototype.valueSize = function (value, trans) {
        return this.propertyLength(KpiValueSizeAnimator, value, trans);
    };
    KpiView.prototype.valueColor = function (value, trans) {
        return this.propertyColor(KpiValueColorAnimator, value, trans);
    };
    KpiView.prototype.label = function (newLabel) {
        var oldLabel = this.kpi.label();
        if (newLabel === undefined) {
            return oldLabel;
        }
        else {
            if (typeof newLabel === 'string') {
                newLabel = document.createTextNode(newLabel);
            }
            else if (newLabel instanceof HtmlView || newLabel instanceof TextView) {
                newLabel = newLabel.node;
            }
            if (newLabel instanceof Text) {
                if (oldLabel) {
                    while (oldLabel.firstChild) {
                        oldLabel.removeChild(oldLabel.firstChild);
                    }
                    oldLabel.appendChild(newLabel);
                    newLabel = oldLabel;
                }
                else {
                    var label = HtmlView.create('span').className('label');
                    label.append(newLabel);
                    newLabel = label.node;
                }
            }
            if (oldLabel) {
                var oldView = oldLabel.view;
                if (oldLabel !== newLabel && oldView) {
                    this.removeChildView(oldView);
                }
            }
            this.kpi.label(newLabel);
            if (newLabel) {
                var newView = newLabel.view;
                if (oldLabel !== newLabel && newView) {
                    this.appendChildView(newView);
                }
            }
            this.kpiAnimator.animate();
            return this;
        }
    };
    KpiView.prototype.labelSize = function (value, trans) {
        return this.propertyLength(KpiLabelSizeAnimator, value, trans);
    };
    KpiView.prototype.labelColor = function (value, trans) {
        return this.propertyColor(KpiLabelColorAnimator, value, trans);
    };
    KpiView.prototype.notice = function (newNotice) {
        var oldNotice = this.kpi.notice();
        if (newNotice === undefined) {
            return oldNotice;
        }
        else {
            if (typeof newNotice === 'string') {
                newNotice = document.createTextNode(newNotice);
            }
            else if (newNotice instanceof HtmlView || newNotice instanceof TextView) {
                newNotice = newNotice.node;
            }
            if (newNotice instanceof Text) {
                if (oldNotice) {
                    while (oldNotice.firstChild) {
                        oldNotice.removeChild(oldNotice.firstChild);
                    }
                    oldNotice.appendChild(newNotice);
                    newNotice = oldNotice;
                }
                else {
                    var label = HtmlView.create('span').className('label');
                    label.append(newNotice);
                    newNotice = label.node;
                }
            }
            if (oldNotice) {
                var oldView = oldNotice.view;
                if (oldNotice !== newNotice && oldView) {
                    this.removeChildView(oldView);
                }
            }
            this.kpi.notice(newNotice);
            if (newNotice) {
                var newView = newNotice.view;
                if (oldNotice !== newNotice && newView) {
                    this.appendChildView(newView);
                }
            }
            this.kpiAnimator.animate();
            return this;
        }
    };
    KpiView.prototype.noticeSize = function (value, trans) {
        return this.propertyLength(KpiNoticeSizeAnimator, value, trans);
    };
    KpiView.prototype.noticeColor = function (value, trans) {
        return this.propertyColor(KpiNoticeColorAnimator, value, trans);
    };
    KpiView.prototype.meter = function (value, trans) {
        return this.propertyNumber(KpiMeterAnimator, value, trans);
    };
    KpiView.prototype.cylinderHeight = function (value, trans) {
        return this.propertyLength(KpiCylinderHeightAnimator, value, trans);
    };
    KpiView.prototype.cylinderColor = function (value, trans) {
        return this.propertyColor(KpiCylinderColorAnimator, value, trans);
    };
    KpiView.prototype.pistonColor = function (value, trans) {
        return this.propertyColor(KpiPistonColorAnimator, value, trans);
    };
    KpiView.prototype.render = function () {
        this.kpiAnimator.update();
    };
    KpiView.prototype.didReview = function (viewable) {
        _super.prototype.didReview.call(this, viewable);
        this.kpiAnimator.enabled(viewable);
    };
    KpiView.prototype.autosize = function () {
        var node = this.node;
        do {
            var parentNode = node.parentNode;
            if (parentNode) {
                if (parentNode instanceof HTMLElement) {
                    this.kpiWidth(parentNode.offsetWidth)
                        .kpiHeight(parentNode.offsetHeight);
                    return;
                }
                node = parentNode;
                continue;
            }
            return;
        } while (true);
    };
    KpiView.prototype.didResize = function () {
        _super.prototype.didResize.call(this);
        this.autosize();
        this.render();
    };
    KpiView.prototype.didSetState = function (newState, oldState) {
        _super.prototype.didSetState.call(this, newState, oldState);
        var trans = newState.get('transition').cast(Transition.Form);
        var width = newState.get('kpiWidth').cast(Length.Form);
        if (width) {
            this.kpiWidth(width);
        }
        var height = newState.get('kpiHeight').cast(Length.Form);
        if (height) {
            this.kpiHeight(height);
        }
        var backgroundColor = newState.get('backgroundColor').cast(Color.Form);
        if (backgroundColor) {
            this.backgroundColor(backgroundColor, trans);
        }
        var ledColor = newState.get('ledColor').cast(Color.Form);
        if (ledColor) {
            this.ledColor(ledColor, trans);
        }
        var titleSize = newState.get('titleSize').cast(Length.Form);
        if (titleSize) {
            this.titleSize(titleSize, trans);
        }
        var titleColor = newState.get('titleColor').cast(Color.Form);
        if (titleColor) {
            this.titleColor(titleColor, trans);
        }
        var titleView = this.kpiTitle();
        if (titleView) {
            var titleWeight = newState.get('titleWeight').numberValue();
            if (titleWeight) {
                titleView.style.fontWeight = "" + titleWeight;
            }
        }
        var subtitleSize = newState.get('subtitleSize').cast(Length.Form);
        if (subtitleSize) {
            this.subtitleSize(subtitleSize, trans);
        }
        var subtitleColor = newState.get('subtitleColor').cast(Color.Form);
        if (subtitleColor) {
            this.subtitleColor(subtitleColor, trans);
        }
        var subtitleView = this.subtitle();
        if (subtitleView) {
            var subtitleWeight = newState.get('subtitleWeight').numberValue();
            if (subtitleWeight) {
                subtitleView.style.fontWeight = "" + subtitleWeight;
            }
        }
        var valueSize = newState.get('valueSize').cast(Length.Form);
        if (valueSize) {
            this.valueSize(valueSize, trans);
        }
        var valueColor = newState.get('valueColor').cast(Color.Form);
        if (valueColor) {
            this.valueColor(valueColor, trans);
        }
        var valueView = this.kpiValue();
        if (valueView) {
            var valueWeight = newState.get('valueWeight').numberValue();
            if (valueWeight) {
                valueView.style.fontWeight = "" + valueWeight;
            }
        }
        var labelSize = newState.get('labelSize').cast(Length.Form);
        if (labelSize) {
            this.labelSize(labelSize, trans);
        }
        var labelColor = newState.get('labelColor').cast(Color.Form);
        if (labelColor) {
            this.labelColor(labelColor, trans);
        }
        var labelView = this.label();
        if (labelView) {
            var labelWeight = newState.get('labelWeight').numberValue();
            if (labelWeight) {
                labelView.style.fontWeight = "" + labelWeight;
            }
        }
        var noticeSize = newState.get('noticeSize').cast(Length.Form);
        if (noticeSize) {
            this.noticeSize(noticeSize, trans);
        }
        var noticeColor = newState.get('noticeColor').cast(Color.Form);
        if (noticeColor) {
            this.noticeColor(noticeColor, trans);
        }
        var noticeView = this.notice();
        if (noticeView) {
            var noticeWeight = newState.get('noticeWeight').numberValue();
            if (noticeWeight) {
                noticeView.style.fontWeight = "" + noticeWeight;
            }
        }
        var meter = newState.get('meter').numberValue();
        if (meter !== undefined) {
            this.meter(meter, trans);
        }
        var cylinderHeight = newState.get('cylinderHeight').cast(Length.Form);
        if (cylinderHeight) {
            this.cylinderHeight(cylinderHeight, trans);
        }
        var cylinderColor = newState.get('cylinderColor').cast(Color.Form);
        if (cylinderColor) {
            this.cylinderColor(cylinderColor, trans);
        }
        var pistonColor = newState.get('pistonColor').cast(Color.Form);
        if (pistonColor) {
            this.pistonColor(pistonColor, trans);
        }
    };
    KpiView.prototype.kpiGaugeDidSetMeter = function (newValue, oldValue, gauge, kpi) {
        this.kpiAnimator.animate();
    };
    KpiView.prototype.addObserver = function (observer) {
        this.kpi.addObserver(observer);
    };
    KpiView.prototype.removeObserver = function (observer) {
        this.kpi.removeObserver(observer);
    };
    KpiView.create = function (node) {
        if (node instanceof KpiView) {
            return node;
        }
        else if (node instanceof NodeView) {
            throw new TypeError('' + node);
        }
        else if (node === undefined || typeof node === 'string') {
            return new KpiView(Kpi.create(node));
        }
        else if (node.view instanceof KpiView) {
            return node.view;
        }
        else if (node.view) {
            throw new TypeError('' + node.view);
        }
        else if (node instanceof HtmlView) {
            return new KpiView(new Kpi(node));
        }
        else {
            throw new TypeError('' + node);
        }
    };
    KpiView.applyTheme = function (theme) {
        var sectorRatio = Selector.get('value').divide(Selector.get('total').or(Num.One));
        var sectorColor = Selector.get('primaryHue').invoke(sectorRatio).or(Selector.get('primaryColor'));
        var labelColor = Selector.get('contrast').invoke(Record.of(sectorColor, Num.valueOf(2)));
        var kpi = Record.empty()
            .slot('ledColor', sectorColor)
            .slot('titleSize', '15px')
            .slot('titleWeight', '300')
            .slot('subtitleSize', '15px')
            .slot('subtitleWeight', '300')
            .slot('labelSize', '36px')
            .slot('labelWeight', '400')
            .slot('labelSize', '15px')
            .slot('labelWeight', '300')
            .slot('noticeSize', '15px')
            .slot('noticeWeight', '300')
            .slot('meter', '0')
            .slot('cylinderHeight', '5%')
            .slot('cylinderColor', labelColor)
            .slot('pistonColor', sectorColor);
        theme.set('kpi', kpi);
    };
    return KpiView;
}(HtmlView));
KpiView.applyTheme(KpiView.Theme);

var KpiModel = (function (_super) {
    __extends(KpiModel, _super);
    function KpiModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    KpiModel.Params = HtmlModel.Params.concat([
        new ModelParam('transition', Selector.get('transition').or(Selector.get('kpi').get('transition'))),
        new ModelParam('meter', Selector.get('meter').or(Selector.get('kpi').get('meter'))),
        new ModelParam('kpiWidth', Selector.get('kpiWidth').or(Selector.get('kpi').get('width'))),
        new ModelParam('kpiHeight', Selector.get('kpiHeight').or(Selector.get('kpi').get('height'))),
        new ModelParam('backgroundColor', Selector.get('backgroundColor').or(Selector.get('kpi').get('backgroundColor'))),
        new ModelParam('ledColor', Selector.get('ledColor').or(Selector.get('kpi').get('ledColor'))),
        new ModelParam('titleSize', Selector.get('titleSize').or(Selector.get('kpi').get('titleSize'))),
        new ModelParam('titleColor', Selector.get('titleColor').or(Selector.get('kpi').get('titleColor'))),
        new ModelParam('titleWeight', Selector.get('titleWeight').or(Selector.get('kpi').get('titleWeight'))),
        new ModelParam('subtitleSize', Selector.get('subtitleSize').or(Selector.get('kpi').get('subtitleSize'))),
        new ModelParam('subtitleColor', Selector.get('subtitleColor').or(Selector.get('kpi').get('subtitleColor'))),
        new ModelParam('subtitleWeight', Selector.get('subtitleWeight').or(Selector.get('kpi').get('subtitleWeight'))),
        new ModelParam('valueSize', Selector.get('valueSize').or(Selector.get('kpi').get('valueSize'))),
        new ModelParam('valueColor', Selector.get('valueColor').or(Selector.get('kpi').get('valueColor'))),
        new ModelParam('valueWeight', Selector.get('valueWeight').or(Selector.get('kpi').get('valueWeight'))),
        new ModelParam('labelSize', Selector.get('labelSize').or(Selector.get('kpi').get('labelSize'))),
        new ModelParam('labelColor', Selector.get('labelColor').or(Selector.get('kpi').get('labelColor'))),
        new ModelParam('labelWeight', Selector.get('labelWeight').or(Selector.get('kpi').get('labelWeight'))),
        new ModelParam('noticeSize', Selector.get('noticeSize').or(Selector.get('kpi').get('noticeSize'))),
        new ModelParam('noticeColor', Selector.get('noticeColor').or(Selector.get('kpi').get('noticeColor'))),
        new ModelParam('noticeWeight', Selector.get('noticeWeight').or(Selector.get('kpi').get('noticeWeight'))),
        new ModelParam('cylinderHeight', Selector.get('cylinderHeight').or(Selector.get('kpi').get('cylinderHeight'))),
        new ModelParam('cylinderColor', Selector.get('cylinderColor').or(Selector.get('kpi').get('cylinderColor'))),
        new ModelParam('pistonColor', Selector.get('pistonColor').or(Selector.get('kpi').get('pistonColor'))),
    ]);
    return KpiModel;
}(HtmlModel));

var KpiForm = (function (_super) {
    __extends(KpiForm, _super);
    function KpiForm() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(KpiForm.prototype, "tag", {
        get: function () {
            return 'kpi';
        },
        enumerable: true,
        configurable: true
    });
    KpiForm.prototype.castView = function (value, stack, factory) {
        if (value.tag === this.tag) {
            var view = KpiView.create();
            var modelDef = this.materializeView(view, value, stack, factory);
            view.setModel(modelDef);
            return view;
        }
        return undefined;
    };
    KpiForm.prototype.castModel = function (value, stack, factory) {
        if (value.tag === this.tag) {
            var model = new KpiModel();
            var dataDef = this.materializeModel(model, value, stack, factory);
            model.setData(dataDef);
            return model;
        }
        return undefined;
    };
    KpiForm.prototype.materializeViewParam = function (view, param, stack, factory) {
        if (param.key instanceof Text$1) {
            var key = param.key.value;
            if (key === 'title') {
                var title = factory.castView(param.toValue(), stack, factory);
                if (title === undefined) {
                    title = param.toValue().stringValue();
                }
                if (title !== undefined) {
                    view.kpiTitle(title);
                    return Item.Absent;
                }
            }
            else if (key === 'subtitle') {
                var subtitle = factory.castView(param.toValue(), stack, factory);
                if (subtitle === undefined) {
                    subtitle = param.toValue().stringValue();
                }
                if (subtitle !== undefined) {
                    view.subtitle(subtitle);
                    return Item.Absent;
                }
            }
            else if (key === 'value') {
                var value = factory.castView(param.toValue(), stack, factory);
                if (value === undefined) {
                    value = param.toValue().stringValue();
                }
                if (value !== undefined) {
                    view.kpiValue(value);
                    return Item.Absent;
                }
            }
            else if (key === 'label') {
                var label = factory.castView(param.toValue(), stack, factory);
                if (label === undefined) {
                    label = param.toValue().stringValue();
                }
                if (label !== undefined) {
                    view.label(label);
                    return Item.Absent;
                }
            }
            else if (key === 'notice') {
                var notice = factory.castView(param.toValue(), stack, factory);
                if (notice === undefined) {
                    notice = param.toValue().stringValue();
                }
                if (notice !== undefined) {
                    view.notice(notice);
                    return Item.Absent;
                }
            }
        }
        var gauge = GaugeForm.Form.castView(param.toValue(), stack, factory);
        if (gauge) {
            view.addGauge(gauge);
            return gauge;
        }
        var chart = ChartForm.Form.castView(param.toValue(), stack, factory);
        if (chart) {
            view.addChart(chart);
            return chart;
        }
        return _super.prototype.materializeViewParam.call(this, view, param, stack, factory);
    };
    KpiForm.prototype.materializeModelParam = function (model, param, stack, factory) {
        if (param instanceof Attr && param.key.value === this.tag) {
            return Item.Absent;
        }
        return _super.prototype.materializeModelParam.call(this, model, param, stack, factory);
    };
    KpiForm.Form = new KpiForm();
    return KpiForm;
}(HtmlForm));
UiForm.addGlobal(KpiForm.Form);

var MapView = (function (_super) {
    __extends(MapView, _super);
    function MapView(node) {
        return _super.call(this, node) || this;
    }
    return MapView;
}(HtmlView));

var MapModel = (function (_super) {
    __extends(MapModel, _super);
    function MapModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return MapModel;
}(HtmlModel));

var MapForm = (function (_super) {
    __extends(MapForm, _super);
    function MapForm() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return MapForm;
}(HtmlForm));

var GeometryView = (function (_super) {
    __extends(GeometryView, _super);
    function GeometryView() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return GeometryView;
}(View));

var LayerView = (function (_super) {
    __extends(LayerView, _super);
    function LayerView() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LayerView.prototype.addLayer = function (layer) {
        this.appendChildView(layer);
    };
    LayerView.prototype.removeLayer = function (layer) {
        this.appendChildView(layer);
    };
    LayerView.prototype.addGeometry = function (geometry) {
        this.appendChildView(geometry);
    };
    LayerView.prototype.removeGeometry = function (geometry) {
        this.appendChildView(geometry);
    };
    LayerView.prototype.collectFeatures = function (features) {
        for (var i = 0; i < this._childViews.length; i += 1) {
            var childView = this._childViews[i];
            if (childView instanceof LayerView) {
                childView.collectFeatures(features);
            }
            else if (childView instanceof GeometryView) {
                features.push(childView.toGeoJson());
            }
        }
    };
    LayerView.prototype.toGeoJson = function () {
        var features = [];
        this.collectFeatures(features);
        return {
            type: 'FeatureCollection',
            features: features,
        };
    };
    return LayerView;
}(View));

var LayerModel = (function (_super) {
    __extends(LayerModel, _super);
    function LayerModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return LayerModel;
}(Model));

var LayerForm = (function (_super) {
    __extends(LayerForm, _super);
    function LayerForm() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return LayerForm;
}(UiForm));

var GeometryModel = (function (_super) {
    __extends(GeometryModel, _super);
    function GeometryModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return GeometryModel;
}(Model));

var GeometryForm = (function (_super) {
    __extends(GeometryForm, _super);
    function GeometryForm() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return GeometryForm;
}(UiForm));

var LngLatForm = (function (_super) {
    __extends(LngLatForm, _super);
    function LngLatForm() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(LngLatForm.prototype, "unit", {
        get: function () {
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    LngLatForm.prototype.mold = function (point) {
        if (point) {
            return Record.empty(2).slot('lng', point.lng).slot('lat', point.lat);
        }
        return Value.Absent;
    };
    LngLatForm.prototype.cast = function (value) {
        var lng = value.get('lng').numberValue();
        var lat = value.get('lat').numberValue();
        if (lng !== undefined && lat !== undefined) {
            return new mapboxgl.LngLat(lng, lat);
        }
        return undefined;
    };
    return LngLatForm;
}(Form));
var Mapbox = {
    LngLatForm: new LngLatForm(),
};

var MapboxPopoverView = (function (_super) {
    __extends(MapboxPopoverView, _super);
    function MapboxPopoverView(popover) {
        var _this = _super.call(this, popover) || this;
        _this.display('flex')
            .visibility('hidden')
            .position('absolute')
            .placement(['top', 'bottom', 'right', 'left'])
            .borderRadius(3);
        return _this;
    }
    MapboxPopoverView.prototype.setMap = function (map, position) {
        if (this._map) {
            this._map.off('render', this.replace);
        }
        this._map = map;
        this._position = position;
        this._map.on('render', this.replace);
        this.replace();
    };
    MapboxPopoverView.prototype.replace = function () {
        if (this._map) {
            var sourceWidth = 10;
            var sourceHeight = 10;
            var point = this._map.project(this._position);
            var source = this._map.getContainer();
            var sourceBounds = source.getBoundingClientRect();
            var sourceClientLeft = sourceBounds.left - source.offsetLeft;
            var sourceClientTop = sourceBounds.top - source.offsetTop;
            var popoverBounds = this.node.getBoundingClientRect();
            var popoverClientLeft = popoverBounds.left - this.node.offsetLeft;
            var popoverClientTop = popoverBounds.top - this.node.offsetTop;
            var sourceLeft = Math.round(point.x - sourceWidth / 2 + sourceClientLeft - popoverClientLeft);
            var sourceTop = Math.round(point.y - sourceHeight / 2 + sourceClientTop - popoverClientTop);
            if (sourceLeft !== this.popover.sourceLeft().pxValue()
                || sourceTop !== this.popover.sourceTop().pxValue()) {
                this.popover.sourceLeft(sourceLeft);
                this.popover.sourceTop(sourceTop);
                this.popover.sourceWidth(sourceWidth);
                this.popover.sourceHeight(sourceHeight);
                this.popoverAnimator.update();
            }
        }
        else {
            _super.prototype.replace.call(this);
        }
    };
    MapboxPopoverView.prototype.popoverDidHide = function (popover) {
        _super.prototype.popoverDidHide.call(this, popover);
        if (this._map) {
            this._map.off('render', this.replace);
        }
    };
    MapboxPopoverView.prototype.didSetState = function (newState, oldState) {
        _super.prototype.didSetState.call(this, newState, oldState);
        var width = newState.get('popoverWidth').cast(Length.Form);
        if (width) {
            this.width(width);
            this.requireResize();
        }
        var height = newState.get('popoverHeight').cast(Length.Form);
        if (height) {
            this.height(height);
            this.requireResize();
        }
        if (!oldState.isDefined()) {
            this.visibility(null);
            this.render();
        }
    };
    MapboxPopoverView.create = function (node) {
        if (node instanceof MapboxPopoverView) {
            return node;
        }
        else if (node instanceof NodeView) {
            throw new TypeError('' + node);
        }
        else if (node === undefined || typeof node === 'string') {
            return new MapboxPopoverView(Popover.create(node));
        }
        else if (node.view instanceof MapboxPopoverView) {
            return node.view;
        }
        else if (node.view) {
            throw new TypeError('' + node.view);
        }
        else if (node instanceof HTMLElement) {
            return new MapboxPopoverView(new Popover(node));
        }
        else {
            throw new TypeError('' + node);
        }
    };
    return MapboxPopoverView;
}(PopoverView));

var MapboxPopoverModel = (function (_super) {
    __extends(MapboxPopoverModel, _super);
    function MapboxPopoverModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MapboxPopoverModel.Params = PopoverModel.Params.concat([
        new ModelParam('popoverWidth', Selector.get('popoverWidth').or(Selector.get('popover').get('width'))),
        new ModelParam('popoverHeight', Selector.get('popoverHeight').or(Selector.get('popover').get('height'))),
    ]);
    return MapboxPopoverModel;
}(PopoverModel));

var MapboxPopoverForm = (function (_super) {
    __extends(MapboxPopoverForm, _super);
    function MapboxPopoverForm() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(MapboxPopoverForm.prototype, "tag", {
        get: function () {
            return 'mapboxPopover';
        },
        enumerable: true,
        configurable: true
    });
    MapboxPopoverForm.prototype.castView = function (value, stack, factory) {
        if (value.tag === this.tag) {
            var view = MapboxPopoverView.create();
            var modelDef = this.materializeView(view, value, stack, factory);
            view.setModel(modelDef);
            return view;
        }
        return undefined;
    };
    MapboxPopoverForm.prototype.castModel = function (value, stack, factory) {
        if (value.tag === this.tag) {
            var model = new MapboxPopoverModel();
            var dataDef = this.materializeModel(model, value, stack, factory);
            model.setData(dataDef);
            return model;
        }
        return undefined;
    };
    MapboxPopoverForm.prototype.materializeViewParam = function (view, param, stack, factory) {
        if (param.key instanceof Text$1) {
            var key = param.key.value;
            if (key === 'body') {
                var body = factory.castView(param.toValue(), stack, factory);
                if (body) {
                    view.append(body);
                    return body;
                }
            }
        }
        return _super.prototype.materializeViewParam.call(this, view, param, stack, factory);
    };
    MapboxPopoverForm.prototype.materializeModelParam = function (model, param, stack, factory) {
        if (param instanceof Attr && param.key.value === this.tag) {
            return Item.Absent;
        }
        return _super.prototype.materializeModelParam.call(this, model, param, stack, factory);
    };
    MapboxPopoverForm.Form = new MapboxPopoverForm();
    return MapboxPopoverForm;
}(HtmlForm));
UiForm.addGlobal(MapboxPopoverForm.Form);

var MapboxGeometryView = (function (_super) {
    __extends(MapboxGeometryView, _super);
    function MapboxGeometryView() {
        var _this = _super.call(this) || this;
        _this._featureId = Random.generateId();
        return _this;
    }
    Object.defineProperty(MapboxGeometryView.prototype, "center", {
        get: function () {
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    MapboxGeometryView.prototype.setMap = function (map) {
        this._map = map;
    };
    MapboxGeometryView.prototype.requestRedraw = function () {
        if ((this._flags & View.REQUEST_REDRAW) === 0) {
            this._flags |= View.REQUEST_REDRAW;
            if (this._parentView) {
                this._parentView.requireRedraw();
            }
        }
    };
    MapboxGeometryView.prototype.onMapMouseEnter = function (mapEvent, map) {
        if (this._hoverPopoverTemplate) {
            var appView = this.appView;
            if (appView) {
                this._hoverPopover = MapboxPopoverForm.Form.castView(this._hoverPopoverTemplate, this.stack(), UiForm.Global);
                if (this._hoverPopover) {
                    var center = this.center || mapEvent.lngLat;
                    this._hoverPopover.setMap(map, center);
                    this._hoverPopover.addObserver(this);
                    this.appendChildView(this._hoverPopover);
                    appView.showPopover(this._hoverPopover, { exclusive: false });
                }
            }
        }
    };
    MapboxGeometryView.prototype.onMapMouseLeave = function (mapEvent, map) {
        if (this._hoverPopover) {
            this._hoverPopover.hide();
        }
    };
    MapboxGeometryView.prototype.onMapClick = function (mapEvent, map) {
        var event = mapEvent.originalEvent;
        event.stopPropagation();
        if (this._clickPopover) {
            this._clickPopover.hide();
        }
        else if (this._clickPopoverTemplate) {
            var appView = this.appView;
            var center = this.center || mapEvent.lngLat;
            if (appView) {
                this._clickPopover = MapboxPopoverForm.Form.castView(this._clickPopoverTemplate, this.stack(), UiForm.Global);
                if (this._clickPopover) {
                    if (this._hoverPopover) {
                        this._hoverPopover.hide();
                    }
                    this._clickPopover.setMap(map, center);
                    this._clickPopover.addObserver(this);
                    this.appendChildView(this._clickPopover);
                    appView.showPopover(this._clickPopover, { exclusive: !event.shiftKey });
                }
                else if (this._hoverPopover) {
                    this._clickPopover = this._hoverPopover;
                    this._hoverPopover = undefined;
                }
            }
            if (this._clickFlyToZoom !== undefined) {
                map.flyTo({
                    center: [center.lng, center.lat],
                    zoom: this._clickFlyToZoom,
                });
            }
        }
    };
    MapboxGeometryView.prototype.popoverDidHide = function (popover) {
        if (this._hoverPopover && this._hoverPopover.popover === popover) {
            this._hoverPopover = undefined;
        }
        if (this._clickPopover && this._clickPopover.popover === popover) {
            this._clickPopover = undefined;
        }
    };
    return MapboxGeometryView;
}(GeometryView));

var MapboxLayerView = (function (_super) {
    __extends(MapboxLayerView, _super);
    function MapboxLayerView() {
        var _this = _super.call(this) || this;
        _this.onMapSourceData = _this.onMapSourceData.bind(_this);
        return _this;
    }
    MapboxLayerView.prototype.getGeometry = function (featureId) {
        var geometry;
        for (var i = 0; geometry === undefined && i < this._childViews.length; i += 1) {
            var childView = this._childViews[i];
            if (childView instanceof MapboxLayerView) {
                geometry = childView.getGeometry(featureId);
            }
            else if (childView instanceof MapboxGeometryView && childView._featureId === featureId) {
                geometry = childView;
                break;
            }
        }
        return geometry;
    };
    MapboxLayerView.prototype.setMap = function (map) {
        this._map = map;
        if (this._layerType !== undefined) {
            this._sourceId = Random.generateId();
            this._layerId = Random.generateId();
            map.addSource(this._sourceId, {
                type: 'geojson',
                data: {
                    type: 'FeatureCollection',
                    features: [],
                },
            });
            map.addLayer({
                id: this._layerId,
                type: this._layerType,
                source: this._sourceId,
            });
            this.updateLayerStyle(this._state, map);
            map.on('sourcedata', this.onMapSourceData);
        }
        for (var i = 0; i < this._childViews.length; i += 1) {
            this.initChildView(this._childViews[i], map);
        }
    };
    MapboxLayerView.prototype.initChildView = function (childView, map) {
        if (childView instanceof MapboxLayerView) {
            childView.setMap(map);
        }
        else if (childView instanceof MapboxGeometryView) {
            childView.setMap(map);
        }
    };
    MapboxLayerView.prototype.didInsertChildView = function (childView) {
        var map = this._map;
        if (map) {
            this.initChildView(childView, map);
        }
        _super.prototype.didInsertChildView.call(this, childView);
    };
    MapboxLayerView.prototype.setZoomRange = function (minZoom, maxZoom) {
        this._map.setLayerZoomRange(this._layerId, minZoom, maxZoom);
    };
    MapboxLayerView.prototype.setPaintProperty = function (name, value) {
        this._map.setPaintProperty(this._layerId, name, value);
    };
    MapboxLayerView.prototype.updatePaintProperty = function (name, paintDef) {
        var value;
        if (paintDef instanceof Num) {
            value = paintDef.numberValue();
        }
        else {
            var paintValue = UiValue.Form.cast(paintDef);
            if (paintValue !== undefined) {
                value = paintValue.toString();
            }
            else {
                value = {
                    type: 'identity',
                    property: paintDef.stringValue(),
                };
            }
        }
        if (value !== undefined) {
            this.setPaintProperty(name, value);
        }
    };
    MapboxLayerView.prototype.updateLayerStyle = function (state, map) {
        var zoomRange = state.get('zoomRange').toValue();
        if (zoomRange.isDefined()) {
            var minZoom = zoomRange.getItem(0).numberValue();
            var maxZoom = zoomRange.getItem(1).numberValue();
            if (minZoom !== undefined && maxZoom !== undefined) {
                this.setZoomRange(minZoom, maxZoom);
            }
        }
        var fillColor = state.get('fillColor');
        if (fillColor.isDefined()) {
            this.updatePaintProperty('fill-color', fillColor);
        }
        var fillOpacity = state.get('fillOpacity');
        if (fillOpacity.isDefined()) {
            this.updatePaintProperty('fill-opacity', fillOpacity);
        }
        var circleColor = state.get('circleColor');
        if (circleColor.isDefined()) {
            this.updatePaintProperty('circle-color', circleColor);
        }
        var circleOpacity = state.get('circleOpacity');
        if (circleOpacity.isDefined()) {
            this.updatePaintProperty('circle-opacity', circleOpacity);
        }
        var circleRadius = state.get('circleRadius');
        if (circleRadius.isDefined()) {
            this.updatePaintProperty('circle-radius', circleRadius);
        }
    };
    MapboxLayerView.prototype.requestRedraw = function () {
        if ((this._flags & View.REQUEST_REDRAW) === 0) {
            this._flags |= View.REQUEST_REDRAW;
            if (this._parentView) {
                this._parentView.requireRedraw();
            }
        }
    };
    MapboxLayerView.prototype.didSetState = function (newState, oldState) {
        _super.prototype.didSetState.call(this, newState, oldState);
        var map = this._map;
        if (map && this._layerId !== undefined) {
            this.updateLayerStyle(newState, map);
        }
        this.requireRedraw();
    };
    MapboxLayerView.prototype.didRedraw = function () {
        _super.prototype.didRedraw.call(this);
        if ((this._flags & MapboxLayerView.SourceLoaded) !== 0) {
            var source = this._map.getSource(this._sourceId);
            var data = this.toGeoJson();
            source.setData(data);
        }
    };
    MapboxLayerView.prototype.onMapSourceData = function () {
        var map = this._map;
        if (map.isSourceLoaded(this._sourceId)) {
            map.off('sourcedata', this.onMapSourceData);
            this._flags |= MapboxLayerView.SourceLoaded;
            this.requireRedraw();
        }
    };
    MapboxLayerView.prototype.onFeatureClick = function (feature, event) {
        if (feature.properties && feature.properties.id !== undefined) {
            var geometry = this.getGeometry(feature.properties.id);
            if (geometry) {
                geometry.onMapClick(event, this._map);
            }
        }
    };
    MapboxLayerView.SourceLoaded = 1 << 16;
    return MapboxLayerView;
}(LayerView));

var MapboxMapView = (function (_super) {
    __extends(MapboxMapView, _super);
    function MapboxMapView(node) {
        var _this = _super.call(this, node) || this;
        _this._hoverGeometry = {};
        _this.position('relative')
            .visibility('hidden')
            .flexGrow(1);
        _this.onClick = _this.onClick.bind(_this);
        _this.onMapLoad = _this.onMapLoad.bind(_this);
        _this.onMapZoom = _this.onMapZoom.bind(_this);
        _this.onMapClick = _this.onMapClick.bind(_this);
        _this.onMapMouseMove = _this.onMapMouseMove.bind(_this);
        _this.node.addEventListener('click', _this.onClick);
        return _this;
    }
    Object.defineProperty(MapboxMapView.prototype, "layerIds", {
        get: function () {
            var layerIds = [];
            for (var i = 0; i < this._childViews.length; i += 1) {
                var childView = this._childViews[i];
                if (childView instanceof MapboxLayerView && childView._layerId !== undefined) {
                    layerIds.push(childView._layerId);
                }
            }
            return layerIds;
        },
        enumerable: true,
        configurable: true
    });
    MapboxMapView.prototype.getLayer = function (layerId) {
        for (var i = 0; i < this._childViews.length; i += 1) {
            var childView = this._childViews[i];
            if (childView instanceof MapboxLayerView && childView._layerId === layerId) {
                return childView;
            }
        }
        return undefined;
    };
    MapboxMapView.prototype.addLayer = function (layer) {
        this.appendChildView(layer);
    };
    MapboxMapView.prototype.removeLayer = function (layer) {
        this.removeChildView(layer);
    };
    MapboxMapView.prototype.getGeometry = function (featureId, layerId) {
        var layer = this.getLayer(layerId);
        if (layer) {
            return layer.getGeometry(featureId);
        }
        return undefined;
    };
    MapboxMapView.prototype.initMap = function (options) {
        var map = this._map;
        if (!map) {
            options.container = this.node;
            this._map = map = new mapboxgl.Map(options);
            map.on('load', this.onMapLoad);
            map.on('zoom', this.onMapZoom);
            map.on('click', this.onMapClick);
            map.on('mousemove', this.onMapMouseMove);
        }
        return map;
    };
    MapboxMapView.prototype.initChildView = function (childView, map) {
        if (childView instanceof MapboxLayerView) {
            childView.setMap(map);
        }
    };
    MapboxMapView.prototype.didInsertChildView = function (childView) {
        if ((this._flags & MapboxMapView.MapLoaded) !== 0) {
            this.initChildView(childView, this._map);
        }
        _super.prototype.didInsertChildView.call(this, childView);
    };
    MapboxMapView.prototype.didResize = function () {
        _super.prototype.didResize.call(this);
        if ((this._flags & MapboxMapView.MapLoaded) !== 0) {
            this._map.resize();
        }
    };
    MapboxMapView.prototype.didSetState = function (newState, oldState) {
        _super.prototype.didSetState.call(this, newState, oldState);
        var accessToken = newState.get('accessToken').stringValue();
        if (accessToken !== undefined && accessToken !== mapboxgl.accessToken) {
            Object.getOwnPropertyDescriptor(mapboxgl, 'accessToken').set(accessToken);
            var options = {};
            options.style = newState.get('style').stringValue();
            options.center = newState.get('center').cast(Mapbox.LngLatForm);
            options.pitch = newState.get('pitch').numberValue();
            options.zoom = newState.get('zoom').numberValue();
            if (options.style !== undefined) {
                this.initMap(options);
            }
        }
    };
    MapboxMapView.prototype.onMapLoad = function () {
        var map = this._map;
        map.off('load', this.onMapLoad);
        map.resize();
        this._flags &= ~MapboxMapView.MapLoaded;
        this.visibility(null);
        for (var i = 0; i < this._childViews.length; i += 1) {
            this.initChildView(this._childViews[i], map);
        }
    };
    MapboxMapView.prototype.onMapZoom = function () {
        var map = this._map;
        var oldModel = this._model;
        var oldZoom = oldModel.get('zoom').numberValue();
        var newZoom = Math.round(map.getZoom());
        if (oldZoom !== newZoom) {
            var newModel = oldModel.withSlot('zoom', newZoom);
            this.setModel(newModel);
        }
    };
    MapboxMapView.prototype.onClick = function (event) {
        event.stopPropagation();
    };
    MapboxMapView.prototype.onMapClick = function (event) {
        var features = this._map.queryRenderedFeatures(event.point, { layers: this.layerIds });
        if (features.length) {
            for (var i = 0; i < features.length; i += 1) {
                var feature = features[i];
                var layer = this.getLayer(feature.layer.id);
                if (layer) {
                    layer.onFeatureClick(feature, event);
                }
            }
        }
        else {
            var appView = this.appView;
            if (appView) {
                appView.onPassthroughClick(event.originalEvent);
            }
        }
    };
    MapboxMapView.prototype.onMapMouseMove = function (event) {
        var hoverGeometry = {};
        var features = this._map.queryRenderedFeatures(event.point, { layers: this.layerIds });
        for (var i = 0; i < features.length; i += 1) {
            var feature = features[i];
            if (feature.properties && feature.properties.id !== undefined) {
                var featureId = feature.properties.id;
                var layerId = feature.layer.id;
                var geometry = this.getGeometry(featureId, layerId);
                if (geometry) {
                    if (!this._hoverGeometry[featureId]) {
                        geometry.onMapMouseEnter(event, this._map);
                    }
                    hoverGeometry[featureId] = geometry;
                }
            }
        }
        for (var featureId in this._hoverGeometry) {
            var geometry = this._hoverGeometry[featureId];
            if (geometry && !hoverGeometry[featureId]) {
                geometry.onMapMouseLeave(event, this._map);
            }
        }
        this._hoverGeometry = hoverGeometry;
        this._map.getCanvas().style.cursor = hoverGeometry.length ? 'pointer' : '';
    };
    MapboxMapView.create = function () {
        var node = document.createElement('div');
        return new MapboxMapView(node).className('map mapbox');
    };
    MapboxMapView.applyTheme = function (theme) {
        var mapbox = Record.empty();
        theme.set('mapbox', mapbox);
    };
    MapboxMapView.MapLoaded = 1 << 16;
    return MapboxMapView;
}(MapView));
MapboxMapView.applyTheme(MapboxMapView.Theme);

var MapboxMapModel = (function (_super) {
    __extends(MapboxMapModel, _super);
    function MapboxMapModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MapboxMapModel.prototype.willRemodel = function (newState, stack) {
        var oldState = this._state;
        if (oldState.get('zoom').numberValue() !== newState.get('zoom').numberValue()) {
            for (var i = 0; i < this._childModels.length; i += 1) {
                this._childModels[i].requireRestate();
            }
        }
    };
    MapboxMapModel.Params = MapModel.Params.concat([
        new ModelParam('accessToken', Selector.get('accessToken')),
        new ModelParam('style', Selector.get('style')),
        new ModelParam('center', Selector.get('center')),
        new ModelParam('pitch', Selector.get('pitch')),
        new ModelParam('zoom', Selector.get('zoom')),
    ]);
    return MapboxMapModel;
}(MapModel));

var MapboxLayerModel = (function (_super) {
    __extends(MapboxLayerModel, _super);
    function MapboxLayerModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MapboxLayerModel.Params = LayerModel.Params.concat([
        new ModelParam('zoomRange', Selector.get('zoomRange')),
        new ModelParam('fillColor', Selector.get('fillColor')),
        new ModelParam('fillOpacity', Selector.get('fillOpacity')),
        new ModelParam('circleColor', Selector.get('circleColor')),
        new ModelParam('circleOpacity', Selector.get('circleOpacity')),
        new ModelParam('circleRadius', Selector.get('circleRadius')),
    ]);
    return MapboxLayerModel;
}(LayerModel));

var MapboxGeometryForm = (function (_super) {
    __extends(MapboxGeometryForm, _super);
    function MapboxGeometryForm() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MapboxGeometryForm.addGlobal = function (geometryForm) {
        MapboxGeometryForm.Global = MapboxGeometryForm.Global.withUiForm(geometryForm);
    };
    MapboxGeometryForm.removeGlobal = function (geometryForm) {
        MapboxGeometryForm.Global = MapboxGeometryForm.Global.withoutUiForm(geometryForm);
    };
    MapboxGeometryForm.prototype.materializeViewParam = function (view, param, stack, factory) {
        if (param.key instanceof Text$1) {
            var key = param.key.value;
            if (key === 'hover') {
                var hoverDirective = param.toValue();
                view._hoverPopoverTemplate = hoverDirective.get('popover');
            }
            else if (key === 'click') {
                var clickDirective = param.toValue();
                view._clickPopoverTemplate = clickDirective.get('popover');
                var flyToDirective = clickDirective.get('flyTo');
                if (flyToDirective.isDefined()) {
                    view._clickFlyToZoom = flyToDirective.get('zoom').numberValue();
                }
            }
        }
        return _super.prototype.materializeViewParam.call(this, view, param, stack, factory);
    };
    MapboxGeometryForm.Global = new PolyUiForm([]);
    return MapboxGeometryForm;
}(GeometryForm));

var MapboxLayerForm = (function (_super) {
    __extends(MapboxLayerForm, _super);
    function MapboxLayerForm() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(MapboxLayerForm.prototype, "tag", {
        get: function () {
            return 'mapboxLayer';
        },
        enumerable: true,
        configurable: true
    });
    MapboxLayerForm.prototype.castView = function (value, stack, factory) {
        if (value.tag === this.tag) {
            var view = new MapboxLayerView();
            var modelDef = this.materializeView(view, value, stack, factory);
            view.setModel(modelDef);
            return view;
        }
        return undefined;
    };
    MapboxLayerForm.prototype.castModel = function (value, stack, factory) {
        if (value.tag === this.tag) {
            var model = new MapboxLayerModel();
            var dataDef = this.materializeModel(model, value, stack, factory);
            model.setData(dataDef);
            return model;
        }
        return undefined;
    };
    MapboxLayerForm.prototype.materializeViewParam = function (view, param, stack, factory) {
        if (param.key instanceof Text$1) {
            var key = param.key.value;
            if (key === 'type') {
                view._layerType = param.toValue().evaluate(stack).toValue().stringValue(view._layerType);
            }
        }
        else {
            var layer = MapboxLayerForm.Form.castView(param.toValue(), stack, factory);
            if (layer) {
                view.addLayer(layer);
                return layer;
            }
            var geometry = MapboxGeometryForm.Global.castView(param.toValue(), stack, factory);
            if (geometry !== undefined) {
                view.addGeometry(geometry);
                return geometry;
            }
        }
        return _super.prototype.materializeViewParam.call(this, view, param, stack, factory);
    };
    MapboxLayerForm.prototype.materializeModelParam = function (model, param, stack, factory) {
        if (param instanceof Attr && param.key.value === this.tag) {
            return Item.Absent;
        }
        return _super.prototype.materializeModelParam.call(this, model, param, stack, factory);
    };
    MapboxLayerForm.Form = new MapboxLayerForm();
    return MapboxLayerForm;
}(LayerForm));
UiForm.addGlobal(MapboxLayerForm.Form);

var MapboxMapForm = (function (_super) {
    __extends(MapboxMapForm, _super);
    function MapboxMapForm() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(MapboxMapForm.prototype, "tag", {
        get: function () {
            return 'mapboxMap';
        },
        enumerable: true,
        configurable: true
    });
    MapboxMapForm.prototype.castView = function (value, stack, factory) {
        if (value.tag === this.tag) {
            var view = MapboxMapView.create();
            var modelDef = this.materializeView(view, value, stack, factory);
            view.setModel(modelDef);
            return view;
        }
        return undefined;
    };
    MapboxMapForm.prototype.castModel = function (value, stack, factory) {
        if (value.tag === this.tag) {
            var model = new MapboxMapModel();
            var dataDef = this.materializeModel(model, value, stack, factory);
            model.setData(dataDef);
            return model;
        }
        return undefined;
    };
    MapboxMapForm.prototype.materializeViewParam = function (view, param, stack, factory) {
        var layer = MapboxLayerForm.Form.castView(param.toValue(), stack, factory);
        if (layer) {
            view.addLayer(layer);
            return layer;
        }
        return _super.prototype.materializeViewParam.call(this, view, param, stack, factory);
    };
    MapboxMapForm.prototype.materializeModelParam = function (model, param, stack, factory) {
        if (param instanceof Attr && param.key.value === this.tag) {
            return Item.Absent;
        }
        return _super.prototype.materializeModelParam.call(this, model, param, stack, factory);
    };
    MapboxMapForm.Form = new MapboxMapForm();
    return MapboxMapForm;
}(MapForm));
UiForm.addGlobal(MapboxMapForm.Form);

var MapboxGeometryModel = (function (_super) {
    __extends(MapboxGeometryModel, _super);
    function MapboxGeometryModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return MapboxGeometryModel;
}(GeometryModel));

var MapboxPointView = (function (_super) {
    __extends(MapboxPointView, _super);
    function MapboxPointView() {
        var _this = _super.call(this) || this;
        _this._feature = {
            type: 'Feature',
            geometry: {
                type: 'Point',
                coordinates: [],
            },
            properties: {
                id: _this._featureId,
            },
        };
        return _this;
    }
    Object.defineProperty(MapboxPointView.prototype, "center", {
        get: function () {
            var coordinates = this._feature.geometry.coordinates;
            if (coordinates.length === 2) {
                return new mapboxgl.LngLat(coordinates[0], coordinates[1]);
            }
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    MapboxPointView.prototype.coordinates = function (coordinates) {
        if (coordinates === undefined) {
            return this._feature.geometry.coordinates;
        }
        else {
            this._feature.geometry.coordinates = coordinates;
            return this;
        }
    };
    MapboxPointView.prototype.properties = function (properties) {
        if (properties === undefined) {
            return this._feature.properties;
        }
        else {
            if (this._feature.properties && properties) {
                for (var key in properties) {
                    var value = properties[key];
                    if (value) {
                        this._feature.properties[key] = value;
                    }
                }
            }
            else {
                this._feature.properties = properties;
            }
            return this;
        }
    };
    MapboxPointView.prototype.toGeoJson = function () {
        return this._feature;
    };
    MapboxPointView.prototype.didSetState = function (newState, oldState) {
        _super.prototype.didSetState.call(this, newState, oldState);
        var coordinates = newState.get('coordinates');
        if (coordinates.isDefined()) {
            var lng_1;
            var lat_1;
            coordinates.forEach(function (coord, index) {
                var key = coord.key.stringValue();
                if (key !== undefined) {
                    if (key === 'lng') {
                        lng_1 = coord.toValue().numberValue(lng_1);
                    }
                    else if (key === 'lat') {
                        lat_1 = coord.toValue().numberValue(lat_1);
                    }
                }
                else if (coord instanceof Value) {
                    if (index === 0) {
                        lng_1 = coord.numberValue(lng_1);
                    }
                    else if (index === 1) {
                        lat_1 = coord.numberValue(lat_1);
                    }
                }
            });
            if (lng_1 !== undefined && lat_1 !== undefined) {
                this.coordinates([lng_1, lat_1]);
            }
        }
        var properties = newState.get('properties');
        if (properties.isDefined()) {
            this.properties(properties.toAny());
        }
        this.requireRedraw();
    };
    return MapboxPointView;
}(MapboxGeometryView));

var MapboxPointModel = (function (_super) {
    __extends(MapboxPointModel, _super);
    function MapboxPointModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MapboxPointModel.Params = MapboxGeometryModel.Params.concat([
        new ModelParam('coordinates', Selector.get('coordinates')),
        new ModelParam('properties', Selector.get('properties')),
    ]);
    return MapboxPointModel;
}(MapboxGeometryModel));

var MapboxPointForm = (function (_super) {
    __extends(MapboxPointForm, _super);
    function MapboxPointForm() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(MapboxPointForm.prototype, "tag", {
        get: function () {
            return 'mapboxPoint';
        },
        enumerable: true,
        configurable: true
    });
    MapboxPointForm.prototype.castView = function (value, stack, factory) {
        if (value.tag === this.tag) {
            var view = new MapboxPointView();
            var modelDef = this.materializeView(view, value, stack, factory);
            view.setModel(modelDef);
            return view;
        }
        return undefined;
    };
    MapboxPointForm.prototype.castModel = function (value, stack, factory) {
        if (value.tag === this.tag) {
            var model = new MapboxPointModel();
            var dataDef = this.materializeModel(model, value, stack, factory);
            model.setData(dataDef);
            return model;
        }
        return undefined;
    };
    MapboxPointForm.prototype.materializeViewParam = function (view, param, stack, factory) {
        return _super.prototype.materializeViewParam.call(this, view, param, stack, factory);
    };
    MapboxPointForm.prototype.materializeModelParam = function (model, param, stack, factory) {
        if (param instanceof Attr && param.key.value === this.tag) {
            return Item.Absent;
        }
        return _super.prototype.materializeModelParam.call(this, model, param, stack, factory);
    };
    MapboxPointForm.Form = new MapboxPointForm();
    return MapboxPointForm;
}(MapboxGeometryForm));
UiForm.addGlobal(MapboxPointForm.Form);
MapboxGeometryForm.addGlobal(MapboxPointForm.Form);

var MapboxPolygonView = (function (_super) {
    __extends(MapboxPolygonView, _super);
    function MapboxPolygonView() {
        var _this = _super.call(this) || this;
        _this._feature = {
            type: 'Feature',
            geometry: {
                type: 'Polygon',
                coordinates: [[]],
            },
            properties: {
                id: _this._featureId,
            },
        };
        return _this;
    }
    Object.defineProperty(MapboxPolygonView.prototype, "center", {
        get: function () {
            var polygons = this._feature.geometry.coordinates;
            var lng = 0;
            var lat = 0;
            var k = 0;
            for (var i = 0, m = polygons.length; i < m; i += 1) {
                var polygon = polygons[i];
                for (var j = 0, n = polygon.length; j < n; j += 1) {
                    var coord = polygon[j];
                    if (coord.length === 2) {
                        lng += coord[0];
                        lat += coord[1];
                        k += 1;
                    }
                }
            }
            if (k > 0) {
                return new mapboxgl.LngLat(lng / k, lat / k);
            }
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    MapboxPolygonView.prototype.coordinates = function (coordinates) {
        if (coordinates === undefined) {
            return this._feature.geometry.coordinates;
        }
        else {
            this._feature.geometry.coordinates = coordinates;
            return this;
        }
    };
    MapboxPolygonView.prototype.properties = function (properties) {
        if (properties === undefined) {
            return this._feature.properties;
        }
        else {
            if (this._feature.properties && properties) {
                for (var key in properties) {
                    var value = properties[key];
                    if (value) {
                        this._feature.properties[key] = value;
                    }
                }
            }
            else {
                this._feature.properties = properties;
            }
            this._feature.properties = this._feature.properties;
            return this;
        }
    };
    MapboxPolygonView.prototype.toGeoJson = function () {
        return this._feature;
    };
    MapboxPolygonView.prototype.didSetState = function (newState, oldState) {
        _super.prototype.didSetState.call(this, newState, oldState);
        var coordinates = newState.get('coordinates');
        if (coordinates.isDefined()) {
            var coords_1 = [];
            coordinates.forEach(function (coordinate) {
                var lng;
                var lat;
                coordinate.forEach(function (coord, index) {
                    var key = coord.key.stringValue();
                    if (key !== undefined) {
                        if (key === 'lng') {
                            lng = coord.toValue().numberValue(lng);
                        }
                        else if (key === 'lat') {
                            lat = coord.toValue().numberValue(lat);
                        }
                    }
                    else if (coord instanceof Value) {
                        if (index === 0) {
                            lng = coord.numberValue(lng);
                        }
                        else if (index === 1) {
                            lat = coord.numberValue(lat);
                        }
                    }
                });
                if (lng !== undefined && lat !== undefined) {
                    coords_1.push([lng, lat]);
                }
            });
            this.coordinates([coords_1]);
        }
        var properties = newState.get('properties');
        if (properties.isDefined()) {
            this.properties(properties.toAny());
        }
        this.requireRedraw();
    };
    return MapboxPolygonView;
}(MapboxGeometryView));

var MapboxPolygonModel = (function (_super) {
    __extends(MapboxPolygonModel, _super);
    function MapboxPolygonModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MapboxPolygonModel.Params = MapboxGeometryModel.Params.concat([
        new ModelParam('coordinates', Selector.get('coordinates')),
        new ModelParam('properties', Selector.get('properties')),
    ]);
    return MapboxPolygonModel;
}(MapboxGeometryModel));

var MapboxPolygonForm = (function (_super) {
    __extends(MapboxPolygonForm, _super);
    function MapboxPolygonForm() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(MapboxPolygonForm.prototype, "tag", {
        get: function () {
            return 'mapboxPolygon';
        },
        enumerable: true,
        configurable: true
    });
    MapboxPolygonForm.prototype.castView = function (value, stack, factory) {
        if (value.tag === this.tag) {
            var view = new MapboxPolygonView();
            var modelDef = this.materializeView(view, value, stack, factory);
            view.setModel(modelDef);
            return view;
        }
        return undefined;
    };
    MapboxPolygonForm.prototype.castModel = function (value, stack, factory) {
        if (value.tag === this.tag) {
            var model = new MapboxPolygonModel();
            var dataDef = this.materializeModel(model, value, stack, factory);
            model.setData(dataDef);
            return model;
        }
        return undefined;
    };
    MapboxPolygonForm.prototype.materializeViewParam = function (view, param, stack, factory) {
        return _super.prototype.materializeViewParam.call(this, view, param, stack, factory);
    };
    MapboxPolygonForm.prototype.materializeModelParam = function (model, param, stack, factory) {
        if (param instanceof Attr && param.key.value === this.tag) {
            return Item.Absent;
        }
        return _super.prototype.materializeModelParam.call(this, model, param, stack, factory);
    };
    MapboxPolygonForm.Form = new MapboxPolygonForm();
    return MapboxPolygonForm;
}(MapboxGeometryForm));
UiForm.addGlobal(MapboxPolygonForm.Form);
MapboxGeometryForm.addGlobal(MapboxPolygonForm.Form);

var PI$3 = Math.PI;
var TAU$3 = 2 * PI$3;
var PI_OVER_2$1 = PI$3 / 2;
var EPSILON$2 = 1e-12;
var Wedge = (function () {
    function Wedge(node) {
        this.node = node;
        this._value = NaN;
        this._total = NaN;
        this._width = Length.zero();
        this._height = Length.zero();
        this._arc = new Arc();
        this._minAngle = Angle.zero();
        this._innerRadius = Length.zero();
        this._outerRadius = Length.zero();
        this._arcColor = Color.black();
        this._tickAlign = 0.5;
        this._tickRadius = Length.zero();
        this._tickLength = Length.zero();
        this._tickWidth = Length.px(1);
        this._tickPadding = Length.px(3);
        this._tickColor = Color.black();
        this._label = null;
        this._labelRadius = Length.zero();
        this._labelSize = null;
        this._labelColor = null;
        this._legend = null;
        this._legendSize = null;
        this._legendColor = null;
        this.dirty = true;
        this.observers = [];
        this.arcPath = document.createElementNS('http://www.w3.org/2000/svg', 'path');
        this.arcPath.setAttribute('class', 'arc');
        this.node.appendChild(this.arcPath);
        this.tickPath = document.createElementNS('http://www.w3.org/2000/svg', 'path');
        this.tickPath.setAttribute('class', 'tick');
        this.tickPath.setAttribute('fill', 'none');
        this.node.appendChild(this.tickPath);
    }
    Wedge.prototype.value = function (newValue) {
        if (newValue === undefined) {
            return this._value;
        }
        else {
            var oldValue = this._value;
            if (oldValue !== newValue) {
                this._value = newValue;
                this.dirty = true;
                for (var i = 0; i < this.observers.length; i += 1) {
                    var observer = this.observers[i];
                    if (observer.wedgeDidSetValue) {
                        observer.wedgeDidSetValue(newValue, oldValue, this);
                    }
                }
            }
            return this;
        }
    };
    Wedge.prototype.total = function (total) {
        if (total === undefined) {
            return this._total;
        }
        else {
            if (this._total !== total) {
                this._total = total;
                this.dirty = true;
            }
            return this;
        }
    };
    Wedge.prototype.width = function (width) {
        if (width === undefined) {
            return this._width;
        }
        else {
            width = Length.fromAny(width, this.node);
            if (!this._width.equals(width)) {
                this._width = width;
                this.dirty = true;
            }
            return this;
        }
    };
    Wedge.prototype.height = function (height) {
        if (height === undefined) {
            return this._height;
        }
        else {
            height = Length.fromAny(height, this.node);
            if (!this._height.equals(height)) {
                this._height = height;
                this.dirty = true;
            }
            return this;
        }
    };
    Wedge.prototype.arc = function (arc) {
        if (arc === undefined) {
            return this._arc;
        }
        else {
            if (this._arc !== arc) {
                this._arc = arc;
                this.dirty = true;
            }
            return this;
        }
    };
    Wedge.prototype.arcColor = function (arcColor) {
        if (arcColor === undefined) {
            return this._arcColor;
        }
        else {
            arcColor = Color.fromAny(arcColor);
            if (!this._arcColor.equals(arcColor)) {
                this._arcColor = arcColor;
                this.dirty = true;
            }
            return this;
        }
    };
    Wedge.prototype.innerRadius = function (innerRadius) {
        if (innerRadius === undefined) {
            return this._innerRadius;
        }
        else {
            innerRadius = Length.fromAny(innerRadius);
            if (!this._innerRadius.equals(innerRadius)) {
                this._innerRadius = innerRadius;
                this.dirty = true;
            }
            return this;
        }
    };
    Wedge.prototype.outerRadius = function (outerRadius) {
        if (outerRadius === undefined) {
            return this._outerRadius;
        }
        else {
            outerRadius = Length.fromAny(outerRadius);
            if (!this._outerRadius.equals(outerRadius)) {
                this._outerRadius = outerRadius;
                this.dirty = true;
            }
            return this;
        }
    };
    Wedge.prototype.startAngle = function (startAngle) {
        if (startAngle === undefined) {
            return this._arc.startAngle();
        }
        else {
            startAngle = Angle.fromAny(startAngle);
            if (!this._arc.startAngle().equals(startAngle)) {
                this._arc.startAngle(startAngle);
                this.dirty = true;
            }
            return this;
        }
    };
    Wedge.prototype.deltaAngle = function (deltaAngle) {
        if (deltaAngle === undefined) {
            return this._arc.deltaAngle();
        }
        else {
            deltaAngle = Angle.fromAny(deltaAngle);
            if (!this._arc.deltaAngle().equals(deltaAngle)) {
                this._arc.deltaAngle(deltaAngle);
                this.dirty = true;
            }
            return this;
        }
    };
    Wedge.prototype.minAngle = function (minAngle) {
        if (minAngle === undefined) {
            return this._minAngle;
        }
        else {
            minAngle = Angle.fromAny(minAngle);
            if (!this._minAngle.equals(minAngle)) {
                this._minAngle = minAngle;
                this.dirty = true;
            }
            return this;
        }
    };
    Wedge.prototype.padAngle = function (padAngle) {
        if (padAngle === undefined) {
            return this._arc.padAngle();
        }
        else {
            padAngle = Angle.fromAny(padAngle);
            if (!this._arc.padAngle().equals(padAngle)) {
                this._arc.padAngle(padAngle);
                this.dirty = true;
            }
            return this;
        }
    };
    Wedge.prototype.padRadius = function (padRadius) {
        if (padRadius === undefined) {
            return this._arc.padRadius();
        }
        else {
            if (this._arc.padRadius() !== padRadius) {
                this._arc.padRadius(padRadius);
                this.dirty = true;
            }
            return this;
        }
    };
    Wedge.prototype.cornerRadius = function (cornerRadius) {
        if (cornerRadius === undefined) {
            return this._arc.cornerRadius();
        }
        else {
            if (this._arc.cornerRadius() !== cornerRadius) {
                this._arc.cornerRadius(cornerRadius);
                this.dirty = true;
            }
            return this;
        }
    };
    Wedge.prototype.tickAlign = function (tickAlign) {
        if (tickAlign === undefined) {
            return this._tickAlign;
        }
        else {
            if (this._tickAlign !== tickAlign) {
                this._tickAlign = tickAlign;
                this.dirty = true;
            }
            return this;
        }
    };
    Wedge.prototype.tickRadius = function (tickRadius) {
        if (tickRadius === undefined) {
            return this._tickRadius;
        }
        else {
            tickRadius = Length.fromAny(tickRadius);
            if (!this._tickRadius.equals(tickRadius)) {
                this._tickRadius = tickRadius;
                this.dirty = true;
            }
            return this;
        }
    };
    Wedge.prototype.tickLength = function (tickLength) {
        if (tickLength === undefined) {
            return this._tickLength;
        }
        else {
            tickLength = Length.fromAny(tickLength);
            if (!this._tickLength.equals(tickLength)) {
                this._tickLength = tickLength;
                this.dirty = true;
            }
            return this;
        }
    };
    Wedge.prototype.tickWidth = function (tickWidth) {
        if (tickWidth === undefined) {
            return this._tickWidth;
        }
        else {
            tickWidth = Length.fromAny(tickWidth);
            if (this._tickWidth !== tickWidth) {
                this._tickWidth = tickWidth;
                this.dirty = true;
            }
            return this;
        }
    };
    Wedge.prototype.tickPadding = function (tickPadding) {
        if (tickPadding === undefined) {
            return this._tickPadding;
        }
        else {
            tickPadding = Length.fromAny(tickPadding);
            if (this._tickPadding !== tickPadding) {
                this._tickPadding = tickPadding;
                this.dirty = true;
            }
            return this;
        }
    };
    Wedge.prototype.tickColor = function (tickColor) {
        if (tickColor === undefined) {
            return this._tickColor;
        }
        else {
            tickColor = Color.fromAny(tickColor);
            if (!this._tickColor.equals(tickColor)) {
                this._tickColor = tickColor;
                this.dirty = true;
            }
            return this;
        }
    };
    Wedge.prototype.label = function (label) {
        if (label === undefined) {
            return this._label;
        }
        else {
            if (this._label !== label) {
                if (this._label) {
                    this.node.removeChild(this._label);
                }
                this._label = label;
                if (this._label) {
                    this.node.appendChild(this._label);
                }
                this.dirty = true;
                this.render();
            }
            else {
                this.dirty = true;
            }
            return this;
        }
    };
    Wedge.prototype.labelRadius = function (labelRadius) {
        if (labelRadius === undefined) {
            return this._labelRadius;
        }
        else {
            labelRadius = Length.fromAny(labelRadius);
            if (!this._labelRadius.equals(labelRadius)) {
                this._labelRadius = labelRadius;
                this.dirty = true;
            }
            return this;
        }
    };
    Wedge.prototype.labelSize = function (labelSize) {
        if (labelSize === undefined) {
            return this._labelSize;
        }
        else {
            if (labelSize !== null) {
                labelSize = Length.fromAny(labelSize);
            }
            if (this._labelSize ? !this._labelSize.equals(labelSize) : this._labelSize !== labelSize) {
                this._labelSize = labelSize;
                this.dirty = true;
            }
            return this;
        }
    };
    Wedge.prototype.labelColor = function (labelColor) {
        if (labelColor === undefined) {
            return this._labelColor;
        }
        else {
            if (labelColor !== null) {
                labelColor = Color.fromAny(labelColor);
            }
            if (this._labelColor ? !this._labelColor.equals(labelColor) : this._labelColor !== labelColor) {
                this._labelColor = labelColor;
                this.dirty = true;
            }
            return this;
        }
    };
    Wedge.prototype.legend = function (legend) {
        if (legend === undefined) {
            return this._legend;
        }
        else {
            if (this._legend !== legend) {
                if (this._legend) {
                    this.node.removeChild(this._legend);
                }
                this._legend = legend;
                if (this._legend) {
                    this.node.appendChild(this._legend);
                }
                this.dirty = true;
                this.render();
            }
            else {
                this.dirty = true;
            }
            return this;
        }
    };
    Wedge.prototype.legendSize = function (legendSize) {
        if (legendSize === undefined) {
            return this._legendSize;
        }
        else {
            if (legendSize !== null) {
                legendSize = Length.fromAny(legendSize);
            }
            if (this._legendSize ? !this._legendSize.equals(legendSize) : this._legendSize !== legendSize) {
                this._legendSize = legendSize;
                this.dirty = true;
            }
            return this;
        }
    };
    Wedge.prototype.legendColor = function (legendColor) {
        if (legendColor === undefined) {
            return this._legendColor;
        }
        else {
            if (legendColor !== null) {
                legendColor = Color.fromAny(legendColor);
            }
            if (this._legendColor ? !this._legendColor.equals(legendColor) : this._legendColor !== legendColor) {
                this._legendColor = legendColor;
                this.dirty = true;
            }
            return this;
        }
    };
    Wedge.prototype.render = function () {
        if (this.dirty) {
            this.dirty = false;
            this.renderArc();
            this.renderTick();
        }
    };
    Wedge.prototype.renderArc = function () {
        var da = this._arc.deltaAngle().radValue();
        var aMin = Math.max(EPSILON$2, this._minAngle.radValue());
        var label = this._label;
        if (da > aMin) {
            var width = this._width.pxValue();
            var height = this._height.pxValue();
            var size = Math.min(width, height);
            var r0 = this._innerRadius.pxValue(size);
            var r1 = this._outerRadius.pxValue(size);
            this._arc.innerRadius(r0).outerRadius(r1);
            this.arcPath.setAttribute('d', this._arc.draw());
            this.arcPath.setAttribute('fill', this._arcColor.toString());
            if (label) {
                var a0 = this._arc.startAngle().radValue() - PI_OVER_2$1;
                var a = a0 + da / 2;
                var r = r0 + this._labelRadius.pxValue(r1 - r0);
                var rx = r * Math.cos(a);
                var ry = r * Math.sin(a);
                label.removeAttribute('visibility');
                if (label instanceof SVGGElement) {
                    var transform = Transform.translate(rx, ry);
                    label.setAttribute('transform', transform.toAttributeString());
                }
                else if (label instanceof SVGTextElement) {
                    label.setAttribute('x', '' + rx);
                    label.setAttribute('y', '' + ry);
                    label.setAttribute('text-anchor', 'middle');
                    label.setAttribute('dominant-baseline', 'central');
                    if (this._labelSize) {
                        label.setAttribute('font-size', '' + Math.ceil(this._labelSize.pxValue(size)));
                    }
                }
                if (this._labelColor) {
                    label.setAttribute('fill', this._labelColor.toString());
                }
            }
        }
        else {
            this.arcPath.removeAttribute('d');
            this.arcPath.removeAttribute('fill');
            if (label) {
                label.setAttribute('visibility', 'hidden');
            }
        }
    };
    Wedge.prototype.renderTick = function () {
        var da = Math.min(this._arc.deltaAngle().radValue(), TAU$3);
        var aMin = Math.max(EPSILON$2, this._minAngle.radValue());
        var legend = this._legend;
        if (da > aMin && legend) {
            var width = this._width.pxValue();
            var height = this._height.pxValue();
            var size = Math.min(width, height);
            var a0 = this._arc.startAngle().radValue() - PI_OVER_2$1;
            var a = a0 + da * this._tickAlign;
            var r1 = this._arc.outerRadius();
            var r2 = this._tickRadius.pxValue(size);
            var r3 = this._tickLength.pxValue(width);
            var path = new Path();
            var r1x = r1 * Math.cos(a + EPSILON$2);
            var r1y = r1 * Math.sin(a + EPSILON$2);
            var r2x = r2 * Math.cos(a + EPSILON$2);
            var r2y = r2 * Math.sin(a + EPSILON$2);
            var l = 0;
            path.moveTo(r1x, r1y);
            path.lineTo(r2x, r2y);
            if (r3) {
                if (r2x >= 0) {
                    path.lineTo(r3, r2y);
                    l = r3 - r2x;
                }
                else if (r2x < 0) {
                    path.lineTo(-r3, r2y);
                    l = r3 + r2x;
                }
            }
            this.tickPath.setAttribute('d', path.toString());
            this.tickPath.setAttribute('stroke', this._tickColor.toString());
            this.tickPath.setAttribute('stroke-width', '' + this._tickWidth.pxValue(size));
            if (legend instanceof SVGGElement) {
                var transform = Transform.translate(r2x, r2y);
                legend.setAttribute('transform', transform.toAttributeString());
                legend.setAttribute('width', '' + l);
            }
            else if (legend instanceof SVGTextElement) {
                var dx = void 0;
                var anchor = void 0;
                if (r2x >= 0) {
                    dx = l;
                    if (r2y >= 0) {
                        anchor = 'end';
                    }
                    else {
                        anchor = 'end';
                    }
                }
                else {
                    dx = -l;
                    if (r2y < 0) {
                        anchor = 'start';
                    }
                    else {
                        anchor = 'start';
                    }
                }
                legend.removeAttribute('visibility');
                legend.setAttribute('x', '' + r2x);
                legend.setAttribute('y', '' + r2y);
                legend.setAttribute('dx', '' + dx);
                legend.setAttribute('dy', '' + -this._tickPadding.pxValue(size));
                legend.setAttribute('text-anchor', anchor);
                if (this._legendSize) {
                    legend.setAttribute('font-size', '' + Math.ceil(this._legendSize.pxValue(size)));
                }
            }
            if (this._legendColor) {
                legend.setAttribute('fill', this._legendColor.toString());
            }
        }
        else {
            this.tickPath.removeAttribute('d');
            this.tickPath.removeAttribute('stroke');
            this.tickPath.removeAttribute('stroke-width');
            if (legend) {
                legend.setAttribute('visibility', 'hidden');
            }
        }
    };
    Wedge.prototype.addObserver = function (observer) {
        if (this.observers.indexOf(observer) < 0) {
            this.observers.push(observer);
        }
    };
    Wedge.prototype.removeObserver = function (observer) {
        var i = this.observers.indexOf(observer);
        if (i >= 0) {
            this.observers.splice(i, 1);
        }
    };
    Wedge.create = function () {
        var node = document.createElementNS('http://www.w3.org/2000/svg', 'g');
        return new Wedge(node);
    };
    return Wedge;
}());

var WedgeAnimator = (function (_super) {
    __extends(WedgeAnimator, _super);
    function WedgeAnimator(wedge) {
        var _this = _super.call(this) || this;
        _this.wedge = wedge;
        _this.value = undefined;
        _this.innerRadius = undefined;
        _this.outerRadius = undefined;
        _this.startAngle = undefined;
        _this.deltaAngle = undefined;
        _this.minAngle = undefined;
        _this.padAngle = undefined;
        _this.padRadius = undefined;
        _this.cornerRadius = undefined;
        _this.arcColor = undefined;
        _this.tickAlign = undefined;
        _this.tickRadius = undefined;
        _this.tickLength = undefined;
        _this.tickWidth = undefined;
        _this.tickPadding = undefined;
        _this.tickColor = undefined;
        _this.labelRadius = undefined;
        _this.labelSize = undefined;
        _this.labelColor = undefined;
        _this.legendSize = undefined;
        _this.legendColor = undefined;
        return _this;
    }
    WedgeAnimator.prototype.onFrame = function (t) {
        if (this.value) {
            this.value.onFrame(t);
        }
        if (this.innerRadius) {
            this.innerRadius.onFrame(t);
        }
        if (this.outerRadius) {
            this.outerRadius.onFrame(t);
        }
        if (this.startAngle) {
            this.startAngle.onFrame(t);
        }
        if (this.deltaAngle) {
            this.deltaAngle.onFrame(t);
        }
        if (this.minAngle) {
            this.minAngle.onFrame(t);
        }
        if (this.padAngle) {
            this.padAngle.onFrame(t);
        }
        if (this.padRadius) {
            this.padRadius.onFrame(t);
        }
        if (this.cornerRadius) {
            this.cornerRadius.onFrame(t);
        }
        if (this.arcColor) {
            this.arcColor.onFrame(t);
        }
        if (this.tickAlign) {
            this.tickAlign.onFrame(t);
        }
        if (this.tickRadius) {
            this.tickRadius.onFrame(t);
        }
        if (this.tickLength) {
            this.tickLength.onFrame(t);
        }
        if (this.tickWidth) {
            this.tickWidth.onFrame(t);
        }
        if (this.tickPadding) {
            this.tickPadding.onFrame(t);
        }
        if (this.tickColor) {
            this.tickColor.onFrame(t);
        }
        if (this.labelRadius) {
            this.labelRadius.onFrame(t);
        }
        if (this.labelSize) {
            this.labelSize.onFrame(t);
        }
        if (this.labelColor) {
            this.labelColor.onFrame(t);
        }
        if (this.legendSize) {
            this.legendSize.onFrame(t);
        }
        if (this.legendColor) {
            this.legendColor.onFrame(t);
        }
        this.update();
    };
    WedgeAnimator.prototype.update = function () {
        this.wedge.render();
    };
    return WedgeAnimator;
}(FrameAnimator));
var WedgeValueAnimator = (function (_super) {
    __extends(WedgeValueAnimator, _super);
    function WedgeValueAnimator(parent, value, transition) {
        var _this = _super.call(this, parent, value, transition) || this;
        _this.update(value);
        return _this;
    }
    WedgeValueAnimator.prototype.update = function (value) {
        this.parent.wedge.value(value);
    };
    WedgeValueAnimator.get = function (self) {
        return self.wedge.value();
    };
    WedgeValueAnimator.set = function (self, value) {
        if (value === null) {
            self.wedgeAnimator.value = undefined;
        }
        else {
            self.wedge.value(value);
            self.wedgeAnimator.animate();
        }
    };
    WedgeValueAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.wedgeAnimator.value) {
            self.wedgeAnimator.value = new WedgeValueAnimator(self.wedgeAnimator, value, trans);
        }
        return self.wedgeAnimator.value;
    };
    return WedgeValueAnimator;
}(ChildFrameAnimator));
var WedgeInnerRadiusAnimator = (function (_super) {
    __extends(WedgeInnerRadiusAnimator, _super);
    function WedgeInnerRadiusAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    WedgeInnerRadiusAnimator.prototype.update = function (value) {
        this.parent.wedge.innerRadius(value);
    };
    WedgeInnerRadiusAnimator.get = function (self) {
        return self.wedge.innerRadius();
    };
    WedgeInnerRadiusAnimator.set = function (self, value) {
        if (value === null) {
            self.wedgeAnimator.innerRadius = undefined;
        }
        else {
            self.wedge.innerRadius(value);
            self.wedgeAnimator.animate();
        }
    };
    WedgeInnerRadiusAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.wedgeAnimator.innerRadius) {
            self.wedgeAnimator.innerRadius = new WedgeInnerRadiusAnimator(self.wedgeAnimator, value, trans);
        }
        return self.wedgeAnimator.innerRadius;
    };
    return WedgeInnerRadiusAnimator;
}(ChildFrameAnimator));
var WedgeOuterRadiusAnimator = (function (_super) {
    __extends(WedgeOuterRadiusAnimator, _super);
    function WedgeOuterRadiusAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    WedgeOuterRadiusAnimator.prototype.update = function (value) {
        this.parent.wedge.outerRadius(value);
    };
    WedgeOuterRadiusAnimator.get = function (self) {
        return self.wedge.outerRadius();
    };
    WedgeOuterRadiusAnimator.set = function (self, value) {
        if (value === null) {
            self.wedgeAnimator.outerRadius = undefined;
        }
        else {
            self.wedge.outerRadius(value);
            self.wedgeAnimator.animate();
        }
    };
    WedgeOuterRadiusAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.wedgeAnimator.outerRadius) {
            self.wedgeAnimator.outerRadius = new WedgeOuterRadiusAnimator(self.wedgeAnimator, value, trans);
        }
        return self.wedgeAnimator.outerRadius;
    };
    return WedgeOuterRadiusAnimator;
}(ChildFrameAnimator));
var WedgeStartAngleAnimator = (function (_super) {
    __extends(WedgeStartAngleAnimator, _super);
    function WedgeStartAngleAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    WedgeStartAngleAnimator.prototype.update = function (value) {
        this.parent.wedge.startAngle(value);
    };
    WedgeStartAngleAnimator.get = function (self) {
        return self.wedge.startAngle();
    };
    WedgeStartAngleAnimator.set = function (self, value) {
        if (value === null) {
            self.wedgeAnimator.startAngle = undefined;
        }
        else {
            self.wedge.startAngle(value);
            self.wedgeAnimator.animate();
        }
    };
    WedgeStartAngleAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.wedgeAnimator.startAngle) {
            self.wedgeAnimator.startAngle = new WedgeStartAngleAnimator(self.wedgeAnimator, value, trans);
        }
        return self.wedgeAnimator.startAngle;
    };
    return WedgeStartAngleAnimator;
}(ChildFrameAnimator));
var WedgeDeltaAngleAnimator = (function (_super) {
    __extends(WedgeDeltaAngleAnimator, _super);
    function WedgeDeltaAngleAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    WedgeDeltaAngleAnimator.prototype.update = function (value) {
        this.parent.wedge.deltaAngle(value);
    };
    WedgeDeltaAngleAnimator.get = function (self) {
        return self.wedge.deltaAngle();
    };
    WedgeDeltaAngleAnimator.set = function (self, value) {
        if (value === null) {
            self.wedgeAnimator.deltaAngle = undefined;
        }
        else {
            self.wedge.deltaAngle(value);
            self.wedgeAnimator.animate();
        }
    };
    WedgeDeltaAngleAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.wedgeAnimator.deltaAngle) {
            self.wedgeAnimator.deltaAngle = new WedgeDeltaAngleAnimator(self.wedgeAnimator, value, trans);
        }
        return self.wedgeAnimator.deltaAngle;
    };
    return WedgeDeltaAngleAnimator;
}(ChildFrameAnimator));
var WedgeMinAngleAnimator = (function (_super) {
    __extends(WedgeMinAngleAnimator, _super);
    function WedgeMinAngleAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    WedgeMinAngleAnimator.prototype.update = function (value) {
        this.parent.wedge.minAngle(value);
    };
    WedgeMinAngleAnimator.get = function (self) {
        return self.wedge.minAngle();
    };
    WedgeMinAngleAnimator.set = function (self, value) {
        if (value === null) {
            self.wedgeAnimator.minAngle = undefined;
        }
        else {
            self.wedge.minAngle(value);
            self.wedgeAnimator.animate();
        }
    };
    WedgeMinAngleAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.wedgeAnimator.minAngle) {
            self.wedgeAnimator.minAngle = new WedgeMinAngleAnimator(self.wedgeAnimator, value, trans);
        }
        return self.wedgeAnimator.minAngle;
    };
    return WedgeMinAngleAnimator;
}(ChildFrameAnimator));
var WedgePadAngleAnimator = (function (_super) {
    __extends(WedgePadAngleAnimator, _super);
    function WedgePadAngleAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    WedgePadAngleAnimator.prototype.update = function (value) {
        this.parent.wedge.padAngle(value);
    };
    WedgePadAngleAnimator.get = function (self) {
        return self.wedge.padAngle();
    };
    WedgePadAngleAnimator.set = function (self, value) {
        if (value === null) {
            self.wedgeAnimator.padAngle = undefined;
        }
        else {
            self.wedge.padAngle(value);
            self.wedgeAnimator.animate();
        }
    };
    WedgePadAngleAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.wedgeAnimator.padAngle) {
            self.wedgeAnimator.padAngle = new WedgePadAngleAnimator(self.wedgeAnimator, value, trans);
        }
        return self.wedgeAnimator.padAngle;
    };
    return WedgePadAngleAnimator;
}(ChildFrameAnimator));
var WedgePadRadiusAnimator = (function (_super) {
    __extends(WedgePadRadiusAnimator, _super);
    function WedgePadRadiusAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    WedgePadRadiusAnimator.prototype.update = function (value) {
        this.parent.wedge.padRadius(value);
    };
    WedgePadRadiusAnimator.get = function (self) {
        return self.wedge.padRadius();
    };
    WedgePadRadiusAnimator.set = function (self, value) {
        if (value === null) {
            self.wedgeAnimator.padRadius = undefined;
        }
        self.wedge.padRadius(value);
        self.wedgeAnimator.animate();
    };
    WedgePadRadiusAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.wedgeAnimator.padRadius) {
            self.wedgeAnimator.padRadius = new WedgePadRadiusAnimator(self.wedgeAnimator, value, trans);
        }
        return self.wedgeAnimator.padRadius;
    };
    return WedgePadRadiusAnimator;
}(ChildFrameAnimator));
var WedgeCornerRadiusAnimator = (function (_super) {
    __extends(WedgeCornerRadiusAnimator, _super);
    function WedgeCornerRadiusAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    WedgeCornerRadiusAnimator.prototype.update = function (value) {
        this.parent.wedge.cornerRadius(value);
    };
    WedgeCornerRadiusAnimator.get = function (self) {
        return self.wedge.cornerRadius();
    };
    WedgeCornerRadiusAnimator.set = function (self, value) {
        if (value === null) {
            self.wedgeAnimator.cornerRadius = undefined;
        }
        else {
            self.wedge.cornerRadius(value);
            self.wedgeAnimator.animate();
        }
    };
    WedgeCornerRadiusAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.wedgeAnimator.cornerRadius) {
            self.wedgeAnimator.cornerRadius = new WedgeCornerRadiusAnimator(self.wedgeAnimator, value, trans);
        }
        return self.wedgeAnimator.cornerRadius;
    };
    return WedgeCornerRadiusAnimator;
}(ChildFrameAnimator));
var WedgeArcColorAnimator = (function (_super) {
    __extends(WedgeArcColorAnimator, _super);
    function WedgeArcColorAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    WedgeArcColorAnimator.prototype.update = function (value) {
        this.parent.wedge.arcColor(value);
    };
    WedgeArcColorAnimator.get = function (self) {
        return self.wedge.arcColor();
    };
    WedgeArcColorAnimator.set = function (self, value) {
        if (value === null) {
            self.wedgeAnimator.arcColor = undefined;
        }
        else {
            self.wedge.arcColor(value);
        }
    };
    WedgeArcColorAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.wedgeAnimator.arcColor) {
            self.wedgeAnimator.arcColor = new WedgeArcColorAnimator(self.wedgeAnimator, value, trans);
        }
        return self.wedgeAnimator.arcColor;
    };
    return WedgeArcColorAnimator;
}(ChildFrameAnimator));
var WedgeTickAlignAnimator = (function (_super) {
    __extends(WedgeTickAlignAnimator, _super);
    function WedgeTickAlignAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    WedgeTickAlignAnimator.prototype.update = function (value) {
        this.parent.wedge.tickAlign(value);
    };
    WedgeTickAlignAnimator.get = function (self) {
        return self.wedge.tickAlign();
    };
    WedgeTickAlignAnimator.set = function (self, value) {
        if (value === null) {
            self.wedgeAnimator.tickAlign = undefined;
        }
        else {
            self.wedge.tickAlign(value);
            self.wedgeAnimator.animate();
        }
    };
    WedgeTickAlignAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.wedgeAnimator.tickAlign) {
            self.wedgeAnimator.tickAlign = new WedgeTickAlignAnimator(self.wedgeAnimator, value, trans);
        }
        return self.wedgeAnimator.tickAlign;
    };
    return WedgeTickAlignAnimator;
}(ChildFrameAnimator));
var WedgeTickRadiusAnimator = (function (_super) {
    __extends(WedgeTickRadiusAnimator, _super);
    function WedgeTickRadiusAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    WedgeTickRadiusAnimator.prototype.update = function (value) {
        this.parent.wedge.tickRadius(value);
    };
    WedgeTickRadiusAnimator.get = function (self) {
        return self.wedge.tickRadius();
    };
    WedgeTickRadiusAnimator.set = function (self, value) {
        if (value === null) {
            self.wedgeAnimator.tickRadius = undefined;
        }
        else {
            self.wedge.tickRadius(value);
            self.wedgeAnimator.animate();
        }
    };
    WedgeTickRadiusAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.wedgeAnimator.tickRadius) {
            self.wedgeAnimator.tickRadius = new WedgeTickRadiusAnimator(self.wedgeAnimator, value, trans);
        }
        return self.wedgeAnimator.tickRadius;
    };
    return WedgeTickRadiusAnimator;
}(ChildFrameAnimator));
var WedgeTickLengthAnimator = (function (_super) {
    __extends(WedgeTickLengthAnimator, _super);
    function WedgeTickLengthAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    WedgeTickLengthAnimator.prototype.update = function (value) {
        this.parent.wedge.tickLength(value);
    };
    WedgeTickLengthAnimator.get = function (self) {
        return self.wedge.tickLength();
    };
    WedgeTickLengthAnimator.set = function (self, value) {
        if (value === null) {
            self.wedgeAnimator.tickLength = undefined;
        }
        else {
            self.wedge.tickLength(value);
            self.wedgeAnimator.animate();
        }
    };
    WedgeTickLengthAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.wedgeAnimator.tickLength) {
            self.wedgeAnimator.tickLength = new WedgeTickLengthAnimator(self.wedgeAnimator, value, trans);
        }
        return self.wedgeAnimator.tickLength;
    };
    return WedgeTickLengthAnimator;
}(ChildFrameAnimator));
var WedgeTickWidthAnimator = (function (_super) {
    __extends(WedgeTickWidthAnimator, _super);
    function WedgeTickWidthAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    WedgeTickWidthAnimator.prototype.update = function (value) {
        this.parent.wedge.tickWidth(value);
    };
    WedgeTickWidthAnimator.get = function (self) {
        return self.wedge.tickWidth();
    };
    WedgeTickWidthAnimator.set = function (self, value) {
        if (value === null) {
            self.wedgeAnimator.tickWidth = undefined;
        }
        else {
            self.wedge.tickWidth(value);
            self.wedgeAnimator.animate();
        }
    };
    WedgeTickWidthAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.wedgeAnimator.tickWidth) {
            self.wedgeAnimator.tickWidth = new WedgeTickWidthAnimator(self.wedgeAnimator, value, trans);
        }
        return self.wedgeAnimator.tickWidth;
    };
    return WedgeTickWidthAnimator;
}(ChildFrameAnimator));
var WedgeTickPaddingAnimator = (function (_super) {
    __extends(WedgeTickPaddingAnimator, _super);
    function WedgeTickPaddingAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    WedgeTickPaddingAnimator.prototype.update = function (value) {
        this.parent.wedge.tickPadding(value);
    };
    WedgeTickPaddingAnimator.get = function (self) {
        return self.wedge.tickPadding();
    };
    WedgeTickPaddingAnimator.set = function (self, value) {
        if (value === null) {
            self.wedgeAnimator.tickPadding = undefined;
        }
        else {
            self.wedge.tickPadding(value);
            self.wedgeAnimator.animate();
        }
    };
    WedgeTickPaddingAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.wedgeAnimator.tickPadding) {
            self.wedgeAnimator.tickPadding = new WedgeTickPaddingAnimator(self.wedgeAnimator, value, trans);
        }
        return self.wedgeAnimator.tickPadding;
    };
    return WedgeTickPaddingAnimator;
}(ChildFrameAnimator));
var WedgeTickColorAnimator = (function (_super) {
    __extends(WedgeTickColorAnimator, _super);
    function WedgeTickColorAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    WedgeTickColorAnimator.prototype.update = function (value) {
        this.parent.wedge.tickColor(value);
    };
    WedgeTickColorAnimator.get = function (self) {
        return self.wedge.tickColor();
    };
    WedgeTickColorAnimator.set = function (self, value) {
        if (value === null) {
            self.wedgeAnimator.tickColor = undefined;
        }
        else {
            self.wedge.tickColor(value);
        }
    };
    WedgeTickColorAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.wedgeAnimator.tickColor) {
            self.wedgeAnimator.tickColor = new WedgeTickColorAnimator(self.wedgeAnimator, value, trans);
        }
        return self.wedgeAnimator.tickColor;
    };
    return WedgeTickColorAnimator;
}(ChildFrameAnimator));
var WedgeLabelRadiusAnimator = (function (_super) {
    __extends(WedgeLabelRadiusAnimator, _super);
    function WedgeLabelRadiusAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    WedgeLabelRadiusAnimator.prototype.update = function (value) {
        this.parent.wedge.labelRadius(value);
    };
    WedgeLabelRadiusAnimator.get = function (self) {
        return self.wedge.labelRadius();
    };
    WedgeLabelRadiusAnimator.set = function (self, value) {
        if (value === null) {
            self.wedgeAnimator.labelRadius = undefined;
        }
        else {
            self.wedge.labelRadius(value);
            self.wedgeAnimator.animate();
        }
    };
    WedgeLabelRadiusAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.wedgeAnimator.labelRadius) {
            self.wedgeAnimator.labelRadius = new WedgeLabelRadiusAnimator(self.wedgeAnimator, value, trans);
        }
        return self.wedgeAnimator.labelRadius;
    };
    return WedgeLabelRadiusAnimator;
}(ChildFrameAnimator));
var WedgeLabelSizeAnimator = (function (_super) {
    __extends(WedgeLabelSizeAnimator, _super);
    function WedgeLabelSizeAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    WedgeLabelSizeAnimator.prototype.update = function (value) {
        this.parent.wedge.labelSize(value);
    };
    WedgeLabelSizeAnimator.get = function (self) {
        return self.wedge.labelSize();
    };
    WedgeLabelSizeAnimator.set = function (self, value) {
        if (value === null) {
            self.wedgeAnimator.labelSize = undefined;
        }
        else {
            self.wedge.labelSize(value);
            self.wedgeAnimator.animate();
        }
    };
    WedgeLabelSizeAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.wedgeAnimator.labelSize) {
            self.wedgeAnimator.labelSize = new WedgeLabelSizeAnimator(self.wedgeAnimator, value, trans);
        }
        return self.wedgeAnimator.labelSize;
    };
    return WedgeLabelSizeAnimator;
}(ChildFrameAnimator));
var WedgeLabelColorAnimator = (function (_super) {
    __extends(WedgeLabelColorAnimator, _super);
    function WedgeLabelColorAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    WedgeLabelColorAnimator.prototype.update = function (value) {
        this.parent.wedge.labelColor(value);
    };
    WedgeLabelColorAnimator.get = function (self) {
        return self.wedge.labelColor();
    };
    WedgeLabelColorAnimator.set = function (self, value) {
        if (value === null) {
            self.wedgeAnimator.labelColor = undefined;
        }
        else {
            self.wedge.labelColor(value);
        }
    };
    WedgeLabelColorAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.wedgeAnimator.labelColor) {
            self.wedgeAnimator.labelColor = new WedgeLabelColorAnimator(self.wedgeAnimator, value, trans);
        }
        return self.wedgeAnimator.labelColor;
    };
    return WedgeLabelColorAnimator;
}(ChildFrameAnimator));
var WedgeLegendSizeAnimator = (function (_super) {
    __extends(WedgeLegendSizeAnimator, _super);
    function WedgeLegendSizeAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    WedgeLegendSizeAnimator.prototype.update = function (value) {
        this.parent.wedge.legendSize(value);
    };
    WedgeLegendSizeAnimator.get = function (self) {
        return self.wedge.legendSize();
    };
    WedgeLegendSizeAnimator.set = function (self, value) {
        if (value === null) {
            self.wedgeAnimator.legendSize = undefined;
        }
        else {
            self.wedge.legendSize(value);
            self.wedgeAnimator.animate();
        }
    };
    WedgeLegendSizeAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.wedgeAnimator.legendSize) {
            self.wedgeAnimator.legendSize = new WedgeLegendSizeAnimator(self.wedgeAnimator, value, trans);
        }
        return self.wedgeAnimator.legendSize;
    };
    return WedgeLegendSizeAnimator;
}(ChildFrameAnimator));
var WedgeLegendColorAnimator = (function (_super) {
    __extends(WedgeLegendColorAnimator, _super);
    function WedgeLegendColorAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    WedgeLegendColorAnimator.prototype.update = function (value) {
        this.parent.wedge.legendColor(value);
    };
    WedgeLegendColorAnimator.get = function (self) {
        return self.wedge.legendColor();
    };
    WedgeLegendColorAnimator.set = function (self, value) {
        if (value === null) {
            self.wedgeAnimator.legendColor = undefined;
        }
        else {
            self.wedge.legendColor(value);
        }
    };
    WedgeLegendColorAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.wedgeAnimator.legendColor) {
            self.wedgeAnimator.legendColor = new WedgeLegendColorAnimator(self.wedgeAnimator, value, trans);
        }
        return self.wedgeAnimator.legendColor;
    };
    return WedgeLegendColorAnimator;
}(ChildFrameAnimator));
var WedgeView = (function (_super) {
    __extends(WedgeView, _super);
    function WedgeView(wedge) {
        var _this = _super.call(this, wedge.node) || this;
        _this.wedge = wedge;
        _this.wedgeAnimator = new WedgeAnimator(_this.wedge);
        return _this;
    }
    WedgeView.prototype.value = function (value, trans) {
        return this.propertyNumber(WedgeValueAnimator, value, trans);
    };
    WedgeView.prototype.total = function (total) {
        if (total === undefined) {
            return this.wedge.total();
        }
        else {
            this.wedge.total(total);
            return this;
        }
    };
    WedgeView.prototype.innerRadius = function (value, trans) {
        return this.propertyLength(WedgeInnerRadiusAnimator, value, trans);
    };
    WedgeView.prototype.outerRadius = function (value, trans) {
        return this.propertyLength(WedgeOuterRadiusAnimator, value, trans);
    };
    WedgeView.prototype.startAngle = function (value, trans) {
        return this.propertyAngle(WedgeStartAngleAnimator, value, trans);
    };
    WedgeView.prototype.deltaAngle = function (value, trans) {
        return this.propertyAngle(WedgeDeltaAngleAnimator, value, trans);
    };
    WedgeView.prototype.minAngle = function (value, trans) {
        return this.propertyAngle(WedgeMinAngleAnimator, value, trans);
    };
    WedgeView.prototype.padAngle = function (value, trans) {
        return this.propertyAngle(WedgePadAngleAnimator, value, trans);
    };
    WedgeView.prototype.padRadius = function (value, trans) {
        if (value !== undefined && value !== null) {
            value = +value;
        }
        var result = this.property(WedgePadRadiusAnimator, value, trans);
        if (typeof result === 'string') {
            result = +result;
        }
        return result;
    };
    WedgeView.prototype.cornerRadius = function (value, trans) {
        return this.propertyNumber(WedgeCornerRadiusAnimator, value, trans);
    };
    WedgeView.prototype.arcColor = function (value, trans) {
        return this.propertyColor(WedgeArcColorAnimator, value, trans);
    };
    WedgeView.prototype.tickAlign = function (value, trans) {
        return this.propertyNumber(WedgeTickAlignAnimator, value, trans);
    };
    WedgeView.prototype.tickRadius = function (value, trans) {
        return this.propertyLength(WedgeTickRadiusAnimator, value, trans);
    };
    WedgeView.prototype.tickLength = function (value, trans) {
        return this.propertyLength(WedgeTickLengthAnimator, value, trans);
    };
    WedgeView.prototype.tickWidth = function (value, trans) {
        return this.propertyLength(WedgeTickWidthAnimator, value, trans);
    };
    WedgeView.prototype.tickPadding = function (value, trans) {
        return this.propertyLength(WedgeTickPaddingAnimator, value, trans);
    };
    WedgeView.prototype.tickColor = function (value, trans) {
        return this.propertyColor(WedgeTickColorAnimator, value, trans);
    };
    WedgeView.prototype.label = function (newLabel) {
        var oldLabel = this.wedge.label();
        if (newLabel === undefined) {
            return oldLabel;
        }
        else {
            if (typeof newLabel === 'string') {
                newLabel = document.createTextNode(newLabel);
            }
            else if (newLabel instanceof SvgView || newLabel instanceof TextView) {
                newLabel = newLabel.node;
            }
            if (newLabel instanceof Text) {
                if (oldLabel) {
                    while (oldLabel.firstChild) {
                        oldLabel.removeChild(oldLabel.firstChild);
                    }
                    oldLabel.appendChild(newLabel);
                    newLabel = oldLabel;
                }
                else {
                    var label = SvgView.create('text').className('label');
                    label.append(newLabel);
                    newLabel = label.node;
                }
            }
            if (oldLabel) {
                var oldView = oldLabel.view;
                if (oldLabel !== newLabel && oldView) {
                    this.removeChildView(oldView);
                }
            }
            this.wedge.label(newLabel);
            if (newLabel) {
                var newView = newLabel.view;
                if (oldLabel !== newLabel && newView) {
                    this.appendChildView(newView);
                }
            }
            this.wedgeAnimator.animate();
            return this;
        }
    };
    WedgeView.prototype.labelRadius = function (value, trans) {
        return this.propertyLength(WedgeLabelRadiusAnimator, value, trans);
    };
    WedgeView.prototype.labelSize = function (value, trans) {
        return this.propertyLength(WedgeLabelSizeAnimator, value, trans);
    };
    WedgeView.prototype.labelColor = function (value, trans) {
        return this.propertyColor(WedgeLabelColorAnimator, value, trans);
    };
    WedgeView.prototype.legend = function (newLegend) {
        var oldLegend = this.wedge.legend();
        if (newLegend === undefined) {
            return oldLegend;
        }
        else {
            if (typeof newLegend === 'string') {
                newLegend = document.createTextNode(newLegend);
            }
            else if (newLegend instanceof SvgView || newLegend instanceof TextView) {
                newLegend = newLegend.node;
            }
            if (newLegend instanceof Text) {
                if (oldLegend) {
                    while (oldLegend.firstChild) {
                        oldLegend.removeChild(oldLegend.firstChild);
                    }
                    oldLegend.appendChild(newLegend);
                    newLegend = oldLegend;
                }
                else {
                    var legend = SvgView.create('text').className('legend');
                    legend.append(newLegend);
                    newLegend = legend.node;
                }
            }
            if (oldLegend) {
                var oldView = oldLegend.view;
                if (oldLegend !== newLegend && oldView) {
                    this.removeChildView(oldView);
                }
            }
            this.wedge.legend(newLegend);
            if (newLegend) {
                var newView = newLegend.view;
                if (oldLegend !== newLegend && newView) {
                    this.appendChildView(newView);
                }
            }
            this.wedgeAnimator.animate();
            return this;
        }
    };
    WedgeView.prototype.legendSize = function (value, trans) {
        return this.propertyLength(WedgeLegendSizeAnimator, value, trans);
    };
    WedgeView.prototype.legendColor = function (value, trans) {
        return this.propertyColor(WedgeLegendColorAnimator, value, trans);
    };
    WedgeView.prototype.render = function () {
        this.wedgeAnimator.update();
    };
    WedgeView.prototype.didReview = function (viewable) {
        _super.prototype.didReview.call(this, viewable);
        this.wedgeAnimator.enabled(viewable);
    };
    WedgeView.prototype.didSetState = function (newState, oldState) {
        _super.prototype.didSetState.call(this, newState, oldState);
        var trans = newState.get('transition').cast(Transition.Form);
        var value = newState.get('value').numberValue();
        if (value !== undefined) {
            this.value(value, trans);
        }
        var innerRadius = newState.get('innerRadius').cast(Length.Form);
        if (innerRadius) {
            this.innerRadius(innerRadius, trans);
        }
        var outerRadius = newState.get('outerRadius').cast(Length.Form);
        if (outerRadius) {
            this.outerRadius(outerRadius, trans);
        }
        var startAngle = newState.get('startAngle').cast(Angle.Form);
        if (startAngle) {
            this.startAngle(startAngle, trans);
        }
        var deltaAngle = newState.get('deltaAngle').cast(Angle.Form);
        if (deltaAngle) {
            this.deltaAngle(deltaAngle, trans);
        }
        var minAngle = newState.get('minAngle').cast(Angle.Form);
        if (minAngle) {
            this.minAngle(minAngle, trans);
        }
        var padAngle = newState.get('padAngle').cast(Angle.Form);
        if (padAngle) {
            this.padAngle(padAngle, trans);
        }
        var padRadius = newState.get('padRadius').numberValue();
        if (padRadius !== undefined) {
            this.padRadius(padRadius, trans);
        }
        var cornerRadius = newState.get('cornerRadius').numberValue();
        if (cornerRadius !== undefined) {
            this.cornerRadius(cornerRadius, trans);
        }
        var arcColor = newState.get('arcColor').cast(Color.Form);
        if (arcColor) {
            this.arcColor(arcColor, trans);
        }
        var tickAlign = newState.get('tickAlign').numberValue();
        if (tickAlign !== undefined) {
            this.tickAlign(tickAlign, trans);
        }
        var tickRadius = newState.get('tickRadius').cast(Length.Form);
        if (tickRadius) {
            this.tickRadius(tickRadius, trans);
        }
        var tickLength = newState.get('tickLength').cast(Length.Form);
        if (tickLength) {
            this.tickLength(tickLength, trans);
        }
        var tickWidth = newState.get('tickWidth').cast(Length.Form);
        if (tickWidth) {
            this.tickWidth(tickWidth, trans);
        }
        var tickPadding = newState.get('tickPadding').cast(Length.Form);
        if (tickPadding) {
            this.tickPadding(tickPadding, trans);
        }
        var tickColor = newState.get('tickColor').cast(Color.Form);
        if (tickColor) {
            this.tickColor(tickColor, trans);
        }
        var labelRadius = newState.get('labelRadius').cast(Length.Form);
        if (labelRadius) {
            this.labelRadius(labelRadius, trans);
        }
        var labelSize = newState.get('labelSize').cast(Length.Form);
        if (labelSize) {
            this.labelSize(labelSize, trans);
        }
        var labelColor = newState.get('labelColor').cast(Color.Form);
        if (labelColor) {
            this.labelColor(labelColor, trans);
        }
        var labelView = this.label();
        if (labelView) {
            var labelWeight = newState.get('labelWeight').numberValue();
            if (labelWeight) {
                labelView.setAttribute('font-weight', '' + labelWeight);
            }
        }
        var legendSize = newState.get('legendSize').cast(Length.Form);
        if (legendSize) {
            this.legendSize(legendSize, trans);
        }
        var legendColor = newState.get('legendColor').cast(Color.Form);
        if (legendColor) {
            this.legendColor(legendColor, trans);
        }
        var legendView = this.legend();
        if (legendView) {
            var legendWeight = newState.get('legendWeight').numberValue();
            if (legendWeight) {
                legendView.setAttribute('font-weight', '' + legendWeight);
            }
        }
    };
    WedgeView.create = function () {
        var wedge = Wedge.create();
        return new WedgeView(wedge);
    };
    return WedgeView;
}(SvgView));

var WedgeModel = (function (_super) {
    __extends(WedgeModel, _super);
    function WedgeModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WedgeModel.prototype.updateValue = function (stack) {
        if (stack === void 0) { stack = this.stack(); }
        var value = WedgeModel.ValueSelector.evaluate(stack).toValue().numberValue(NaN);
        if (isFinite(value)) {
            for (var i = 0; i < this._childModels.length; i += 1) {
                this._childModels[i]._modelScope._record.set('value', value);
            }
        }
        return value;
    };
    WedgeModel.ValueSelector = Selector.get('value');
    WedgeModel.Params = SvgModel.Params.concat([
        new ModelParam('transition', Selector.get('transition').or(Selector.get('pie').get('transition'))),
        new ModelParam('value', WedgeModel.ValueSelector),
        new ModelParam('innerRadius', Selector.get('innerRadius').or(Selector.get('pie').get('innerRadius'))),
        new ModelParam('outerRadius', Selector.get('outerRadius').or(Selector.get('pie').get('outerRadius'))),
        new ModelParam('startAngle', Selector.get('startAngle')),
        new ModelParam('deltaAngle', Selector.get('deltaAngle')),
        new ModelParam('minAngle', Selector.get('minAngle').or(Selector.get('pie').get('minAngle'))),
        new ModelParam('padAngle', Selector.get('padAngle').or(Selector.get('pie').get('padAngle'))),
        new ModelParam('padRadius', Selector.get('padRadius').or(Selector.get('pie').get('padRadius'))),
        new ModelParam('cornerRadius', Selector.get('cornerRadius').or(Selector.get('pie').get('cornerRadius'))),
        new ModelParam('arcColor', Selector.get('arcColor').or(Selector.get('pie').get('arcColor'))),
        new ModelParam('tickAlign', Selector.get('tickAlign').or(Selector.get('pie').get('tickAlign'))),
        new ModelParam('tickRadius', Selector.get('tickRadius').or(Selector.get('pie').get('tickRadius'))),
        new ModelParam('tickLength', Selector.get('tickLength').or(Selector.get('pie').get('tickLength'))),
        new ModelParam('tickWidth', Selector.get('tickWidth').or(Selector.get('pie').get('tickWidth'))),
        new ModelParam('tickPadding', Selector.get('tickPadding').or(Selector.get('pie').get('tickPadding'))),
        new ModelParam('tickColor', Selector.get('tickColor').or(Selector.get('pie').get('tickColor'))),
        new ModelParam('labelRadius', Selector.get('labelRadius').or(Selector.get('pie').get('labelRadius'))),
        new ModelParam('labelSize', Selector.get('labelSize').or(Selector.get('pie').get('labelSize'))),
        new ModelParam('labelColor', Selector.get('labelColor').or(Selector.get('pie').get('labelColor'))),
        new ModelParam('labelWeight', Selector.get('labelWeight').or(Selector.get('pie').get('labelWeight'))),
        new ModelParam('legendSize', Selector.get('legendSize').or(Selector.get('pie').get('legendSize'))),
        new ModelParam('legendColor', Selector.get('legendColor').or(Selector.get('pie').get('legendColor'))),
        new ModelParam('legendWeight', Selector.get('legendWeight').or(Selector.get('pie').get('legendWeight'))),
    ]);
    return WedgeModel;
}(SvgModel));

var WedgeForm = (function (_super) {
    __extends(WedgeForm, _super);
    function WedgeForm() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(WedgeForm.prototype, "tag", {
        get: function () {
            return 'wedge';
        },
        enumerable: true,
        configurable: true
    });
    WedgeForm.prototype.castView = function (value, stack, factory) {
        if (value.tag === this.tag) {
            var view = WedgeView.create();
            var modelDef = this.materializeView(view, value, stack, factory);
            view.setModel(modelDef);
            return view;
        }
        return undefined;
    };
    WedgeForm.prototype.castModel = function (value, stack, factory) {
        if (value.tag === this.tag) {
            var model = new WedgeModel();
            var dataDef = this.materializeModel(model, value, stack, factory);
            model.setData(dataDef);
            return model;
        }
        return undefined;
    };
    WedgeForm.prototype.materializeViewParam = function (view, param, stack, factory) {
        if (param.key instanceof Text$1) {
            var key = param.key.value;
            if (key === 'label') {
                var label = factory.castView(param.toValue(), stack, factory);
                if (label === undefined) {
                    label = param.toValue().stringValue();
                }
                if (label !== undefined) {
                    view.label(label);
                    return Item.Absent;
                }
            }
            else if (key === 'legend') {
                var legend = factory.castView(param.toValue(), stack, factory);
                if (legend === undefined) {
                    legend = param.toValue().stringValue();
                }
                if (legend !== undefined) {
                    view.legend(legend);
                    return Item.Absent;
                }
            }
        }
        return _super.prototype.materializeViewParam.call(this, view, param, stack, factory);
    };
    WedgeForm.prototype.materializeModelParam = function (model, param, stack, factory) {
        if (param instanceof Attr && param.key.value === this.tag) {
            return Item.Absent;
        }
        return _super.prototype.materializeModelParam.call(this, model, param, stack, factory);
    };
    WedgeForm.Form = new WedgeForm();
    return WedgeForm;
}(SvgForm));
UiForm.addGlobal(WedgeForm.Form);

var Pie = (function () {
    function Pie(node) {
        this.node = node;
        this._wedges = [];
        this._total = NaN;
        this._limit = 0;
        this._originAngle = Angle.zero();
        this._width = Length.zero(node);
        this._height = Length.zero(node);
        this._title = null;
        this._titleSize = null;
        this._titleColor = null;
        this.dirty = true;
        this.observers = [];
        this.wedgesGroup = document.createElementNS('http://www.w3.org/2000/svg', 'g');
        this.wedgesGroup.setAttribute('class', 'wedges');
        this.node.appendChild(this.wedgesGroup);
    }
    Pie.prototype.wedges = function () {
        return this._wedges.slice(0);
    };
    Pie.prototype.addWedge = function (newWedge) {
        if (this._wedges.indexOf(newWedge) < 0) {
            for (var i = 0; i < this.observers.length; i += 1) {
                var observer = this.observers[i];
                if (observer.pieWillAddWedge) {
                    var wedge = observer.pieWillAddWedge(newWedge, this);
                    if (wedge) {
                        newWedge = wedge;
                    }
                    else if (wedge === null) {
                        return;
                    }
                }
            }
            this._wedges.push(newWedge);
            this.wedgesGroup.appendChild(newWedge.node);
            newWedge.addObserver(this);
            this.dirty = true;
            for (var i = 0; i < this.observers.length; i += 1) {
                var observer = this.observers[i];
                if (observer.pieDidAddWedge) {
                    observer.pieDidAddWedge(newWedge, this);
                }
            }
        }
    };
    Pie.prototype.removeWedge = function (oldWedge) {
        var i = this._wedges.indexOf(oldWedge);
        if (i >= 0) {
            for (var i_1 = 0; i_1 < this.observers.length; i_1 += 1) {
                var observer = this.observers[i_1];
                if (observer.pieWillRemoveWedge) {
                    observer.pieWillRemoveWedge(oldWedge, this);
                }
            }
            oldWedge.removeObserver(this);
            this.wedgesGroup.removeChild(oldWedge.node);
            this._wedges.splice(i, 1);
            this.dirty = true;
            for (var i_2 = 0; i_2 < this.observers.length; i_2 += 1) {
                var observer = this.observers[i_2];
                if (observer.pieDidRemoveWedge) {
                    observer.pieDidRemoveWedge(oldWedge, this);
                }
            }
        }
    };
    Pie.prototype.total = function () {
        return this._total;
    };
    Pie.prototype.limit = function (limit) {
        if (limit === undefined) {
            return this._limit;
        }
        else {
            if (this._limit !== limit) {
                this._limit = limit;
                this._total = limit;
                this.dirty = true;
            }
            return this;
        }
    };
    Pie.prototype.originAngle = function (originAngle) {
        if (originAngle === undefined) {
            return this._originAngle;
        }
        else {
            originAngle = Angle.fromAny(originAngle);
            if (!this._originAngle.equals(originAngle)) {
                this._originAngle = originAngle;
                this.dirty = true;
            }
            return this;
        }
    };
    Pie.prototype.width = function (width) {
        if (width === undefined) {
            return this._width;
        }
        else {
            width = Length.fromAny(width, this.node);
            if (!this._width.equals(width)) {
                this._width = width;
                this.dirty = true;
            }
            return this;
        }
    };
    Pie.prototype.height = function (height) {
        if (height === undefined) {
            return this._height;
        }
        else {
            height = Length.fromAny(height, this.node);
            if (!this._height.equals(height)) {
                this._height = height;
                this.dirty = true;
            }
            return this;
        }
    };
    Pie.prototype.title = function (title) {
        if (title === undefined) {
            return this._title;
        }
        else {
            if (this._title !== title) {
                if (this._title) {
                    this.node.removeChild(this._title);
                }
                this._title = title;
                if (this._title) {
                    this.node.appendChild(this._title);
                }
                this.dirty = true;
                this.render();
            }
            else {
                this.dirty = true;
            }
            return this;
        }
    };
    Pie.prototype.titleSize = function (titleSize) {
        if (titleSize === undefined) {
            return this._titleSize;
        }
        else {
            if (titleSize !== null) {
                titleSize = Length.fromAny(titleSize);
            }
            if (this._titleSize ? !this._titleSize.equals(titleSize) : this._titleSize !== titleSize) {
                this._titleSize = titleSize;
                this.dirty = true;
            }
            return this;
        }
    };
    Pie.prototype.titleColor = function (titleColor) {
        if (titleColor === undefined) {
            return this._titleColor;
        }
        else {
            if (titleColor !== null) {
                titleColor = Color.fromAny(titleColor);
            }
            if (this._titleColor ? !this._titleColor.equals(titleColor) : this._titleColor !== titleColor) {
                this._titleColor = titleColor;
                this.dirty = true;
            }
            return this;
        }
    };
    Pie.prototype.update = function () {
        if (this.dirty) {
            this.dirty = false;
            this.updateTitle();
            this.updateWedges();
        }
    };
    Pie.prototype.updateTotal = function () {
        var newTotal = 0;
        for (var i = 0; i < this._wedges.length; i += 1) {
            var wedge = this._wedges[i];
            var value = wedge.value();
            if (isFinite(value)) {
                newTotal += value;
            }
            else {
                newTotal = NaN;
                break;
            }
        }
        var oldTotal = this._total;
        if (oldTotal !== newTotal) {
            this._total = newTotal;
            for (var i = 0; i < this.observers.length; i += 1) {
                var observer = this.observers[i];
                if (observer.pieDidSetTotal) {
                    observer.pieDidSetTotal(newTotal, oldTotal, this);
                }
            }
            if (isFinite(newTotal)) {
                for (var i = 0; i < this._wedges.length; i += 1) {
                    this._wedges[i].total(newTotal);
                }
            }
        }
        return newTotal;
    };
    Pie.prototype.updateTitle = function () {
        var title = this._title;
        if (title) {
            var width = this._width.pxValue();
            var height = this._height.pxValue();
            var cx = width / 2;
            var cy = height / 2;
            if (title instanceof SVGGElement) {
                var transform = Transform.translate(cx, cy);
                title.setAttribute('transform', transform.toAttributeString());
            }
            else if (title instanceof SVGTextElement) {
                title.removeAttribute('visibility');
                title.setAttribute('x', '' + cx);
                title.setAttribute('y', '' + cy);
                title.setAttribute('text-anchor', 'middle');
                title.setAttribute('alignment-baseline', 'middle');
                if (this._titleSize) {
                    var size = Math.min(width, height);
                    title.setAttribute('font-size', '' + Math.ceil(this._titleSize.pxValue(size)));
                }
            }
            if (this._titleColor) {
                title.setAttribute('fill', this._titleColor.toString());
            }
        }
    };
    Pie.prototype.updateWedges = function () {
        var transform = Transform.translate(this._width.pxValue() / 2, this._height.pxValue() / 2);
        this.wedgesGroup.setAttribute('transform', transform.toAttributeString());
        var total = Math.max(this.updateTotal(), this._limit);
        var startAngle = this._originAngle;
        for (var i = 0; i < this._wedges.length; i += 1) {
            var wedge = this._wedges[i];
            if (isFinite(total)) {
                var delta = 2 * Math.PI * wedge.value() / (total || 1);
                wedge.startAngle(startAngle)
                    .deltaAngle(Angle.rad(delta));
                startAngle = Angle.rad(startAngle.radValue() + delta);
            }
            this.updateWedge(this._wedges[i]);
        }
    };
    Pie.prototype.updateWedge = function (wedge) {
        wedge.width(this._width).height(this._height);
    };
    Pie.prototype.render = function () {
        this.renderTitle();
        this.renderWedges();
    };
    Pie.prototype.renderTitle = function () {
    };
    Pie.prototype.renderWedges = function () {
        this.updateWedges();
        for (var i = 0; i < this._wedges.length; i += 1) {
            this.renderWedge(this._wedges[i]);
        }
    };
    Pie.prototype.renderWedge = function (wedge) {
        wedge.render();
    };
    Pie.prototype.wedgeDidSetValue = function (newValue, oldValue, wedge) {
        for (var i = 0; i < this.observers.length; i += 1) {
            var observer = this.observers[i];
            if (observer.pieWedgeDidSetValue) {
                observer.pieWedgeDidSetValue(newValue, oldValue, wedge, this);
            }
        }
    };
    Pie.prototype.addObserver = function (observer) {
        if (this.observers.indexOf(observer) < 0) {
            this.observers.push(observer);
        }
    };
    Pie.prototype.removeObserver = function (observer) {
        var i = this.observers.indexOf(observer);
        if (i >= 0) {
            this.observers.splice(i, 1);
        }
    };
    Pie.create = function (tag) {
        if (tag === void 0) { tag = 'svg'; }
        var node = document.createElementNS('http://www.w3.org/2000/svg', tag);
        node.setAttribute('class', 'pie');
        node.style.setProperty('flex-grow', '1');
        node.style.setProperty('flex-basis', '0');
        node.style.setProperty('-webkit-user-select', 'none');
        node.style.setProperty('-moz-user-select', 'none');
        node.style.setProperty('-ms-user-select', 'none');
        node.style.setProperty('user-select', 'none');
        node.style.setProperty('cursor', 'default');
        return new Pie(node);
    };
    return Pie;
}());

var PieAnimator = (function (_super) {
    __extends(PieAnimator, _super);
    function PieAnimator(pie, childViews) {
        var _this = _super.call(this) || this;
        _this.pie = pie;
        _this.childViews = childViews;
        _this.originAngle = undefined;
        _this.width = undefined;
        _this.height = undefined;
        _this.titleSize = undefined;
        _this.titleColor = undefined;
        return _this;
    }
    PieAnimator.prototype.onFrame = function (t) {
        if (this.originAngle) {
            this.originAngle.onFrame(t);
        }
        if (this.width) {
            this.width.onFrame(t);
        }
        if (this.height) {
            this.height.onFrame(t);
        }
        if (this.titleSize) {
            this.titleSize.onFrame(t);
        }
        if (this.titleColor) {
            this.titleColor.onFrame(t);
        }
        this.update();
    };
    PieAnimator.prototype.renderWedges = function () {
        for (var i = 0; i < this.childViews.length; i += 1) {
            var child = this.childViews[i];
            if (child instanceof WedgeView) {
                child.render();
            }
        }
    };
    PieAnimator.prototype.update = function () {
        this.pie.updateTitle();
        this.pie.updateWedges();
        this.renderWedges();
    };
    return PieAnimator;
}(FrameAnimator));
var PieOriginAngleAnimator = (function (_super) {
    __extends(PieOriginAngleAnimator, _super);
    function PieOriginAngleAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    PieOriginAngleAnimator.prototype.update = function (value) {
        this.parent.pie.originAngle(value);
    };
    PieOriginAngleAnimator.get = function (self) {
        return self.pie.originAngle();
    };
    PieOriginAngleAnimator.set = function (self, value) {
        if (value === null) {
            self.pieAnimator.originAngle = undefined;
        }
        else {
            self.pie.originAngle(value);
        }
    };
    PieOriginAngleAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.pieAnimator.originAngle) {
            self.pieAnimator.originAngle = new PieOriginAngleAnimator(self.pieAnimator, value, trans);
        }
        return self.pieAnimator.originAngle;
    };
    return PieOriginAngleAnimator;
}(ChildFrameAnimator));
var PieWidthAnimator = (function (_super) {
    __extends(PieWidthAnimator, _super);
    function PieWidthAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition, Animator.REQUIRES_RESIZE) || this;
    }
    PieWidthAnimator.prototype.update = function (value) {
        this.parent.pie.width(value);
        this.updateTarget(this.parent.pie.node);
    };
    PieWidthAnimator.get = function (self) {
        return self.pie.width();
    };
    PieWidthAnimator.set = function (self, value) {
        if (value === null) {
            self.pieAnimator.width = undefined;
            self.pie.node.removeAttribute('width');
        }
        else {
            self.pie.width(value);
            var oldValue = self.pie.node.getAttribute('width');
            var newValue = '' + value.pxValue();
            if (oldValue !== newValue) {
                self.pie.node.setAttribute('width', newValue);
                self.requireResize();
            }
        }
    };
    PieWidthAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.pieAnimator.width) {
            self.pieAnimator.width = new PieWidthAnimator(self.pieAnimator, value, trans);
        }
        return self.pieAnimator.width;
    };
    return PieWidthAnimator;
}(ChildFrameAnimator));
var PieHeightAnimator = (function (_super) {
    __extends(PieHeightAnimator, _super);
    function PieHeightAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition, Animator.REQUIRES_RESIZE) || this;
    }
    PieHeightAnimator.prototype.update = function (value) {
        this.parent.pie.height(value);
        this.updateTarget(this.parent.pie.node);
    };
    PieHeightAnimator.get = function (self) {
        return self.pie.height();
    };
    PieHeightAnimator.set = function (self, value) {
        if (value === null) {
            self.pieAnimator.height = undefined;
            self.pie.node.removeAttribute('height');
        }
        else {
            self.pie.height(value);
            var oldValue = self.pie.node.getAttribute('height');
            var newValue = '' + value.pxValue();
            if (oldValue !== newValue) {
                self.pie.node.setAttribute('height', newValue);
                self.requireResize();
            }
        }
    };
    PieHeightAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.pieAnimator.height) {
            self.pieAnimator.height = new PieHeightAnimator(self.pieAnimator, value, trans);
        }
        return self.pieAnimator.height;
    };
    return PieHeightAnimator;
}(ChildFrameAnimator));
var PieTitleSizeAnimator = (function (_super) {
    __extends(PieTitleSizeAnimator, _super);
    function PieTitleSizeAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    PieTitleSizeAnimator.prototype.update = function (value) {
        this.parent.pie.titleSize(value);
    };
    PieTitleSizeAnimator.get = function (self) {
        return self.pie.titleSize();
    };
    PieTitleSizeAnimator.set = function (self, value) {
        if (value === null) {
            self.pieAnimator.titleSize = undefined;
        }
        else {
            self.pie.titleSize(value);
            self.pieAnimator.animate();
        }
    };
    PieTitleSizeAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.pieAnimator.titleSize) {
            self.pieAnimator.titleSize = new PieTitleSizeAnimator(self.pieAnimator, value, trans);
        }
        return self.pieAnimator.titleSize;
    };
    return PieTitleSizeAnimator;
}(ChildFrameAnimator));
var PieTitleColorAnimator = (function (_super) {
    __extends(PieTitleColorAnimator, _super);
    function PieTitleColorAnimator(parent, value, transition) {
        return _super.call(this, parent, value, transition) || this;
    }
    PieTitleColorAnimator.prototype.update = function (value) {
        this.parent.pie.titleColor(value);
    };
    PieTitleColorAnimator.get = function (self) {
        return self.pie.titleColor();
    };
    PieTitleColorAnimator.set = function (self, value) {
        if (value === null) {
            self.pieAnimator.titleColor = undefined;
        }
        else {
            self.pie.titleColor(value);
        }
    };
    PieTitleColorAnimator.animator = function (self, value, trans) {
        if (value !== undefined && !self.pieAnimator.titleColor) {
            self.pieAnimator.titleColor = new PieTitleColorAnimator(self.pieAnimator, value, trans);
        }
        return self.pieAnimator.titleColor;
    };
    return PieTitleColorAnimator;
}(ChildFrameAnimator));
var PieView = (function (_super) {
    __extends(PieView, _super);
    function PieView(pie) {
        var _this = _super.call(this, pie.node) || this;
        _this.pie = pie;
        _this.pieAnimator = new PieAnimator(_this.pie, _this._childViews);
        _this.pie.addObserver(_this);
        return _this;
    }
    PieView.prototype.wedges = function () {
        var wedges = [];
        for (var i = 0; i < this._childViews.length; i += 1) {
            var child = this._childViews[i];
            if (child instanceof WedgeView) {
                wedges.push(child);
            }
        }
        return wedges;
    };
    PieView.prototype.addWedge = function (newWedge) {
        this.appendChildView(newWedge);
    };
    PieView.prototype.removeWedge = function (oldWedge) {
        this.removeChildView(oldWedge);
    };
    PieView.prototype.didInsertChildView = function (childView) {
        if (childView instanceof WedgeView) {
            this.pie.addWedge(childView.wedge);
        }
        _super.prototype.didInsertChildView.call(this, childView);
    };
    PieView.prototype.didRemoveChildView = function (childView) {
        if (childView instanceof WedgeView) {
            this.pie.removeWedge(childView.wedge);
        }
        _super.prototype.didRemoveChildView.call(this, childView);
    };
    PieView.prototype.total = function () {
        return this.pie.total();
    };
    PieView.prototype.limit = function (value) {
        if (value === undefined) {
            return this.pie.limit();
        }
        else {
            this.pie.limit(value);
            return this;
        }
    };
    PieView.prototype.originAngle = function (value, trans) {
        return this.propertyAngle(PieOriginAngleAnimator, value, trans);
    };
    PieView.prototype.width = function (value, trans) {
        return this.propertyLength(PieWidthAnimator, value, trans);
    };
    PieView.prototype.height = function (value, trans) {
        return this.propertyLength(PieHeightAnimator, value, trans);
    };
    PieView.prototype.innerRadius = function (value, trans) {
        for (var i = 0; i < this._childViews.length; i += 1) {
            var child = this._childViews[i];
            if (child instanceof WedgeView) {
                child.innerRadius(value, trans);
            }
        }
        return this;
    };
    PieView.prototype.outerRadius = function (value, trans) {
        for (var i = 0; i < this._childViews.length; i += 1) {
            var child = this._childViews[i];
            if (child instanceof WedgeView) {
                child.outerRadius(value, trans);
            }
        }
        return this;
    };
    PieView.prototype.padAngle = function (value, trans) {
        value = Angle.fromAny(value);
        for (var i = 0; i < this._childViews.length; i += 1) {
            var child = this._childViews[i];
            if (child instanceof WedgeView) {
                child.padAngle(value, trans);
            }
        }
        return this;
    };
    PieView.prototype.padRadius = function (value, trans) {
        for (var i = 0; i < this._childViews.length; i += 1) {
            var child = this._childViews[i];
            if (child instanceof WedgeView) {
                child.padRadius(value, trans);
            }
        }
        return this;
    };
    PieView.prototype.cornerRadius = function (value, trans) {
        for (var i = 0; i < this._childViews.length; i += 1) {
            var child = this._childViews[i];
            if (child instanceof WedgeView) {
                child.cornerRadius(value, trans);
            }
        }
        return this;
    };
    PieView.prototype.arcColor = function (value, trans) {
        value = Color.fromAny(value);
        for (var i = 0; i < this._childViews.length; i += 1) {
            var child = this._childViews[i];
            if (child instanceof WedgeView) {
                child.arcColor(value, trans);
            }
        }
        return this;
    };
    PieView.prototype.tickRadius = function (value, trans) {
        for (var i = 0; i < this._childViews.length; i += 1) {
            var child = this._childViews[i];
            if (child instanceof WedgeView) {
                child.tickRadius(value, trans);
            }
        }
        return this;
    };
    PieView.prototype.tickLength = function (value, trans) {
        for (var i = 0; i < this._childViews.length; i += 1) {
            var child = this._childViews[i];
            if (child instanceof WedgeView) {
                child.tickLength(value, trans);
            }
        }
        return this;
    };
    PieView.prototype.tickWidth = function (value, trans) {
        for (var i = 0; i < this._childViews.length; i += 1) {
            var child = this._childViews[i];
            if (child instanceof WedgeView) {
                child.tickWidth(value, trans);
            }
        }
        return this;
    };
    PieView.prototype.tickPadding = function (value, trans) {
        for (var i = 0; i < this._childViews.length; i += 1) {
            var child = this._childViews[i];
            if (child instanceof WedgeView) {
                child.tickPadding(value, trans);
            }
        }
        return this;
    };
    PieView.prototype.tickColor = function (value, trans) {
        value = Color.fromAny(value);
        for (var i = 0; i < this._childViews.length; i += 1) {
            var child = this._childViews[i];
            if (child instanceof WedgeView) {
                child.tickColor(value, trans);
            }
        }
        return this;
    };
    PieView.prototype.labelRadius = function (value, trans) {
        for (var i = 0; i < this._childViews.length; i += 1) {
            var child = this._childViews[i];
            if (child instanceof WedgeView) {
                child.labelRadius(value, trans);
            }
        }
        return this;
    };
    PieView.prototype.labelSize = function (value, trans) {
        for (var i = 0; i < this._childViews.length; i += 1) {
            var child = this._childViews[i];
            if (child instanceof WedgeView) {
                child.labelSize(value, trans);
            }
        }
        return this;
    };
    PieView.prototype.labelColor = function (value, trans) {
        value = Color.fromAny(value);
        for (var i = 0; i < this._childViews.length; i += 1) {
            var child = this._childViews[i];
            if (child instanceof WedgeView) {
                child.labelColor(value, trans);
            }
        }
        return this;
    };
    PieView.prototype.legendSize = function (value, trans) {
        for (var i = 0; i < this._childViews.length; i += 1) {
            var child = this._childViews[i];
            if (child instanceof WedgeView) {
                child.legendSize(value, trans);
            }
        }
        return this;
    };
    PieView.prototype.legendColor = function (value, trans) {
        value = Color.fromAny(value);
        for (var i = 0; i < this._childViews.length; i += 1) {
            var child = this._childViews[i];
            if (child instanceof WedgeView) {
                child.legendColor(value, trans);
            }
        }
        return this;
    };
    PieView.prototype.title = function (newTitle) {
        var oldTitle = this.pie.title();
        if (newTitle === undefined) {
            return oldTitle;
        }
        else {
            if (typeof newTitle === 'string') {
                newTitle = document.createTextNode(newTitle);
            }
            else if (newTitle instanceof SvgView || newTitle instanceof TextView) {
                newTitle = newTitle.node;
            }
            if (newTitle instanceof Text) {
                if (oldTitle) {
                    while (oldTitle.firstChild) {
                        oldTitle.removeChild(oldTitle.firstChild);
                    }
                    oldTitle.appendChild(newTitle);
                    newTitle = oldTitle;
                }
                else {
                    var title = SvgView.create('text').className('title');
                    title.append(newTitle);
                    newTitle = title.node;
                }
            }
            if (oldTitle) {
                var oldView = oldTitle.view;
                if (oldTitle !== newTitle && oldView) {
                    this.removeChildView(oldView);
                }
            }
            this.pie.title(newTitle);
            if (newTitle) {
                var newView = newTitle.view;
                if (oldTitle !== newTitle && newView) {
                    this.appendChildView(newView);
                }
            }
            this.pieAnimator.animate();
            return this;
        }
    };
    PieView.prototype.titleSize = function (value, trans) {
        return this.propertyLength(PieTitleSizeAnimator, value, trans);
    };
    PieView.prototype.titleColor = function (value, trans) {
        return this.propertyColor(PieTitleColorAnimator, value, trans);
    };
    PieView.prototype.render = function () {
        this.pieAnimator.update();
    };
    PieView.prototype.autosize = function () {
        var node = this.node;
        do {
            var parentNode = node.parentNode;
            if (parentNode) {
                if (parentNode instanceof HTMLElement) {
                    this.width(parentNode.offsetWidth)
                        .height(parentNode.offsetHeight);
                    return;
                }
                node = parentNode;
                continue;
            }
            return;
        } while (true);
    };
    PieView.prototype.didResize = function () {
        _super.prototype.didResize.call(this);
        this.autosize();
        this.render();
    };
    PieView.prototype.didReview = function (viewable) {
        _super.prototype.didReview.call(this, viewable);
        this.pieAnimator.enabled(viewable);
    };
    PieView.prototype.didSetState = function (newState, oldState) {
        _super.prototype.didSetState.call(this, newState, oldState);
        var trans = newState.get('transition').cast(Transition.Form);
        var limit = newState.get('limit').numberValue();
        if (limit !== undefined) {
            this.limit(limit);
        }
        var originAngle = newState.get('originAngle').cast(Angle.Form);
        if (originAngle) {
            this.originAngle(originAngle, trans);
        }
        var width = newState.get('pieWidth').cast(Length.Form);
        if (width) {
            this.width(width);
        }
        var height = newState.get('pieHeight').cast(Length.Form);
        if (height) {
            this.height(height);
        }
        var titleSize = newState.get('titleSize').cast(Length.Form);
        if (titleSize) {
            this.titleSize(titleSize, trans);
        }
        var titleColor = newState.get('titleColor').cast(Color.Form);
        if (titleColor) {
            this.titleColor(titleColor, trans);
        }
        var titleView = this.title();
        if (titleView) {
            var titleWeight = newState.get('titleWeight').numberValue();
            if (titleWeight) {
                titleView.setAttribute('font-weight', '' + titleWeight);
            }
        }
    };
    PieView.prototype.pieWedgeDidSetValue = function (newValue, oldValue, wedge, pie) {
        this.pie.updateTotal();
        this.pieAnimator.animate();
    };
    PieView.prototype.addObserver = function (observer) {
        this.pie.addObserver(observer);
    };
    PieView.prototype.removeObserver = function (observer) {
        this.pie.removeObserver(observer);
    };
    PieView.create = function (node) {
        if (node instanceof PieView) {
            return node;
        }
        else if (node instanceof NodeView) {
            throw new TypeError('' + node);
        }
        else if (node === undefined || typeof node === 'string') {
            return new PieView(Pie.create(node));
        }
        else if (node.view instanceof PieView) {
            return node.view;
        }
        else if (node.view) {
            throw new TypeError('' + node.view);
        }
        else if (node instanceof SVGElement) {
            return new PieView(new Pie(node));
        }
        else {
            throw new TypeError('' + node);
        }
    };
    PieView.applyTheme = function (theme) {
        var sectorRatio = Selector.get('value').divide(Selector.get('total').or(Num.One));
        var sectorColor = Selector.get('primaryHue').invoke(sectorRatio).or(Selector.get('primaryColor'));
        var labelColor = Selector.get('contrast').invoke(Record.of(sectorColor, Num.valueOf(2)));
        var pie = Record.empty()
            .slot('innerRadius', '3%')
            .slot('outerRadius', '25%')
            .slot('arcColor', sectorColor)
            .slot('tickRadius', '30%')
            .slot('tickLength', '50%')
            .slot('tickColor', sectorColor)
            .slot('labelRadius', '50%')
            .slot('padAngle', '2deg')
            .slot('minAngle', '2deg')
            .slot('labelSize', '13px')
            .slot('labelColor', labelColor)
            .slot('labelWeight', 500)
            .slot('legendSize', '13px')
            .slot('legendColor', sectorColor)
            .slot('legendWeight', 300)
            .slot('titleSize', '15px')
            .slot('titleColor', Selector.get('textColor'))
            .slot('titleWeight', 300);
        theme.set('pie', pie);
    };
    return PieView;
}(SvgView));
PieView.applyTheme(PieView.Theme);

var PieModel = (function (_super) {
    __extends(PieModel, _super);
    function PieModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PieModel.prototype.willRestate = function () {
        _super.prototype.willRestate.call(this);
        this.updateTotal();
    };
    PieModel.prototype.updateTotal = function () {
        var newTotal = 0;
        for (var i = 0; i < this._childModels.length; i += 1) {
            var childModel = this._childModels[i];
            if (childModel instanceof WedgeModel) {
                var value = childModel.updateValue();
                if (isFinite(value)) {
                    newTotal += value;
                }
                else {
                    newTotal = NaN;
                    break;
                }
            }
        }
        if (isFinite(newTotal)) {
            this._modelScope._record.set('total', newTotal);
        }
        else {
            this._modelScope._record.delete('total');
        }
        return newTotal;
    };
    PieModel.Params = SvgModel.Params.concat([
        new ModelParam('transition', Selector.get('transition').or(Selector.get('pie').get('transition'))),
        new ModelParam('value', Selector.get('value')),
        new ModelParam('total', Selector.get('total')),
        new ModelParam('limit', Selector.get('limit')),
        new ModelParam('originAngle', Selector.get('originAngle').or(Selector.get('pie').get('originAngle'))),
        new ModelParam('pieWidth', Selector.get('pieWidth').or(Selector.get('pie').get('width'))),
        new ModelParam('pieHeight', Selector.get('pieHeight').or(Selector.get('pie').get('height'))),
        new ModelParam('titleSize', Selector.get('titleSize').or(Selector.get('pie').get('titleSize'))),
        new ModelParam('titleColor', Selector.get('titleColor').or(Selector.get('pie').get('titleColor'))),
        new ModelParam('titleWeight', Selector.get('titleWeight').or(Selector.get('pie').get('titleWeight'))),
    ]);
    return PieModel;
}(SvgModel));

var PieForm = (function (_super) {
    __extends(PieForm, _super);
    function PieForm() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(PieForm.prototype, "tag", {
        get: function () {
            return 'pie';
        },
        enumerable: true,
        configurable: true
    });
    PieForm.prototype.castView = function (value, stack, factory) {
        if (value.tag === this.tag) {
            var view = PieView.create();
            var modelDef = this.materializeView(view, value, stack, factory);
            view.setModel(modelDef);
            return view;
        }
        return undefined;
    };
    PieForm.prototype.castModel = function (value, stack, factory) {
        if (value.tag === this.tag) {
            var model = new PieModel();
            var dataDef = this.materializeModel(model, value, stack, factory);
            model.setData(dataDef);
            return model;
        }
        return undefined;
    };
    PieForm.prototype.materializeViewParam = function (view, param, stack, factory) {
        if (param.key instanceof Text$1) {
            var key = param.key.value;
            if (key === 'title') {
                var title = factory.castView(param.toValue(), stack, factory);
                if (title === undefined) {
                    title = param.toValue().stringValue();
                }
                if (title !== undefined) {
                    view.title(title);
                    return Item.Absent;
                }
            }
        }
        var wedge = WedgeForm.Form.castView(param.toValue(), stack, factory);
        if (wedge) {
            view.addWedge(wedge);
            return wedge;
        }
        return _super.prototype.materializeViewParam.call(this, view, param, stack, factory);
    };
    PieForm.prototype.materializeModelParam = function (model, param, stack, factory) {
        if (param instanceof Attr && param.key.value === this.tag) {
            return Item.Absent;
        }
        return _super.prototype.materializeModelParam.call(this, model, param, stack, factory);
    };
    PieForm.Form = new PieForm();
    return PieForm;
}(SvgForm));
UiForm.addGlobal(PieForm.Form);

var PlacardView = (function (_super) {
    __extends(PlacardView, _super);
    function PlacardView(node) {
        var _this = _super.call(this, node) || this;
        _this.display('flex')
            .position('relative')
            .flexDirection('column')
            .flexGrow(1)
            .flexBasis(0)
            .width('100%')
            .height('100%');
        _this._contentView = _this.append('div')
            .display('flex')
            .position('relative')
            .flexGrow(1)
            .flexBasis(0);
        _this._bodyView = null;
        return _this;
    }
    PlacardView.prototype.contentView = function () {
        return this._contentView;
    };
    PlacardView.prototype.bodyView = function (bodyView) {
        if (bodyView === undefined) {
            return this._bodyView;
        }
        else {
            if (this._bodyView !== bodyView) {
                if (this._bodyView) {
                    this._bodyView.remove();
                }
                this._bodyView = bodyView;
                if (this._bodyView) {
                    this._contentView.append(this._bodyView);
                }
            }
            return this;
        }
    };
    PlacardView.prototype.didSetState = function (newState, oldState) {
        _super.prototype.didSetState.call(this, newState, oldState);
        var marginTop = newState.get('marginTop').cast(Length.Form);
        if (marginTop) {
            this._contentView.marginTop(marginTop);
        }
        var marginRight = newState.get('marginRight').cast(Length.Form);
        if (marginRight) {
            this._contentView.marginRight(marginRight);
        }
        var marginBottom = newState.get('marginBottom').cast(Length.Form);
        if (marginBottom) {
            this._contentView.marginBottom(marginBottom);
        }
        var marginLeft = newState.get('marginLeft').cast(Length.Form);
        if (marginLeft) {
            this._contentView.marginLeft(marginLeft);
        }
    };
    PlacardView.create = function () {
        var node = document.createElement('div');
        return new PlacardView(node).className('placard');
    };
    PlacardView.applyTheme = function (theme) {
        var placard = Record.empty()
            .slot('marginTop', '8px')
            .slot('marginRight', '8px')
            .slot('marginBottom', '8px')
            .slot('marginLeft', '8px')
            .slot('titleSize', '12px')
            .slot('titleColor', Selector.get('textColor'))
            .slot('subtitleSize', '10px')
            .slot('subtitleColor', Selector.get('textColor'));
        theme.set('placard', placard);
    };
    return PlacardView;
}(HtmlView));
PlacardView.applyTheme(PlacardView.Theme);

var PlacardModel = (function (_super) {
    __extends(PlacardModel, _super);
    function PlacardModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PlacardModel.Params = HtmlModel.Params.concat([
        new ModelParam('transition', Selector.get('transition').or(Selector.get('placard').get('transition'))),
        new ModelParam('marginTop', Selector.get('marginTop').or(Selector.get('placard').get('marginTop'))),
        new ModelParam('marginRight', Selector.get('marginRight').or(Selector.get('placard').get('marginRight'))),
        new ModelParam('marginBottom', Selector.get('marginBottom').or(Selector.get('placard').get('marginBottom'))),
        new ModelParam('marginLeft', Selector.get('marginLeft').or(Selector.get('placard').get('marginLeft'))),
    ]);
    return PlacardModel;
}(HtmlModel));

var PlacardForm = (function (_super) {
    __extends(PlacardForm, _super);
    function PlacardForm() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(PlacardForm.prototype, "tag", {
        get: function () {
            return 'placard';
        },
        enumerable: true,
        configurable: true
    });
    PlacardForm.prototype.castView = function (value, stack, factory) {
        if (value.tag === this.tag) {
            var view = PlacardView.create();
            var modelDef = this.materializeView(view, value, stack, factory);
            view.setModel(modelDef);
            return view;
        }
        return undefined;
    };
    PlacardForm.prototype.castModel = function (value, stack, factory) {
        if (value.tag === this.tag) {
            var model = new PlacardModel();
            var dataDef = this.materializeModel(model, value, stack, factory);
            model.setData(dataDef);
            return model;
        }
        return undefined;
    };
    PlacardForm.prototype.materializeViewParam = function (view, param, stack, factory) {
        if (param.key instanceof Text$1) {
            var key = param.key.value;
            if (key === 'body') {
                var bodyView = factory.castView(param.toValue(), stack, factory);
                if (bodyView) {
                    view.bodyView(bodyView);
                    return view.bodyView();
                }
            }
        }
        return _super.prototype.materializeViewParam.call(this, view, param, stack, factory);
    };
    PlacardForm.prototype.materializeModelParam = function (model, param, stack, factory) {
        if (param instanceof Attr && param.key.value === this.tag) {
            return Item.Absent;
        }
        return _super.prototype.materializeModelParam.call(this, model, param, stack, factory);
    };
    PlacardForm.Form = new PlacardForm();
    return PlacardForm;
}(HtmlForm));
UiForm.addGlobal(PlacardForm.Form);

var PieceView = (function (_super) {
    __extends(PieceView, _super);
    function PieceView(node) {
        var _this = _super.call(this, node) || this;
        _this._proportion = 'any';
        _this._placement = 'any';
        _this._pieceMargin = 0;
        _this._pieceWidth = 0;
        _this._pieceHeight = 0;
        _this._reflowTransition = undefined;
        return _this;
    }
    PieceView.prototype.proportion = function (proportion) {
        if (proportion === undefined) {
            return this._proportion;
        }
        else {
            if (this._proportion !== proportion) {
                this._proportion = proportion;
                if (this._parentView) {
                    this._parentView.requireResize();
                }
            }
            return this;
        }
    };
    PieceView.prototype.placement = function (placement) {
        if (placement === undefined) {
            return this._placement;
        }
        else {
            if (this._placement !== placement) {
                this._placement = placement;
                if (this._parentView) {
                    this._parentView.requireResize();
                }
            }
            return this;
        }
    };
    PieceView.prototype.pieceMargin = function (pieceMargin, trans) {
        if (pieceMargin === undefined) {
            return this._pieceMargin;
        }
        else {
            this._pieceMargin = pieceMargin;
            return this;
        }
    };
    PieceView.prototype.pieceWidth = function (pieceWidth, trans) {
        if (pieceWidth === undefined) {
            return this._pieceWidth;
        }
        else {
            this._pieceWidth = pieceWidth;
            return this;
        }
    };
    PieceView.prototype.pieceHeight = function (pieceHeight, trans) {
        if (pieceHeight === undefined) {
            return this._pieceHeight;
        }
        else {
            this._pieceHeight = pieceHeight;
            return this;
        }
    };
    PieceView.prototype.reflowTransition = function (reflowTransition) {
        if (reflowTransition === undefined) {
            return this._reflowTransition || null;
        }
        else {
            this._reflowTransition = reflowTransition || undefined;
            return this;
        }
    };
    PieceView.prototype.didSetState = function (newState, oldState) {
        _super.prototype.didSetState.call(this, newState, oldState);
        var proportion = newState.get('proportion').stringValue();
        if (proportion !== undefined) {
            this.proportion(proportion);
        }
        var placement = newState.get('placement').stringValue();
        if (placement !== undefined) {
            this.placement(placement);
        }
    };
    return PieceView;
}(HtmlView));

var PieceModel = (function (_super) {
    __extends(PieceModel, _super);
    function PieceModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PieceModel.Params = HtmlModel.Params.concat([
        new ModelParam('proportion', Selector.get('proportion')),
        new ModelParam('placement', Selector.get('placement')),
    ]);
    return PieceModel;
}(HtmlModel));

var PieceForm = (function (_super) {
    __extends(PieceForm, _super);
    function PieceForm() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PieceForm.addGlobal = function (pieceForm) {
        PieceForm.Global = PieceForm.Global.withUiForm(pieceForm);
    };
    PieceForm.removeGlobal = function (pieceForm) {
        PieceForm.Global = PieceForm.Global.withoutUiForm(pieceForm);
    };
    PieceForm.Global = new PolyUiForm([]);
    return PieceForm;
}(HtmlForm));

var PieceCardView = (function (_super) {
    __extends(PieceCardView, _super);
    function PieceCardView(node) {
        var _this = _super.call(this, node) || this;
        _this.display('flex')
            .flexDirection('column')
            .flexGrow(1)
            .borderRadius(8)
            .backgroundColor(Color.white());
        _this._headerView = _this.append('div')
            .display('flex')
            .justifyContent('space-between')
            .alignItems('baseline')
            .flexShrink(0);
        _this._titleView = null;
        _this._subtitleView = null;
        _this._contentView = _this.append('div')
            .display('flex')
            .position('relative')
            .flexGrow(1);
        _this._bodyView = null;
        _this.onClick = _this.onClick.bind(_this);
        _this.node.addEventListener('click', _this.onClick);
        return _this;
    }
    PieceCardView.prototype.headerView = function () {
        return this._headerView;
    };
    PieceCardView.prototype.titleView = function (newTitleView) {
        var oldTitleView = this._titleView;
        if (newTitleView === undefined) {
            return oldTitleView;
        }
        else {
            if (typeof newTitleView === 'string') {
                newTitleView = document.createTextNode(newTitleView);
            }
            else if (newTitleView instanceof HtmlView || newTitleView instanceof TextView) {
                newTitleView = newTitleView.node;
            }
            if (newTitleView instanceof Text) {
                if (oldTitleView) {
                    oldTitleView.removeAll();
                    oldTitleView.append(newTitleView);
                    newTitleView = oldTitleView;
                }
                else {
                    var title = HtmlView.create('text').className('title');
                    title.append(newTitleView);
                    newTitleView = title.node;
                }
            }
            if (newTitleView instanceof HTMLElement) {
                newTitleView = HtmlView.create(newTitleView);
            }
            if (oldTitleView !== newTitleView && oldTitleView) {
                this._headerView.remove(oldTitleView);
            }
            this._titleView = newTitleView;
            if (oldTitleView !== newTitleView && newTitleView) {
                this._headerView.insertBefore(newTitleView, this._subtitleView);
            }
            return this;
        }
    };
    PieceCardView.prototype.subtitleView = function (newSubtitleView) {
        var oldSubtitleView = this._subtitleView;
        if (newSubtitleView === undefined) {
            return oldSubtitleView;
        }
        else {
            if (typeof newSubtitleView === 'string') {
                newSubtitleView = document.createTextNode(newSubtitleView);
            }
            else if (newSubtitleView instanceof HtmlView || newSubtitleView instanceof TextView) {
                newSubtitleView = newSubtitleView.node;
            }
            if (newSubtitleView instanceof Text) {
                if (oldSubtitleView) {
                    oldSubtitleView.removeAll();
                    oldSubtitleView.append(newSubtitleView);
                    newSubtitleView = oldSubtitleView;
                }
                else {
                    var title = HtmlView.create('text').className('title');
                    title.append(newSubtitleView);
                    newSubtitleView = title.node;
                }
            }
            if (newSubtitleView instanceof HTMLElement) {
                newSubtitleView = HtmlView.create(newSubtitleView);
            }
            if (oldSubtitleView !== newSubtitleView && oldSubtitleView) {
                this._headerView.remove(oldSubtitleView);
            }
            this._subtitleView = newSubtitleView;
            if (oldSubtitleView !== newSubtitleView && newSubtitleView) {
                this._headerView.append(newSubtitleView);
            }
            return this;
        }
    };
    PieceCardView.prototype.contentView = function () {
        return this._contentView;
    };
    PieceCardView.prototype.bodyView = function (bodyView) {
        if (bodyView === undefined) {
            return this._bodyView;
        }
        else {
            if (this._bodyView !== bodyView) {
                if (this._bodyView) {
                    this._bodyView.remove();
                }
                this._bodyView = bodyView;
                if (this._bodyView) {
                    this._contentView.append(this._bodyView);
                }
            }
            return this;
        }
    };
    PieceCardView.prototype.didSetState = function (newState, oldState) {
        _super.prototype.didSetState.call(this, newState, oldState);
        var marginTop = newState.get('marginTop').cast(Length.Form);
        if (marginTop) {
            this.headerView().marginTop(marginTop);
            this.contentView().marginTop(marginTop);
        }
        var marginRight = newState.get('marginRight').cast(Length.Form);
        if (marginRight) {
            this.headerView().marginRight(marginRight);
            this.contentView().marginRight(marginRight);
        }
        var marginBottom = newState.get('marginBottom').cast(Length.Form);
        if (marginBottom) {
            this.contentView().marginBottom(marginBottom);
        }
        var marginLeft = newState.get('marginLeft').cast(Length.Form);
        if (marginLeft) {
            this.headerView().marginLeft(marginLeft);
            this.contentView().marginLeft(marginLeft);
        }
        var titleView = this.titleView();
        if (titleView) {
            var titleSize = newState.get('titleSize').cast(Length.Form);
            if (titleSize) {
                titleView.fontSize(titleSize);
            }
            var titleColor = newState.get('titleColor').cast(Color.Form);
            if (titleColor) {
                titleView.color(titleColor);
            }
        }
        var subtitleView = this.subtitleView();
        if (subtitleView) {
            var subtitleSize = newState.get('subtitleSize').cast(Length.Form);
            if (subtitleSize) {
                subtitleView.fontSize(subtitleSize);
            }
            var subtitleColor = newState.get('subtitleColor').cast(Color.Form);
            if (subtitleColor) {
                subtitleView.color(subtitleColor);
            }
        }
    };
    PieceCardView.prototype.onClick = function (event) {
    };
    PieceCardView.create = function () {
        var node = document.createElement('div');
        return new PieceCardView(node).className('piece card');
    };
    return PieceCardView;
}(PieceView));

var PieceCardModel = (function (_super) {
    __extends(PieceCardModel, _super);
    function PieceCardModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PieceCardModel.Params = PieceModel.Params.concat([
        new ModelParam('marginTop', Selector.get('marginTop').or(Selector.get('quilt').get('card').get('marginTop'))),
        new ModelParam('marginRight', Selector.get('marginRight').or(Selector.get('quilt').get('card').get('marginRight'))),
        new ModelParam('marginBottom', Selector.get('marginBottom').or(Selector.get('quilt').get('card').get('marginBottom'))),
        new ModelParam('marginLeft', Selector.get('marginLeft').or(Selector.get('quilt').get('card').get('marginLeft'))),
        new ModelParam('titleSize', Selector.get('titleSize').or(Selector.get('quilt').get('card').get('titleSize'))),
        new ModelParam('titleColor', Selector.get('titleColor').or(Selector.get('quilt').get('card').get('titleColor'))),
        new ModelParam('subtitleSize', Selector.get('subtitleSize').or(Selector.get('quilt').get('card').get('subtitleSize'))),
        new ModelParam('subtitleColor', Selector.get('subtitleColor').or(Selector.get('quilt').get('card').get('subtitleColor'))),
    ]);
    return PieceCardModel;
}(PieceModel));

var PieceCardForm = (function (_super) {
    __extends(PieceCardForm, _super);
    function PieceCardForm() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(PieceCardForm.prototype, "tag", {
        get: function () {
            return 'card';
        },
        enumerable: true,
        configurable: true
    });
    PieceCardForm.prototype.castView = function (value, stack, factory) {
        if (value.tag === this.tag) {
            var view = PieceCardView.create();
            var modelDef = this.materializeView(view, value, stack, factory);
            view.setModel(modelDef);
            return view;
        }
        return undefined;
    };
    PieceCardForm.prototype.castModel = function (value, stack, factory) {
        if (value.tag === this.tag) {
            var model = new PieceCardModel();
            var dataDef = this.materializeModel(model, value, stack, factory);
            model.setData(dataDef);
            return model;
        }
        return undefined;
    };
    PieceCardForm.prototype.materializeViewParam = function (view, param, stack, factory) {
        if (param.key instanceof Text$1) {
            var key = param.key.value;
            if (key === 'title') {
                var title = factory.castView(param.toValue(), stack, factory);
                if (title === undefined) {
                    title = param.toValue().stringValue();
                }
                if (title !== undefined) {
                    view.titleView(title);
                    return view.titleView();
                }
            }
            else if (key === 'subtitle') {
                var subtitle = factory.castView(param.toValue(), stack, factory);
                if (subtitle === undefined) {
                    subtitle = param.toValue().stringValue();
                }
                if (subtitle !== undefined) {
                    view.subtitleView(subtitle);
                    return view.subtitleView();
                }
            }
            else if (key === 'body') {
                var body = factory.castView(param.toValue(), stack, factory);
                if (body) {
                    view.bodyView(body);
                    return view.bodyView();
                }
            }
        }
        return _super.prototype.materializeViewParam.call(this, view, param, stack, factory);
    };
    PieceCardForm.prototype.materializeModelParam = function (model, param, stack, factory) {
        if (param instanceof Attr && param.key.value === this.tag) {
            return Item.Absent;
        }
        return _super.prototype.materializeModelParam.call(this, model, param, stack, factory);
    };
    PieceCardForm.Form = new PieceCardForm();
    return PieceCardForm;
}(PieceForm));
UiForm.addGlobal(PieceCardForm.Form);
PieceForm.addGlobal(PieceCardForm.Form);

var BlockView = (function (_super) {
    __extends(BlockView, _super);
    function BlockView(node) {
        var _this = _super.call(this, node) || this;
        _this._blockMargin = 0;
        _this._blockWidth = 0;
        _this._blockHeight = 0;
        _this._reflowTransition = undefined;
        return _this;
    }
    BlockView.prototype.blockMargin = function (blockMargin, trans) {
        if (blockMargin === undefined) {
            return this._blockMargin;
        }
        else {
            this._blockMargin = blockMargin;
            return this;
        }
    };
    BlockView.prototype.blockWidth = function (blockWidth, trans) {
        if (blockWidth === undefined) {
            return this._blockWidth;
        }
        else {
            this._blockWidth = blockWidth;
            return this;
        }
    };
    BlockView.prototype.blockHeight = function (blockHeight, trans) {
        if (blockHeight === undefined) {
            return this._blockHeight;
        }
        else {
            this._blockHeight = blockHeight;
            return this;
        }
    };
    BlockView.prototype.reflowTransition = function (reflowTransition) {
        if (reflowTransition === undefined) {
            return this._reflowTransition || null;
        }
        else {
            this._reflowTransition = reflowTransition || undefined;
            return this;
        }
    };
    BlockView.prototype.pieces = function () {
        var pieces = [];
        for (var i = 0; i < this._childViews.length; i += 1) {
            var child = this._childViews[i];
            if (child instanceof PieceView) {
                pieces.push(child);
            }
        }
        return pieces;
    };
    BlockView.prototype.addPiece = function (piece) {
        this.append(piece);
    };
    BlockView.prototype.removePiece = function (piece) {
        this.remove(piece);
    };
    BlockView.prototype.willResize = function () {
        _super.prototype.willResize.call(this);
        this.reflow();
    };
    BlockView.prototype.reflow = function () {
        var pieces = this.pieces();
        var topPiece;
        var middlePiece;
        var bottomPiece;
        var topLeftPiece;
        var topRightPiece;
        var middleLeftPiece;
        var middleRightPiece;
        var bottomLeftPiece;
        var bottomRightPiece;
        var i = 0;
        while (i < pieces.length) {
            var piece = pieces[i];
            var placement = piece.placement();
            if (!topPiece && !topLeftPiece && !topRightPiece && placement === 'top') {
                topPiece = piece;
                pieces.splice(i, 1);
            }
            else if (!middlePiece && !middleLeftPiece && !middleRightPiece && placement === 'middle') {
                middlePiece = piece;
                pieces.splice(i, 1);
            }
            else if (!bottomPiece && !bottomLeftPiece && !bottomRightPiece && placement === 'bottom') {
                bottomPiece = piece;
                pieces.splice(i, 1);
            }
            else if (!topLeftPiece && !topPiece && (!middleLeftPiece && !middleRightPiece || !bottomLeftPiece && bottomRightPiece) && placement === 'top-left') {
                topLeftPiece = piece;
                pieces.splice(i, 1);
            }
            else if (!topRightPiece && !topPiece && (!middleLeftPiece && !middleRightPiece || !bottomLeftPiece && bottomRightPiece) && placement === 'top-right') {
                topRightPiece = piece;
                pieces.splice(i, 1);
            }
            else if (!middleLeftPiece && !middlePiece && (!topLeftPiece && !topRightPiece || !bottomLeftPiece && !bottomRightPiece) && placement === 'middle-left') {
                middleLeftPiece = piece;
                pieces.splice(i, 1);
            }
            else if (!middleRightPiece && !middlePiece && (!topLeftPiece && !topRightPiece || !bottomLeftPiece && !bottomRightPiece) && placement === 'middle-right') {
                middleRightPiece = piece;
                pieces.splice(i, 1);
            }
            else if (!bottomLeftPiece && !bottomPiece && (!middleLeftPiece && !middleRightPiece || !topLeftPiece && !topRightPiece) && placement === 'bottom-left') {
                bottomLeftPiece = piece;
                pieces.splice(i, 1);
            }
            else if (!bottomRightPiece && !bottomPiece && (!middleLeftPiece && !middleRightPiece || !topLeftPiece && !topRightPiece) && placement === 'bottom-right') {
                bottomRightPiece = piece;
                pieces.splice(i, 1);
            }
            else {
                i += 1;
            }
        }
        i = 0;
        while (i < pieces.length) {
            var piece = pieces[i];
            var proportion = piece.proportion();
            if (proportion === 'square') {
                if (!topLeftPiece && topRightPiece) {
                    topLeftPiece = piece;
                    pieces.splice(i, 1);
                }
                else if (!topRightPiece && topLeftPiece) {
                    topRightPiece = piece;
                    pieces.splice(i, 1);
                }
                else if (!middleLeftPiece && middleRightPiece) {
                    middleLeftPiece = piece;
                    pieces.splice(i, 1);
                }
                else if (!middleRightPiece && middleLeftPiece) {
                    middleRightPiece = piece;
                    pieces.splice(i, 1);
                }
                else if (!bottomLeftPiece && bottomRightPiece) {
                    bottomLeftPiece = piece;
                    pieces.splice(i, 1);
                }
                else if (!bottomRightPiece && bottomLeftPiece) {
                    bottomRightPiece = piece;
                    pieces.splice(i, 1);
                }
                else if (!topLeftPiece && !topPiece) {
                    topLeftPiece = piece;
                    pieces.splice(i, 1);
                }
                else if (!bottomLeftPiece && !bottomPiece) {
                    bottomLeftPiece = piece;
                    pieces.splice(i, 1);
                }
                else if (!middleLeftPiece && !middlePiece) {
                    middleLeftPiece = piece;
                    pieces.splice(i, 1);
                }
                else {
                    i += 1;
                }
            }
            else {
                i += 1;
            }
        }
        while (pieces.length) {
            var piece = pieces.shift();
            if (!topPiece && !topLeftPiece && !topRightPiece) {
                topPiece = piece;
            }
            else if (!bottomPiece && !bottomLeftPiece && !bottomRightPiece) {
                bottomPiece = piece;
            }
            else if (!middlePiece && !middleLeftPiece && !middleRightPiece) {
                middlePiece = piece;
            }
        }
        var trans = this._reflowTransition;
        if ((topLeftPiece || topRightPiece) && (middleLeftPiece || middleRightPiece)) {
            this.layout221(topLeftPiece, topRightPiece, middleLeftPiece, middleRightPiece, bottomPiece, trans);
        }
        else if ((topLeftPiece || topRightPiece) && (bottomLeftPiece || bottomRightPiece)) {
            this.layout212(topLeftPiece, topRightPiece, middlePiece, bottomLeftPiece, bottomRightPiece, trans);
        }
        else if ((middleLeftPiece || middleRightPiece) && (bottomLeftPiece || bottomRightPiece)) {
            this.layout122(topPiece, middleLeftPiece, middleRightPiece, bottomLeftPiece, bottomRightPiece, trans);
        }
        else if ((topLeftPiece || topRightPiece) && middlePiece && bottomPiece) {
            this.layout211(topLeftPiece, topRightPiece, middlePiece, bottomPiece, trans);
        }
        else if (topPiece && (middleLeftPiece || middleRightPiece) && bottomPiece) {
            this.layout121(topPiece, middleLeftPiece, middleRightPiece, bottomPiece, trans);
        }
        else if (topPiece && middlePiece && (bottomLeftPiece || bottomRightPiece)) {
            this.layout112(topPiece, middlePiece, bottomLeftPiece, bottomRightPiece, trans);
        }
        else if (topLeftPiece || topRightPiece) {
            this.layout21(topLeftPiece, topRightPiece, bottomPiece || middlePiece, trans);
        }
        else if (bottomLeftPiece || bottomRightPiece) {
            this.layout12(topPiece || middlePiece, bottomLeftPiece, bottomRightPiece, trans);
        }
        else if (middleLeftPiece || middleRightPiece) {
            this.layout121(topPiece, middleLeftPiece, middleRightPiece, bottomPiece, trans);
        }
        else if (topPiece && middlePiece && bottomPiece) {
            this.layout111(topPiece, middlePiece, bottomPiece, trans);
        }
        else if (topPiece && (middlePiece || bottomPiece) || bottomPiece) {
            this.layout11(topPiece, middlePiece || bottomPiece, trans);
        }
        else if (middlePiece && bottomPiece) {
            this.layout11(middlePiece, bottomPiece, trans);
        }
        else if (topPiece || middlePiece || bottomPiece) {
            this.layout1(topPiece || middlePiece || bottomPiece, trans);
        }
    };
    BlockView.prototype.layout1 = function (piece, trans) {
        if (piece) {
            piece.position('absolute')
                .left(0)
                .top(0)
                .width(this._blockWidth, trans)
                .height(this._blockHeight, trans)
                .pieceMargin(this._blockMargin, trans)
                .pieceWidth(this._blockWidth, trans)
                .pieceHeight(this._blockHeight, trans)
                .reflowTransition(trans || null);
        }
    };
    BlockView.prototype.layout11 = function (topPiece, bottomPiece, trans) {
        var pieceHeight = Math.round((this._blockHeight - this._blockMargin) / 2);
        if (topPiece) {
            topPiece.position('absolute')
                .left(0, trans)
                .top(0, trans)
                .width(this._blockWidth, trans)
                .height(pieceHeight, trans)
                .pieceMargin(this._blockMargin, trans)
                .pieceWidth(this._blockWidth, trans)
                .pieceHeight(pieceHeight, trans)
                .reflowTransition(trans || null);
        }
        if (bottomPiece) {
            bottomPiece.position('absolute')
                .left(0, trans)
                .top(this._blockHeight - pieceHeight, trans)
                .width(this._blockWidth, trans)
                .height(pieceHeight, trans)
                .pieceMargin(this._blockMargin, trans)
                .pieceWidth(this._blockWidth, trans)
                .pieceHeight(pieceHeight, trans)
                .reflowTransition(trans || null);
        }
    };
    BlockView.prototype.layout111 = function (topPiece, middlePiece, bottomPiece, trans) {
        var pieceHeight = Math.round((this._blockHeight - 2 * this._blockMargin) / 3);
        if (topPiece) {
            topPiece.position('absolute')
                .left(0, trans)
                .top(0, trans)
                .width(this._blockWidth, trans)
                .height(pieceHeight, trans)
                .pieceMargin(this._blockMargin, trans)
                .pieceWidth(this._blockWidth, trans)
                .pieceHeight(pieceHeight, trans)
                .reflowTransition(trans || null);
        }
        if (middlePiece) {
            middlePiece.position('absolute')
                .left(0, trans)
                .top(pieceHeight + this._blockMargin, trans)
                .width(this._blockWidth, trans)
                .height(pieceHeight, trans)
                .pieceMargin(this._blockMargin, trans)
                .pieceWidth(this._blockWidth, trans)
                .pieceHeight(pieceHeight, trans)
                .reflowTransition(trans || null);
        }
        if (bottomPiece) {
            bottomPiece.position('absolute')
                .left(0, trans)
                .top(this._blockHeight - pieceHeight, trans)
                .width(this._blockWidth, trans)
                .height(pieceHeight, trans)
                .pieceMargin(this._blockMargin, trans)
                .pieceWidth(this._blockWidth, trans)
                .pieceHeight(pieceHeight, trans)
                .reflowTransition(trans || null);
        }
    };
    BlockView.prototype.layout12 = function (topPiece, bottomLeftPiece, bottomRightPiece, trans) {
        var lowerPieceSize = Math.round((this._blockWidth - this._blockMargin) / 2);
        if (topPiece) {
            topPiece.position('absolute')
                .left(0, trans)
                .top(0, trans)
                .width(this._blockWidth, trans)
                .height(this._blockHeight - lowerPieceSize - this._blockMargin, trans)
                .pieceMargin(this._blockMargin, trans)
                .pieceWidth(this._blockWidth, trans)
                .pieceHeight(this._blockHeight - lowerPieceSize - this._blockMargin, trans)
                .reflowTransition(trans || null);
        }
        if (bottomLeftPiece) {
            bottomLeftPiece.position('absolute')
                .left(0, trans)
                .top(this._blockHeight - lowerPieceSize, trans)
                .width(lowerPieceSize, trans)
                .height(lowerPieceSize, trans)
                .pieceMargin(this._blockMargin, trans)
                .pieceWidth(lowerPieceSize, trans)
                .pieceHeight(lowerPieceSize, trans)
                .reflowTransition(trans || null);
        }
        if (bottomRightPiece) {
            bottomRightPiece.position('absolute')
                .left(this._blockWidth - lowerPieceSize, trans)
                .top(this._blockHeight - lowerPieceSize, trans)
                .width(lowerPieceSize, trans)
                .height(lowerPieceSize, trans)
                .pieceMargin(this._blockMargin, trans)
                .pieceWidth(lowerPieceSize, trans)
                .pieceHeight(lowerPieceSize, trans)
                .reflowTransition(trans || null);
        }
    };
    BlockView.prototype.layout21 = function (topLeftPiece, topRightPiece, bottomPiece, trans) {
        var upperPieceSize = Math.round((this._blockWidth - this._blockMargin) / 2);
        if (topLeftPiece) {
            topLeftPiece.position('absolute')
                .left(0, trans)
                .top(0, trans)
                .width(upperPieceSize, trans)
                .height(upperPieceSize, trans)
                .pieceMargin(this._blockMargin, trans)
                .pieceWidth(upperPieceSize, trans)
                .pieceHeight(upperPieceSize, trans)
                .reflowTransition(trans || null);
        }
        if (topRightPiece) {
            topRightPiece.position('absolute')
                .left(this._blockWidth - upperPieceSize, trans)
                .top(0, trans)
                .width(upperPieceSize, trans)
                .height(upperPieceSize, trans)
                .pieceMargin(this._blockMargin, trans)
                .pieceWidth(upperPieceSize, trans)
                .pieceHeight(upperPieceSize, trans)
                .reflowTransition(trans || null);
        }
        if (bottomPiece) {
            bottomPiece.position('absolute')
                .left(0, trans)
                .top(upperPieceSize + this._blockMargin, trans)
                .width(this._blockWidth, trans)
                .height(this._blockHeight - (upperPieceSize + this._blockMargin), trans)
                .pieceMargin(this._blockMargin, trans)
                .pieceWidth(this._blockWidth, trans)
                .pieceHeight(this._blockHeight - (upperPieceSize + this._blockMargin), trans)
                .reflowTransition(trans || null);
        }
    };
    BlockView.prototype.layout112 = function (topPiece, middlePiece, bottomLeftPiece, bottomRightPiece, trans) {
        var lowerPieceSize = Math.round((this._blockWidth - this._blockMargin) / 2);
        var upperPieceHeight = Math.round((this._blockHeight - lowerPieceSize - 2 * this._blockMargin) / 2);
        if (topPiece) {
            topPiece.position('absolute')
                .left(0, trans)
                .top(0, trans)
                .width(this._blockWidth, trans)
                .height(upperPieceHeight, trans)
                .pieceMargin(this._blockMargin, trans)
                .pieceWidth(this._blockWidth, trans)
                .pieceHeight(upperPieceHeight, trans)
                .reflowTransition(trans || null);
        }
        if (middlePiece) {
            middlePiece.position('absolute')
                .left(0, trans)
                .top(upperPieceHeight + this._blockMargin, trans)
                .width(this._blockWidth, trans)
                .height(upperPieceHeight, trans)
                .pieceMargin(this._blockMargin, trans)
                .pieceWidth(this._blockWidth, trans)
                .pieceHeight(upperPieceHeight, trans)
                .reflowTransition(trans || null);
        }
        if (bottomLeftPiece) {
            bottomLeftPiece.position('absolute')
                .left(0, trans)
                .top(this._blockHeight - lowerPieceSize, trans)
                .width(lowerPieceSize, trans)
                .height(lowerPieceSize, trans)
                .pieceMargin(this._blockMargin, trans)
                .pieceWidth(lowerPieceSize, trans)
                .pieceHeight(lowerPieceSize, trans)
                .reflowTransition(trans || null);
        }
        if (bottomRightPiece) {
            bottomRightPiece.position('absolute')
                .left(this._blockWidth - lowerPieceSize, trans)
                .top(this._blockHeight - lowerPieceSize, trans)
                .width(lowerPieceSize, trans)
                .height(lowerPieceSize, trans)
                .pieceMargin(this._blockMargin, trans)
                .pieceWidth(lowerPieceSize, trans)
                .pieceHeight(lowerPieceSize, trans)
                .reflowTransition(trans || null);
        }
    };
    BlockView.prototype.layout121 = function (topPiece, middleLeftPiece, middleRightPiece, bottomPiece, trans) {
        var middlePieceSize = Math.round((this._blockWidth - this._blockMargin) / 2);
        var outerPieceHeight = Math.round((this._blockHeight - middlePieceSize - 2 * this._blockMargin) / 2);
        if (topPiece) {
            topPiece.position('absolute')
                .left(0, trans)
                .top(0, trans)
                .width(this._blockWidth, trans)
                .height(outerPieceHeight, trans)
                .pieceMargin(this._blockMargin, trans)
                .pieceWidth(this._blockWidth, trans)
                .pieceHeight(outerPieceHeight, trans)
                .reflowTransition(trans || null);
        }
        if (middleLeftPiece) {
            middleLeftPiece.position('absolute')
                .left(0, trans)
                .top(outerPieceHeight + this._blockMargin, trans)
                .width(middlePieceSize, trans)
                .height(middlePieceSize, trans)
                .pieceMargin(this._blockMargin, trans)
                .pieceWidth(middlePieceSize, trans)
                .pieceHeight(middlePieceSize, trans)
                .reflowTransition(trans || null);
        }
        if (middleRightPiece) {
            middleRightPiece.position('absolute')
                .left(this._blockWidth - middlePieceSize, trans)
                .top(outerPieceHeight + this._blockMargin, trans)
                .width(middlePieceSize, trans)
                .height(middlePieceSize, trans)
                .pieceMargin(this._blockMargin, trans)
                .pieceWidth(middlePieceSize, trans)
                .pieceHeight(middlePieceSize, trans)
                .reflowTransition(trans || null);
        }
        if (bottomPiece) {
            bottomPiece.position('absolute')
                .left(0, trans)
                .top(this._blockHeight - outerPieceHeight, trans)
                .width(this._blockWidth, trans)
                .height(outerPieceHeight, trans)
                .pieceMargin(this._blockMargin, trans)
                .pieceWidth(this._blockWidth, trans)
                .pieceHeight(outerPieceHeight, trans)
                .reflowTransition(trans || null);
        }
    };
    BlockView.prototype.layout211 = function (topLeftPiece, topRightPiece, middlePiece, bottomPiece, trans) {
        var upperPieceSize = Math.round((this._blockWidth - this._blockMargin) / 2);
        var lowerPieceHeight = Math.round((this._blockHeight - upperPieceSize - 2 * this._blockMargin) / 2);
        if (topLeftPiece) {
            topLeftPiece.position('absolute')
                .left(0, trans)
                .top(0, trans)
                .width(upperPieceSize, trans)
                .height(upperPieceSize, trans)
                .pieceMargin(this._blockMargin, trans)
                .pieceWidth(upperPieceSize, trans)
                .pieceHeight(upperPieceSize, trans)
                .reflowTransition(trans || null);
        }
        if (topRightPiece) {
            topRightPiece.position('absolute')
                .left(this._blockWidth - upperPieceSize, trans)
                .top(0, trans)
                .width(upperPieceSize, trans)
                .height(upperPieceSize, trans)
                .pieceMargin(this._blockMargin, trans)
                .pieceWidth(upperPieceSize, trans)
                .pieceHeight(upperPieceSize, trans)
                .reflowTransition(trans || null);
        }
        if (middlePiece) {
            middlePiece.position('absolute')
                .left(0, trans)
                .top(upperPieceSize + this._blockMargin, trans)
                .width(this._blockWidth, trans)
                .height(lowerPieceHeight, trans)
                .pieceMargin(this._blockMargin, trans)
                .pieceWidth(this._blockWidth, trans)
                .pieceHeight(lowerPieceHeight, trans)
                .reflowTransition(trans || null);
        }
        if (bottomPiece) {
            bottomPiece.position('absolute')
                .left(0, trans)
                .top(this._blockHeight - lowerPieceHeight, trans)
                .width(this._blockWidth, trans)
                .height(lowerPieceHeight, trans)
                .pieceMargin(this._blockMargin, trans)
                .pieceWidth(this._blockWidth, trans)
                .pieceHeight(lowerPieceHeight, trans)
                .reflowTransition(trans || null);
        }
    };
    BlockView.prototype.layout122 = function (topPiece, middleLeftPiece, middleRightPiece, bottomLeftPiece, bottomRightPiece, trans) {
        var squarePieceSize = Math.round((this._blockWidth - this._blockMargin) / 2);
        var upperPieceHeight = Math.round(this._blockHeight - 2 * squarePieceSize - 2 * this._blockMargin);
        if (topPiece) {
            topPiece.position('absolute')
                .left(0, trans)
                .top(0, trans)
                .width(this._blockWidth, trans)
                .height(upperPieceHeight, trans)
                .pieceMargin(this._blockMargin, trans)
                .pieceWidth(this._blockWidth, trans)
                .pieceHeight(upperPieceHeight, trans)
                .reflowTransition(trans || null);
        }
        if (middleLeftPiece) {
            middleLeftPiece.position('absolute')
                .left(0, trans)
                .top(upperPieceHeight + this._blockMargin, trans)
                .width(squarePieceSize, trans)
                .height(squarePieceSize, trans)
                .pieceMargin(this._blockMargin, trans)
                .pieceWidth(squarePieceSize, trans)
                .pieceHeight(squarePieceSize, trans)
                .reflowTransition(trans || null);
        }
        if (middleRightPiece) {
            middleRightPiece.position('absolute')
                .left(this._blockWidth - squarePieceSize, trans)
                .top(upperPieceHeight + this._blockMargin, trans)
                .width(squarePieceSize, trans)
                .height(squarePieceSize, trans)
                .pieceMargin(this._blockMargin, trans)
                .pieceWidth(squarePieceSize, trans)
                .pieceHeight(squarePieceSize, trans)
                .reflowTransition(trans || null);
        }
        if (bottomLeftPiece) {
            bottomLeftPiece.position('absolute')
                .left(0, trans)
                .top(this._blockHeight - squarePieceSize, trans)
                .width(squarePieceSize, trans)
                .height(squarePieceSize, trans)
                .pieceMargin(this._blockMargin, trans)
                .pieceWidth(squarePieceSize, trans)
                .pieceHeight(squarePieceSize, trans)
                .reflowTransition(trans || null);
        }
        if (bottomRightPiece) {
            bottomRightPiece.position('absolute')
                .left(this._blockWidth - squarePieceSize, trans)
                .top(this._blockHeight - squarePieceSize, trans)
                .width(squarePieceSize, trans)
                .height(squarePieceSize, trans)
                .pieceMargin(this._blockMargin, trans)
                .pieceWidth(squarePieceSize, trans)
                .pieceHeight(squarePieceSize, trans)
                .reflowTransition(trans || null);
        }
    };
    BlockView.prototype.layout212 = function (topLeftPiece, topRightPiece, middlePiece, bottomLeftPiece, bottomRightPiece, trans) {
        var squarePieceSize = Math.round((this._blockWidth - this._blockMargin) / 2);
        var middlePieceHeight = Math.round(this._blockHeight - 2 * squarePieceSize - 2 * this._blockMargin);
        if (topLeftPiece) {
            topLeftPiece.position('absolute')
                .left(0, trans)
                .top(0, trans)
                .width(squarePieceSize, trans)
                .height(squarePieceSize, trans)
                .pieceMargin(this._blockMargin, trans)
                .pieceWidth(squarePieceSize, trans)
                .pieceHeight(squarePieceSize, trans)
                .reflowTransition(trans || null);
        }
        if (topRightPiece) {
            topRightPiece.position('absolute')
                .left(this._blockWidth - squarePieceSize, trans)
                .top(0, trans)
                .width(squarePieceSize, trans)
                .height(squarePieceSize, trans)
                .pieceMargin(this._blockMargin, trans)
                .pieceWidth(squarePieceSize, trans)
                .pieceHeight(squarePieceSize, trans)
                .reflowTransition(trans || null);
        }
        if (middlePiece) {
            middlePiece.position('absolute')
                .left(0, trans)
                .top(squarePieceSize + this._blockMargin, trans)
                .width(this._blockWidth, trans)
                .height(middlePieceHeight, trans)
                .pieceMargin(this._blockMargin, trans)
                .pieceWidth(this._blockWidth, trans)
                .pieceHeight(middlePieceHeight, trans)
                .reflowTransition(trans || null);
        }
        if (bottomLeftPiece) {
            bottomLeftPiece.position('absolute')
                .left(0, trans)
                .top(this._blockHeight - squarePieceSize, trans)
                .width(squarePieceSize, trans)
                .height(squarePieceSize, trans)
                .pieceMargin(this._blockMargin, trans)
                .pieceWidth(squarePieceSize, trans)
                .pieceHeight(squarePieceSize, trans)
                .reflowTransition(trans || null);
        }
        if (bottomRightPiece) {
            bottomRightPiece.position('absolute')
                .left(this._blockWidth - squarePieceSize, trans)
                .top(this._blockHeight - squarePieceSize, trans)
                .width(squarePieceSize, trans)
                .height(squarePieceSize, trans)
                .pieceMargin(this._blockMargin, trans)
                .pieceWidth(squarePieceSize, trans)
                .pieceHeight(squarePieceSize, trans)
                .reflowTransition(trans || null);
        }
    };
    BlockView.prototype.layout221 = function (topLeftPiece, topRightPiece, middleLeftPiece, middleRightPiece, bottomPiece, trans) {
        var squarePieceSize = Math.round((this._blockWidth - this._blockMargin) / 2);
        var lowerPieceHeight = Math.round(this._blockHeight - 2 * squarePieceSize - 2 * this._blockMargin);
        if (topLeftPiece) {
            topLeftPiece.position('absolute')
                .left(0, trans)
                .top(0, trans)
                .width(squarePieceSize, trans)
                .height(squarePieceSize, trans)
                .pieceMargin(this._blockMargin, trans)
                .pieceWidth(squarePieceSize, trans)
                .pieceHeight(squarePieceSize, trans)
                .reflowTransition(trans || null);
        }
        if (topRightPiece) {
            topRightPiece.position('absolute')
                .left(this._blockWidth - squarePieceSize, trans)
                .top(0, trans)
                .width(squarePieceSize, trans)
                .height(squarePieceSize, trans)
                .pieceMargin(this._blockMargin, trans)
                .pieceWidth(squarePieceSize, trans)
                .pieceHeight(squarePieceSize, trans)
                .reflowTransition(trans || null);
        }
        if (middleLeftPiece) {
            middleLeftPiece.position('absolute')
                .left(0, trans)
                .top(squarePieceSize + this._blockMargin, trans)
                .width(squarePieceSize, trans)
                .height(squarePieceSize, trans)
                .pieceMargin(this._blockMargin, trans)
                .pieceWidth(squarePieceSize, trans)
                .pieceHeight(squarePieceSize, trans)
                .reflowTransition(trans || null);
        }
        if (middleRightPiece) {
            middleRightPiece.position('absolute')
                .left(this._blockWidth - squarePieceSize, trans)
                .top(squarePieceSize + this._blockMargin, trans)
                .width(squarePieceSize, trans)
                .height(squarePieceSize, trans)
                .pieceMargin(this._blockMargin, trans)
                .pieceWidth(squarePieceSize, trans)
                .pieceHeight(squarePieceSize, trans)
                .reflowTransition(trans || null);
        }
        if (bottomPiece) {
            bottomPiece.position('absolute')
                .left(0, trans)
                .top(this._blockHeight - lowerPieceHeight, trans)
                .width(this._blockWidth, trans)
                .height(lowerPieceHeight, trans)
                .pieceMargin(this._blockMargin, trans)
                .pieceWidth(this._blockWidth, trans)
                .pieceHeight(lowerPieceHeight, trans)
                .reflowTransition(trans || null);
        }
    };
    BlockView.create = function () {
        var node = document.createElement('div');
        return new BlockView(node).className('block');
    };
    return BlockView;
}(HtmlView));

var BlockModel = (function (_super) {
    __extends(BlockModel, _super);
    function BlockModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return BlockModel;
}(HtmlModel));

var BlockForm = (function (_super) {
    __extends(BlockForm, _super);
    function BlockForm() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(BlockForm.prototype, "tag", {
        get: function () {
            return 'block';
        },
        enumerable: true,
        configurable: true
    });
    BlockForm.prototype.castView = function (value, stack, factory) {
        if (value.tag === this.tag) {
            var view = BlockView.create();
            var modelDef = this.materializeView(view, value, stack, factory);
            view.setModel(modelDef);
            return view;
        }
        return undefined;
    };
    BlockForm.prototype.castModel = function (value, stack, factory) {
        if (value.tag === this.tag) {
            var model = new BlockModel();
            var dataDef = this.materializeModel(model, value, stack, factory);
            model.setData(dataDef);
            return model;
        }
        return undefined;
    };
    BlockForm.prototype.materializeViewParam = function (view, param, stack, factory) {
        var piece = PieceForm.Global.castView(param.toValue(), stack, factory);
        if (piece) {
            view.addPiece(piece);
            return piece;
        }
        return _super.prototype.materializeViewParam.call(this, view, param, stack, factory);
    };
    BlockForm.prototype.materializeModelParam = function (model, param, stack, factory) {
        if (param instanceof Attr && param.key.value === this.tag) {
            return Item.Absent;
        }
        return _super.prototype.materializeModelParam.call(this, model, param, stack, factory);
    };
    BlockForm.Form = new BlockForm();
    return BlockForm;
}(HtmlForm));
UiForm.addGlobal(BlockForm.Form);

var QuiltView = (function (_super) {
    __extends(QuiltView, _super);
    function QuiltView(node) {
        var _this = _super.call(this, node) || this;
        _this._blockMarginScale = Scale.linear(320, 540, 8, 16);
        _this._blockAspectRatio = Math.sqrt(2);
        _this._minBlockWidth = 480;
        _this._maxColCount = 4;
        _this._reflowTransition = new Transition(250, Ease.quadOut);
        _this._transitionEnd = 0;
        _this._blockMargin = NaN;
        _this._blockWidth = NaN;
        _this._blockHeight = NaN;
        _this._colCount = NaN;
        _this.flexGrow(1);
        return _this;
    }
    QuiltView.prototype.blockMarginScale = function (blockMarginScale) {
        if (blockMarginScale === undefined) {
            return this._blockMarginScale;
        }
        else {
            if (this._blockMarginScale !== blockMarginScale) {
                this._blockMarginScale = blockMarginScale;
                this.requireResize();
            }
            return this;
        }
    };
    QuiltView.prototype.blockAspectRatio = function (blockAspectRatio) {
        if (blockAspectRatio === undefined) {
            return this._blockAspectRatio;
        }
        else {
            if (this._blockAspectRatio !== blockAspectRatio) {
                this._blockAspectRatio = blockAspectRatio;
                this.requireResize();
            }
            return this;
        }
    };
    QuiltView.prototype.minBlockWidth = function (minBlockWidth) {
        if (minBlockWidth === undefined) {
            return this._minBlockWidth;
        }
        else {
            if (this._minBlockWidth !== minBlockWidth) {
                this._minBlockWidth = minBlockWidth;
                this.requireResize();
            }
            return this;
        }
    };
    QuiltView.prototype.maxColCount = function (maxColCount) {
        if (maxColCount === undefined) {
            return this._maxColCount;
        }
        else {
            if (this._maxColCount !== maxColCount) {
                this._maxColCount = maxColCount;
                this.requireResize();
            }
            return this;
        }
    };
    QuiltView.prototype.reflowTransition = function (reflowTransition) {
        if (reflowTransition === undefined) {
            return this._reflowTransition || null;
        }
        else {
            this._reflowTransition = reflowTransition || undefined;
            return this;
        }
    };
    QuiltView.prototype.blocks = function () {
        var blocks = [];
        for (var i = 0; i < this._childViews.length; i += 1) {
            var child = this._childViews[i];
            if (child instanceof BlockView) {
                blocks.push(child);
            }
        }
        return blocks;
    };
    QuiltView.prototype.addBlock = function (block) {
        this.append(block);
    };
    QuiltView.prototype.removeBlock = function (block) {
        this.remove(block);
    };
    QuiltView.prototype.willResize = function () {
        _super.prototype.willResize.call(this);
        this.reflow();
    };
    QuiltView.prototype.reflow = function () {
        var width = this.node.offsetWidth;
        var blockMargin = Math.round(this._blockMarginScale.clampScale(width));
        var blockWidth = NaN;
        var colCount = 1;
        do {
            var prevBlockWidth = blockWidth;
            blockWidth = Math.round((width - blockMargin * (colCount + 1)) / colCount);
            if (blockWidth >= this._minBlockWidth && colCount < this._maxColCount) {
                colCount += 1;
            }
            else {
                if (colCount > 1) {
                    blockWidth = prevBlockWidth;
                    colCount -= 1;
                }
                break;
            }
        } while (true);
        if (isFinite(blockMargin) && isFinite(blockWidth)) {
            var blockHeight = Math.round(blockWidth * this._blockAspectRatio);
            var trans = void 0;
            if (this._reflowTransition) {
                var t = Date.now();
                if (this._colCount !== colCount) {
                    this._transitionEnd = t + (this._reflowTransition.duration() || 0);
                }
                if (t < this._transitionEnd) {
                    trans = this._reflowTransition.duration(this._transitionEnd - t);
                }
            }
            this._blockMargin = blockMargin;
            this._blockWidth = blockWidth;
            this._blockHeight = blockHeight;
            this._colCount = colCount;
            var left = blockMargin;
            var top_1 = blockMargin;
            var i = 0;
            while (i < this._childViews.length) {
                var block = this._childViews[i];
                if (block instanceof BlockView) {
                    block.position('absolute')
                        .left(left, trans)
                        .top(top_1, trans)
                        .width(blockWidth, trans)
                        .height(blockHeight, trans)
                        .blockMargin(blockMargin, trans)
                        .blockWidth(blockWidth)
                        .blockHeight(blockHeight)
                        .reflowTransition(trans || null);
                    i += 1;
                    if (i % colCount !== 0) {
                        left += blockWidth + blockMargin;
                    }
                    else {
                        left = blockMargin;
                        top_1 += blockHeight + blockMargin;
                    }
                }
            }
            if (i % colCount !== 0) {
                top_1 += blockHeight + blockMargin;
            }
            this.height(top_1);
        }
    };
    QuiltView.prototype.didSetState = function (newState, oldState) {
        _super.prototype.didSetState.call(this, newState, oldState);
        var blockAspectRatio = newState.get('blockAspectRatio').numberValue();
        if (blockAspectRatio !== undefined) {
            this.blockAspectRatio(blockAspectRatio);
        }
        var blockMarginScale = newState.get('blockMarginScale').cast(ContinuousScale.Form);
        if (blockMarginScale) {
            this.blockMarginScale(blockMarginScale);
        }
        var minBlockWidth = newState.get('minBlockWidth').numberValue();
        if (minBlockWidth !== undefined) {
            this.minBlockWidth(minBlockWidth);
        }
        var maxColCount = newState.get('maxColCount').numberValue();
        if (maxColCount !== undefined) {
            this.minBlockWidth(maxColCount);
        }
        var reflowTransition = newState.get('reflowTransition').cast(Transition.Form);
        if (reflowTransition) {
            this.reflowTransition(reflowTransition);
        }
    };
    QuiltView.create = function () {
        var node = document.createElement('div');
        return new QuiltView(node).className('quilt');
    };
    QuiltView.applyTheme = function (theme) {
        var card = Record.empty()
            .slot('marginTop', '4px')
            .slot('marginRight', '8px')
            .slot('marginBottom', '8px')
            .slot('marginLeft', '4px')
            .slot('titleSize', '12px')
            .slot('titleColor', Selector.get('textColor'))
            .slot('subtitleSize', '10px')
            .slot('subtitleColor', Selector.get('textColor'));
        var quilt = Record.empty()
            .slot('card', card);
        theme.set('quilt', quilt);
    };
    return QuiltView;
}(HtmlView));
QuiltView.applyTheme(QuiltView.Theme);

var QuiltModel = (function (_super) {
    __extends(QuiltModel, _super);
    function QuiltModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    QuiltModel.Params = HtmlModel.Params.concat([
        new ModelParam('blockMarginScale', Selector.get('blockMarginScale').or(Selector.get('quilt').get('blockMarginScale'))),
        new ModelParam('blockAspectRatio', Selector.get('blockAspectRatio').or(Selector.get('quilt').get('blockAspectRatio'))),
        new ModelParam('minBlockWidth', Selector.get('minBlockWidth').or(Selector.get('quilt').get('minBlockWidth'))),
        new ModelParam('maxColCount', Selector.get('maxColCount').or(Selector.get('quilt').get('maxColCount'))),
        new ModelParam('reflowTransition', Selector.get('reflowTransition').or(Selector.get('quilt').get('reflowTransition'))),
    ]);
    return QuiltModel;
}(HtmlModel));

var QuiltForm = (function (_super) {
    __extends(QuiltForm, _super);
    function QuiltForm() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(QuiltForm.prototype, "tag", {
        get: function () {
            return 'quilt';
        },
        enumerable: true,
        configurable: true
    });
    QuiltForm.prototype.castView = function (value, stack, factory) {
        if (value.tag === this.tag) {
            var view = QuiltView.create();
            var modelDef = this.materializeView(view, value, stack, factory);
            view.setModel(modelDef);
            return view;
        }
        return undefined;
    };
    QuiltForm.prototype.castModel = function (value, stack, factory) {
        if (value.tag === this.tag) {
            var model = new QuiltModel();
            var dataDef = this.materializeModel(model, value, stack, factory);
            model.setData(dataDef);
            return model;
        }
        return undefined;
    };
    QuiltForm.prototype.materializeViewParam = function (view, param, stack, factory) {
        var block = BlockForm.Form.castView(param.toValue(), stack, factory);
        if (block) {
            view.addBlock(block);
            return block;
        }
        return _super.prototype.materializeViewParam.call(this, view, param, stack, factory);
    };
    QuiltForm.prototype.materializeModelParam = function (model, param, stack, factory) {
        if (param instanceof Attr && param.key.value === this.tag) {
            return Item.Absent;
        }
        return _super.prototype.materializeModelParam.call(this, model, param, stack, factory);
    };
    QuiltForm.Form = new QuiltForm();
    return QuiltForm;
}(HtmlForm));
UiForm.addGlobal(QuiltForm.Form);

var TileView = (function (_super) {
    __extends(TileView, _super);
    function TileView(node) {
        var _this = _super.call(this, node) || this;
        _this.display('flex')
            .position('relative')
            .flexDirection('column')
            .flexGrow(1)
            .flexBasis(0)
            .width('100%')
            .height('100%');
        _this._contentView = _this.append('div')
            .display('flex')
            .position('relative')
            .flexGrow(1)
            .flexBasis(0);
        _this._bodyView = null;
        return _this;
    }
    TileView.prototype.bodyView = function (bodyView) {
        if (bodyView === undefined) {
            return this._bodyView;
        }
        else {
            if (this._bodyView !== bodyView) {
                if (this._bodyView) {
                    this._bodyView.remove();
                }
                this._bodyView = bodyView;
                if (this._bodyView) {
                    this._contentView.append(this._bodyView);
                }
            }
            return this;
        }
    };
    TileView.prototype.didSetState = function (newState, oldState) {
        _super.prototype.didSetState.call(this, newState, oldState);
        var backgroundColor = newState.get('backgroundColor').cast(Color.Form);
        if (backgroundColor) {
            this.backgroundColor(backgroundColor);
        }
        var paddingTop = newState.get('paddingTop').cast(Length.Form);
        if (paddingTop) {
            this.paddingTop(paddingTop);
        }
        var paddingRight = newState.get('paddingRight').cast(Length.Form);
        if (paddingRight) {
            this.paddingRight(paddingRight);
        }
        var paddingBottom = newState.get('paddingBottom').cast(Length.Form);
        if (paddingBottom) {
            this.paddingBottom(paddingBottom);
        }
        var paddingLeft = newState.get('paddingLeft').cast(Length.Form);
        if (paddingLeft) {
            this.paddingLeft(paddingLeft);
        }
    };
    TileView.create = function () {
        var node = document.createElement('div');
        return new TileView(node).className('tile');
    };
    TileView.applyTheme = function (theme) {
        var tile = Record.empty()
            .slot('paddingTop', '8px')
            .slot('paddingRight', '8px')
            .slot('paddingBottom', '8px')
            .slot('paddingLeft', '8px');
        theme.set('tile', tile);
    };
    return TileView;
}(HtmlView));
TileView.applyTheme(TileView.Theme);

var TileModel = (function (_super) {
    __extends(TileModel, _super);
    function TileModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TileModel.Params = HtmlModel.Params.concat([
        new ModelParam('backgroundColor', Selector.get('backgroundColor').or(Selector.get('tile').get('backgroundColor'))),
        new ModelParam('paddingTop', Selector.get('paddingTop').or(Selector.get('tile').get('paddingTop'))),
        new ModelParam('paddingRight', Selector.get('paddingRight').or(Selector.get('tile').get('paddingRight'))),
        new ModelParam('paddingBottom', Selector.get('paddingBottom').or(Selector.get('tile').get('paddingBottom'))),
        new ModelParam('paddingLeft', Selector.get('paddingLeft').or(Selector.get('tile').get('paddingLeft'))),
    ]);
    return TileModel;
}(HtmlModel));

var TileForm = (function (_super) {
    __extends(TileForm, _super);
    function TileForm() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(TileForm.prototype, "tag", {
        get: function () {
            return 'tile';
        },
        enumerable: true,
        configurable: true
    });
    TileForm.prototype.castView = function (value, stack, factory) {
        if (value.tag === this.tag) {
            var view = TileView.create();
            var modelDef = this.materializeView(view, value, stack, factory);
            view.setModel(modelDef);
            return view;
        }
        return undefined;
    };
    TileForm.prototype.castModel = function (value, stack, factory) {
        if (value.tag === this.tag) {
            var model = new TileModel();
            var dataDef = this.materializeModel(model, value, stack, factory);
            model.setData(dataDef);
            return model;
        }
        return undefined;
    };
    TileForm.prototype.materializeViewParam = function (view, param, stack, factory) {
        if (param.key instanceof Text$1) {
            var key = param.key.value;
            if (key === 'body') {
                var bodyView = factory.castView(param.toValue(), stack, factory);
                if (bodyView) {
                    view.bodyView(bodyView);
                    return view.bodyView();
                }
            }
        }
        return _super.prototype.materializeViewParam.call(this, view, param, stack, factory);
    };
    TileForm.prototype.materializeModelParam = function (model, param, stack, factory) {
        if (param instanceof Attr && param.key.value === this.tag) {
            return Item.Absent;
        }
        return _super.prototype.materializeModelParam.call(this, model, param, stack, factory);
    };
    TileForm.Form = new TileForm();
    return TileForm;
}(HtmlForm));
UiForm.addGlobal(TileForm.Form);

var ToolbarView = (function (_super) {
    __extends(ToolbarView, _super);
    function ToolbarView(node) {
        var _this = _super.call(this, node) || this;
        _this._itemSize = Length.px(32);
        _this._itemSpacing = Length.zero();
        _this.display('flex')
            .justifyContent('flex-start')
            .alignItems('center')
            .position('relative');
        return _this;
    }
    ToolbarView.prototype.itemSize = function (itemSize) {
        if (itemSize === undefined) {
            return this._itemSize;
        }
        else {
            itemSize = Length.fromAny(itemSize);
            if (!this._itemSize.equals(itemSize)) {
                this._itemSize = itemSize;
                this.requireResize();
            }
            return this;
        }
    };
    ToolbarView.prototype.itemSpacing = function (itemSpacing) {
        if (itemSpacing === undefined) {
            return this._itemSpacing;
        }
        else {
            itemSpacing = Length.fromAny(itemSpacing);
            if (!this._itemSpacing.equals(itemSpacing)) {
                this._itemSpacing = itemSpacing;
                this.requireResize();
            }
            return this;
        }
    };
    ToolbarView.prototype.didSetState = function (newState, oldState) {
        _super.prototype.didSetState.call(this, newState, oldState);
        var toolbarHeight = newState.get('toolbarHeight').cast(Length.Form);
        if (toolbarHeight) {
            this.height(toolbarHeight);
        }
        var itemSize = newState.get('itemSize').cast(Length.Form);
        if (itemSize) {
            this.itemSize(itemSize);
        }
        var itemSpacing = newState.get('itemSpacing').cast(Length.Form);
        if (itemSpacing) {
            this.itemSpacing(itemSpacing);
        }
    };
    ToolbarView.prototype.didResize = function () {
        _super.prototype.didResize.call(this);
        var itemSpacing = this._itemSpacing.pxValue();
        this.paddingLeft(itemSpacing / 2)
            .paddingRight(itemSpacing / 2);
        for (var i = 0; i < this._childViews.length; i += 1) {
            var childView = this._childViews[i];
            if (childView instanceof HtmlView) {
                childView.flexGrow(0)
                    .width(this._itemSize)
                    .height(this._itemSize)
                    .marginLeft(itemSpacing / 2)
                    .marginRight(itemSpacing / 2);
            }
        }
    };
    ToolbarView.create = function () {
        var node = document.createElement('div');
        return new ToolbarView(node).className('toolbar');
    };
    ToolbarView.applyTheme = function (theme) {
        var toolbar = Record.empty()
            .slot('height', '64px')
            .slot('itemSize', '32px')
            .slot('itemSpacing', '16px');
        theme.set('toolbar', toolbar);
    };
    return ToolbarView;
}(HtmlView));
ToolbarView.applyTheme(ToolbarView.Theme);

var ToolbarModel = (function (_super) {
    __extends(ToolbarModel, _super);
    function ToolbarModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ToolbarModel.Params = HtmlModel.Params.concat([
        new ModelParam('toolbarHeight', Selector.get('toolbarHeight').or(Selector.get('toolbar').get('height'))),
        new ModelParam('itemSize', Selector.get('itemSize').or(Selector.get('toolbar').get('itemSize'))),
        new ModelParam('itemSpacing', Selector.get('itemSpacing').or(Selector.get('toolbar').get('itemSpacing'))),
    ]);
    return ToolbarModel;
}(HtmlModel));

var ToolbarForm = (function (_super) {
    __extends(ToolbarForm, _super);
    function ToolbarForm() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(ToolbarForm.prototype, "tag", {
        get: function () {
            return 'toolbar';
        },
        enumerable: true,
        configurable: true
    });
    ToolbarForm.prototype.castView = function (value, stack, factory) {
        if (value.tag === this.tag) {
            var view = ToolbarView.create();
            var modelDef = this.materializeView(view, value, stack, factory);
            view.setModel(modelDef);
            return view;
        }
        return undefined;
    };
    ToolbarForm.prototype.castModel = function (value, stack, factory) {
        if (value.tag === this.tag) {
            var model = new ToolbarModel();
            var dataDef = this.materializeModel(model, value, stack, factory);
            model.setData(dataDef);
            return model;
        }
        return undefined;
    };
    ToolbarForm.prototype.materializeViewParam = function (view, param, stack, factory) {
        var childView = factory.castView(param.toValue(), stack, factory);
        if (childView instanceof NodeView) {
            view.append(childView);
        }
        return _super.prototype.materializeViewParam.call(this, view, param, stack, factory);
    };
    ToolbarForm.prototype.materializeModelParam = function (model, param, stack, factory) {
        if (param instanceof Attr && param.key.value === this.tag) {
            return Item.Absent;
        }
        return _super.prototype.materializeModelParam.call(this, model, param, stack, factory);
    };
    ToolbarForm.Form = new ToolbarForm();
    return ToolbarForm;
}(HtmlForm));
UiForm.addGlobal(ToolbarForm.Form);

var TotemView = (function (_super) {
    __extends(TotemView, _super);
    function TotemView(node) {
        var _this = _super.call(this, node) || this;
        _this._spacing = Length.zero();
        _this._desiredWidth = Length.zero();
        _this._minVisibleWidth = Length.zero();
        _this.display('none')
            .position('relative');
        return _this;
    }
    TotemView.prototype.spacing = function (spacing) {
        if (spacing === undefined) {
            return this._spacing;
        }
        else {
            spacing = Length.fromAny(spacing);
            if (!this._spacing.equals(spacing)) {
                this._spacing = spacing;
                this.requireResize();
            }
            return this;
        }
    };
    TotemView.prototype.desiredWidth = function (desiredWidth) {
        if (desiredWidth === undefined) {
            return this._desiredWidth;
        }
        else {
            desiredWidth = Length.fromAny(desiredWidth);
            if (!this._desiredWidth.equals(desiredWidth)) {
                this._desiredWidth = desiredWidth;
                this.requireResize();
            }
            return this;
        }
    };
    TotemView.prototype.minVisibleWidth = function (minVisibleWidth) {
        if (minVisibleWidth === undefined) {
            return this._minVisibleWidth;
        }
        else {
            minVisibleWidth = Length.fromAny(minVisibleWidth);
            if (!this._minVisibleWidth.equals(minVisibleWidth)) {
                this._minVisibleWidth = minVisibleWidth;
                this.requireResize();
            }
            return this;
        }
    };
    TotemView.prototype.didSetState = function (newState, oldState) {
        _super.prototype.didSetState.call(this, newState, oldState);
        var spacing = newState.get('spacing').cast(Length.Form);
        if (spacing) {
            this.spacing(spacing);
        }
        var desiredWidth = newState.get('desiredWidth').cast(Length.Form);
        if (desiredWidth) {
            this.desiredWidth(desiredWidth);
        }
        var minVisibleWidth = newState.get('minVisibleWidth').cast(Length.Form);
        if (minVisibleWidth) {
            this.minVisibleWidth(minVisibleWidth);
        }
    };
    TotemView.prototype.willResize = function () {
        _super.prototype.willResize.call(this);
        var childCount = this._childViews.length;
        if (childCount > 0) {
            var parentNode = this.node.parentNode;
            var parentWidth = parentNode instanceof HTMLElement ? parentNode.offsetWidth : 0;
            var parentHeight = parentNode instanceof HTMLElement ? parentNode.offsetHeight : 0;
            var desiredWidth = this._desiredWidth.pxValue(parentWidth);
            var spacing = this._spacing.pxValue(desiredWidth);
            var childWidth = Math.max(0, desiredWidth - 2 * spacing);
            if (childWidth * childCount + spacing * (childCount + 1) > parentHeight) {
                childWidth = Math.max(0, (parentHeight - spacing * (childCount + 1)) / childCount);
                desiredWidth = childWidth + 2 * spacing;
            }
            var minVisibleWidth = this._minVisibleWidth.pxValue(parentWidth);
            if (desiredWidth >= minVisibleWidth) {
                this.display('block')
                    .width(desiredWidth)
                    .flexBasis(null);
                var k = childCount - 1;
                for (var i = 0; i < childCount; i += 1) {
                    var childView = this._childViews[i];
                    if (childView instanceof HtmlView) {
                        childView.position('absolute')
                            .left(spacing)
                            .right(spacing)
                            .bottom(k * childWidth + (k + 1) * spacing)
                            .width(childWidth)
                            .height(childWidth)
                            .boxSizing('border-box');
                        k -= 1;
                    }
                }
            }
            else {
                this.display('none');
            }
        }
    };
    TotemView.create = function () {
        var node = document.createElement('div');
        return new TotemView(node).className('totem');
    };
    return TotemView;
}(HtmlView));

var TotemModel = (function (_super) {
    __extends(TotemModel, _super);
    function TotemModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TotemModel.Params = HtmlModel.Params.concat([
        new ModelParam('spacing', Selector.get('spacing').or(Selector.get('totem').get('spacing'))),
        new ModelParam('desiredWidth', Selector.get('desiredWidth').or(Selector.get('totem').get('desiredWidth'))),
        new ModelParam('minVisibleWidth', Selector.get('minVisibleWidth').or(Selector.get('totem').get('minVisibleWidth'))),
    ]);
    return TotemModel;
}(HtmlModel));

var TotemForm = (function (_super) {
    __extends(TotemForm, _super);
    function TotemForm() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(TotemForm.prototype, "tag", {
        get: function () {
            return 'totem';
        },
        enumerable: true,
        configurable: true
    });
    TotemForm.prototype.castView = function (value, stack, factory) {
        if (value.tag === this.tag) {
            var view = TotemView.create();
            var modelDef = this.materializeView(view, value, stack, factory);
            view.setModel(modelDef);
            return view;
        }
        return undefined;
    };
    TotemForm.prototype.castModel = function (value, stack, factory) {
        if (value.tag === this.tag) {
            var model = new TotemModel();
            var dataDef = this.materializeModel(model, value, stack, factory);
            model.setData(dataDef);
            return model;
        }
        return undefined;
    };
    TotemForm.prototype.materializeViewParam = function (view, param, stack, factory) {
        var childView = factory.castView(param.toValue(), stack, factory);
        if (childView instanceof NodeView) {
            view.append(childView);
            return childView;
        }
        return _super.prototype.materializeViewParam.call(this, view, param, stack, factory);
    };
    TotemForm.prototype.materializeModelParam = function (model, param, stack, factory) {
        if (param instanceof Attr && param.key.value === this.tag) {
            return Item.Absent;
        }
        return _super.prototype.materializeModelParam.call(this, model, param, stack, factory);
    };
    TotemForm.Form = new TotemForm();
    return TotemForm;
}(HtmlForm));
UiForm.addGlobal(TotemForm.Form);

if (typeof document !== 'undefined') {
    document.addEventListener('DOMContentLoaded', function (event) {
        UiForm.Global.materializeScripts();
    });
}
if (typeof importScripts === 'function') {
    new AppModel();
}

exports.Murmur3 = Murmur3;
exports.Random = Random;
exports.equal = equal;
exports.compare = compare;
exports.Cursor = Cursor;
exports.Input = Input;
exports.StringInput = StringInput;
exports.StringOutput = StringOutput;
exports.Iteratee = Iteratee;
exports.EvalStack = EvalStack;
exports.Item = Item;
exports.Field = Field;
exports.Attr = Attr;
exports.Slot = Slot;
exports.Value = Value;
exports.Record = Record;
exports.RecordMap = RecordMap;
exports.RecordMapView = RecordMapView;
exports.Data = Data;
exports.Text = Text$1;
exports.Num = Num;
exports.Bool = Bool;
exports.DynamicValue = DynamicValue;
exports.Func = Func;
exports.Extant = Extant;
exports.Absent = Absent;
exports.Form = Form;
exports.FormCursor = FormCursor;
exports.FormPairCursor = FormPairCursor;
exports.Recon = Recon;
exports.RecordScope = RecordScope;
exports.BTree = BTree;
exports.BTreePage = BTreePage;
exports.STree = STree;
exports.STreePage = STreePage;
exports.HashGenCacheMap = HashGenCacheMap;
exports.Uri = Uri;
exports.UriScheme = UriScheme;
exports.UriAuthority = UriAuthority;
exports.UriUser = UriUser;
exports.UriHost = UriHost;
exports.UriPort = UriPort;
exports.UriPath = UriPath;
exports.UriPathBuilder = UriPathBuilder;
exports.UriQuery = UriQuery;
exports.UriQueryBuilder = UriQueryBuilder;
exports.UriFragment = UriFragment;
exports.UriParser = UriParser;
exports.UriCache = UriCache;
exports.Selector = Selector;
exports.IdentitySelector = IdentitySelector;
exports.LiteralSelector = LiteralSelector;
exports.GetSelector = GetSelector;
exports.GetAttrSelector = GetAttrSelector;
exports.GetItemSelector = GetItemSelector;
exports.KeysSelector = KeysSelector;
exports.ChildrenSelector = ChildrenSelector;
exports.DescendantsSelector = DescendantsSelector;
exports.FilterSelector = FilterSelector;
exports.Expr = Expr;
exports.InfixExpr = InfixExpr;
exports.PrefixExpr = PrefixExpr;
exports.CondExpr = CondExpr;
exports.LorExpr = LorExpr;
exports.LandExpr = LandExpr;
exports.BorExpr = BorExpr;
exports.BxorExpr = BxorExpr;
exports.BandExpr = BandExpr;
exports.LtExpr = LtExpr;
exports.LeExpr = LeExpr;
exports.EqExpr = EqExpr;
exports.NeExpr = NeExpr;
exports.GeExpr = GeExpr;
exports.GtExpr = GtExpr;
exports.AddExpr = AddExpr;
exports.SubExpr = SubExpr;
exports.MulExpr = MulExpr;
exports.DivExpr = DivExpr;
exports.ModExpr = ModExpr;
exports.LnotExpr = LnotExpr;
exports.BnotExpr = BnotExpr;
exports.NegExpr = NegExpr;
exports.PosExpr = PosExpr;
exports.InvokeExpr = InvokeExpr;
exports.client = client;
exports.isOnline = isOnline;
exports.keepOnline = keepOnline;
exports.downlink = downlink;
exports.downlinkList = downlinkList;
exports.downlinkMap = downlinkMap;
exports.downlinkValue = downlinkValue;
exports.hostRef = hostRef;
exports.nodeRef = nodeRef;
exports.laneRef = laneRef;
exports.authenticate = authenticate;
exports.command = command;
exports.Envelope = Envelope;
exports.EventMessage = EventMessage;
exports.CommandMessage = CommandMessage;
exports.LinkRequest = LinkRequest;
exports.LinkedResponse = LinkedResponse;
exports.SyncRequest = SyncRequest;
exports.SyncedResponse = SyncedResponse;
exports.UnlinkRequest = UnlinkRequest;
exports.UnlinkedResponse = UnlinkedResponse;
exports.AuthRequest = AuthRequest;
exports.AuthedResponse = AuthedResponse;
exports.DeauthRequest = DeauthRequest;
exports.DeauthedResponse = DeauthedResponse;
exports.RemoteHost = RemoteHost;
exports.Downlink = Downlink;
exports.EventDownlink = EventDownlink;
exports.ListDownlink = ListDownlink;
exports.ListDownlinkRecord = ListDownlinkRecord;
exports.MapDownlink = MapDownlink;
exports.MapDownlinkRecord = MapDownlinkRecord;
exports.ValueDownlink = ValueDownlink;
exports.ValueDownlinkRecord = ValueDownlinkRecord;
exports.HostRef = HostRef;
exports.NodeRef = NodeRef;
exports.LaneRef = LaneRef;
exports.DownlinkScope = DownlinkScope;
exports.Client = Client;
exports.CustomEvent = CustomEventConstructor;
exports.ResizeObserver = ResizeObserver;
exports.DurationFormat = DurationFormat;
exports.HMSDurationFormat = HMSDurationFormat;
exports.NumberFormat = NumberFormat;
exports.SINumberFormat = SINumberFormat;
exports.Angle = Angle;
exports.DegAngle = DegAngle;
exports.GradAngle = GradAngle;
exports.RadAngle = RadAngle;
exports.TurnAngle = TurnAngle;
exports.AngleParser = AngleParser;
exports.Length = Length;
exports.PxLength = PxLength;
exports.EmLength = EmLength;
exports.RemLength = RemLength;
exports.PctLength = PctLength;
exports.UnitlessLength = UnitlessLength;
exports.LengthParser = LengthParser;
exports.Color = Color;
exports.Rgb = Rgb;
exports.Hsl = Hsl;
exports.ColorParser = ColorParser;
exports.BoxShadow = BoxShadow;
exports.BoxShadowParser = BoxShadowParser;
exports.Ease = Ease;
exports.Transform = Transform;
exports.IdentityTransform = IdentityTransform;
exports.TranslateTransform = TranslateTransform;
exports.ScaleTransform = ScaleTransform;
exports.RotateTransform = RotateTransform;
exports.SkewTransform = SkewTransform;
exports.MatrixTransform = MatrixTransform;
exports.TransformList = TransformList;
exports.TransformParser = TransformParser;
exports.TransformListParser = TransformListParser;
exports.Interpolator = Interpolator;
exports.NumberInterpolator = NumberInterpolator;
exports.DateInterpolator = DateInterpolator;
exports.AngleInterpolator = AngleInterpolator;
exports.LengthInterpolator = LengthInterpolator;
exports.ColorInterpolator = ColorInterpolator;
exports.RgbInterpolator = RgbInterpolator;
exports.HslInterpolator = HslInterpolator;
exports.TransformInterpolator = TransformInterpolator;
exports.TranslateTransformInterpolator = TranslateTransformInterpolator;
exports.ScaleTransformInterpolator = ScaleTransformInterpolator;
exports.RotateTransformInterpolator = RotateTransformInterpolator;
exports.SkewTransformInterpolator = SkewTransformInterpolator;
exports.MatrixTransformInterpolator = MatrixTransformInterpolator;
exports.TransformListInterpolator = TransformListInterpolator;
exports.TransformPathInterpolator = TransformPathInterpolator;
exports.InterpolatorInterpolator = InterpolatorInterpolator;
exports.ScaleInterpolator = ScaleInterpolator;
exports.LinearScaleInterpolator = LinearScaleInterpolator;
exports.TimeScaleInterpolator = TimeScaleInterpolator;
exports.ReconInterpolator = ReconInterpolator;
exports.Scale = Scale;
exports.ContinuousScale = ContinuousScale;
exports.LinearScale = LinearScale;
exports.TimeScale = TimeScale;
exports.Transition = Transition;
exports.toAttributeString = toAttributeString;
exports.toStyleString = toStyleString;
exports.Animator = Animator;
exports.FrameAnimator = FrameAnimator;
exports.ChildAnimator = ChildAnimator;
exports.TweenAnimator = TweenAnimator;
exports.ChildFrameAnimator = ChildFrameAnimator;
exports.TweenFrameAnimator = TweenFrameAnimator;
exports.AttributeAnimator = AttributeAnimator;
exports.StyleAnimator = StyleAnimator;
exports.TextAnimator = TextAnimator;
exports.KinematicEvent = KinematicEvent;
exports.Kinematic = Kinematic;
exports.PointerKinematic = PointerKinematic;
exports.TouchKinematic = TouchKinematic;
exports.MouseKinematic = MouseKinematic;
exports.KinematicScaleEvent = KinematicScaleEvent;
exports.KinematicScale = KinematicScale;
exports.KinematicScaleHorizontal = KinematicScaleHorizontal;
exports.KinematicScaleVertical = KinematicScaleVertical;
exports.Path = Path;
exports.Arc = Arc;
exports.ModelParam = ModelParam;
exports.Model = Model;
exports.Directive = Directive;
exports.DirectiveForm = DirectiveForm;
exports.PolyDirectiveForm = PolyDirectiveForm;
exports.ArcView = ArcView;
exports.ShadowBoxView = ShadowBoxView;
exports.AttrsDirective = AttrsDirective;
exports.AttrsForm = AttrsForm;
exports.StyleDirective = StyleDirective;
exports.StyleForm = StyleForm;
exports.LetDirective = LetDirective;
exports.LetForm = LetForm;
exports.EachDirective = EachDirective;
exports.EachForm = EachForm;
exports.InjectDirective = InjectDirective;
exports.InjectForm = InjectForm;
exports.TickDirective = TickDirective;
exports.TickForm = TickForm;
exports.AppView = AppView;
exports.AppModel = AppModel;
exports.ElemView = ElemView;
exports.ElemModel = ElemModel;
exports.ElemForm = ElemForm;
exports.HtmlView = HtmlView;
exports.HtmlModel = HtmlModel;
exports.HtmlForm = HtmlForm;
exports.HtmlElementForm = HtmlElementForm;
exports.HtmlNativeElementForm = HtmlNativeElementForm;
exports.HtmlCustomElementForm = HtmlCustomElementForm;
exports.StylesheetView = StylesheetView;
exports.StylesheetModel = StylesheetModel;
exports.StylesheetForm = StylesheetForm;
exports.LayoutEditor = LayoutEditor;
exports.LayoutDataHandler = LayoutDataHandler;
exports.LayoutRenderView = LayoutRenderView;
exports.NodeView = NodeView;
exports.NodeModel = NodeModel;
exports.NodeForm = NodeForm;
exports.PopoverView = PopoverView;
exports.PopoverModel = PopoverModel;
exports.Popover = Popover;
exports.SvgView = SvgView;
exports.SvgModel = SvgModel;
exports.SvgForm = SvgForm;
exports.TextView = TextView;
exports.TextModel = TextModel;
exports.TextForm = TextForm;
exports.DateTimeLocale = DateTimeLocale;
exports.DateTime = DateTime;
exports.DateTimeFormat = DateTimeFormat;
exports.TimeInterval = TimeInterval;
exports.UnitTimeInterval = UnitTimeInterval;
exports.TimeZone = TimeZone;
exports.UiValue = UiValue;
exports.UiFunc = UiFunc;
exports.UiEnvelope = UiEnvelope;
exports.UiTreeEnvelope = UiTreeEnvelope;
exports.UiViewEnvelope = UiViewEnvelope;
exports.UiAppendEnvelope = UiAppendEnvelope;
exports.UiPrependEnvelope = UiPrependEnvelope;
exports.UiInsertEnvelope = UiInsertEnvelope;
exports.UiRemoveEnvelope = UiRemoveEnvelope;
exports.UiStateEnvelope = UiStateEnvelope;
exports.UiModelEnvelope = UiModelEnvelope;
exports.UiForm = UiForm;
exports.PolyUiForm = PolyUiForm;
exports.View = View;
exports.ViewController = ViewController;
exports.ViewForm = ViewForm;
exports.ViewPort = ViewPort;
exports.AuthenticatedView = AuthenticatedView;
exports.AuthenticatedModel = AuthenticatedModel;
exports.AuthenticatedForm = AuthenticatedForm;
exports.AccountPopoverView = AccountPopoverView;
exports.AccountPopoverModel = AccountPopoverModel;
exports.AccountPopoverForm = AccountPopoverForm;
exports.AccountButtonView = AccountButtonView;
exports.AccountButtonModel = AccountButtonModel;
exports.AccountButtonForm = AccountButtonForm;
exports.BoardView = BoardView;
exports.BoardModel = BoardModel;
exports.BoardForm = BoardForm;
exports.Chart = Chart;
exports.ChartView = ChartView;
exports.ChartModel = ChartModel;
exports.ChartForm = ChartForm;
exports.Axis = Axis;
exports.TopAxis = TopAxis;
exports.RightAxis = RightAxis;
exports.BottomAxis = BottomAxis;
exports.LeftAxis = LeftAxis;
exports.AxisView = AxisView;
exports.AxisModel = AxisModel;
exports.AxisForm = AxisForm;
exports.TickGenerator = TickGenerator;
exports.NumberTickGenerator = NumberTickGenerator;
exports.TimeTickGenerator = TimeTickGenerator;
exports.PlotPointView = PlotPointView;
exports.PlotPointModel = PlotPointModel;
exports.PlotPointForm = PlotPointForm;
exports.Plot = Plot;
exports.PlotView = PlotView;
exports.PlotModel = PlotModel;
exports.PlotForm = PlotForm;
exports.AreaPlot = AreaPlot;
exports.AreaPlotView = AreaPlotView;
exports.AreaPlotModel = AreaPlotModel;
exports.AreaPlotForm = AreaPlotForm;
exports.CirclePlot = CirclePlot;
exports.CirclePlotView = CirclePlotView;
exports.CirclePlotModel = CirclePlotModel;
exports.CirclePlotForm = CirclePlotForm;
exports.LinePlot = LinePlot;
exports.LinePlotView = LinePlotView;
exports.LinePlotModel = LinePlotModel;
exports.LinePlotForm = LinePlotForm;
exports.Gauge = Gauge;
exports.GaugeView = GaugeView;
exports.GaugeModel = GaugeModel;
exports.GaugeForm = GaugeForm;
exports.Kpi = Kpi;
exports.KpiView = KpiView;
exports.KpiModel = KpiModel;
exports.KpiForm = KpiForm;
exports.MapView = MapView;
exports.MapModel = MapModel;
exports.MapForm = MapForm;
exports.LayerView = LayerView;
exports.LayerModel = LayerModel;
exports.LayerForm = LayerForm;
exports.GeometryView = GeometryView;
exports.GeometryModel = GeometryModel;
exports.GeometryForm = GeometryForm;
exports.Mapbox = Mapbox;
exports.MapboxMapView = MapboxMapView;
exports.MapboxMapModel = MapboxMapModel;
exports.MapboxMapForm = MapboxMapForm;
exports.MapboxLayerView = MapboxLayerView;
exports.MapboxLayerModel = MapboxLayerModel;
exports.MapboxLayerForm = MapboxLayerForm;
exports.MapboxGeometryView = MapboxGeometryView;
exports.MapboxGeometryModel = MapboxGeometryModel;
exports.MapboxGeometryForm = MapboxGeometryForm;
exports.MapboxPointView = MapboxPointView;
exports.MapboxPointModel = MapboxPointModel;
exports.MapboxPointForm = MapboxPointForm;
exports.MapboxPolygonView = MapboxPolygonView;
exports.MapboxPolygonModel = MapboxPolygonModel;
exports.MapboxPolygonForm = MapboxPolygonForm;
exports.MapboxPopoverView = MapboxPopoverView;
exports.MapboxPopoverModel = MapboxPopoverModel;
exports.MapboxPopoverForm = MapboxPopoverForm;
exports.Wedge = Wedge;
exports.WedgeView = WedgeView;
exports.WedgeModel = WedgeModel;
exports.WedgeForm = WedgeForm;
exports.Pie = Pie;
exports.PieView = PieView;
exports.PieModel = PieModel;
exports.PieForm = PieForm;
exports.PlacardView = PlacardView;
exports.PlacardModel = PlacardModel;
exports.PlacardForm = PlacardForm;
exports.PieceView = PieceView;
exports.PieceModel = PieceModel;
exports.PieceForm = PieceForm;
exports.PieceCardView = PieceCardView;
exports.PieceCardModel = PieceCardModel;
exports.PieceCardForm = PieceCardForm;
exports.BlockView = BlockView;
exports.BlockModel = BlockModel;
exports.BlockForm = BlockForm;
exports.QuiltView = QuiltView;
exports.QuiltModel = QuiltModel;
exports.QuiltForm = QuiltForm;
exports.TileView = TileView;
exports.TileModel = TileModel;
exports.TileForm = TileForm;
exports.ToolbarView = ToolbarView;
exports.ToolbarModel = ToolbarModel;
exports.ToolbarForm = ToolbarForm;
exports.TotemView = TotemView;
exports.TotemModel = TotemModel;
exports.TotemForm = TotemForm;

Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=swim-app.js.map